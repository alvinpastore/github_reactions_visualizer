{"568408466": {"author_username": "brackendawson", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37333, "title": "Docs unclear what testing.Cleanup does when called in a subtest.", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14rc1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/root/.cache/go-build\"\r\nGOENV=\"/root/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build584459223=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nRan t.Cleanup in a subtest:\r\n<pre>\r\npackage cleanup\r\n\r\nimport \"testing\"\r\n\r\nfunc TestCleanup(t *testing.T) {\r\n\tt.Log(\"Start of test\")\r\n\tt.Cleanup(func() {\r\n\t\tt.Log(\"Test Cleanup\")\r\n\t})\r\n\tfor _, test := range []string{\"one\", \"two\"} {\r\n\t\tt.Run(\"test\", func(t *testing.T) {\r\n\t\t\tt.Log(\"Start of subtest\", test)\r\n\t\t\tt.Cleanup(func() {\r\n\t\t\t\tname := test\r\n\t\t\t\tt.Log(\"Subtest\", name, \"cleanup\")\r\n\t\t\t})\r\n\t\t\tt.Log(\"End of subtest\", test)\r\n\t\t})\r\n\t}\r\n\tt.Log(\"End of test\")\r\n}\r\n</pre>\r\n\r\n\r\n### What did you expect to see?\r\nI didn't know, from the docs I knew that a test function's cleanups run after the test and all subtests finish, but I don't know what happens when you register a cleanup function in a subtest.\r\n\r\nThe docs say: \"Cleanup registers a function to be called when the test and all its subtests complete. Cleanup functions will be called in last added, first called order.\"\r\n\r\n\r\n### What did you see instead?\r\nI learned that cleanup functions registered in subtests get run at the end of *that* subtest, but I don't know if this behaviour is intended or stable?\r\n\r\n<pre>\r\n=== RUN   TestCleanup\r\n    TestCleanup: cleanup_test.go:6: Start of test\r\n=== RUN   TestCleanup/test\r\n    TestCleanup/test: cleanup_test.go:12: Start of subtest one\r\n    TestCleanup/test: cleanup_test.go:17: End of subtest one\r\n    TestCleanup/test: cleanup_test.go:15: Subtest one cleanup\r\n=== RUN   TestCleanup/test#01\r\n    TestCleanup/test#01: cleanup_test.go:12: Start of subtest two\r\n    TestCleanup/test#01: cleanup_test.go:17: End of subtest two\r\n    TestCleanup/test#01: cleanup_test.go:15: Subtest two cleanup\r\n    TestCleanup: cleanup_test.go:20: End of test\r\n    TestCleanup: cleanup_test.go:8: Test Cleanup\r\n--- PASS: TestCleanup (0.00s)\r\n    --- PASS: TestCleanup/test (0.00s)\r\n    --- PASS: TestCleanup/test#01 (0.00s)\r\nPASS\r\nok      _/cleanup       0.004s\r\n</pre>\r\n\r\nCould the docs be expanded to reflect the intention?", "labels": ["Documentation"], "number_of_comments": 0, "created_at": "2020-02-20 16:10:11", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568394016": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37332, "title": "time: TestTicker failures on netbsd-amd64-8_0 builder", "body": "```\r\n--- FAIL: TestTicker (1.26s)\r\n    tick_test.go:70: saw 5 errors\r\n    tick_test.go:32: 10 20ms ticks took 250.987124ms, expected [160ms,240ms]\r\n    tick_test.go:32: 10 20ms ticks took 251.555254ms, expected [160ms,240ms]\r\n    tick_test.go:32: 10 20ms ticks took 251.282407ms, expected [160ms,240ms]\r\n    tick_test.go:32: 10 20ms ticks took 251.501105ms, expected [160ms,240ms]\r\n    tick_test.go:32: 10 20ms ticks took 251.463514ms, expected [160ms,240ms]\r\nFAIL\r\nFAIL\ttime\t4.698s\r\n```\r\n\r\nWe may just need to widen the accepted intervals a bit on this builder.\r\n\r\nSee also #35692.\r\n\r\nCC @ianlancetaylor\r\n\r\n[2020-02-15T16:40:12-6917529/netbsd-amd64-8_0](https://build.golang.org/log/2bf67495ee117566549d30f808ceb464f18557d0)\r\n[2020-02-05T22:19:16-e5b9c10/netbsd-amd64-8_0](https://build.golang.org/log/4c7174c8f497022eab4ca181e671198db8662bb6)", "labels": ["Builders", "NeedsInvestigation", "OS-NetBSD"], "number_of_comments": 0, "created_at": "2020-02-20 15:48:10", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568392304": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37331, "title": "runtime: TestGcSys is still flaky", "body": "```\r\n--- FAIL: TestGcSys (0.03s)\r\n    gc_test.go:27: expected \"OK\\n\", but got \"using too much memory: 70486024 bytes\\n\"\r\nFAIL\r\nFAIL\truntime\t50.446s\r\n```\r\n\r\nSee previously #28574, #27636, #27156, #23343.\r\n\r\nCC @mknyszek @aclements\r\n\r\n[2020-02-15T16:40:12-6917529/freebsd-amd64-race](https://build.golang.org/log/1332da8c3cb0222c5e925b116d11b5d6de1bfb01)\r\n[2020-02-05T18:27:48-702226f/freebsd-amd64-race](https://build.golang.org/log/60634ae049700ca97d5a89b191778ba7e5e3569f)\r\n[2020-01-31T15:04:07-f2a4ab3/freebsd-amd64-race](https://build.golang.org/log/97ddc13cc1f3420a5d29c0c577aaed27f2837dfa)\r\n[2020-01-07T19:53:19-7d98da8/darwin-amd64-10_15](https://build.golang.org/log/ccd26fa871a0a0433158a4b6937784055a7be22b)\r\n[2019-12-31T12:11:24-bbd25d2/solaris-amd64-oraclerel](https://build.golang.org/log/c7ecea0ba94b3b906f9d47ccf764b74d33bafdad)\r\n[2019-12-11T00:01:17-9c8c27a/solaris-amd64-oraclerel](https://build.golang.org/log/f3aec9603f99d24cfdafe4a4ef86b2de1d32fc9f)\r\n[2019-11-04T15:18:34-d3660e8/plan9-386-0intro](https://build.golang.org/log/1dcfa79fd9ceb919885427b151fbc0f935643e47)\r\n[2019-09-12T14:08:16-3d522b1/solaris-amd64-smartosbuildlet](https://build.golang.org/log/ef2b3b3c556f09113bccd1ea2eb472d8c8217058)", "labels": ["NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-02-20 15:45:36", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568390207": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37330, "title": "net: TestDialCancel failure on linux-arm with \"network is unreachable\"", "body": "In the fix for #15191, we skipped the test in case of a `connection refused` error.\r\nIt looks like we may need to widen that to `network is unreachable` as well.\r\n\r\n```\r\n--- FAIL: TestDialCancel (0.00s)\r\n    dial_test.go:820: dial error after 0 ticks (5 before cancel sent): dial tcp 198.18.0.254:1234: connect: network is unreachable\r\nFAIL\r\nFAIL\tnet\t27.044s\r\n```\r\n\r\nCC @ianlancetaylor @bradfitz \r\n\r\n[2020-02-19T20:40:29-2200b4f/linux-arm](https://build.golang.org/log/5523485f69960aa5dbec0ff4339f12cdd3b7fac4)\r\n[2020-01-23T21:01:12-ace25f8/linux-arm](https://build.golang.org/log/f4257efbd7a18e595d454c249d7a7894796b1cec)\r\n[2020-01-09T17:52:05-cec535b/linux-arm](https://build.golang.org/log/1c214d88ce74268ce8536f43b34342dafc3d1a6a)\r\n[2020-01-06T15:47:02-72f92de/linux-arm](https://build.golang.org/log/4b30aec77df3712ced1ab66ff6dfe8ec785d5d58)\r\n[2020-01-06T02:46:02-c6e8426/linux-arm](https://build.golang.org/log/aa738d6e0152d7541ffa81bcc862e9690af70174)\r\n[2019-11-18T18:14:37-f9dd99c/linux-arm](https://build.golang.org/log/0f5f4da21697db5280324ade62f3aa71155b95d3)\r\n[2019-10-30T08:17:29-f4e32ae/linux-arm](https://build.golang.org/log/019db9d64edc807077516ba20399da59bd7a949e)\r\n[2019-10-24T08:47:14-722b0e3/linux-arm](https://build.golang.org/log/7f8f96b8caaa1ad5f1f3b75f9cbc97cfde3b3c9b)\r\n[2019-10-23T18:41:38-7833302/linux-arm](https://build.golang.org/log/0a75fed0ef5bd75781360367b291954e19023408)\r\n[2019-10-11T17:03:37-df38069/linux-arm](https://build.golang.org/log/648f8fd836a73fc2f6f428772c21b9f5cda5ff31)\r\n[2019-09-25T04:18:18-7fc2625/linux-arm](https://build.golang.org/log/29ecd5fb9d6853a2370163d0d81c265a86343e70)\r\n[2019-09-06T20:05:29-5e43856/linux-arm](https://build.golang.org/log/424f85c190683239a5316a7c8915d39fb1dfcb03)\r\n[2019-09-01T02:31:50-d15dfdc/linux-arm](https://build.golang.org/log/806bf66f3ac7ce31e8a6f521e619d48485c65b97)\r\n[2019-08-02T17:51:34-2d1a1e0/linux-arm](https://build.golang.org/log/ed29640b1bf14bb32bc5c0f6be599c4da0c35ad9)\r\n[2019-06-19T07:09:13-18107ed/linux-arm](https://build.golang.org/log/7460cac43be8414f1f3766051dcc583aa7cbfb8f)\r\n[2019-06-14T19:37:52-f18aeb3/linux-arm](https://build.golang.org/log/962376bdb46f230de6dcae325f88b618745c3e7c)\r\n[2019-05-16T03:25:01-dccd5da/linux-arm](https://build.golang.org/log/acf3bbe6a1634db0fd3d45b1bfd7bef643b28a94)\r\n[2019-05-02T20:30:31-0a338f7/linux-arm](https://build.golang.org/log/d3a3d225d1bb468f5dddf76188b472d7036e3a2e)\r\n[2019-04-30T20:26:36-85387aa/linux-arm](https://build.golang.org/log/68ce4257c9e3a9bf6e2e01e41ec0e8e8897a5f9e)\r\n[2019-04-30T17:45:16-1fd1408/linux-arm](https://build.golang.org/log/f48f27568ebadd29cddb93e5d0f88e5ed91b0851)\r\n[2019-04-27T17:15:55-17a7f21/linux-arm](https://build.golang.org/log/1f0d8614f07980f3cca697a6de720f3b05266d9e)\r\n", "labels": ["NeedsInvestigation", "Testing"], "number_of_comments": 0, "created_at": "2020-02-20 15:42:29", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568387563": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37329, "title": "os/signal: TestTerminalSignal failure on Darwin builder", "body": "[2020-02-19T20:37:54-b15fd6b/darwin-amd64-10_11](https://build.golang.org/log/870ce12198c9349bca2797ce9fa207a1a4a4dc08)\r\n[2019-10-31T21:47:08-ef03c44/darwin-amd64-race](https://build.golang.org/log/f9408be0e262111723c9efddff6d8e296d27494b)\r\n\r\n```\r\n--- FAIL: TestTerminalSignal (10.01s)\r\n    signal_cgo_test.go:145: \"PS1='prompt> '\\r\\n\"\r\n    signal_cgo_test.go:145: \"bash-3.2$ PS1='prompt> '\\r\\n\"\r\n    signal_cgo_test.go:145: \"prompt> GO_TEST_TERMINAL_SIGNALS=1 /var/folders/dx/k53rs1s93538b4x20g46cj_w00\\r<GNALS=1 /var/folders/dx/k53rs1s93538b4x20g46cj_w000                         \\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b0gn/T/workdir-host-darwin\\r<3rs1s93538b4x20g46cj_w0000gn/T/workdir-host-darwin-                         \\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b10_11/tmp/go-build2962210\\r<gn/T/workdir-host-darwin-10_11/tmp/go-build29622109                         \\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b3/b143/signal.test -test.\\r<0_11/tmp/go-build296221093/b143/signal.test -test.r                         \\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\bun=TestTerminalSignal\\r\\n\"\r\n    signal_cgo_test.go:145: \"test program entering read\\r\\n\"\r\n    signal_cgo_test.go:145: \"^Z\\r\\n\"\r\n    signal_cgo_test.go:145: \"[1]+  Stopped                 GO_TEST_TERMINAL_SIGNALS=1 /var/folders/dx/k53rs1s93538b4x20g46cj_w0000gn/T/workdir-host-darwin-10_11/tmp/go-build296221093/b143/signal.test -test.run=TestTerminalSignal\\r\\n\"\r\n    signal_cgo_test.go:145: \"prompt> fg\\r\\n\"\r\n    signal_cgo_test.go:145: \"GO_TEST_TERMINAL_SIGNALS=1 /var/folders/dx/k53rs1s93538b4x20g46cj_w0000gn/T/workdir-host-darwin-10_11/tmp/go-build296221093/b143/signal.test -test.run=TestTerminalSignal\\r\\n\"\r\n    signal_cgo_test.go:145: \"\\r\\n\"\r\n    signal_cgo_test.go:145: \"[1]+  Stopped                 GO_TEST_TERMINAL_SIGNALS=1 /var/folders/dx/k53rs1s93538b4x20g46cj_w0000gn/T/workdir-host-darwin-10_11/tmp/go-build296221093/b143/signal.test -test.run=TestTerminalSignal\\r\\n\"\r\n    signal_cgo_test.go:145: \"prompt> \\r\\n\"\r\n    signal_cgo_test.go:145: \"prompt> exit $?\\r\\n\"\r\n    signal_cgo_test.go:145: \"exit\\r\\n\"\r\n    signal_cgo_test.go:145: \"There are stopped jobs.\\r\\n\"\r\n    signal_cgo_test.go:128: \"prompt> \"\r\n    signal_cgo_test.go:237: subprogram failed: signal: killed\r\nFAIL\r\nFAIL\tos/signal\t15.203s\r\n```\r\n\r\nCC @ianlancetaylor @cherrymui @bradfitz ", "labels": ["NeedsInvestigation", "OS-Darwin"], "number_of_comments": 0, "created_at": "2020-02-20 15:38:20", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568346623": {"author_username": "vovapi", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37328, "title": "hash/maphash: don't discard data on random seed init", "body": "Hash initializes seed on the first usage of seed or state with initSeed.\r\ninitSeed uses SetSeed which discards accumulated data.\r\nThis causes hash to return different sums for the same data in the first use\r\nand after reset.\r\nThis CL fixes this issue by separating the seed set from data discard.\r\n\r\nFixes #37315 ", "labels": ["cla: yes"], "number_of_comments": 1, "created_at": "2020-02-20 14:40:10", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568332005": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37327, "title": "net/http: TestTLSHandshakeTimeout failure on solaris-amd64-oraclerel builder", "body": "```\r\n--- FAIL: TestTLSHandshakeTimeout (10.17s)\r\n    serve_test.go:3636: Timeout expired after 10s\r\nFAIL\r\nFAIL\tnet/http\t15.953s\r\n```\r\n\r\n[2020-02-19T22:59:15-c4c73ce/solaris-amd64-oraclerel](https://build.golang.org/log/03cb6c0c6bdd9b705a8ef1ea273e904699021bb1)\r\n\r\nThis looks to me like a too-short hard-coded timeout.\r\n\r\nCC @bradfitz ", "labels": ["NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-02-20 14:17:37", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568327141": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37325, "title": "proxy.golang.org: timeouts when dialing connections from builders", "body": "Looks like there may have been a brief `proxy.golang.org` outage on 2020-02-19.\r\n\r\n[2020-02-19T21:00:15-1331113/linux-386-longtest](https://build.golang.org/log/15605a1ade708f6800d7f5ece5047a807426cb35)\r\n[2020-02-19T20:57:49-3c630bb/windows-amd64-longtest](https://build.golang.org/log/facc89c2e78bc7f7008b7ae228335bd501bac3e6)\r\n\r\n@heschik, @hyangah: did our internal monitoring also flag this event? Is the cause known?", "labels": ["NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-02-20 14:09:48", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568322717": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37323, "title": "syscall: TestDirent failures on linux-arm builder", "body": "[2020-02-19T20:58:16-f08734d/linux-arm](https://build.golang.org/log/0f3f3ccc7dc62ea2c3ac24d9912cc2d8357586d9)\r\n[2020-02-04T23:15:01-e3f2e9a/linux-arm](https://build.golang.org/log/1867e688d93a48dcd131fe5f4e89e38ea7617983)\r\n\r\n```\r\n--- FAIL: TestDirent (0.00s)\r\n    dirent_test.go:35: tmpdir: /workdir/tmp/dirent-test550674696\r\n    dirent_test.go:65: names: [\"777777777777777777\" \"8888888888888888888\" \"99999999999999999999\"]\r\n    dirent_test.go:68: got 3 names; expected 10\r\nFAIL\r\nFAIL\tsyscall\t0.353s\r\n```\r\n\r\nCC @randall77 @cherrymui @ianlancetaylor ", "labels": ["NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-02-20 14:02:42", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568311508": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37322, "title": "net/http: TestServerConnState is flaky on darwin-arm64-corellium builder", "body": "Issue #32329 was addressed in December. Since that time, `TestServerConnState` has continued to flake, but only on the `darwin-arm64-corellium` builder.\r\n\r\nI'm not sure whether this is a bug in the builder, or a general bug that this builder just happens to trigger (for example, due to unusual performance characteristics).\r\n\r\n[2020-02-19T22:04:41-3457359/darwin-arm64-corellium](https://build.golang.org/log/c50a02b045224daa4a954f46664e143778c3aa8d)\r\n[2020-02-07T16:49:14-1a37095/darwin-arm64-corellium](https://build.golang.org/log/e88cc7e5c7d7598c662cb624d48874b4df15a66a)\r\n[2020-01-31T05:52:03-862a57d/darwin-arm64-corellium](https://build.golang.org/log/9d6e38350271ec4766f66a5613166e862d6650c8)\r\n[2020-01-29T14:58:15-1319bb9/darwin-arm64-corellium](https://build.golang.org/log/9bec9796384eeb7dcdcc6b57f4a49718873f2d82)\r\n\r\n```\r\n--- FAIL: TestServerConnState (5.06s)\r\n    serve_test.go:4227: Timed out waiting for connection to change state.\r\n    serve_test.go:4227: Request(s) produced unexpected state sequence.\r\n        Got:  [new]\r\n        Want: [new closed]\r\n    serve_test.go:4172: unexpected conn in state closed\r\nFAIL\r\nFAIL\tnet/http\t10.571s\r\n```", "labels": ["Builders", "NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-20 13:45:31", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568307009": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37321, "title": "x/net/http: TestServer_RejectsLargeFrames failure with \"Error while expecting a GOAWAY frame: EOF\" on plan9-arm builder", "body": "https://build.golang.org/log/e0d21081e2f05f65ea83f6fb8c01970f152d4736\r\n\r\n```\r\n--- FAIL: TestServer_RejectsLargeFrames (0.16s)\r\n    server_test.go:548: Error while expecting a GOAWAY frame: EOF\r\n    server_test.go:238: Framer read log:\r\n        2020-02-20 09:20:11.857323902 Framer 0x12570000: read SETTINGS len=24, settings: MAX_FRAME_SIZE=1048576, MAX_CONCURRENT_STREAMS=250, MAX_HEADER_LIST_SIZE=1048896, INITIAL_WINDOW_SIZE=1048576\r\n        2020-02-20 09:20:11.861012807 Framer 0x12570000: read SETTINGS flags=ACK len=0\r\n        2020-02-20 09:20:11.861144803 Framer 0x12570000: read WINDOW_UPDATE len=4 (conn) incr=983041\r\n    server_test.go:244: Framer write log:\r\n        2020-02-20 09:20:11.852591152 Framer 0x12570000: wrote SETTINGS len=0\r\n        2020-02-20 09:20:11.8574199 Framer 0x12570000: wrote SETTINGS flags=ACK len=0\r\n        2020-02-20 09:20:11.891919625 Framer 0x12570000: wrote UNKNOWN_FRAME_TYPE_255 len=1048577\r\nhttp2.test 1563: warning: process exceeds 100 file descriptors\r\nFAIL\r\nFAIL\tgolang.org/x/net/http2\t86.544s\r\n```\r\n\r\nPossibly related to #13434.\r\n\r\nI couldn't easily check for other occurrences due to #35515.", "labels": ["NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-02-20 13:41:07", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568305110": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37320, "title": "x/net/route: TestFetchAndParseRIB failure on freebsd-386-12_0 builder", "body": "https://build.golang.org/log/f6a2d4db3516c80bf97648a85c23cd92789725e5\r\n\r\n```\r\n--- FAIL: TestFetchAndParseRIB (0.00s)\r\n    message_test.go:34: 1 got (inet6 0000:0000:0000:0000:0000:0000:0000:0000 0) (inet4 28.28.0.0) (inet4 0.0.0.0) (inet4 0.0.0.0) (inet4 0.0.0.0); want inet6\r\n    message_test.go:38: 3 ifp (type=6 mtu=1460) (link 1 vtnet0 42:01:0a:f0:00:18)\r\n    message_test.go:38: 3 netmask|ifa|brd (inet4 255.255.255.255) (inet4 10.240.0.24) (inet4 10.240.0.24)\r\n    message_test.go:38: 3 ifp (type=24 mtu=16384) (link 2 lo0 <nil>)\r\n    message_test.go:38: 3 netmask|ifa|brd (inet6 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 0) (inet6 0000:0000:0000:0000:0000:0000:0000:0000 0) (inet6 0000:0000:0000:0000:0000:0000:0000:0001 0)\r\n    message_test.go:38: 3 netmask|ifa|brd (inet6 ffff:ffff:ffff:ffff:0000:0000:0000:0000 0) (inet6 0000:0000:0000:0000:0000:0000:0000:0000 0) (inet6 fe80:0000:0000:0000:0000:0000:0000:0001 2)\r\n    message_test.go:38: 3 netmask|ifa|brd (inet4 255.0.0.0) (inet4 127.0.0.1) (inet4 127.0.0.1)\r\n    message_test.go:38: 3 ifp (type=6 mtu=1460) (link 1 vtnet0 42:01:0a:f0:00:18)\r\n    message_test.go:38: 3 netmask|ifa|brd (inet4 255.255.255.255) (inet4 10.240.0.24) (inet4 10.240.0.24)\r\n    message_test.go:38: 3 ifp (type=24 mtu=16384) (link 2 lo0 <nil>)\r\n    message_test.go:38: 3 netmask|ifa|brd (inet4 255.0.0.0) (inet4 127.0.0.1) (inet4 127.0.0.1)\r\n    message_test.go:38: 3 ifp (type=6 mtu=1460) (link 1 vtnet0 42:01:0a:f0:00:18)\r\n    message_test.go:38: 3 ifp (type=24 mtu=16384) (link 2 lo0 <nil>)\r\n    message_test.go:38: 3 netmask|ifa|brd (inet6 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 0) (inet6 0000:0000:0000:0000:0000:0000:0000:0000 0) (inet6 0000:0000:0000:0000:0000:0000:0000:0001 0)\r\n    message_test.go:38: 3 netmask|ifa|brd (inet6 ffff:ffff:ffff:ffff:0000:0000:0000:0000 0) (inet6 0000:0000:0000:0000:0000:0000:0000:0000 0) (inet6 fe80:0000:0000:0000:0000:0000:0000:0001 2)\r\nFAIL\r\nFAIL\tgolang.org/x/net/route\t0.012s\r\n```\r\n\r\nI couldn't easily check for other occurrences due to #35515.", "labels": ["NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-02-20 13:37:55", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568303408": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37319, "title": "x/net/ipv6: TestPacketConnReadWriteMulticastUDP failure with \"sengmsg: no buffer space available\" on Darwin builders", "body": "https://build.golang.org/log/68089cd321b1639f48b00bd770b720c7657b6b4b\r\nhttps://build.golang.org/log/2a7e7be249a02c8f432a1ee5a987ddccee1fe668\r\n\r\n```\r\n--- FAIL: TestPacketConnReadWriteMulticastUDP (0.00s)\r\n    multicast_test.go:108: write udp [::]:57353->[ff30::8000:1]:57353: sendmsg: no buffer space available\r\nFAIL\r\nFAIL\tgolang.org/x/net/ipv6\t0.166s\r\n```\r\n\r\nI couldn't check for older occurrences due to #35515.", "labels": ["NeedsInvestigation", "OS-Darwin"], "number_of_comments": 0, "created_at": "2020-02-20 13:35:01", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568300324": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37318, "title": "x/tools/internal/lsp/regtest: TestGoToStdlibDefinition/forwarded failure on darwin-amd64-10_15 builder", "body": "https://build.golang.org/log/fe27a791913be11bc439f9612e1ba92f52673e54\r\n\r\n```\r\n2020/02/20 00:34:56 initial workspace load failed: go [list -f {{context.GOARCH}} {{context.Compiler}} -modfile=/var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/tmp/go.042197626.mod -- unsafe]: exit status 1: go: open /var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/tmp/go.042197626.mod: no such file or directory\r\n\r\n2020/02/20 00:35:01 diagnose: could not generate diagnostics for go.mod file: err: chdir /var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/tmp/goplstest-ws-lsprpc-132098964: no such file or directory: stderr: \r\n2020/02/20 00:35:04 diagnose: could not generate diagnostics for go.mod file: err: exit status 1: stderr: go: cannot find main module, but -modfile was set.\r\n\t-modfile cannot be used to set the module root directory.\r\n\r\n2020/02/20 00:35:07 diagnose: could not generate diagnostics for go.mod file: err: exit status 1: stderr: go: open /var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/tmp/go.115179283.mod: no such file or directory\r\n\r\n2020/02/20 00:35:08 serving stream: failed reading header line \"EOF\"\r\n2020/02/20 00:35:37 : context deadline exceeded\r\n--- FAIL: TestGoToStdlibDefinition (37.17s)\r\n    --- FAIL: TestGoToStdlibDefinition/forwarded (30.41s)\r\n        definition_test.go:69: Definition: context deadline exceeded\r\npanic: Shutdown: context deadline exceeded [recovered]\r\n\tpanic: Shutdown: context deadline exceeded\r\n\r\ngoroutine 11620 [running]:\r\ntesting.tRunner.func1.1(0x1698620, 0xc00c71a0b0)\r\n\t/var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/go/src/testing/testing.go:941 +0x3d0\r\ntesting.tRunner.func1(0xc00a536360)\r\n\t/var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/go/src/testing/testing.go:944 +0x3f9\r\npanic(0x1698620, 0xc00c71a0b0)\r\n\t/var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/go/src/runtime/panic.go:967 +0x15d\r\ngolang.org/x/tools/internal/lsp/regtest.(*Runner).RunInMode.func1.1(0xc00a1fb140, 0x189f140, 0xc00a1fad80)\r\n\t/private/var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/gopath/src/golang.org/x/tools/internal/lsp/regtest/env.go:178 +0x70\r\nruntime.Goexit()\r\n\t/var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/go/src/runtime/panic.go:615 +0x192\r\ntesting.(*common).FailNow(0xc00a536360)\r\n\t/var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/go/src/testing/testing.go:657 +0x39\r\ntesting.(*common).Fatal(0xc00a536360, 0xc000a3bd98, 0x1, 0x1)\r\n\t/var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/go/src/testing/testing.go:718 +0x78\r\ngolang.org/x/tools/internal/lsp/regtest.(*Env).GoToDefinition(0xc00a1fb140, 0x17774e5, 0x7, 0x8, 0x13, 0x100ea48, 0x10, 0x16c56a0, 0x173f301)\r\n\t/private/var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/gopath/src/golang.org/x/tools/internal/lsp/regtest/env.go:310 +0x130\r\ngolang.org/x/tools/internal/lsp/regtest.TestGoToStdlibDefinition.func1(0x189f140, 0xc00a1fad80, 0xc00a536360, 0xc00a1fb140)\r\n\t/private/var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/gopath/src/golang.org/x/tools/internal/lsp/regtest/definition_test.go:69 +0x8d\r\ngolang.org/x/tools/internal/lsp/regtest.(*Runner).RunInMode.func1(0xc00a536360)\r\n\t/private/var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/gopath/src/golang.org/x/tools/internal/lsp/regtest/env.go:181 +0x2af\r\ntesting.tRunner(0xc00a536360, 0xc00a508500)\r\n\t/var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/go/src/testing/testing.go:992 +0xdc\r\ncreated by testing.(*T).Run\r\n\t/var/folders/kh/5zzynz152r94t18yzstnrwx80000gn/T/workdir-host-darwin-10_15/go/src/testing/testing.go:1043 +0x357\r\nFAIL\tgolang.org/x/tools/internal/lsp/regtest\t44.585s\r\n```\r\n\r\nCC @stamblerre @jayconrod @matloob ", "labels": ["NeedsInvestigation", "Tools", "gopls"], "number_of_comments": 4, "created_at": "2020-02-20 13:30:03", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568261885": {"author_username": "hyperorchid", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37317, "title": "macos catalina compile err", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.8 darwin/amd64\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/Users/hyperorchid/gowork/bin\"\r\nGOCACHE=\"/Users/hyperorchid/Library/Caches/go-build\"\r\nGOENV=\"/Users/hyperorchid/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/hyperorchid/gowork\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/Cellar/go/1.13.8/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.13.8/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/pd/zfbdf6sj5w53r8lwf723pfgw0000gn/T/go-build898659371=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\nhyperorchid@192 go-lib % \r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n gomobile bind -v -o bin/iosLib.framework -target=ios github.com/hyperorchid/go-lib/ios\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\nget framework file \r\n\r\n\r\n### What did you see instead?\r\n# github.com/elastic/gosigar\r\n/Users/hyperorchid/gowork/src/github.com/elastic/gosigar/sigar_darwin.go:12:10: fatal error: 'libproc.h' file not found\r\n#include <libproc.h>\r\n         ^~~~~~~~~~~\r\n1 error generated.\r\ngithub.com/ethereum/go-ethereum/rpc\r\ngomobile: darwin-arm: go build -tags ios -v -buildmode=c-archive -o /var/folders/pd/zfbdf6sj5w53r8lwf723pfgw0000gn/T/gomobile-work-353082488/iosLib-arm.a ./gobind failed: exit status 2\r\n\r\nmake: *** [i] Error 1\r\n", "labels": [], "number_of_comments": 1, "created_at": "2020-02-20 12:20:31", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568237702": {"author_username": "mundaym", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37316, "title": "cmd/compile: consider dropping Greater* and Geq* generic ops", "body": "We could, I think, fairly easily drop the following generic ops since they are trivial to implement by swapping the operands to Less* and Leq* ops (e.g. `(Greater64 x y)` is the same operation as `(Less64 y x)`):\r\n\r\n```\r\nGreater64\r\nGreater32\r\nGreater16\r\nGreater8\r\nGreater64U\r\nGreater32U\r\nGreater16U\r\nGreater8U\r\nGeq64\r\nGeq32\r\nGeq16\r\nGeq8\r\nGeq64U\r\nGeq32U\r\nGeq16U\r\nGeq8U\r\n```\r\n\r\nI think this might help make [CL 165998](https://golang.org/cl/165998) a fair bit simpler. Of course we could also drop the `Less` ops instead, but `Greater` is more characters :).\r\n\r\nBefore I start looking into this any further, does anyone have any initial concerns or objections that come to mind?\r\n\r\n(Note that we can probably also do the same thing with the floating point comparisons - but those aren't necessary for the CL above).", "labels": [], "number_of_comments": 4, "created_at": "2020-02-20 11:34:34", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568187196": {"author_username": "ALTree", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37315, "title": "hash/maphash: confusing Reset documentation", "body": "The new `hash/maphash` package has a [`Reset` method](https://tip.golang.org/pkg/hash/maphash/#Hash.Reset) documented as:\r\n\r\n> Reset discards all bytes added to h. (The seed remains the same.) \r\n\r\nMoreover, the [`Sum64` doc](https://tip.golang.org/pkg/hash/maphash/#Hash.Sum64) says:\r\n\r\n> Sum64 returns h's current 64-bit value, which **depends on h's seed and the sequence of bytes added to h since the last call to Reset**\r\n\r\nSo it appears it would be reasonable to expect this to print two times the same value:\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"hash/maphash\"\r\n)\r\n\r\nfunc main() {\r\n\th := new(maphash.Hash)\r\n\r\n\th.WriteString(\"hello\")\r\n\tfmt.Printf(\"%#x\\n\", h.Sum64())\r\n\r\n\th.Reset()\r\n\r\n\th.WriteString(\"hello\")\r\n\tfmt.Printf(\"%#x\\n\", h.Sum64())\r\n}\r\n```\r\n\r\nBut it doesn't:\r\n\r\n```\r\n$ gotip run hash.go\r\n0xdf1aabcc36e56272\r\n0x5a04b54a5a2174d6\r\n```\r\n\r\nThis is because even if the seed remains the same and \"all the previously added bytes are discarded\", *the internal state of the Hash is maintained*, even after the `h.Reset()` call.\r\n\r\nIs this the desired behaviour? If it is, the documentation should probably be amended to make it clear what to expect after a call to the `Reset` method.\r\n\r\ncc @alandonovan @randall77 \r\n", "labels": ["Documentation", "NeedsInvestigation"], "number_of_comments": 2, "created_at": "2020-02-20 10:07:58", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568059617": {"author_username": "griesemer", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37312, "title": "x/tools/go/internal/gcimporter: remove support for binary import/export format", "body": "Now that we have removed support for the (defunct) binary import/export format in the std library, investigate if we can remove the corresponding code in the x/tools version.\r\n\r\nReminder issue.", "labels": ["NeedsInvestigation", "Tools", "early-in-cycle"], "number_of_comments": 2, "created_at": "2020-02-20 05:24:46", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568056778": {"author_username": "eudore", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37311, "title": "net/http/pprof: not set Index func response header content-type to text/html", "body": "### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nif global set response header `X-Content-Type-Options=nosniff`,pprof.Index response is text not is html in chrome.\r\n\r\nread current [golang.org](https://golang.org/src/net/http/pprof/pprof.go?s=8810:8860#L254) net/http/pprof library sourcecode,pprof.Index func is not set header `content-type: text/html; charset=utf-8`,so chrome show is text.\r\n\r\n------------ update ---------\r\nmy http server not is net/http.Server, will not defualt set content-type, so response does not exist context, and appear this error.\r\n\r\n", "labels": [], "number_of_comments": 0, "created_at": "2020-02-20 05:15:15", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568054994": {"author_username": "bradfitz", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37310, "title": "cmd/link: unexpected fault address (when low on disk space?)", "body": "I just got some mysterious linker errors. I suspect they're because this machine only has 20MB of disk free (which I just noticed).\r\n\r\n```\r\n# tailscale.io/control/cfgdb.test\r\nunexpected fault address 0x7f24b561d000\r\nfatal error: fault\r\n[signal SIGBUS: bus error code=0x2 addr=0x7f24b561d000 pc=0x463c2e]\r\n\r\ngoroutine 1 [running]:\r\nruntime.throw(0x6b7228, 0x5)\r\n        /home/bradfitz/go/src/runtime/panic.go:1112 +0x72 fp=0xc003df2ee8 sp=0xc003df2eb8 pc=0x432f62\r\nruntime.sigpanic()\r\n        /home/bradfitz/go/src/runtime/signal_unix.go:674 +0x443 fp=0xc003df2f18 sp=0xc003df2ee8 pc=0x449533\r\nruntime.memmove(0x7f24b561b6b0, 0x7f24b6c77c85, 0x22df)\r\n        /home/bradfitz/go/src/runtime/memmove_amd64.s:108 +0xbe fp=0xc003df2f20 sp=0xc003df2f18 pc=0x463c2e\r\ncmd/link/internal/ld.(*OutBuf).Write(0xc000024900, 0x7f24b6c77c85, 0x22df, 0x22df, 0x1, 0x1, 0x0)\r\n        /home/bradfitz/go/src/cmd/link/internal/ld/outbuf.go:65 +0xa1 fp=0xc003df2f70 sp=0xc003df2f20 pc=0x5c83a1\r\ncmd/link/internal/ld.(*OutBuf).WriteSym(0xc000024900, 0xc002807a90)\r\n        /home/bradfitz/go/src/cmd/link/internal/ld/outbuf.go:159 +0x6c fp=0xc003df2fc0 sp=0xc003df2f70 pc=0x5c8b7c\r\ncmd/link/internal/ld.blk(0xc000024900, 0xc004dd0000, 0x18d8, 0x1c00, 0x5ca6b0, 0x31299c, 0xc0063c4b00, 0x1, 0x1)\r\n        /home/bradfitz/go/src/cmd/link/internal/ld/data.go:787 +0x10f fp=0xc003df3090 sp=0xc003df2fc0 pc=0x570d1f\r\ncmd/link/internal/ld.CodeblkPad(0xc000001e00, 0x401000, 0x31299c, 0xc0063c4b00, 0x1, 0x1)\r\n        /home/bradfitz/go/src/cmd/link/internal/ld/data.go:701 +0xbb fp=0xc003df31a0 sp=0xc003df3090 pc=0x5703fb\r\ncmd/link/internal/amd64.asmb(0xc000001e00)\r\n        /home/bradfitz/go/src/cmd/link/internal/amd64/asm.go:669 +0xc6 fp=0xc003df3200 sp=0xc003df31a0 pc=0x5ec9f6\r\ncmd/link/internal/ld.Main(0x899300, 0x10, 0x20, 0x1, 0x7, 0x10, 0x6c25b5, 0x1b, 0x6be64d, 0x14, ...)\r\n        /home/bradfitz/go/src/cmd/link/internal/ld/main.go:269 +0xd61 fp=0xc003df3358 sp=0xc003df3200 pc=0x5c7451\r\nmain.main()\r\n        /home/bradfitz/go/src/cmd/link/main.go:68 +0x1bc fp=0xc003df3f88 sp=0xc003df3358 pc=0x63d2bc\r\nruntime.main()\r\n        /home/bradfitz/go/src/runtime/proc.go:203 +0x212 fp=0xc003df3fe0 sp=0xc003df3f88 pc=0x4355b2\r\nruntime.goexit()\r\n        /home/bradfitz/go/src/runtime/asm_amd64.s:1375 +0x1 fp=0xc003df3fe8 sp=0xc003df3fe0 pc=0x4629c1\r\nFAIL    tailscale.io/control/cfgdb [build failed]\r\nFAIL\r\n```\r\n\r\nAnd another, which looks like the same:\r\n\r\n```\r\ngoroutine 1 [running]:\r\nruntime.throw(0x6b7228, 0x5)\r\n        /home/bradfitz/go/src/runtime/panic.go:1112 +0x72 fp=0xc00004eee8 sp=0xc00004eeb8 pc=0x432f62\r\nruntime.sigpanic()\r\n        /home/bradfitz/go/src/runtime/signal_unix.go:674 +0x443 fp=0xc00004ef18 sp=0xc00004eee8 pc=0x449533\r\nruntime.memmove(0x7f29fc0a5000, 0x7f29fc6447ce, 0x4b)\r\n        /home/bradfitz/go/src/runtime/memmove_amd64.s:205 +0x1b2 fp=0xc00004ef20 sp=0xc00004ef18 pc=0x463d22\r\ncmd/link/internal/ld.(*OutBuf).Write(0xc000024900, 0x7f29fc6447ce, 0x4b, 0x4b, 0x7f2a23f586e0, 0x3f, 0xb)\r\n        /home/bradfitz/go/src/cmd/link/internal/ld/outbuf.go:65 +0xa1 fp=0xc00004ef70 sp=0xc00004ef20 pc=0x5c83a1\r\ncmd/link/internal/ld.(*OutBuf).WriteSym(0xc000024900, 0xc000a5d5f0)\r\n        /home/bradfitz/go/src/cmd/link/internal/ld/outbuf.go:159 +0x6c fp=0xc00004efc0 sp=0xc00004ef70 pc=0x5c8b7c\r\ncmd/link/internal/ld.blk(0xc000024900, 0xc0022e8000, 0xa80, 0xc00, 0x401000, 0x102b7c, 0xc000b93280, 0x1, 0x1)\r\n        /home/bradfitz/go/src/cmd/link/internal/ld/data.go:787 +0x10f fp=0xc00004f090 sp=0xc00004efc0 pc=0x570d1f\r\ncmd/link/internal/ld.CodeblkPad(0xc000001e00, 0x401000, 0x102b7c, 0xc000b93280, 0x1, 0x1)\r\n        /home/bradfitz/go/src/cmd/link/internal/ld/data.go:701 +0xbb fp=0xc00004f1a0 sp=0xc00004f090 pc=0x5703fb\r\ncmd/link/internal/amd64.asmb(0xc000001e00)\r\n        /home/bradfitz/go/src/cmd/link/internal/amd64/asm.go:669 +0xc6 fp=0xc00004f200 sp=0xc00004f1a0 pc=0x5ec9f6\r\ncmd/link/internal/ld.Main(0x899300, 0x10, 0x20, 0x1, 0x7, 0x10, 0x6c25b5, 0x1b, 0x6be64d, 0x14, ...)\r\n        /home/bradfitz/go/src/cmd/link/internal/ld/main.go:269 +0xd61 fp=0xc00004f358 sp=0xc00004f200 pc=0x5c7451\r\nmain.main()\r\n        /home/bradfitz/go/src/cmd/link/main.go:68 +0x1bc fp=0xc00004ff88 sp=0xc00004f358 pc=0x63d2bc\r\nruntime.main()\r\n        /home/bradfitz/go/src/runtime/proc.go:203 +0x212 fp=0xc00004ffe0 sp=0xc00004ff88 pc=0x4355b2\r\nruntime.goexit()\r\n        /home/bradfitz/go/src/runtime/asm_amd64.s:1375 +0x1 fp=0xc00004ffe8 sp=0xc00004ffe0 pc=0x4629c1\r\nFAIL    tailscale.com/logtail/filch [build failed]\r\nFAIL\r\n```", "labels": [], "number_of_comments": 1, "created_at": "2020-02-20 05:09:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568042919": {"author_username": "nickgerace", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37309, "title": "x/website: download the archive link points to generic download page", "body": "Thank you in advance!\r\n\r\n<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\nNot applicable.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n[Yes.](https://golang.org/doc/install?download=go1.13.8.linux-amd64.tar.gz)\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nFedora 31 on amd64\r\n\r\n### What did you do?\r\n\r\nI tried to copy the link from [here](https://golang.org/doc/install?download=go1.13.8.linux-amd64.tar.gz); specifically, where it says \"Download the archive and extract it into /usr/local, creating a Go tree in /usr/local/go\". The \"Download the archive\" portion is a hyperlink to the Go tarball.\r\n\r\n### What did you expect to see?\r\n\r\nI expected for the hyperlink to be \"https://dl.google.com/go/go1.13.8.linux-amd64.tar.gz\" instead of \"https://golang.org/dl/\".\r\n\r\n### What did you see instead?\r\n\r\nThe \"Download the archive\" hyperlink resolves to \"https://golang.org/dl/\" and not \"https://dl.google.com/go/go1.13.8.linux-amd64.tar.gz\".\r\n", "labels": ["WaitingForInfo"], "number_of_comments": 1, "created_at": "2020-02-20 04:29:48", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568035239": {"author_username": "marwan-at-work", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37308, "title": "encoding/json: document change in Number behavior for 1.14", "body": "I just upgraded one of our internal repositories to Go 1.14rc1 and our tests failed. \r\n\r\nThe reason the tests failed is due to this issue: https://github.com/golang/go/issues/14702\r\n\r\nI had to go in and update our code base to make Go 1.14 work, so it's technically a breaking change. \r\n\r\nMore dangerously, this is a **runtime** breaking change and not a compile time one. \r\n\r\nso I can only imagine the number of Go apps out there running in production that would break because of this. \r\n\r\nAs much as I like the new behavior, I imagine this might cause some production apps to go down in the wild. \r\n\r\nOn one hand, the repository was incorrectly using json.Number and treating it as something that *could* be a number, but would also **allow strings**. In fact, people probably assume that's what json.Number is since it is of type string. \r\n\r\nI'm opening a new issue instead of commenting on the old one because I'd like to bring light into this breaking behavior and make sure we have a decision before Go 1.14 is officially released.\r\n\r\ncc: @mvdan @rsc  \r\n\r\nThanks! \r\n\r\n$ go version\r\nGo 1.14rc1, darwin\r\n</pre>\r\n\r\n", "labels": ["Documentation", "NeedsFix", "release-blocker"], "number_of_comments": 13, "created_at": "2020-02-20 04:01:45", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568007957": {"author_username": "josharian", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37306, "title": "cmd/go: TestExecutableGOROOT is flaky", "body": "Noticed on the build dashboard today:\r\n\r\nhttps://build.golang.org/log/b1c4550d9629753e0fc2909f97f5610c385b0846\r\n\r\n@matloob ", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-20 02:22:43", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567932893": {"author_username": "james-johnston-thumbtack", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37304, "title": "go test JSON output reports failure if stdout redirected", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.4 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nIt should; I don't see why it wouldn't as the code I highlighted below is in the master branch.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/jamesjohnston/Library/Caches/go-build\"\r\nGOENV=\"/Users/jamesjohnston/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/jamesjohnston/Thumbtack/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/Cellar/go/1.13.4/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.13.4/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"-I/usr/local/include\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-L/usr/local/lib\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/4_/s_mp89t54_b8xbgwclmf2scw0000gp/T/go-build586602208=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nCreate a test that overwrites os.Stdout, and then run it using `go test -json`.\r\n\r\nhttps://play.golang.org/p/zeonvI5FdUJ\r\n```\r\nfunc TestWithOverride(t *testing.T) {\r\n\t_, stdOutPipe, _ := os.Pipe()\r\n\tos.Stdout = stdOutPipe\r\n}\r\n```\r\n\r\nThen run the test using `go test -json`.\r\n\r\n### What did you expect to see?\r\n\r\nThe test should succeed: both the exit code should be 0, and the JSON output should indicate a successful test.\r\n\r\n### What did you see instead?\r\n\r\nThe JSON output indicates the test failed, yet the exit code is still 0, indicating success:\r\n\r\n```\r\njamesjohnston-mac:testcase jamesjohnston$ go test -json\r\n{\"Time\":\"2020-02-19T15:27:30.928348-08:00\",\"Action\":\"run\",\"Package\":\"github.com/thumbtack/go/testcase\",\"Test\":\"TestWithOverride\"}\r\n{\"Time\":\"2020-02-19T15:27:30.928623-08:00\",\"Action\":\"output\",\"Package\":\"github.com/thumbtack/go/testcase\",\"Test\":\"TestWithOverride\",\"Output\":\"=== RUN   TestWithOverride\\n\"}\r\n{\"Time\":\"2020-02-19T15:27:30.928661-08:00\",\"Action\":\"output\",\"Package\":\"github.com/thumbtack/go/testcase\",\"Test\":\"TestWithOverride\",\"Output\":\"--- PASS: TestWithOverride (0.00s)\\n\"}\r\n{\"Time\":\"2020-02-19T15:27:30.92872-08:00\",\"Action\":\"output\",\"Package\":\"github.com/thumbtack/go/testcase\",\"Test\":\"TestWithOverride\",\"Output\":\"ok  \\tgithub.com/thumbtack/go/testcase\\t0.006s\\n\"}\r\n{\"Time\":\"2020-02-19T15:27:30.928732-08:00\",\"Action\":\"fail\",\"Package\":\"github.com/thumbtack/go/testcase\",\"Test\":\"TestWithOverride\",\"Elapsed\":0.007}\r\njamesjohnston-mac:testcase jamesjohnston$ echo $?\r\n0\r\n```\r\nNotice the failure that is reported in the JSON: `\"Action\":\"fail\"`.  This is all very ambiguous: did the test pass or fail?  The exit code says one thing, but the JSON output says another.\r\n\r\n### Further investigation\r\n\r\nNotice if we run the above play link, we get this output:\r\n```\r\n=== RUN   TestWithOverride\r\n--- PASS: TestWithOverride (0.00s)\r\n\r\nAll tests passed.\r\n```\r\nHowever, if we write a \"normal\" test that does not tamper with Stdout, we get additional output: a final \"PASS\": https://play.golang.org/p/3Z8hY3rAfhj\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"testing\"\r\n)\r\n\r\nfunc TestWithoutOverride(t *testing.T) {\r\n\t// do nothing\r\n}\r\n```\r\nOutput:\r\n```\r\n=== RUN   TestWithoutOverride\r\n--- PASS: TestWithoutOverride (0.00s)\r\nPASS\r\n\r\nAll tests passed.\r\n```\r\n\r\nIt would appear that test2json is interpreting the lack of a final \"PASS\" as being a failure when converting it to JSON.  However, the main \"go test\" command does not do similarly, and thus exits with a \"successful\" exit code.  Therefore, we end up with a test that is both \"passing\" and \"failing\" simultaneously.\r\n\r\nThe issue appears to be that the `testing.go` file is completely written under the assumption that the end-user will never write to any of the `os.StdXYZ` variables.  For example: https://github.com/golang/go/blob/c4c73ce0e3a7b5c3a61678325c61b09783f76220/src/testing/testing.go#L1211\r\n```\r\n\tfmt.Println(\"PASS\")\r\n```\r\nis the code that writes the final \"PASS\" note.\r\n\r\nA couple possible fixes might be:\r\n* Update `testing.go` so that it reads the `os.StdXYZ` variables at the start of testing, and then never reads from them again.  So e.g. the above code would be updated to `fmt.Fprintln(originalStdOut, \"PASS\")`.  This protects the code from tests that tamper with the standard files.\r\n* Update go test and/or test2json so that if a test binary outputs a truncated output due to this issue (or any other), it consistently either passes or fails the test and does not leave disagreement between JSON and exit code.\r\n\r\nInterestingly, the issue is limited only to `-json` flag.  If we run `go test` without that flag, the test will pass and no indication of anything going wrong will be given.\r\n\r\n### Justification / backstory\r\n\r\nThis test case was derived from a test somebody wrote at my employer that was testing a command-line tool of some sort.  It was temporarily replacing Stdout so that output could be captured and compared against expected output.  The issue is that for one test, this person forgot to restore the original Stdout, and this was not noticed until I started working on introducing tools that work with the JSON output, like using `gotestsum` to convert JSON to JUnit XML and then passing that to Jenkins JUnit plug-in.... Jenkins was (surprisingly) reporting failed tests despite the test suite \"passing.\"\r\n\r\nWhile replacing `os.Stdout` might arguably not the best approach to testing a command-line tool, somebody did write a test that way, and in such a scenario, I feel that the test runner should exhibit predictable behavior when presented with \"interesting\" tests like this one.", "labels": [], "number_of_comments": 0, "created_at": "2020-02-19 23:49:26", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567893425": {"author_username": "embeddedgo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37303, "title": "proposal: Immutable data", "body": "This issue describes language feature proposal to **immutable data**.\r\n\r\nThere are more general proposals for Go 2 that postulate changes in the language type system:\r\n\r\n[Support read-only and practical immutable values in Go](https://github.com/golang/go/issues/32245)\r\n\r\n[Read-only and immutability](https://github.com/golang/go/issues/29192)\r\n\r\n[Immutable type qualifier](https://github.com/golang/go/issues/27975)\r\n\r\nThis proposal isn't as general as the ones mentioned above and focuses only on the data embedded in the code as in the example below (taken from the unicode package):\r\n\r\n```go\r\nvar _C = &RangeTable{\r\n        R16: []Range16{\r\n                {0x0000, 0x001f, 1},\r\n                {0x007f, 0x009f, 1},\r\n                {0x00ad, 0x0600, 1363},\r\n                {0x0601, 0x0605, 1},\r\n                {0x061c, 0x06dd, 193},\r\n                {0x070f, 0x08e2, 467},\r\n                {0x180e, 0x200b, 2045},\r\n                {0x200c, 0x200f, 1},\r\n                {0x202a, 0x202e, 1},\r\n                {0x2060, 0x2064, 1},\r\n                {0x2066, 0x206f, 1},\r\n                {0xd800, 0xf8ff, 1},\r\n                {0xfeff, 0xfff9, 250},\r\n                {0xfffa, 0xfffb, 1},\r\n        },\r\n        R32: []Range32{\r\n                {0x110bd, 0x110cd, 16},\r\n                {0x1bca0, 0x1bca3, 1},\r\n                {0x1d173, 0x1d17a, 1},\r\n                {0xe0001, 0xe0020, 31},\r\n                {0xe0021, 0xe007f, 1},\r\n                {0xf0000, 0xffffd, 1},\r\n                {0x100000, 0x10fffd, 1},\r\n        },\r\n        LatinOffset: 2,\r\n}\r\n```\r\n### The problems this proposal tries to solve\r\n\r\n1. If a package exports some data (explicitly or implicitly) that is intended to be immutable there is no way in the current language specification/implementation to ensure immutability or to detect that some faulty code changes the exported data.\r\n\r\n2. In case of microcontroller based embedded systems the mutable data is copied from Flash to RAM at the system startup. In such systems there is a very little RAM because the immutable parts of the program (text and read-only data) are intended to be executed/read by the CPU directly from Flash. There is no way in the current language implementation to leave the immutable data in Flash which causes that the available RAM overflows very quickly as you import more packages.\r\n\r\n### Language changes\r\n\r\nThis proposal doesn't require changes to the language specification. It can be implemented by adding a new compiler directive as in the example bellow:\r\n\r\n```go\r\n//go:immutable\r\nvar _C = &RangeTable1{\r\n         R32: []Range32{\r\n                {0x0000, 0x001f, 1},\r\n        }\r\n}\r\n```\r\n### Implementation\r\n\r\nThe go:immutable directive should make the variable and any composite literals used to construct it immutable. The compiler should return an error if the data on the right hand side cannot be generated at the compile time. Immutable data should be placed in .rodata section. \r\n\r\nThe go:immutable directive can be documented as a hint directive that may or may not be implemented by the compiler, the hardware or the operating system.\r\n\r\nAn immutability violation is detected at runtime and cause the program abort. The detection relies on the operating system which usually uses read-only pages for read-only sections. In case of embedded systems the immutability violation can be detected by hardware and generate an exception.\r\n\r\n### Design decision argumentation\r\n\r\nUsing the compiler directive instead of new keyword or an existing keyword combination like ```const var``` has the advantage that it doesn't introduce any changes to the language specification. If the more general approach for immutability will be developed the directive can be easily removed from the compiler specification.\r\n\r\n### Tests\r\n\r\nI've done some tests simulating the go:immutable directive at the linker level by adding the following code to the [Link.dodata](https://github.com/golang/go/blob/a7acf9af07bdc288129fa5756768b41f312d05f4/src/cmd/link/internal/ld/data.go#L1145) function:\r\n\r\n```go\r\nfor _, s := range ctxt.Syms.Allsym {\r\n        if strings.HasPrefix(s.Name, \"unicode..stmp_\") {\r\n                s.Type = sym.SRODATA\r\n        }\r\n}\r\n```\r\nIt moves to the .rodata section all \"static temp\" symbols from the unicode package that correspond mainly to the composite literals used to initialize global variables. The impact on the code generated for simple *Hello, World!* program:\r\n\r\n```go\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n\tfmt.Println(\"Hello, World!\")\r\n}\r\n```\r\n\r\nis as follow:\r\n\r\nbefore:\r\n\r\n```\r\n   text    data     bss     dec     hex filename\r\n 883610   58172   11128  952910   e8a4e helloworld.elf\r\n```\r\n\r\nafter:\r\n\r\n```\r\n   text    data     bss     dec     hex filename\r\n 931847    9700   11128  952675   e8963 helloworld.elf\r\n```\r\n\r\nAs you can see about 48 KB have been moved from the data segment to the text segment and they are all from unicode package only. It isn't impressive from OS capable system point of view but it's a game changer in case of microcontroller based embedded systems which rarely have more than 256 KB of RAM.\r\n\r\n### Impact on the existing code\r\n\r\nIntroducing go:immutable directives for immutable data in the standard library and other packages shouldn't affect the correct code in any way. The faulty code can stop work.", "labels": ["Proposal"], "number_of_comments": 13, "created_at": "2020-02-19 22:40:17", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567884171": {"author_username": "abuchanan-nr", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37302, "title": "proposal: Go 2: permit implicit conversion of constants to pointer types", "body": "Some libraries define structs where all fields are pointers, including fields with primitive types (int, float, string, etc). For example:\r\n\r\n```go\r\ntype Record struct {\r\n\tName   *string\r\n\tAge    *int\r\n\tIncome *float64\r\n\tActive *bool\r\n}\r\n```\r\n\r\nThis often occurs in libraries defining RPC message types \u2013\u00a0presumably libraries use this to tell the difference between a field that is unset vs a field set to the zero value. Examples include protobuf, AWS libraries, thrift, and more.\r\n\r\nThese types cannot be used as naturally as people would like, especially when building test data. For example, consider the following test code:\r\n\r\n```go\r\nfunc TestProcessRecord(t *testing.T) {\r\n\trec := Record{\r\n\t\tName:   stringPtr(\"Alex\"),\r\n\t\tAge:    intPtr(34),\r\n\t\tIncome: float64Ptr(42.0),\r\n\t\tActive: boolPtr(false),\r\n\t}\r\n\tout := ProcessRecord(rec)\r\n\t// ...etc...\r\n}\r\n\r\nfunc stringPtr(s string) *string    { return &s }\r\nfunc float64Ptr(f float64) *float64 { return &f }\r\nfunc intPtr(i int) *int             { return &i }\r\nfunc boolPtr(b bool) *bool          { return &b }\r\n```\r\n\r\n# Proposal\r\n\r\nI propose Go enable automatic conversion of constants to pointer types. For example, I think this should work:\r\n\r\n```go\r\nvar y *int64 = 1\r\n```\r\n\r\nThe example test above could then be simplified to:\r\n```go\r\nfunc TestProcessRecord(t *testing.T) {\r\n\trec := Record{\r\n\t\tName:   \"Alex\",\r\n\t\tAge:    34,\r\n\t\tIncome: 42.0,\r\n\t\tActive: false,\r\n\t}\r\n\tout := ProcessRecord(rec)\r\n\t// ...etc...\r\n}\r\n```\r\n\r\nThis seems to fall in line with the power of constants and the work the compiler does to convert them to types naturally. This would simplify existing test code and remove clutter.\r\n\r\nAs far as I can tell, this is a backward compatible change.\r\n\r\n\r\n# Related Proposals\r\n\r\nThis has been mentioned in other proposals: #9097 #19966\r\n\r\nThis proposal is similar to, but still significantly different from the related proposals. I think this proposal results in the most natural, minimal syntax possible, at least for the simple case of setting a variable or field to constant.\r\n", "labels": ["Go2", "LanguageChange", "Proposal"], "number_of_comments": 7, "created_at": "2020-02-19 22:20:26", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567761699": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37301, "title": "cmd/go: 'go help get' should not document the -v flag", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14rc1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/home/manlio/.local/bin\"\r\nGOCACHE=\"/home/manlio/.cache/go-build\"\r\nGOENV=\"/home/manlio/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/manlio/.local/lib/go:/home/manlio/src/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/manlio/sdk/go1.14rc1\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/manlio/sdk/go1.14rc1/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/dev/null\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build166081677=/tmp/go-build -gno-record-gcc-switches\"\r\nGOROOT/bin/go version: go version go1.14rc1 linux/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.14rc1\r\nuname -sr: Linux 5.5.4-arch1-1\r\n/usr/lib/libc.so.6: GNU C Library (GNU libc) stable release version 2.31.\r\ngdb --version: GNU gdb (GDB) 9.1\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n`go help get` is missing the documentation of the `-v` flag, that is present in `go help gopath-get`:\r\n\r\n```\r\nThe -v flag enables verbose progress and debug output.\r\n```\r\n\r\nThanks.", "labels": ["Documentation", "NeedsInvestigation"], "number_of_comments": 6, "created_at": "2020-02-19 18:37:46", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567740107": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37300, "title": "cmd/go: go list inconsistently resolves empty paths to '.'", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14rc1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/home/manlio/.local/bin\"\r\nGOCACHE=\"/home/manlio/.cache/go-build\"\r\nGOENV=\"/home/manlio/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/manlio/.local/lib/go:/home/manlio/src/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/manlio/sdk/go1.14rc1\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/manlio/sdk/go1.14rc1/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/dev/null\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build552987847=/tmp/go-build -gno-record-gcc-switches\"\r\nGOROOT/bin/go version: go version go1.14rc1 linux/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.14rc1\r\nuname -sr: Linux 5.5.4-arch1-1\r\n/usr/lib/libc.so.6: GNU C Library (GNU libc) stable release version 2.31.\r\ngdb --version: GNU gdb (GDB) 9.1\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nInside a module `github.com/perillo/goprint`:\r\n```\r\n$ go list -m \"\"\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\ngithub.com/perillo/goprint\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\ngo list -m: module : not a known dependency\r\n```\r\n\r\n`go list \"\"` works fine.  Is there a reason for this asymmetry?\r\n\r\nIf an empty module path **must** be rejected, the error message should be changed.\r\n\r\nThanks.", "labels": ["NeedsFix"], "number_of_comments": 7, "created_at": "2020-02-19 18:04:46", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567735738": {"author_username": "ohir", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37299, "title": "cmd/gofmt: proposal: Minimize adjacent whitespace changes on struct layout edits.", "body": "# Proposal: Minimize adjacent whitespace changes on struct layout edits.\r\n\r\nAuthor: Ohir Ripe [Wojciech S. Czarnecki]\r\n\r\nLast updated: 2020/02/19\r\n\r\nDiscussion at https://golang.org/issues/37299\r\n\r\n## <a name=\"abstract\">Abstract</a>\r\n\r\nI propose to add an opt-in go fmt solution meant to minimize whitespace changes to the block where a code author hinted at desired comments position.\r\n\r\n### <a name=\"background\">Background</a>\r\n\r\nWith current gofmt rules slight changes to a struct declaration make for avalanche changes across declaration whitespace due to gofmt trying to layout struct declaration \"pretty\". Produced changeset size make diffs unreadable if any field identifier or type changes its length.\r\n\r\n## <a name=\"proposal\">Proposal</a>\r\n\r\n1. Fix relative indent position of the type of the field, then\r\n2. Let code author hint gofmt where comments should line up.\r\n\r\nComment-start hint has a form of a `/<` digraph (a cs-mark hereafter) put into the comment that follows the opening brace of the block.\r\n\r\n```go\r\ntype Some struct { //           /< cs-mark here \r\n        counter         int     // midlen \r\n        nce             int64   // short\r\n        longlongname    string  // long\r\n}\r\n```\r\n_Note: cs-mark usually will be used on a struct declaration, but described feature will work for any kind of block._\r\n\r\n### Proposed new gofmt rules:\r\n\r\n```\r\nNew behavior is turned on by a \"/<\" cs-mark presence\r\nin a first comment of the block.\r\n\r\nThe tsPos and csPos below stand for type-start and comment-start\r\npositions, respectively. cmPos stands for cs-mark position.\r\n\r\nTabwidth is fixed at 8. Measurements and adjusts are relative to the\r\nblock content start position, ie. are indent-independent.\r\n\r\nNONE heuristics are used, gofmt just obey the recipe as set here.\r\n\r\nRecipe:\r\n\r\nR1. Set tsPos to the tabstop that follows the opening brace position.\r\nR2. if cmPos <= tsPos {; cmPos += 8 }     // make sure cmPos > tsPos \r\nR3. If cmPos is not at tabstop now, advance it to the next tabstop.\r\nR4. Set comment-start position from the current (adjusted) cs-mark position.\r\nR5. Rewrite cs-mark line.\r\nR6. Adjust lines in block, shifting relevant parts using spaces.\r\nR7. If text overflows one or the other \"start\" position, use single space.\r\n    Human can react to spurious overflows moving comment-mark a space or two.\r\nR8. Estabilished tsPos and csPos are valid to the end of block.\r\n    Open question: should we recognize cs-mark in the inner scopes?\r\n\r\n\r\nOn Examples:\r\n\r\n// Youri uses tw=8 and writes:\r\ntype Other struct { //      /< author set marker here\r\n        counter int // midlen \r\n        nce int64 // short\r\n        longlongname string // long\r\n}\r\n\r\n// e Other struct { //      /< author set comment-start position\r\n//      |---------#-----|         R1 type starts at next ts\r\n//      |-------------------|        given comment-start position\r\n//      |-------------------#---| R3 adjusted comment-start position\r\n//......A.......B.......C.......D.......E.......F.......G.......H...\r\n// \r\n// Now Youri sees:\r\ntype Other struct { //          /< adjusted cs-mark\r\n        counter         int     // midlen \r\n        nce             int64   // short\r\n        longlongname    string  // long\r\n}\r\n\r\n// Bartek tw=4 sees:\r\ntype Other struct { //          /< adjusted cs-mark\r\n    counter         int     // midlen \r\n    nce             int64   // short\r\n    longlongname    string  // long\r\n}\r\n\r\n// Beata tw=2 sees:\r\ntype Other struct { //          /< adjusted cs-mark\r\n  counter         int     // midlen \r\n  nce             int64   // short\r\n  longlongname    string  // long\r\n}\r\n\r\n\r\n// Now Beata writes, she is using tw=2\r\ntype Other struct { // /< just near longlongname, as perceived\r\n  counter int // midlen \r\n  nce int64 // short\r\n  longlongname string // long\r\n}\r\n// e Other struct { // /< author set comment-start position\r\n//      |---------#-----|         R1 type starts at next ts\r\n//      |--------------|             given comment-start position\r\n//      |----------------------|  R2 +8 shift \r\n//      |--------------#--------| R3 adjusted comment-start position\r\n//......A.......B.......C.......D.......E.......F.......G.......H...\r\n//\r\n// Beata ts=2 now sees:\r\ntype Other struct { //          /< adjusted\r\n  counter         int     // midlen \r\n  nce             int64   // short\r\n  longlongname    string  // long\r\n}\r\n// Bartek ts=4 sees:\r\ntype Other struct { //          /< adjusted\r\n    counter         int     // midlen \r\n    nce             int64   // short\r\n    longlongname    string  // long\r\n}\r\n// Youri ts=8 sees:\r\ntype Other struct { //          /< adjusted\r\n        counter         int     // midlen \r\n        nce             int64   // short\r\n        longlongname    string  // long\r\n}\r\n\r\n//\r\n// Excercise R7 rule.\r\n//\r\n// Beata ts=2 writes:\r\ntype sn struct { //   /< Beata manually adjusted to longlongname\r\n  field int // midlen \r\n  n   int64 // short\r\n  longlongname string // r\r\n}\r\n// e sn struct { //   /< Beata manually adjusted to longlongname\r\n//      |------#|         R1 type starts at next ts\r\n//      |-------------|      given comment-start position\r\n//      |-------------#-| R3 adjusted comment-start position\r\n//......A.......B.......C.......D.......E.......F.......G.......H...\r\n//\r\n// Beata ts=2 now sees:\r\ntype sn struct { //     /< adjusted \r\n  field   int     // midlen \r\n  n       int64   // short\r\n  longlongname string // R7\r\n}\r\n\r\n// Bartek ts=4 sees:\r\ntype sn struct { //     /< adjusted \r\n    field   int     // midlen \r\n    n       int64   // short\r\n    longlongname string // R7\r\n}\r\n\r\n// Youri ts=8 sees:\r\ntype sn struct { //     /< adjusted \r\n        field   int     // midlen \r\n        n       int64   // short\r\n        longlongname string // R7\r\n}\r\n\r\n// Beata moved mark by three spaces right:\r\n// \r\n// Beata ts=2 writes:\r\ntype sn struct { //      /< three spaces more\r\n  field int // midlen \r\n  n   int64 // short\r\n  longlongname string // r\r\n}\r\n// e sn struct { //      /< three spaces more \r\n//      |------#|                 R1 type starts at next ts\r\n//      |----------------|           given comment-start position\r\n//      |----------------#------| R3 adjusted comment-start position\r\n//......A.......B.......C.......D.......E.......F.......G.......H...\r\n// tw=2\r\ntype sn struct { //             /< adjusted\r\n  field   int             // midlen \r\n  n       int64           // short\r\n  longlongname string     // R7 for type\r\n}\r\n// tw=4\r\ntype sn struct { //             /< adjusted\r\n    field   int             // midlen \r\n    n       int64           // short\r\n    longlongname string     // R7 for type\r\n}\r\n// tw=8\r\ntype sn struct { //             /< adjusted\r\n        field   int             // midlen \r\n        n       int64           // short\r\n        longlongname string     // R7 for type\r\n}\r\n```\r\n\r\nCaveat: If the block opening brace changes position pre or past its current tabstop span (eg. if a struct was renamed), **whole** block will make to the changeset. These changes though are less likely than changes to the inner structure.\r\n\r\n## <a name=\"rationale\">Rationale</a>\r\n\r\nAs explained in the background. This change will benefit Go programmers that use source control. Ie. likely all of them.\r\n\r\n## <a name=\"compatibility\">Compatibility</a>\r\n\r\nThis is an opt-in feature. It does not affect already written code.\r\n\r\n## <a name=\"implementation\">Implementation</a>\r\n\r\nNone yet. It can successfully be implemented only by the core team.\r\n_(Because such a change makes sense if implemented across the whole Go ecosystem.)_\r\n\r\n## <a name=\"issues\">Open issues</a>\r\n\r\n1. Should cs-mark on inner blocks be ignored or respected? Eg. marks may legitimately get there due to wrapping.\r\n2. Can composite literals benefit from tsPos \r\n\r\n\r\n", "labels": ["Proposal"], "number_of_comments": 0, "created_at": "2020-02-19 17:57:38", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567466156": {"author_username": "cespare", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37298, "title": "cmd/compile: -d=checkptr false positive(?) with unaligned slice data and reflect", "body": "I'm testing some code with Go 1.14 and found that some tests are failing which passed in Go 1.13 while running under `-race`.\r\n\r\nThis is due to the new checkptr checks that are enabled by `-race`. Here's a minimized repro:\r\n\r\n```\r\n// +build ignore\r\n\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"reflect\"\r\n\t\"unsafe\"\r\n)\r\n\r\nfunc main() {\r\n\tb := make([]byte, 20)\r\n\ts := unsafeInts(b, 1) // with 0 or 8, no failure\r\n\tfmt.Println(s)\r\n}\r\n\r\nfunc unsafeInts(b []byte, offs int) []int64 {\r\n\tvar s []int64\r\n\tsh := (*reflect.SliceHeader)(unsafe.Pointer(&s))\r\n\tsh.Data = uintptr(unsafe.Pointer(&b[offs]))\r\n\tsh.Cap = (len(b) - offs) / 8\r\n\tsh.Len = sh.Cap\r\n\treturn s\r\n}\r\n```\r\n\r\n```\r\n$ go1.13.4 run -race checkptr.go\r\n[0 0]\r\n$ go1.14beta1 run -race checkptr.go\r\npanic: runtime error: unsafe pointer conversion\r\n\r\ngoroutine 1 [running]:\r\nreflect.Value.Int(...)\r\n        /home/caleb/sdk/go1.14beta1/src/reflect/value.go:974\r\nfmt.(*pp).printValue(0xc0000a08f0, 0x5150a0, 0xc0000bc001, 0x186, 0x76, 0x1)\r\n        /home/caleb/sdk/go1.14beta1/src/fmt/print.go:749 +0x3694\r\nfmt.(*pp).printValue(0xc0000a08f0, 0x5136e0, 0xc0000aa020, 0x97, 0x76, 0x0)\r\n        /home/caleb/sdk/go1.14beta1/src/fmt/print.go:869 +0xfd3\r\nfmt.(*pp).printArg(0xc0000a08f0, 0x5136e0, 0xc0000aa020, 0x76)\r\n        /home/caleb/sdk/go1.14beta1/src/fmt/print.go:716 +0x25b\r\nfmt.(*pp).doPrintln(0xc0000a08f0, 0xc00005af50, 0x1, 0x1)\r\n        /home/caleb/sdk/go1.14beta1/src/fmt/print.go:1173 +0xae\r\nfmt.Fprintln(0x55d520, 0xc0000b8008, 0xc00005af50, 0x1, 0x1, 0x432142, 0xc000092058, 0x0)\r\n        /home/caleb/sdk/go1.14beta1/src/fmt/print.go:264 +0x66\r\nfmt.Println(...)\r\n        /home/caleb/sdk/go1.14beta1/src/fmt/print.go:274\r\nmain.main()\r\n        /home/caleb/p/misc/checkptr/checkptr.go:14 +0x18f\r\nexit status 2\r\n$\r\n```\r\n\r\nThis error isn't particularly helpful (why is it unsafe?) and when I looked at the source, it still wasn't clear to me what the problem is.\r\n\r\n```\r\n\t// Check that (*[n]elem)(p) is appropriately aligned.\r\n\t// TODO(mdempsky): What about fieldAlign?\r\n\tif uintptr(p)&(uintptr(elem.align)-1) != 0 {\r\n\t\tthrow(\"checkptr: unsafe pointer conversion\")\r\n\t}\r\n```\r\n\r\nEven if there's some problem with unaligned pointers into the Go heap, in my application the backing data doesn't come from `make([]byte)` but rather from `unix.Mmap`. And my CPU (amd64) should have no problem with reading unaligned data, right?\r\n\r\nIt's also strange that the crash didn't happen in my code, but inside the reflect-y fmt code that looked at my data. (Not that it matters, but in my real code the crash isn't triggered by fmt but rather by go-cmp, also via use of `reflect.Value.Int`.)\r\n\r\n/cc @mdempsky ", "labels": ["NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-02-19 10:24:32", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567382765": {"author_username": "erifan", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37295, "title": "gollvm: find a better way to deal with g", "body": "Currently, gollvm stores the current g in tls. The runtime.getg () function returns the current g. This function will be inlined for better performance and the inlining will be disabled by GoSafeGetg pass in some situations.  Cherry described this situation in this pass:\r\n```\r\nwithin a function,\r\n//\r\n//   load g\r\n//   call mcall(...)\r\n//   load g\r\n//\r\n// may be compiled to\r\n//\r\n//   leaq    g@TLS, %rdi\r\n//   call    __tls_get_addr\r\n//   movq    %rax, %rbx     // cache in a callee-save register %rbx\r\n//   ... use g in %rax ...\r\n//   call    foo\r\n//   ... use g in %rbx ...\r\n// This is incorrect if a thread switch happens at the call of foo.\r\n```\r\nA practical example of this situation: [gofrontend/chan.go#154](https://github.com/golang/gofrontend/blob/d5d00d310ec33aeb18f33f807956ec0c4eeea6bb/libgo/go/runtime/chan.go#L154.)\r\nBy removing the inlining of the second and subsequent getg functions in a block, GoSafeGetg pass fixed this issue on linux/amd64. But on Linux / arm64, llvm performs cache optimization on the tls base address across the entire function range,  so the g obtained by the second and subsequent getg in the above situation may still be wrong.\r\n\r\nAs I know, this kind of optimization is common in llvm and gcc, and it seems to be correct and very good for c / c ++. Before c / c ++ introduced a concept like goroutine, I think this optimization will not be changed. Please refer to similar issues: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=26461, https://bugs.llvm.org/show_bug.cgi?id=19177.\r\nCurrently gollvm only supports linux / amd64 and linux / arm64, but as more platforms are supported in the future, I think this issue will be a problem on more platforms, so I think we need to find a better way to store the current g. \r\n\r\nAt present, the methods I can think of are as follows:\r\n1. Keep the current practice, store g in tls, try to remove the cache of tls base address.\r\n2. Follow the practice of main go, reserve a register to store g.\r\n3. Store g in a suitable location on the stack.\r\n@thanm @cherrymui @ianlancetaylor Any suggestions ?", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-19 07:56:45", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567379010": {"author_username": "catenacyber", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37294, "title": "crypto/elliptic: invalid handling for infinity point", "body": "#### What did you do?\r\n\r\nI have been doing differential fuzzing on elliptic curve cryptography.\r\nI am adding golang `crypto/elliptic` to my fuzzer : https://github.com/catenacyber/elliptic-curve-differential-fuzzer\r\nAnd I found one inconsistency.\r\nThe infinity point is not encoded with a single 0 byte as it could be. But I did not find a standard for this encoding used by other libraries.\r\n\r\nWorse : the infinity point is not considered to be on the curve... Any scalar multiplication of a point on the curve must be on the curve.\r\n\r\nReproducer code is here :\r\nhttps://play.golang.org/p/kvjqBssEGTv\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"crypto/elliptic\"\r\n\t\"fmt\"\r\n\t\"math/big\"\r\n)\r\n\r\nfunc main() {\r\n\tcurve := elliptic.P224()\r\n\tcoordx := []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xfe, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x52, 0xfa}\r\n\tcoordy := []byte{0x45, 0x6d, 0xcc, 0xc3, 0x3f, 0x1d, 0x63, 0x41, 0x6, 0xfd, 0xa9, 0x12, 0x44, 0xbf, 0x70, 0x4f, 0x3d, 0xab, 0x96, 0x50, 0x61, 0x6d, 0xa, 0xc3, 0xb, 0xc0, 0x56, 0x50}\r\n\tscalar := []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0xa2, 0xe0, 0xb8, 0xf0, 0x3e, 0x13, 0xdd, 0x29, 0x45, 0x5c, 0x5c, 0x2a, 0x3d}\r\n\r\n\tpx := new(big.Int)\r\n\tpx.SetBytes(coordx)\r\n\tpy := new(big.Int)\r\n\tpy.SetBytes(coordy)\r\n\r\n\trx, ry := curve.ScalarMult(px, py, scalar)\r\n\tres := elliptic.Marshal(curve, rx, ry)\r\n\t/* Quick fix\r\n\tif rx.BitLen() == 0 && ry.BitLen() == 0 {\r\n\t\tres[0] = 0\r\n\t\tres = res[:1]\r\n\t*/\r\n\tfmt.Printf(\"infinity %#+v\\n\", res)\r\n\tfmt.Printf(\"infinity on curve %#+v %#+v\\n\", curve.IsOnCurve(px, py), curve.IsOnCurve(rx, ry))\r\n}\r\n```\r\n\r\n#### What did you expect to see?\r\nThe reproducer code should output \r\n```\r\ninfinity []byte{0x0}\r\ninfinity on curve true true\r\n```\r\n\r\n#### What did you see instead?\r\n```\r\ninfinity []byte{0x4, 0x0, 0x0, 0x0, 0x0, 0x0...\r\ninfinity on curve true false\r\n```\r\n\r\n#### Does this issue reproduce with the latest release (go1.13.8)?\r\nYes with `go version go1.13.8 linux/amd64`\r\n\r\n#### System details\r\n\r\n```\r\ngo version go1.12.9 darwin/amd64\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/catena/Library/Caches/go-build\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/catena/go\"\r\nGOPROXY=\"\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nGOROOT/bin/go version: go version go1.12.9 darwin/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.12.9\r\nuname -v: Darwin Kernel Version 17.7.0: Thu Jan 23 07:05:23 PST 2020; root:xnu-4570.71.69~1/RELEASE_X86_64\r\nProductName:\tMac OS X\r\nProductVersion:\t10.13.6\r\nBuildVersion:\t17G11023\r\nlldb --version: lldb-1000.11.38.2\r\n  Swift-4.2\r\ngdb --version: GNU gdb (GDB) 8.1.1\r\n```\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-19 07:48:24", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567371216": {"author_username": "Abhaykumar1", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37293, "title": "Values of millisecond lost when using Mongo Driver to read time and Unmarshalling int into time.Time ", "body": "Version : go 1.13\r\nMongo Driver Version : go.mongodb.org/mongo-driver v1.2.1\r\n\r\n\r\nI'm fetching the Date stored in MongoDB. The value stored in DB is\r\nreservedDate: 2020-02-19T07:11:23.890+00:00\r\n\r\nAfter Unmarshalling the response into time.Time field the value becomes \r\n\"reservedDate\": \"2020-02-19T07:11:23.89Z\"\r\n\r\n890 MilliSecond become 89, similarlly 100 becomes 1. The trailing Zeros are getting truncated. \r\n", "labels": ["WaitingForInfo"], "number_of_comments": 1, "created_at": "2020-02-19 07:32:12", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567326010": {"author_username": "jonperryman", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37292, "title": "proposal: Go 2: integrated compile time language", "body": "<h3>Would you consider yourself a novice, intermediate, or experienced Go programmer?</h3>\r\nIntermediate.\r\n\r\n<h3>What other languages do you have experience with?</h3>\r\nC, C++, Assembler, Python, SAS, JavaScript, PHP, HTML/CSS and more.\r\n\r\n<h3>Would this change make Go easier or harder to learn, and why?</h3>\r\nAdvanced API's and frameworks can be made trivial to use.\r\nE.g. Messages should be multi-lingual but it's so difficult that even the GO compiler does not offer this capability.\r\nLook at the example below to see how this feature makes it trivial where all products could easily become multi-lingual.\r\n\r\n<h3>Has this idea, or one like it, been proposed before?</h3>\r\n\r\n<p>Don't confuse this with C macro's nor code generators.\r\n    Nor is this an alternative for functions.\r\n    Instead, this provides control and flexibility at compile time that would normally require\r\n    GO compiler source changes. As part of the compiler, it has some basic knowledge (e.g. making reflection available\r\n    at compile time).\r\n</p>\r\n\r\n<h3>Who does this proposal help, and why?</h3>\r\n\r\n<p>Everyone, from beginners to the compiler developer's will greatly benefit from this feature. Some of the benefits are:\r\n</p>\r\n\r\n<ul>\r\n    <li>Ability to develop elegant solutions to problems not easily solved with the current compiler.</li>\r\n    <li>Improve performance by reducing the impact of worst case scenario solutions.</li>\r\n    <li>Greatly simplify API usage and add validity checking for API's.</li>\r\n    <li>Ability to write compile time algorithms instead of run time algorithms (e.g. reflection).</li>\r\n    <li>Greatly reduce repetitive code.</li>\r\n    <li>Avoid the need for creating gofix code when their API's change.</li>\r\n    <li>Ability to include more resources in the source that are externalized now.</li>\r\n    <li>Go language developers, can see the type of functionality developers really need.</li>\r\n    <li>Potential circumvention to compiler bugs or deficiencies.</li>\r\n</ul>\r\n\r\n<h3>What is the proposed change?</h3>\r\n\r\n<p> An integrated compile time language for GO that everyone can use. It will provide the ability\r\n    to create compile time logic. It provides access to reflection at compile time, insertion of GO\r\n    code and issue compile time error messages. The compile time language needs to be determined.\r\n    GO would be nice because it would be consistent syntax and run efficiently but compile time programs must be\r\n    compiled before compiling programs that use them along with dynamically loading / calling these programs.\r\n    A language like Python might be more suitable because it is interpreted at execution time but\r\n    it's drawbacks are another programming language to learn and high overhead during GO compile.\r\n</p>\r\n\r\n<h3>Demonstrating the importance of this functionality thru the UI.</h3>\r\n\r\n<p>I have real experience with the integrated compile time language that is built into the High Level Assembler.\r\n    There are many real use cases so I will only comment about a few. I'll start with messages.\r\n</p>\r\n\r\n<table style=\"background-color: lightblue; color: black;\">\r\n\r\n<tr style=\"background-color:blue; color:white;\"><td><h3>Easy to maintain call for a multi-lingual message</h3></td></tr>\r\n<tr><td><pre>\r\nMsg( msgId=cs00001, myVar1, myVar2)  // Display message cs0001 is the user's language\r\n</pre></td></tr>\r\n\r\n<tr style=\"background-color:blue; color:white;\"><td><h3>Elegant and efficient message definition in an english message module</h3></td></tr>\r\n<tr><td><pre>\r\nMsg( msgId=cs0001, msgLevel=error, type=define,\r\n    msg='Message %v not displayed because message module %v was not found',\r\n    help={\r\n        ::Explanation:\r\n            Message \"v1\" was not displayed because the message module \"v2\" was not found.\r\n        ::System action:\r\n            The message is not displayed.\r\n        ::Corrective action:\r\n            Look at the help text for the original message to determine if you need to take\r\n            an action for that message. To resolve this bug, search the problem database for the\r\n            appropriate action to resolve the problem.\r\n    }\r\n)\r\n</pre></td></tr>\r\n</table>\r\n\r\n<p> Why are most messages in english instead of being multi-lingual? Why don't messages have help text?\r\n    Where are the advanced message features?\r\n</p>\r\n\r\n<p> The simple answer is GO and C are not convenient, efficient nor easy in solving many problems.\r\n    We must settle for mediocre solutions such as \"gettext( )\" that are high runtime overhead with a new language\r\n    to learn. Worse yet, you must understand the impact of changing the gettext message id.\r\n</p>\r\n\r\n<p>The example above was taken from my product written in High Level Assembler but changed to\r\n    be compatible with GO syntax. This solution suited my needs but could easily be changed to be more flexible.\r\n    The message definition is from one of the english language message modules so that the documentation writers\r\n    can easily fix problems.\r\n    The help text explains the message and guides users thru problem resolution. The message ID\r\n    crucial to identify the message regardless of user language. Equally important is that automation deals\r\n    with the correct message. Customer's can easily identify automation changes when\r\n    a message changes syntax. The error level ensures the return code is set correctly.\r\n</p>\r\n\r\n<table>\r\n<tr style=\"background-color:blue; color:white;\"><td><h3>Excessive overhead in strings.IndexAny( )</h3></td></tr>\r\n<tr><td><pre>\r\nfunc IndexAny(s, chars string) int {\r\n\tif chars == \"\" {\r\n\t\t// Avoid scanning all of s.\r\n\t\treturn -1\r\n\t}\r\n\tif len(s) > 8 {\r\n\t\tif as, isASCII := makeASCIISet(chars); isASCII {\r\n\t\t\tfor i := 0; i < len(s); i++ {\r\n\t\t\t\tif as.contains(s[i]) {\r\n\t\t\t\t\treturn i\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn -1\r\n\t\t}\r\n\t}\r\n\tfor i, c := range s {\r\n\t\tfor _, m := range chars {\r\n\t\t\tif c == m {\r\n\t\t\t\treturn i\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn -1\r\n}\r\n</pre></td></tr>\r\n</table>\r\n\r\n<p> This is the actual strings.IndexAny( ) code in GO.\r\n    Whether you code IndexAny( ) in GO or C, this logic is the best you can do\r\n    because there is not any compile time flexibility built into the language.\r\n    An integrated compile time language allows you to create very robust solution.\r\n    In this case, there are 3 compile time scenarios that must be considered to cover all situations.\r\n</p>\r\n\r\n<h4>Scenario 1: quoted search characters: strings.IndexAny( myString, \"&lt;&gt;&amp;&semi;\" )</h4>\r\n\r\n<p>The current implementation results in unnecessary runtime overhead that could be performed at compile time.\r\n    The double FOR loop results in 4 times the execution time in this example.\r\n    Using makeASCIISet( ) is a run time solution that occurs with every call to IndexAny.\r\n    The correct solution would be to create the ascii table at compile time (asciTable :=\r\n    [256]byte{ '&lt;' : 1, '&gt;' : 1, '&amp;' : 1, '&semi;' : 1 } but that's expecting too much from the developer.\r\n</p>\r\n\r\n<p>With this new functionality, creating the asciiTable statement is a simple loop thru the search characters.\r\n    Non-ascii unicode characters can generate an additional search for those characters.\r\n    Beginners don't notice any difference.\r\n</p>\r\n\r\n<h4> Scenario 2: search characters in a variable: strings.IndexAny( myString, searchCharactersVariable )</h4>\r\n\r\n<p>The standard implementation is the current implementation. It does not do any compile time optimization.\r\n    This is easy for beginners because they don't notice any difference.\r\n</p>\r\n\r\n<h4> Scenario 3: advanced search optimization features</h4>\r\n<p> For ease of use, beginners can ignore advanced features.\r\n    In fact, these features are only needed in extreme cases (e.g. large amounts of data fewer\r\n    than 8 search characters). This could be something as simple as a pre-allocated ascii buffer / search\r\n    structure. Using this feature could be keyword parameters or different call types.\r\n    Implementation is truly up to the developer of this functionality.\r\n</p>\r\n\r\n<table>\r\n<tr style=\"background-color:blue; color:white;\"><td><h3>Formatted printing could be improved without UI changes</h3></td></tr>\r\n<tr><td><pre>\r\nfmt.Printf('x %T x %t x %4d x', a, b, c)\r\n</pre></td></tr>\r\n</table>\r\n\r\n<p> Why isn't the formatting string parsed at compile time?\r\n    Why aren't the formatting fields defitions determined at compile time to reduce runtime overhead?\r\n    Why aren't the argument types validated with the formatting string at compile time?\r\n    With this feature, we could easily solve these problems.\r\n</p>\r\n\r\n<table>\r\n<tr style=\"background-color:blue; color:white;\"><td><h3>XML processing made easy and efficient</h3></td></tr>\r\n<tr><td><pre>\r\nresult, err := xml.Unmarshal(data,\r\n    (   Person xml.RootElement {\r\n            Name    string    `xml:FullName\"`\r\n            Phone   string\r\n            Email   []struct {\r\n                Where string  `xml:\"where,attr\"`\r\n                Addr  string\r\n            }\r\n            Groups  []string  `xml:\"Group\"`\r\n            Address struct {\r\n                City, State string\r\n            }\r\n        },\r\n        Company xml.RootElement {\r\n            Name    string    `xml:FullName\"`\r\n            Phone   string\r\n            Email   []struct {\r\n                Where string  `xml:\"where,attr\"`\r\n                Addr  string\r\n            }\r\n            Groups  []string  `xml:\"Group\"`\r\n            Address struct {\r\n                City, State string\r\n            }\r\n        }\r\n    )\r\n)\r\nfmt.Println(result)\r\n</pre></td></tr>\r\n\r\n<tr style=\"background-color:blue; color:white;\"><td><h3>versus todays implementation</h3></td></tr>\r\n<tr><td><pre>\r\ntype Email struct {\r\n    Where string `xml:\"where,attr\"`\r\n    Addr  string\r\n}\r\ntype Address struct {\r\n    City, State string\r\n}\r\ntype Result struct {\r\n    XMLName xml.Name `xml:\"Person\"`\r\n    Name    string   `xml:\"FullName\"`\r\n    Phone   string\r\n    Email   []Email\r\n    Groups  []string `xml:\"Group>Value\"`\r\n    Address\r\n}\r\nresult := Result{Name: \"none\", Phone: \"none\"}\r\nerr := xml.Unmarshal(data, &result)\r\nfmt.Println(result)\r\n</pre></td></tr>\r\n</table>\r\n\r\n<p>My XML parser written in High Level Assembler executes in less than half the time it takes in GO.\r\n    The example above is in a GO compatible syntax. Compared with the current syntax, it is much easier\r\n    to comprehend for GO beginners who understand XML. Additionally, the current implementation\r\n    only allows for 1 standard implementation. There are several XML standards and advanced features which would be\r\n    better served using an integrated compile time language. The example above shows multiple\r\n    root elements (person & company) which is not available in the current implementation.\r\n</p>\r\n\r\n<h3>Please describe as precisely as possible the change to the language.</h3>\r\n\r\n<p>The minimum changes to the compiler:</p>\r\n\r\n<ol>\r\n    <li>Devise a mechanism to identify these functions to be called (e.g. a new definition statement or maybe use of #).</li>\r\n    <li>During the compile phase that sets data types, call the function that was identified.</li>\r\n    <li>Choose a compile time language. Possibly GO, Python, Java, NodeJS or ???</li>\r\n    <li>Runaway loop timer (user code)</li>\r\n    <li>API's:</li>\r\n        <ul>\r\n            <li>Delete AST's</li>\r\n            <li>Add GO code snippets as AST's.</li>\r\n            <li>Reflection using the AST's prior to the current position</li>\r\n            <li>Notes and errors</li>\r\n            <li>Global variables</li>\r\n        </ul>\r\n</ol>\r\n\r\n<p>Advanced features could be discussed later if this is accepted.</p>\r\n\r\n<h3>What would change in the [https://golang.org/ref/spec](language spec)?</h3>\r\n\r\nThe only change is a new section to cover the integrated compile time language.\r\n\r\n<h3>Please also describe the change informally, as in a class teaching Go.</h3>\r\n\r\nTo be written if this feature is to be implemented. Because of the impact, this feature will be large.\r\n\r\n<h3>Is this change backward compatible?</h3>\r\n\r\nYes.\r\n\r\n<h3>Breaking the Go 1 compatibility guarantee is a large cost and requires a large benefit.</h3>\r\n\r\nGo 1 compatibility is not affected by this change.\r\n\r\n<h3>Show example code before and after the change.</h3>\r\n\r\nSee above.\r\n\r\n<h3>What is the cost of this proposal? (Every language change has a cost).</h3>\r\n\r\nTBD.\r\n\r\n<h3>How many tools (such as vet, gopls, gofmt, goimports, etc.) would be affected?</h3>\r\n\r\n<p> Some generated code may not be available to the tools which may cause false errors such as missing variables.\r\n    Otherwise, keeping the UI syntax consistent with GO should allow most tools to function correctly.\r\n</p>\r\n\r\n<h3>What is the compile time cost?</h3>\r\n\r\n<p> Use of this feature will increase compile time which could be significant depending upon implementation and\r\n    compile time programs written. This can only be determined during the design phase.\r\n</p>\r\n\r\n<h3>What is the run time cost?</h3>\r\n\r\nRun time will never increase. In some cases, run time will decrease.\r\n\r\n<h3>Can you describe a possible implementation?</h3>\r\n\r\n\r\n<h3>Do you have a prototype? (This is not required.)</h3>\r\n\r\nSome UI prototypes are above. Called function would depend upon language chosen.\r\n\r\n<h3>How would the language spec change?</h3>\r\n\r\nAddtion to the language spec.\r\n\r\n<h3>Orthogonality: how does this change interact or overlap with existing features?</h3>\r\n\r\nNot applicable.\r\n\r\n<h3>Is the goal of this change a performance improvement?</h3>\r\n\r\nNo, but that is one of the side benefits.\r\n\r\n<h3>If so, what quantifiable improvement should we expect?</h3>\r\n\r\n<h3>How would we measure it?</h3>\r\n\r\n<h3>Does this affect error handling?</h3>\r\n\r\nNo.\r\n\r\n<h3>If so, how does this differ from previous error handling proposals?</h3>\r\n\r\n<h3>Is this about generics?</h3>\r\n\r\n<p> While not specifically about generics, it solves the basic complaint (repetitive coding).\r\n    You only need look at messages to see how great opportunities are missed because of compiler limitations.\r\n    When will the compiler have multi-lingual messages? When will the compiler have help text for messages.\r\n</p>\r\n\r\n<h3>If so, how does this differ from the the current design draft and the previous generics proposals?</h3>", "labels": ["Go2", "LanguageChange", "Proposal"], "number_of_comments": 6, "created_at": "2020-02-19 05:27:21", "reactions": {"total_count": 6, "+1": 1, "-1": 5, "laugh": 0, "heart": 0, "hooray": 0}}, "567285777": {"author_username": "fishy", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37291, "title": "go.dev: example code should be displayed as package main when rendering", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions, please email go-discovery-feedback@google.com.\r\n-->\r\n \r\n### What is the URL of the page with the issue?\r\n \r\nhttps://pkg.go.dev/github.com/reddit/baseplate.go@v0.0.0-20200219025048-e583f2b8bf9d/thriftpool?tab=doc#example-package\r\n\r\n### What did you expect to see?\r\n \r\nOn godoc.org, the `Example*` functions will be renamed to main when rendering, for example: https://godoc.org/github.com/reddit/baseplate.go/thriftpool#example-package \r\n \r\n### What did you see instead?\r\n\r\nOn pkg.go.dev we kept the original Example function name in the code.\r\n", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 2, "created_at": "2020-02-19 03:08:01", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567147319": {"author_username": "fzipp", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37290, "title": "x/exp/ebnf: support raw strings as used by EBNF in the Go spec", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +a0cf2c8 Tue Feb 18 19:44:25 2020 +0000 darwin/amd64\r\n</pre>\r\n\r\nVersion of the golang.org/x/exp module: v0.0.0 (85f925b)\r\n\r\n### What did you do?\r\n\r\n<pre>\r\n$ ebnflint -start SourceFile $GOROOT/doc/go_spec.html\r\n</pre>\r\n\r\n### What did you expect to see?\r\n\r\nNo output, meaning successful validation.\r\n\r\n### What did you see instead?\r\n\r\n<pre>\r\ngo/doc/go_spec.html:506:20: expected \"term\", found RawString `\\` (and 43 more errors)\r\n</pre>\r\n\r\nThe EBNF in the Go Programming Language Specification uses raw strings for tokens that contain double quotes or backslashes. This is not supported by the x/exp/ebnf package.\r\n\r\nIt could be easily fixed by adding \"scanner.RawString\" at two places in \"ebnf/parser.go\":\r\n\r\n1) In method \"parseToken\"\r\n\r\n<pre>\r\n\tif p.tok == scanner.String || p.tok == scanner.RawString {\r\n</pre>\r\n\r\n2) In method \"parseTerm\"\r\n\r\n<pre>\r\n\tcase scanner.String, scanner.RawString:\r\n</pre>\r\n\r\nAdd a test case to \"ebnf/ebnf_test.go\", e.g.:\r\n\r\n<pre>\r\n\t\"Program = `\\\"` .\",\r\n</pre>\r\n\r\nThe TestSpec test in \"ebnflint/ebnflint_test.go\", which is currently disabled by a build constraint (\"+build !go1.11\"), could be re-enabled.\r\n\r\nThe package documentation probably doesn't need to be updated, because it simply says \"a token is a Go string\", which is also true for raw strings.\r\n", "labels": ["NeedsFix"], "number_of_comments": 2, "created_at": "2020-02-18 20:45:13", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567145050": {"author_username": "GrigoriyMikhalkin", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37289, "title": "cmd/go: escape $WORK in ccompile when -n is set", "body": "Fixes #37012", "labels": ["cla: yes"], "number_of_comments": 3, "created_at": "2020-02-18 20:40:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567084896": {"author_username": "paleozogt", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37288, "title": "cmd/go: gccgo crashes when building json-iterator", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.12.2 gccgo (Ubuntu 9.2.1-9ubuntu2) 9.2.1 20191008 linux/amd64\r\n\r\n$ powerpc64le-linux-gnu-gccgo-9 --version\r\npowerpc64le-linux-gnu-gccgo-9 (Ubuntu 9.2.1-9ubuntu2) 9.2.1 20191008\r\nCopyright (C) 2019 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nI'm using gccgo-9, which I think is the latest.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGOARCH=\"ppc64le\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/apollo/.gocache\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/apollo/Development/json-iterator\"\r\nGOPROXY=\"\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/lib/gcc/x86_64-linux-gnu/9\"\r\nGCCGO=\"/usr/bin/powerpc64le-linux-gnu-gccgo-9\"\r\nCC=\"powerpc64le-linux-gnu-gcc-9\"\r\nCXX=\"x86_64-linux-gnu-g++-9\"\r\nCGO_ENABLED=\"0\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build273883847=/tmp/go-build -gno-record-gcc-switches -funwind-tables\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```\r\nexport GOARCH=ppc64le\r\nexport CC=powerpc64le-linux-gnu-gcc-9\r\ngo get -v github.com/json-iterator/go\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nSuccessful installation of the module.\r\n\r\n### What did you see instead?\r\n\r\ngccgo crashes:\r\n\r\n```\r\ngithub.com/json-iterator/go\r\n# github.com/json-iterator/go\r\ngo1: internal compiler error: in do_get_backend, at go/gofrontend/expressions.cc:4677\r\nPlease submit a full bug report,\r\nwith preprocessed source if appropriate.\r\nSee <file:///usr/share/doc/gcc-9/README.Bugs> for instructions.\r\n```\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 3, "created_at": "2020-02-18 18:41:34", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566957902": {"author_username": "fxamacker", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37284, "title": "go.dev: README tables are not rendered properly (no lines visible, no space between columns)", "body": "Markdown tables are not rendered properly.\r\n\r\n* lines for columns and rows are not visible\r\n* no extra space between columns makes each row look like it's only using one big column\r\n\r\nScreenshots are from: https://github.com/fxamacker/cbor\r\n\r\n### What did you expect to see? (github.com screenshot)\r\n![image](https://user-images.githubusercontent.com/57072051/74747383-80bb0400-522c-11ea-8308-0b0eb3b19578.png)\r\n### What did you see instead? (go.dev screenshot)\r\n![image](https://user-images.githubusercontent.com/57072051/74747518-b19b3900-522c-11ea-808d-39a6d9edc1c5.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 2, "created_at": "2020-02-18 15:09:53", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566936964": {"author_username": "wingyplus", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37283, "title": "x/tools/gopls: function signature show target alias not type alias when hover on function", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +4b4370066f Mon Dec 30 09:34:53 2019 +0000 darwin/amd64\r\n$ gopls version\r\ngolang.org/x/tools/gopls v0.3.1\r\n    golang.org/x/tools/gopls@v0.3.1 h1:yNTWrf4gc4Or0UecjOas5pzOa3BL0WDDyKDV4Wz5VaM=\r\n</pre>\r\n\r\n### What did you do?\r\n\r\nI used gopls with emacs lsp-mode and hover on function name `FromGeo` in [h3](https://github.com/uber/h3-go) library. \r\n\r\n### What did you expect to see?\r\n\r\nfunction signature on hover should return `h3.H3Index`\r\n\r\n### What did you see instead?\r\n\r\nIt's returns `h3._Ctype_ulonglong`\r\n\r\n<img width=\"819\" alt=\"Screen Shot 2563-02-18 at 21 33 40\" src=\"https://user-images.githubusercontent.com/484530/74745824-0c697a80-5297-11ea-9dec-b1f506888a7e.png\">\r\n\r\n", "labels": ["Tools", "gopls"], "number_of_comments": 3, "created_at": "2020-02-18 14:39:09", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566765342": {"author_username": "mvdan", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37281, "title": "cmd/go: add a way to obtain a package's build ID via list -json", "body": "The toolchain computes build IDs of packages from their build input - which I believe includes a package's source code, plus the build IDs of all their dependencies.\r\n\r\nThis can be seen if one runs `go build -x`, as compiler invocations contain `-buildid $BUILD_ID`. Similarly, a package's output file contains such build ID as well, so we can obtain it via these two commands:\r\n\r\n```\r\n$ go list -f {{.Export}} -export os\r\n/home/mvdan/tip/pkg/linux_amd64/os.a\r\n$ go tool buildid $(go list -f {{.Export}} -export os)\r\nWCQPVNh2igTNOQyg4V2a/aDZysAb7fmq4QDTG8hDz\r\n```\r\n\r\nThis is rather unfortunate for tools that need to look at thousands of packages at a time, though. One could use the build ID to see if a package hasn't had any changes, and thus avoid extra work. Even if we have thousands of packages, we can load them all at once with one single `go list -json` call - however, we will need one extra exec call to `go tool buildid` per package, whose cost can add up quickly.\r\n\r\nI propose that we add a new field to `go list -json` to expose said build ID. For example, `BuildID string`. It would be fine if populating this field required a flag like `-export`.\r\n\r\nI also realise that build IDs are an internal toolchain detail, which should only matter to compiler and toolchain authors. However, there are plenty of third-party tools out there which are designed to be closely coupled with the toolchain or compiler. For example, tools designed to run via `go build -toolexec=mytool` can use build IDs to avoid work, or to produce deterministic output based on the input. This is exactly the kind of thing I do for a [code obfuscator](https://github.com/mvdan/garble), only with lots of `go tool buildid` calls.\r\n\r\nI also am not asking for the build ID format to be documented or stabilized. A tool shouldn't interpret the string as more than a hash if it wants to remain compatible with past and future Go versions. Or, if it really wants to parse the hash, it should only do so with very specific versions of the Go tool.\r\n\r\n/cc @dominikh ", "labels": ["FeatureRequest", "NeedsDecision"], "number_of_comments": 1, "created_at": "2020-02-18 09:40:59", "reactions": {"total_count": 4, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566702611": {"author_username": "beoran", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37280, "title": "proposal: Go 2: implement an interface based on function signature if method name is ambiguous", "body": "## Background\r\n\r\nI found the following criticism of Go language here: https://www.quora.com/What-reasons-are-there-to-not-use-Go-programming-language?share=1\r\n\r\nSeveral points are mentioned, but the one that caught my eye is the following:\r\n\r\n> Types always implement interfaces implicitly; you just give your type methods that happen to have the same names, arguments, and return values as the interface in order to implement it.\r\n> Also, you can't overload functions or methods.\r\nNeither of these two are particularly bad on their own. Indeed, either one on its own poses at worst a minor inconvenience. However, the consequence of having both in the same language creates the very real danger of being unable to use useful or possibly necessary libraries (e.g. your Go code needs to interact with some other service your company uses, and the only way to do that is with a Go library that team wrote).\r\nThe sneaky thing about implicitly implemented interfaces is that the interface's methods' names effectively transcend all namespaces. And that's particularly problematic due to Go's love of short, generic method names like Read() and New() and Create(). This is a global namespace name collision bug -- you know, the kind the rest of the software industry has been rid of for several decades.\r\n> For example, let's say I have two third-party packages, foo and bar. I want to make a type that implements both foo.Foo and bar.Bar.\r\nfoo.Foo is an interface that requires a method Copy() Foo,\r\nand bar.Bar is an interface that requires a method Copy() (Bar, error).\r\nUpon seeing this, I know I'm screwed. I can't overload a method called Copy() on my type, so I can never satisfy both interfaces. I simply can't continue, and for reasons that are entirely out of my hands. The best I can do is define a pair of types, one that implements foo.Foo and one that implements bar.Bar, and interveave their operation in some hideous, hacky way.\r\n\r\nI thought this could perhaps be fixed by putting two structs that implement the two interfaces  together in one struct, however doesn't quite work out nicely. See the following example:\r\n\r\n```go\r\npackage main\r\n\r\ntype Fooer interface {\r\n\tFoo() int\r\n}\r\n\r\ntype Fooer2 interface {\r\n \tFoo() string\r\n}\r\n\r\ntype DoFoo1 struct {\r\n}\r\n\r\ntype DoFoo2 struct {\r\n}\r\n\r\n\r\nfunc (DoFoo1) Foo() int {\r\n\treturn 400\r\n}\r\n\r\nfunc (DoFoo2) Foo() string {\r\n\treturn \"Foo\"\r\n}\r\n\r\ntype DoFoo struct {\r\n\tDoFoo1\r\n\tDoFoo2\r\n}\r\n\r\nvar _ Fooer = DoFoo1{}\r\nvar _ Fooer2 = DoFoo2{}\r\nvar _ Fooer = DoFoo{}\r\nvar _ Fooer2 = DoFoo{}\r\n\r\nfunc main() {\r\n}\r\n```\r\nhttps://play.golang.org/p/Q6Vwpb019-6\r\n\r\nThe compiler complains:\r\n```\r\n./prog.go:33:5: DoFoo.Foo is ambiguous\r\n./prog.go:33:5: cannot use DoFoo literal (type DoFoo) as type Fooer in assignment:\r\n\tDoFoo does not implement Fooer (missing Foo method)\r\n./prog.go:34:5: DoFoo.Foo is ambiguous\r\n./prog.go:34:5: cannot use DoFoo literal (type DoFoo) as type Fooer2 in assignment:\r\n\tDoFoo does not implement Fooer2 (missing Foo method)\r\n```\r\n## Proposal\r\n\r\nIn this case, _there is no actual ambiguity_, in because the signature of the two Foo functions is different. The Foo from DoDoo1 implements Fooer, and the Foo from DoFoo2 implements Fooer2. The code above should work. The compiler should automatically select the correct function based on the type signature of the methods to resolve the ambiguous name. Only if none of the candidates has required type signature, or if there are several with the required signature, then the compiler should raise an error. This would then also address the main criticism of interfaces I cited above.\r\n\r\nThis is not just a theoretical issue, there are indeed cases where it's hard to implement two different interfaces, normally from different packages, with one type, because there are name clashes.\r\n\r\n## Proposal template\r\n\r\n- Would you consider yourself a novice, intermediate, or experienced Go programmer? \r\nI am experienced, I have been using Go for 10 years since before v1.0.\r\n- What other languages do you have experience with?\r\nBatch files, Basic, C, C++, D, Java, Javascript, Lua, Objective-C, Oberon, Pascal, PHP, Python, R, Ruby, Shell scripts, Visual Basic, ... \r\n- Would this change make Go easier or harder to learn, and why?\r\nIt would not make Go easier to learn, but also not harder. It is something a novice might reasonably consider that it should work.\r\n- Has this idea, or one like it, been proposed before?\r\nAFAIK, no.\r\n- Who does this proposal help, and why?\r\nThis proposal would help people who like the person criticising go would like to satisfy two different interfaces which have methods that have the same names but different signatures. . \r\n- Is this change backward compatible?\r\nYes, currently this is a compilation error. This proposal is to loosen an existing restriction. \r\n- Show example code before and after the change. \r\n\r\n_Before_:\r\nThe code above can be made to work by selecting a member of the DoFoo struct to satisfy one of the interfaces.\r\n```go\r\nvar df = DoFoo{}\r\nvar _ Fooer = df.DoFoo1\r\nvar _ Fooer2 = df.DoFoo2\r\n```\r\n_After_:\r\nThe compiler automatically select the sub-struct that correctly implements the interface. \r\n```go\r\nvar df = DoFoo{}\r\nvar _ Fooer = df // gets assigned to df.DoFoo1 automatically\r\nvar _ Fooer2 = df // gets assigned to df.DoFoo2 automatically\r\n```\r\nThis would also work for functions with interface parameters.\r\n\r\n- What is the cost of this proposal? (Every language change has a cost).\r\n    The new compiler feature has to be implemented,  documented and tested.\r\n  - How many tools (such as vet, gopls, gofmt, goimports, etc.) would be affected?\r\n    The gopls tool may or may not have to be updated to know about this new feature. \r\n  - What is the compile time cost?\r\n    Low, the compiler has at do a few extra field look ups, but it should already have that data available.\r\n  - What is the run time cost?\r\n     None.\r\n- Can you describe a possible implementation?\r\n  At compile time the compiler selects the sub-struct that satisfies the interface automatically. I think this should be relatively easy to implement. \r\n- How would the language spec change?\r\n  \"Interface types\" needs to be amended to specify this new feature of the language.\r\n- Orthogonality: how does this change interact or overlap with existing features?\r\n  It extends the current interface feature in a small but useful way.\r\n- Is the goal of this change a performance improvement?\r\n  No.\r\n- Does this affect error handling?\r\n  Not directly, apart from the fact that error is an interface.\r\n- Is this about generics?\r\n  No.\r\n", "labels": ["Go2", "LanguageChange", "Proposal"], "number_of_comments": 3, "created_at": "2020-02-18 07:37:09", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566655742": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37279, "title": "x/tools/gopls: only show outside of GOPATH/modules warning once", "body": "See https://github.com/microsoft/vscode-go/issues/3055.", "labels": ["Tools", "gopls"], "number_of_comments": 0, "created_at": "2020-02-18 05:24:09", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566649180": {"author_username": "hansnielsen", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37278, "title": "x/crypto/ssh: support RSA SHA-2 host key signatures", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n1.13.8\r\n</pre>\r\n\r\nVersion of `x/crypto`: `1d94cc7ab1c630336ab82ccb9c9cda72a875c382`\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nn/a\r\n</pre></details>\r\n\r\n### What did you do?\r\nI tried to connect to an OpenSSH 8.2 server with the `ssh-rsa` host key algorithm disabled on the server. I also tried to run an `x/crypto/ssh` server and connect from an OpenSSH client with `ssh-rsa` disabled. Lastly, I tried to sign a host certificate with `ssh.Certificate.SignCert` with a SHA-2 based signature.\r\n\r\n### What did you expect to see?\r\nI expected the RSA host key and certificate to validate successfully with the new SHA-2 based signatures introduced in [RFC 8332](https://tools.ietf.org/html/rfc8332). I also expected to be able to sign host certificates and have them automatically received a SHA-2 based signature.\r\n\r\nOpenSSH has already deprecated `ssh-rsa` (i.e. SHA-1 based) signatures in host certificates in version 8.2 because of safety reasons. They can still be used by the host key algorithm must be manually specified.\r\n\r\n### What did you see instead?\r\nI was unable to connect either as a server or a client if `ssh-rsa` wasn't enabled while using RSA host keys or host certificates. I was able to sign a certificate with the `AlgorithmSigner` wrapper approach (i.e. by forcefully overriding `Sign`) proposed by @stoggi in #36261, but it's not a great experience for users.", "labels": ["NeedsDecision", "Proposal-Crypto"], "number_of_comments": 9, "created_at": "2020-02-18 05:06:43", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566591187": {"author_username": "josharian", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37275, "title": "cmd/compile: optimize small runtime.memequal calls", "body": "In the SSA backend, we could optimize a call to runtime.memequal in which the length is small and one argument points to a readonly data symbol. We could replace it by reading the readonly data and checking the bytes of the other argument directly.\r\n\r\nThis is similar to the optimization in walk.go for comparing against a constant string, and could potentially supercede it. The optimization in walk.go doesn't always trigger. An example is using strings.HasPrefix to check for a constant prefix; the call gets inlined, but walk.go isn't able to do the optimization because its analysis isn't powerful enough.\r\n\r\nLow priority.\r\n", "labels": ["NeedsFix", "Performance"], "number_of_comments": 1, "created_at": "2020-02-18 01:28:58", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566590105": {"author_username": "josharian", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37274, "title": "cmd/compile: combine int tests when comparing against a constant string", "body": "To compare against \"abc\", we currently emit code to test whether uint16(first two bytes)==uint16(\"ab\") and then whether (third byte)==\"c\".\r\n\r\nI suspect that it'd be more efficient to load the three bytes into the first three bytes of a uint32 (two loads combined with `|`) and then compare that to uint32(\"abc\\0\").\r\n\r\nI'm not sure whether we could do this with comparison-combining rewrite rules (note that the loads have side-effects in general, but we're sure in this case they won't fault) or whether it'd be better to fix this in walk.go, where this optimization is generated.\r\n\r\nLow priority.\r\n", "labels": ["NeedsFix", "Performance"], "number_of_comments": 3, "created_at": "2020-02-18 01:25:01", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566568812": {"author_username": "richardwilkes", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37273, "title": "syscall: can't call Windows function that returns float", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n<pre>\r\n$ go version\r\ngo version go1.13.8 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/rich/Library/Caches/go-build\"\r\nGOENV=\"/Users/rich/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"jaxf-github.fanatics.corp/\"\r\nGONOSUMDB=\"jaxf-github.fanatics.corp/\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/rich/go\"\r\nGOPRIVATE=\"jaxf-github.fanatics.corp/\"\r\nGOPROXY=\"direct\"\r\nGOROOT=\"/usr/local/Cellar/go/1.13.8/libexec\"\r\nGOSUMDB=\"off\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.13.8/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/s9/9s3fk2mx5f936dkcp66ltwsc0000gn/T/go-build181499683=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nThis is essentially a request for https://github.com/golang/go/issues/3588 to be solved rather than just closed out and ignored.\r\n\r\nCurrently, it is not possible to retrieve a floating point value returned by a syscall. As noted in the original report, that's not very common in the old Windows APIs, but it does occur in many of the newer APIs, especially around graphics. My particular case is the Direct2D and DirectWrite APIs, although I've seen the need elsewhere as well.\r\n\r\nI've looked, and it seems to be fairly straight-forward to add this support via a new set of functions (SyscallFloat, perhaps) -- however, it currently seems impossible to do so without doing it inside the `runtime` and `syscall` packages, which would require a fork, since there is various internal state that an outside package cannot access.\r\n\r\nIf we can't have the additional call(s) created for some reason, can we instead at least expose enough of the internals that an external module could provide the functionality?\r\n\r\nI'd be happy to create the necessary PR to make either scenario work.\r\n\r\nOne thing to note: I realize I could get around this by using cgo. However, as most would likely agree, using cgo on the Windows platform is a nightmare. It's generally quite tolerable on platforms like macOS and linux, where the compiler toolchain is easily installed, but Windows makes that difficult and I've found getting downstream developers to be able to get their Windows machine setup properly for cgo to require a lot of hand-holding, unlike with other platforms, essentially making it a non-starter.", "labels": ["NeedsInvestigation", "OS-Windows"], "number_of_comments": 8, "created_at": "2020-02-17 23:55:39", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566554861": {"author_username": "paleozogt", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37272, "title": "cmd/go: when building gccgo, GOPKGPATH encoding does not match pkgpath encoding", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.12.2 gccgo (Ubuntu 9.2.1-9ubuntu2) 9.2.1 20191008 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nI'm using `gccgo-9`, which I think is the latest release.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/apollo/.gocache\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/apollo/Development/weird-gopath\"\r\nGOPROXY=\"\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/lib/gcc/x86_64-linux-gnu/9\"\r\nGCCGO=\"/usr/bin/x86_64-linux-gnu-gccgo-9\"\r\nCC=\"x86_64-linux-gnu-gcc-9\"\r\nCXX=\"x86_64-linux-gnu-g++-9\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build492198966=/tmp/go-build -gno-record-gcc-switches -funwind-tables\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nCode: https://play.golang.org/p/CwSEukNuiAg\r\n\r\n```\r\n// main.go\r\n\r\npackage main\r\n\r\nimport \"fmt\"\r\nimport \"golang.org/x/tools/container/intsets\"\r\n\r\nfunc main() {\r\n\tvar foo intsets.Sparse\r\n\tfmt.Println(foo)\r\n}\r\n```\r\n\r\nBuilding with regular go works:\r\n\r\n```\r\n> go version\r\ngo version go1.12.2 linux/amd64\r\n> CGO_ENABLED=1 go build -v -i -o foo\r\n> ./foo\r\n{{0 [0 0 0 0] <nil> <nil>}}\r\n```\r\n\r\nwhile building with gccgo fails:\r\n\r\n```\r\n> go version\r\ngo version go1.12.2 gccgo (Ubuntu 9.2.1-9ubuntu2) 9.2.1 20191008 linux/amd64\r\n> CGO_ENABLED=1 go build -v -i -o foo\r\ngithub.com/paleozogt/golangtoolstest\r\n# github.com/paleozogt/golangtoolstest\r\n/usr/bin/ld: /home/apollo/Development/weird-gopath/pkg/gccgo_linux_amd64/golang.org/x/tools/container/libintsets.a(_go_.o): in function `golang.org..z2fx..z2ftools..z2fcontainer..z2fintsets.block.len':\r\n/home/apollo/Development/weird-gopath/src/golang.org/x/tools/container/intsets/sparse.go:137: undefined reference to `golang.org..z2fx..z2ftools..z2fcontainer..z2fintsets.popcount'\r\n/usr/bin/ld: /home/apollo/Development/weird-gopath/pkg/gccgo_linux_amd64/golang.org/x/tools/container/libintsets.a(_go_.o): in function `intsets.nlz':\r\n/home/apollo/Development/weird-gopath/src/golang.org/x/tools/container/intsets/util.go:51: undefined reference to `golang.org..z2fx..z2ftools..z2fcontainer..z2fintsets.popcount'\r\ncollect2: error: ld returned 1 exit status\r\n\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nBuild success.\r\n\r\n### What did you see instead?\r\n\r\nBuild failure.", "labels": ["NeedsFix"], "number_of_comments": 3, "created_at": "2020-02-17 23:13:04", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566535516": {"author_username": "kamilez", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37271, "title": "x/tools/gopls: incorrect active parameter in signature help", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngopls version 0.3.0 - 0.3.2\r\ngo version go1.13.5 linux/amd64\r\ncoc.nvim version: 0.0.74-bc017b02e6\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n### What did you expect to see?\r\nProperly underlined active function parameter in documentation window on function argument typing.\r\n### What did you see instead?\r\nThe underline doesn't change even on further parameters typing. The problem appears since commit:\r\nab094738a9e44c055535159ddc1e5adcb0386b29\r\n(one commit before works perfectly fine)\r\n", "labels": ["Tools", "gopls"], "number_of_comments": 1, "created_at": "2020-02-17 22:02:32", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566520918": {"author_username": "leitzler", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37269, "title": "x/tools/internal/fastwalk: \"checkptr: unsafe pointer conversion\" during darwin race test", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14rc1 darwin/amd64\r\n$ go list -m golang.org/x/tools golang.org/x/tools/gopls\r\ngolang.org/x/tools v0.0.0-20200214225126-5916a50871fb\r\ngolang.org/x/tools/gopls v0.1.8-0.20200214225126-5916a50871fb\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nIt doesn't reproduce on tip (88e564ed) oddly enough.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/pontus/Library/Caches/go-build\"\r\nGOENV=\"/Users/pontus/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/pontus/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/Users/pontus/sdk/go1.14rc1\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/Users/pontus/sdk/go1.14rc1/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/var/folders/xm/ls208xd174v95pgd20rn_qbh0000gn/T/tmp.fpwCXEm4/govim/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/xm/ls208xd174v95pgd20rn_qbh0000gn/T/go-build000868657=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\nI ran the [govim](https://github.com/govim/govim) test suite using `-race` under go 1.14rc1. It involves a lot of interaction with gopls. During the tests gopls stack dumps.\r\n\r\nRepro (requires vim 8.2 installed):\r\n```\r\n$ cd $(mktemp -d) && git clone https://github.com/govim/govim\r\n$ cd govim\r\n$ git checkout 83e6313d8a087ff127ba7fae2af815d34e1b7b8a\r\n$ VIM_FLAVOR=vim go1.14rc1 test ./... -race\r\n```\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\nTest pass\r\n\r\n### What did you see instead?\r\n```\r\n2020-02-17T21:54:28.962796_#15: gopls stderr: fatal error: checkptr: unsafe pointer conversion\r\n2020-02-17T21:54:28.966302_#15: gopls stderr:\r\n2020-02-17T21:54:28.966382_#15: gopls stderr: goroutine 1540 [running]:\r\n2020-02-17T21:54:28.966433_#15: gopls stderr: runtime.throw(0x1ccb40c, 0x23)\r\n2020-02-17T21:54:28.966485_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/runtime/panic.go:1112 +0x72 fp=0xc0002bfba8 sp=0xc0002bfb78 pc=0x1073a12\r\n2020-02-17T21:54:28.966528_#15: gopls stderr: runtime.checkptrAlignment(0xc0002c1c08, 0x1c44820, 0x1)\r\n2020-02-17T21:54:28.966559_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/runtime/checkptr.go:18 +0xb7 fp=0xc0002bfbd8 sp=0xc0002bfba8 pc=0x1045ac7\r\n2020-02-17T21:54:28.966589_#15: gopls stderr: golang.org/x/tools/internal/fastwalk.parseDirEnt(0xc0002c1c08, 0x148, 0x170, 0x30, 0xc001137b80, 0x16, 0x0)\r\n2020-02-17T21:54:28.966619_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk_unix.go:80 +0x77 fp=0xc0002bfc80 sp=0xc0002bfbd8 pc=0x1383987\r\n2020-02-17T21:54:28.966662_#15: gopls stderr: golang.org/x/tools/internal/fastwalk.readDir(0xc000cd57d0, 0x27, 0xc0002c1e10, 0x0, 0x0)\r\n2020-02-17T21:54:28.966694_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk_unix.go:46 +0x173 fp=0xc0002c1dc8 sp=0xc0002bfc80 pc=0x1383353\r\n2020-02-17T21:54:28.966734_#15: gopls stderr: golang.org/x/tools/internal/fastwalk.(*walker).walk(0xc001955500, 0xc000cd57d0, 0x27, 0x1, 0x1, 0x0)\r\n2020-02-17T21:54:28.966775_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk.go:195 +0x7b fp=0xc0002c1e30 sp=0xc0002c1dc8 pc=0x138309b\r\n2020-02-17T21:54:28.966813_#15: gopls stderr: golang.org/x/tools/internal/fastwalk.(*walker).doWork(0xc001955500, 0xc0015e7610)\r\n2020-02-17T21:54:28.966850_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk.go:134 +0x24b fp=0xc0002c1fd0 sp=0xc0002c1e30 pc=0x1382acb\r\n2020-02-17T21:54:28.966882_#15: gopls stderr: runtime.goexit()\r\n2020-02-17T21:54:28.966908_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/runtime/asm_amd64.s:1375 +0x1 fp=0xc0002c1fd8 sp=0xc0002c1fd0 pc=0x10a7dc1\r\n2020-02-17T21:54:28.966955_#15: gopls stderr: created by golang.org/x/tools/internal/fastwalk.Walk\r\n2020-02-17T21:54:28.966986_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk.go:81 +0x35a\r\n2020-02-17T21:54:28.967011_#15: gopls stderr:\r\n2020-02-17T21:54:28.967048_#15: gopls stderr: goroutine 1 [syscall]:\r\n2020-02-17T21:54:28.967085_#15: gopls stderr: syscall.syscall(0x10d35c0, 0x0, 0xc000380000, 0x1000, 0x0, 0x0, 0x0)\r\n2020-02-17T21:54:28.967111_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/runtime/sys_darwin.go:63 +0x2e\r\n2020-02-17T21:54:28.967142_#15: gopls stderr: syscall.read(0x0, 0xc000380000, 0x1000, 0x1000, 0xc000120018, 0x0, 0x800000)\r\n2020-02-17T21:54:28.967188_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/syscall/zsyscall_darwin_amd64.go:1242 +0x8e\r\n2020-02-17T21:54:28.967216_#15: gopls stderr: syscall.Read(0x0, 0xc000380000, 0x1000, 0x1000, 0x0, 0xc000202e10, 0xc0ffffffff)\r\n2020-02-17T21:54:28.967254_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/syscall/syscall_unix.go:189 +0x5b\r\n2020-02-17T21:54:28.967286_#15: gopls stderr: internal/poll.(*FD).Read(0xc000120000, 0xc000380000, 0x1000, 0x1000, 0x0, 0x0, 0x0)\r\n2020-02-17T21:54:28.967315_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/internal/poll/fd_unix.go:165 +0x1c8\r\n2020-02-17T21:54:28.967353_#15: gopls stderr: os.(*File).read(...)\r\n2020-02-17T21:54:28.967381_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/os/file_unix.go:263\r\n2020-02-17T21:54:28.967419_#15: gopls stderr: os.(*File).Read(0xc00011e000, 0xc000380000, 0x1000, 0x1000, 0x0, 0xeaf, 0x1)\r\n2020-02-17T21:54:28.967478_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/os/file.go:116 +0xa7\r\n2020-02-17T21:54:28.967520_#15: gopls stderr: bufio.(*Reader).fill(0xc0001f2de0)\r\n2020-02-17T21:54:28.967558_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/bufio/bufio.go:100 +0x19a\r\n2020-02-17T21:54:28.967591_#15: gopls stderr: bufio.(*Reader).ReadSlice(0xc0001f2de0, 0xa, 0xc000214c00, 0x104c458, 0x20, 0xc00012b120, 0xc000202f10)\r\n2020-02-17T21:54:28.968300_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/bufio/bufio.go:359 +0x96\r\n2020-02-17T21:54:28.968346_#15: gopls stderr: bufio.(*Reader).ReadBytes(0xc0001f2de0, 0xa, 0x0, 0x8, 0x34ac190f4c216ddf, 0xc0001cb320, 0x1084d77)\r\n2020-02-17T21:54:28.968383_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/bufio/bufio.go:438 +0x9b\r\n2020-02-17T21:54:28.968414_#15: gopls stderr: bufio.(*Reader).ReadString(...)\r\n2020-02-17T21:54:28.968452_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/bufio/bufio.go:475\r\n2020-02-17T21:54:28.968499_#15: gopls stderr: golang.org/x/tools/internal/jsonrpc2.(*headerStream).Read(0xc000129b00, 0x1e57ae0, 0xc0001fae40, 0x14bbb5e, 0x0, 0x0, 0xc0001cb708, 0x107e08e, 0xc0001cb390)\r\n2020-02-17T21:54:28.968555_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/jsonrpc2/stream.go:97 +0xb9\r\n2020-02-17T21:54:28.968592_#15: gopls stderr: golang.org/x/tools/internal/lsp/protocol.(*loggingStream).Read(0xc000129b20, 0x1e57ae0, 0xc0001fae40, 0xc00029e180, 0xc0001f2e40, 0x1e57ae0, 0xc000202d80, 0x0, 0x0)\r\n2020-02-17T21:54:28.968624_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/lsp/protocol/log.go:26 +0x78\r\n2020-02-17T21:54:28.968651_#15: gopls stderr: golang.org/x/tools/internal/jsonrpc2.(*Conn).Run(0xc0001f2e40, 0x1e57ae0, 0xc0001fae40, 0x1e34550, 0x1c5a800)\r\n2020-02-17T21:54:28.968687_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/jsonrpc2/jsonrpc2.go:317 +0xd2\r\n2020-02-17T21:54:28.968731_#15: gopls stderr: golang.org/x/tools/internal/lsp/lsprpc.(*StreamServer).ServeStream(0xc0001138e0, 0x1e57a60, 0xc00011c000, 0x1e4c0a0, 0xc000129b20, 0xc0001138c0, 0x0)\r\n2020-02-17T21:54:28.968774_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/lsp/lsprpc/lsprpc.go:55 +0x607\r\n2020-02-17T21:54:28.968818_#15: gopls stderr: golang.org/x/tools/internal/lsp/cmd.(*Serve).Run(0xc0001fc370, 0x1e57a60, 0xc00011c000, 0xc00012a030, 0x0, 0x0, 0x0, 0x0)\r\n2020-02-17T21:54:28.968858_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/lsp/cmd/serve.go:83 +0x5db\r\n2020-02-17T21:54:28.968901_#15: gopls stderr: golang.org/x/tools/internal/tool.Run(0x1e57a60, 0xc00011c000, 0x1e5b260, 0xc0001fc370, 0xc00012a030, 0x0, 0x0, 0x0, 0x0)\r\n2020-02-17T21:54:28.968931_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/tool/tool.go:152 +0x305\r\n2020-02-17T21:54:28.968967_#15: gopls stderr: golang.org/x/tools/internal/lsp/cmd.(*Application).Run(0xc0001fc340, 0x1e57a60, 0xc00011c000, 0xc00012a030, 0x0, 0x0, 0x0, 0x0)\r\n2020-02-17T21:54:28.969002_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/lsp/cmd/cmd.go:143 +0x4b9\r\n2020-02-17T21:54:28.969042_#15: gopls stderr: golang.org/x/tools/internal/tool.Run(0x1e57a60, 0xc00011c000, 0x1e5b220, 0xc0001fc340, 0xc00012a010, 0x3, 0x3, 0x0, 0x0)\r\n2020-02-17T21:54:28.969071_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/tool/tool.go:152 +0x305\r\n2020-02-17T21:54:28.969097_#15: gopls stderr: golang.org/x/tools/internal/tool.Main(0x1e57a60, 0xc00011c000, 0x1e5b220, 0xc0001fc340, 0xc00012a010, 0x3, 0x3)\r\n2020-02-17T21:54:28.969133_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/tool/tool.go:91 +0x1b6\r\n2020-02-17T21:54:28.969171_#15: gopls stderr: main.main()\r\n2020-02-17T21:54:28.969197_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools/gopls@v0.1.8-0.20200214225126-5916a50871fb/main.go:25 +0x113\r\n2020-02-17T21:54:28.969232_#15: gopls stderr:\r\n2020-02-17T21:54:28.969258_#15: gopls stderr: goroutine 1538 [runnable]:\r\n2020-02-17T21:54:28.969286_#15: gopls stderr: golang.org/x/tools/internal/fastwalk.(*walker).walk(0xc001955500, 0xc000cd5530, 0x22, 0x1, 0x1, 0x0)\r\n2020-02-17T21:54:28.969316_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk.go:184 +0x1b5\r\n2020-02-17T21:54:28.969367_#15: gopls stderr: golang.org/x/tools/internal/fastwalk.(*walker).doWork(0xc001955500, 0xc0015e7610)\r\n2020-02-17T21:54:28.969405_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk.go:134 +0x24b\r\n2020-02-17T21:54:28.969442_#15: gopls stderr: created by golang.org/x/tools/internal/fastwalk.Walk\r\n2020-02-17T21:54:28.969472_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk.go:81 +0x35a\r\n2020-02-17T21:54:28.969507_#15: gopls stderr:\r\n2020-02-17T21:54:28.969543_#15: gopls stderr: goroutine 1539 [runnable]:\r\n2020-02-17T21:54:28.969568_#15: gopls stderr: syscall.syscallX(0x10d3610, 0xd, 0x0, 0x1, 0xa, 0x0, 0x0)\r\n2020-02-17T21:54:28.969595_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/runtime/sys_darwin_64.go:16 +0x2e\r\n2020-02-17T21:54:28.969640_#15: gopls stderr: syscall.Seek(0xd, 0x0, 0x1, 0xffffffffffffffff, 0x1, 0x0)\r\n2020-02-17T21:54:28.969674_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/syscall/zsyscall_darwin_amd64.go:1363 +0x6b\r\n2020-02-17T21:54:28.969707_#15: gopls stderr: syscall.Getdirentries(0xd, 0xc0001c5d78, 0x2000, 0x2000, 0xc0001c5c60, 0x0, 0x0, 0x0)\r\n2020-02-17T21:54:28.969736_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/syscall/syscall_darwin.go:389 +0x7d\r\n2020-02-17T21:54:28.969761_#15: gopls stderr: syscall.ReadDirent(0xd, 0xc0001c5d78, 0x2000, 0x2000, 0xc0021502a0, 0x7, 0xc000000000)\r\n2020-02-17T21:54:28.969787_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/syscall/syscall_bsd.go:71 +0x97\r\n2020-02-17T21:54:28.969820_#15: gopls stderr: golang.org/x/tools/internal/fastwalk.readDir(0xc000acaba0, 0x27, 0xc0001c7e10, 0x0, 0x0)\r\n2020-02-17T21:54:28.969856_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk_unix.go:38 +0x47d\r\n2020-02-17T21:54:28.969886_#15: gopls stderr: golang.org/x/tools/internal/fastwalk.(*walker).walk(0xc001955500, 0xc000acaba0, 0x27, 0x1, 0x1, 0x0)\r\n2020-02-17T21:54:28.969916_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk.go:195 +0x7b\r\n2020-02-17T21:54:28.969946_#15: gopls stderr: golang.org/x/tools/internal/fastwalk.(*walker).doWork(0xc001955500, 0xc0015e7610)\r\n2020-02-17T21:54:28.969992_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk.go:134 +0x24b\r\n2020-02-17T21:54:28.970031_#15: gopls stderr: created by golang.org/x/tools/internal/fastwalk.Walk\r\n2020-02-17T21:54:28.970078_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk.go:81 +0x35a\r\n2020-02-17T21:54:28.970111_#15: gopls stderr:\r\n2020-02-17T21:54:28.970145_#15: gopls stderr: goroutine 40 [chan receive]:\r\n2020-02-17T21:54:28.970178_#15: gopls stderr: golang.org/x/tools/internal/lsp/debug.(*Instance).MonitorMemory.func1(0xc0001f4190, 0xc00011ced0, 0xc0001fc438, 0x1e57a60, 0xc00011c000)\r\n2020-02-17T21:54:28.970217_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/lsp/debug/serve.go:341 +0x89\r\n2020-02-17T21:54:28.970243_#15: gopls stderr: created by golang.org/x/tools/internal/lsp/debug.(*Instance).MonitorMemory\r\n2020-02-17T21:54:28.970268_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/lsp/debug/serve.go:339 +0xba\r\n2020-02-17T21:54:28.970294_#15: gopls stderr:\r\n2020-02-17T21:54:28.970331_#15: gopls stderr: goroutine 13 [select]:\r\n2020-02-17T21:54:28.970363_#15: gopls stderr: golang.org/x/tools/internal/imports.(*ModuleResolver).scan(0xc000979d60, 0x1e57a60, 0xc00011c000, 0xc001b3f880, 0x0, 0x0)\r\n2020-02-17T21:54:28.970392_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/imports/mod.go:476 +0x53b\r\n2020-02-17T21:54:28.970418_#15: gopls stderr: golang.org/x/tools/internal/imports.addExternalCandidates(0xc000936120, 0xc0019550e0, 0xc0001ce587, 0x6a, 0x0, 0x0)\r\n2020-02-17T21:54:28.970450_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/imports/fix.go:948 +0x426\r\n2020-02-17T21:54:28.970486_#15: gopls stderr: golang.org/x/tools/internal/imports.getFixes(0xc0019b4140, 0xc000ee2080, 0xc0001ce587, 0x6a, 0xc000446000, 0xae, 0xc001b3e5a0, 0xc000ee2080, 0x0, 0x0)\r\n2020-02-17T21:54:28.970514_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/imports/fix.go:578 +0x5ee\r\n2020-02-17T21:54:28.970579_#15: gopls stderr: golang.org/x/tools/internal/imports.FixImports(0xc0001ce587, 0x6a, 0xc0005c28f0, 0x6c, 0xae, 0xc001b3e5a0, 0xae, 0xc001a5e750, 0x0, 0x0, ...)\r\n2020-02-17T21:54:28.970611_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/imports/imports.go:85 +0x265\r\n2020-02-17T21:54:28.970644_#15: gopls stderr: golang.org/x/tools/internal/lsp/source.computeImportEdits(0x1e57ae0, 0xc000607e30, 0x1e66e80, 0xc0002b8000, 0x1e57ca0, 0xc000b07580, 0xc001b3e5a0, 0xc001b3e5a0, 0x20, 0x0, ...)\r\n2020-02-17T21:54:28.970683_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/lsp/source/format.go:113 +0x218\r\n2020-02-17T21:54:28.970712_#15: gopls stderr: golang.org/x/tools/internal/lsp/source.AllImportsFixes.func1(0xc001b3e5a0, 0xc001b3e5a0, 0x70)\r\n2020-02-17T21:54:28.970738_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/lsp/source/format.go:88 +0x10c\r\n2020-02-17T21:54:28.970772_#15: gopls stderr: golang.org/x/tools/internal/lsp/cache.(*view).RunProcessEnvFunc(0xc0002b8000, 0x1e57ae0, 0xc000607e30, 0xc0021afd10, 0x0, 0x0)\r\n2020-02-17T21:54:28.970803_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/lsp/cache/view.go:296 +0x232\r\n2020-02-17T21:54:28.970840_#15: gopls stderr: golang.org/x/tools/internal/lsp/source.AllImportsFixes(0x1e57ae0, 0xc000607e30, 0x1e68780, 0xc0005947e0, 0x1e561a0, 0xc000594780, 0x0, 0xc000129ba0, 0x2, 0x2, ...)\r\n2020-02-17T21:54:28.970869_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/lsp/source/format.go:87 +0x66a\r\n2020-02-17T21:54:28.970894_#15: gopls stderr: golang.org/x/tools/internal/lsp.(*Server).codeAction(0xc0001f2f00, 0x1e57ae0, 0xc000202d80, 0xc00039bd80, 0xc00039bd80, 0x0, 0x0, 0x0, 0xc00085eaa8)\r\n2020-02-17T21:54:28.970929_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/lsp/code_action.go:68 +0xb68\r\n2020-02-17T21:54:28.970960_#15: gopls stderr: golang.org/x/tools/internal/lsp.(*Server).CodeAction(0xc0001f2f00, 0x1e57ae0, 0xc000202d80, 0xc00039bd80, 0xc00039bd80, 0x0, 0x0, 0x1c969c1, 0x6)\r\n2020-02-17T21:54:28.970995_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/lsp/server_gen.go:12 +0x67\r\n2020-02-17T21:54:28.971031_#15: gopls stderr: golang.org/x/tools/internal/lsp/protocol.serverHandler.Deliver(0x1e71340, 0xc0001f2f00, 0x1e57ae0, 0xc000202d80, 0xc00029e180, 0xc00029e100, 0x1071f00)\r\n2020-02-17T21:54:28.971064_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/lsp/protocol/tsserver.go:433 +0x2aa5\r\n2020-02-17T21:54:28.971091_#15: gopls stderr: golang.org/x/tools/internal/jsonrpc2.(*Conn).Run.func1(0xc0002660c0, 0xc00029e180, 0xc0001f2e40, 0x1e57ae0, 0xc000202d80, 0x0, 0x0, 0xc00031a510)\r\n2020-02-17T21:54:28.971119_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/jsonrpc2/jsonrpc2.go:371 +0x1c6\r\n2020-02-17T21:54:28.971149_#15: gopls stderr: created by golang.org/x/tools/internal/jsonrpc2.(*Conn).Run\r\n2020-02-17T21:54:28.971175_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/jsonrpc2/jsonrpc2.go:355 +0x80d\r\n2020-02-17T21:54:28.971202_#15: gopls stderr:\r\n2020-02-17T21:54:28.971248_#15: gopls stderr: goroutine 1541 [runnable]:\r\n2020-02-17T21:54:28.971277_#15: gopls stderr: syscall.syscall(0x10d34f0, 0x3103270, 0x0, 0x0, 0x0, 0x0, 0x0)\r\n2020-02-17T21:54:28.971306_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/runtime/sys_darwin.go:63 +0x2e\r\n2020-02-17T21:54:28.971348_#15: gopls stderr: syscall.closedir(0x3103270, 0xc001b3e560, 0xc0021a0a40)\r\n2020-02-17T21:54:28.971378_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/syscall/zsyscall_darwin_amd64.go:534 +0x5f\r\n2020-02-17T21:54:28.971422_#15: gopls stderr: syscall.Getdirentries(0xf, 0xc0002bbd78, 0x2000, 0x2000, 0xc0002bbc60, 0x0, 0x0, 0x0)\r\n2020-02-17T21:54:28.971460_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/syscall/syscall_darwin.go:453 +0x40b\r\n2020-02-17T21:54:28.971494_#15: gopls stderr: syscall.ReadDirent(0xf, 0xc0002bbd78, 0x2000, 0x2000, 0xc080000000, 0x0, 0x0)\r\n2020-02-17T21:54:28.971519_#15: gopls stderr: \t/Users/pontus/sdk/go1.14rc1/src/syscall/syscall_bsd.go:71 +0x97\r\n2020-02-17T21:54:28.971547_#15: gopls stderr: golang.org/x/tools/internal/fastwalk.readDir(0xc000cd55f0, 0x24, 0xc0002bde10, 0x0, 0x0)\r\n2020-02-17T21:54:28.971572_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk_unix.go:38 +0x47d\r\n2020-02-17T21:54:28.971598_#15: gopls stderr: golang.org/x/tools/internal/fastwalk.(*walker).walk(0xc001955500, 0xc000cd55f0, 0x24, 0x1, 0x1, 0x0)\r\n2020-02-17T21:54:28.971622_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk.go:195 +0x7b\r\n2020-02-17T21:54:28.971654_#15: gopls stderr: golang.org/x/tools/internal/fastwalk.(*walker).doWork(0xc001955500, 0xc0015e7610)\r\n2020-02-17T21:54:28.971680_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk.go:134 +0x24b\r\n2020-02-17T21:54:28.971709_#15: gopls stderr: created by golang.org/x/tools/internal/fastwalk.Walk\r\n2020-02-17T21:54:28.971742_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk.go:81 +0x35a\r\n2020-02-17T21:54:28.971773_#15: gopls stderr:\r\n2020-02-17T21:54:28.971799_#15: gopls stderr: goroutine 1377 [runnable]:\r\n2020-02-17T21:54:28.971828_#15: gopls stderr: golang.org/x/tools/internal/fastwalk.Walk(0xc001baa780, 0x1f, 0xc001e923a0, 0x0, 0x0)\r\n2020-02-17T21:54:28.971861_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/fastwalk/fastwalk.go:93 +0x5ae\r\n2020-02-17T21:54:28.971916_#15: gopls stderr: golang.org/x/tools/internal/gopathwalk.walkDir(0xc001baa780, 0x1f, 0x1, 0xc001e92340, 0xc001e92330, 0x1040100)\r\n2020-02-17T21:54:28.971955_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/gopathwalk/walk.go:99 +0x35f\r\n2020-02-17T21:54:28.971983_#15: gopls stderr: golang.org/x/tools/internal/gopathwalk.WalkSkip(0xc0005b1f08, 0x1, 0x1, 0xc001e92340, 0xc001e92330, 0x1bb0100)\r\n2020-02-17T21:54:28.972017_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/gopathwalk/walk.go:76 +0xbb\r\n2020-02-17T21:54:28.972055_#15: gopls stderr: golang.org/x/tools/internal/imports.(*ModuleResolver).scan.func4(0x1e57a60, 0xc00011c000, 0xc000979d60, 0xc0001906c0, 0x5, 0x8, 0xc001e92340, 0xc001e92330, 0xc001f57d40)\r\n2020-02-17T21:54:28.972080_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/imports/mod.go:471 +0x3c8\r\n2020-02-17T21:54:28.972110_#15: gopls stderr: created by golang.org/x/tools/internal/imports.(*ModuleResolver).scan\r\n2020-02-17T21:54:28.972134_#15: gopls stderr: \t/Users/pontus/go/pkg/mod/golang.org/x/tools@v0.0.0-20200214225126-5916a50871fb/internal/imports/mod.go:455 +0x47f\r\n```", "labels": ["NeedsInvestigation", "OS-Darwin", "Tools"], "number_of_comments": 4, "created_at": "2020-02-17 21:16:56", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566502859": {"author_username": "mewmew", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37268, "title": "go.dev: license not detected for github.com/decomp/decomp", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions, please email go-discovery-feedback@google.com.\r\n-->\r\n \r\n### What is the URL of the page with the issue?\r\n \r\nhttps://pkg.go.dev/github.com/decomp/decomp\r\n \r\n### What is your user agent?\r\n \r\n<!-- \r\nYou can find your user agent here:\r\nhttps://www.whatismybrowser.com/detect/what-is-my-user-agent\r\n-->\r\n \r\nMozilla/5.0 (X11; Linux x86_64; rv:73.0) Gecko/20100101 Firefox/73.0\r\n \r\n### Screenshot\r\n \r\n<!--\r\nPlease paste a screenshot of the page.\r\n-->\r\n \r\n![screenshot_2020-02-17_21:24:16](https://user-images.githubusercontent.com/1414531/74684329-ea56f600-51cb-11ea-9d3d-ac27b9cbb740.png)\r\n \r\n### What did you do?\r\n \r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\n-->\r\n \r\n Try to navigate to the package documentation of [github.com/decomp/decomp](https://github.com/decomp/decomp) on `pkg.go.dev`.\r\n \r\n### What did you expect to see?\r\n \r\n Similar result to that of GoDoc.org. https://godoc.org/github.com/decomp/decomp\r\n \r\n### What did you see instead?\r\n\r\nNothing. `Licenses: none detected.`\r\n\r\n### Additional information\r\n\r\nThe root of the repository contains [UNLICENSE](https://github.com/decomp/decomp/blob/master/UNLICENSE), and GitHub correctly recognizes the license as UNLICENSED.\r\n\r\n![screenshot_2020-02-17_21:26:40](https://user-images.githubusercontent.com/1414531/74684460-44f05200-51cc-11ea-9ade-ec53c4b409ec.png)\r\n", "labels": ["NeedsFix", "go.dev"], "number_of_comments": 4, "created_at": "2020-02-17 20:27:48", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566484911": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37266, "title": "dl: return the same exit status of the wrapped command", "body": "Currently, the `Run` function in the `internal/version` and `gotip` packages returns the exit status `1` if the wrapped command fails:\r\n\r\n```\r\nif err := cmd.Run(); err != nil {\r\n\t\t// TODO: return the same exit status maybe.\r\n\t\tos.Exit(1)\r\n\t}\r\n\tos.Exit(0)\r\n```\r\n\r\nI'm developing a package that wraps various `go` commands, and I'm adding support for testing different versions of the `go` tool.  Unfortunately one test that checks for the exit status 2 now fails.\r\n\r\nI'm using this patched version locally:\r\n```\r\ndiff --git a/gotip/main.go b/gotip/main.go\r\nindex 6338234..0a8f0db 100644\r\n--- a/gotip/main.go\r\n+++ b/gotip/main.go\r\n@@ -57,9 +57,8 @@ func main() {\r\n \t}\r\n \tcmd.Env = dedupEnv(caseInsensitiveEnv, append(os.Environ(), \"GOROOT=\"+root, \"PATH=\"+newPath))\r\n \tif err := cmd.Run(); err != nil {\r\n-\t\tif _, ok := err.(*exec.ExitError); ok {\r\n-\t\t\t// TODO: return the same exit status maybe.\r\n-\t\t\tos.Exit(1)\r\n+\t\tif err, ok := err.(*exec.ExitError); ok {\r\n+\t\t\tos.Exit(err.ExitCode())\r\n \t\t}\r\n \t\tlog.Fatalf(\"gotip: failed to execute %v: %v\", gobin, err)\r\n \t}\r\ndiff --git a/internal/version/version.go b/internal/version/version.go\r\nindex a63c649..349bd6e 100644\r\n--- a/internal/version/version.go\r\n+++ b/internal/version/version.go\r\n@@ -61,7 +61,9 @@ func Run(version string) {\r\n \t}\r\n \tcmd.Env = dedupEnv(caseInsensitiveEnv, append(os.Environ(), \"GOROOT=\"+root, \"PATH=\"+newPath))\r\n \tif err := cmd.Run(); err != nil {\r\n-\t\t// TODO: return the same exit status maybe.\r\n+\t\tif err, ok := err.(*exec.ExitError); ok {\r\n+\t\t\tos.Exit(err.ExitCode())\r\n+\t\t}\r\n \t\tos.Exit(1)\r\n \t}\r\n \tos.Exit(0)\r\n```", "labels": ["NeedsDecision"], "number_of_comments": 1, "created_at": "2020-02-17 19:38:02", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566438965": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37265, "title": "x/website: some sub-repositories are missing from golang.org/pkg/#subrepo", "body": "The *sub-repositories* `arch`, `lint`, `mod`, `oauth2`, `term`, `website` and `xerrors` are missing from https://tip.golang.org/pkg/#subrepo.\r\n\r\nThey are also missing (with `debug`, `perf`, `review` and `time`) from https://godoc.org/-/subrepo.\r\n", "labels": ["NeedsDecision"], "number_of_comments": 3, "created_at": "2020-02-17 17:35:05", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566337210": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37264, "title": "cmd/go: go list -m error is confusing when go.mod lacks module directive", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14rc1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/home/manlio/.local/bin\"\r\nGOCACHE=\"/home/manlio/.cache/go-build\"\r\nGOENV=\"/home/manlio/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/manlio/.local/lib/go:/home/manlio/src/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/manlio/sdk/go1.14rc1\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/manlio/sdk/go1.14rc1/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/dev/null\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build648332856=/tmp/go-build -gno-record-gcc-switches\"\r\nGOROOT/bin/go version: go version go1.14rc1 linux/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.14rc1\r\nuname -sr: Linux 5.5.4-arch1-1\r\n/usr/lib/libc.so.6: GNU C Library (GNU libc) stable release version 2.31.\r\ngdb --version: GNU gdb (GDB) 9.1\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nInside the `HOME` directory:\r\n```\r\n$ go list -m -json\r\n{\r\n\t\"Path\": \"command-line-arguments\",\r\n\t\"Main\": true\r\n}\r\n```\r\n\r\nBut if I add a `go.mod` file in a parent directory:\r\n```\r\n$ sudo touch ../go.mod\r\n$ go list -m -json\r\ngo: cannot determine module path for source directory /home (outside GOPATH, module path must be specified)\r\n\r\nExample usage:\r\n\t'go mod init example.com/m' to initialize a v0 or v1 module\r\n\t'go mod init example.com/m/v2' to initialize a v2 module\r\n\r\nRun 'go help mod init' for more information.\r\n```\r\n\r\nThis is confusing for two reasons:\r\n\r\n 1. My `HOME` directory is also outside `GOPATH\r\n 2. `go list -m` returns the usage message for `go mod init`, and this may confuse newcomers", "labels": ["NeedsFix", "modules"], "number_of_comments": 1, "created_at": "2020-02-17 14:31:13", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566232337": {"author_username": "dolmen", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37263, "title": "testing/iotest: ErrTimeout fails os.IsTimeout", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n1.13.7\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\nhttps://play.golang.org/p/T4bwPszSzM0\r\n\r\n### What did you do?\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"os\"\r\n\t\"testing/iotest\"\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(os.IsTimeout(iotest.ErrTimeout))\r\n}\r\n\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\n`true`\r\n\r\n### What did you see instead?\r\n\r\n`false`", "labels": ["NeedsDecision"], "number_of_comments": 3, "created_at": "2020-02-17 11:19:58", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566200373": {"author_username": "NewbMiao", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37262, "title": "runtime: can't atomic access of first word of tiny-allocated struct on 32-bit architecture", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 darwin/amd64\r\n$ uname -a\r\nDarwin newbmiaodeMacBook-Pro.local 17.7.0 Darwin Kernel Version 17.7.0: Sun Jun  2 20:31:42 PDT 2019; root:xnu-4570.71.46~1/RELEASE_X86_64 x86_64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nNot sure\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/newbmiao/Library/Caches/go-build\"\r\nGOENV=\"/Users/newbmiao/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/newbmiao/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/Cellar/go/1.13.7/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.13.7/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/m_/hlhv5wl17vg368420bbxszhc0000gn/T/go-build908799930=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\nThis issue about test the spec below, but got panic:\r\n> https://golang.org/pkg/sync/atomic/#pkg-note-BUG\r\n> The first word in a variable or in an allocated struct, array, or slice can be relied upon to be 64-bit aligned.\r\n\r\nI use code below to test, and will panic occasionally\r\n(Test it on my 64-bit mac: `GOARCH=386 go build -ldflags=-compressdwarf=false -o test test.go`)\r\n\r\nBut if i remove the `fmt.Println()` inside of the test function, it will pass.\r\n\r\nI also debug it use gdb (append info below), `x` escape to heap, and use **tinyallocs** to alloc it\r\n\r\nAnd i notice that`c.tinyoffset` is 2. \r\n\r\nBut when no `fmt.Println()` it will be 0 or 16\uff0c Or just nextFreeFast to get a new object.\r\n\r\nSo i am confused, is that spec work in this situation?\r\nOr maybe i misunderstand with this spec? \r\nOr a issue cross compile under macOS?\r\n\r\nMay related with this issue: https://github.com/golang/go/issues/599\r\n\r\n**Code:**\r\n```go\r\npackage main\r\nimport (\r\n\t\"fmt\"\r\n\t\"sync/atomic\"\r\n)\r\n\r\n// On ARM, x86-32, and 32-bit MIPS, it is the caller's responsibility to arrange for 64-bit alignment of 64-bit words accessed atomically.\r\n// The first word in a variable or in an allocated struct, array, or slice can be relied upon to be 64-bit aligned.\r\nfunc test(){\r\n\tx := struct {\r\n\t\tv uint64\r\n\t\ty uint32\r\n\t}{}\r\n\t\r\n\tfmt.Println()  //if comment this line, it will pass on 32-bit arch\r\n\tatomic.AddUint64(&x.v, 1)\r\n}\r\nfunc main() {\r\n\ttest()\r\n}\r\n```\r\n\r\n**gdb info**\r\n\r\n```go\r\n$ GOARCH=386 go build -ldflags=-compressdwarf=false -o test test.go\r\n$ gdb ./hello\r\n(gdb) b main.main\r\nThread 2 hit Breakpoint 1, main.main ()\r\n    at /Dig101-Go/test.go:19\r\n19      func main() {\r\n(gdb) s\r\n20              test()\r\n(gdb) \r\nmain.test () at /Dig101-Go/test.go:10\r\n10      func test(){\r\n(gdb) \r\n11              x := struct {\r\n(gdb) \r\nruntime.newobject (typ=0x9d280 <type.*+93280>, ~r1=<optimized out>)\r\n    at /usr/local/Cellar/go/1.13.7/libexec/src/runtime/malloc.go:1150\r\n1150    func newobject(typ *_type) unsafe.Pointer {\r\n(gdb) \r\n1151            return mallocgc(typ.size, typ, true)\r\n(gdb) \r\nruntime.mallocgc (size=<optimized out>, typ=0x9d280 <type.*+93280>, needzero=true, \r\n    ~r3=<optimized out>)\r\n    at /usr/local/Cellar/go/1.13.7/libexec/src/runtime/malloc.go:877\r\n877     func mallocgc(size uintptr, typ *_type, needzero bool) unsafe.Pointer {\r\n(gdb) \r\n878             if gcphase == _GCmarktermination {\r\n(gdb) until 945\r\nruntime.mallocgc (size=<optimized out>, typ=0x9d280 <type.*+93280>, needzero=true, ~r3=<optimized out>)\r\n    at /usr/local/Cellar/go/1.13.7/libexec/src/runtime/malloc.go:945\r\n945             if size <= maxSmallSize {\r\n(gdb) n\r\n946                     if noscan && size < maxTinySize {\r\n(gdb) \r\n976                             off := c.tinyoffset\r\n(gdb) \r\n978                             if size&7 == 0 {\r\n(gdb) \r\n980                             } else if size&3 == 0 {\r\n(gdb) \r\n981                                     off = round(off, 4)\r\n(gdb) \r\n985                             if off+size <= maxTinySize && c.tiny != 0 {\r\n(gdb) p off\r\n$1 = 4\r\n(gdb) p c.tinyoffset  <========= notice this line\r\n$2 = 2\r\n(gdb) n\r\n987                                     x = unsafe.Pointer(c.tiny + off)\r\n(gdb) \r\n988                                     c.tinyoffset = off + size\r\n(gdb) \r\n989                                     c.local_tinyallocs++\r\n(gdb) \r\n990                                     mp.mallocing = 0\r\n(gdb) \r\n991                                     releasem(mp)\r\n(gdb) \r\n992                                     return x\r\n(gdb) \r\nmain.test () at /Dig101-Go/test.go:16\r\n16              fmt.Println() \r\n(gdb) \r\n\r\n17              atomic.AddUint64(&x.v, 1)\r\n(gdb) \r\n\r\nThread 2 received signal SIGSEGV, Segmentation fault.\r\nruntime/internal/atomic.Xadd64 () at /usr/local/Cellar/go/1.13.7/libexec/src/runtime/internal/atomic/asm_386.s:105\r\n105             MOVL    0, AX // crash when unaligned\r\n(gdb) \r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x2f7c]\r\n\r\ngoroutine 1 [running]:\r\nruntime/internal/atomic.Xadd64(0x1141c0b4, 0x1, 0x0, 0x0, 0x0)\r\n        /usr/local/Cellar/go/1.13.7/libexec/src/runtime/internal/atomic/asm_386.s:105 +0xc\r\nmain.test()\r\n        /Dig101-Go/test.go:17 +0x72\r\nmain.main()\r\n        /Dig101-Go/test.go:20 +0x11\r\n[Inferior 1 (process 68214) exited with code 02]\r\n```\r\n\r\n\r\n### What did you expect to see?\r\ngo run  successfully\r\n\r\n\r\n### What did you see instead?\r\nPanic sometimes:\r\n```go\r\n$ ./test  # success\r\n\r\n$ ./test # failed\r\n\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x2f7c]\r\n\r\ngoroutine 1 [running]:\r\nruntime/internal/atomic.Xadd64(0x1147e004, 0x1, 0x0, 0x0, 0x0)\r\n        /usr/local/Cellar/go/1.13.7/libexec/src/runtime/internal/atomic/asm_386.s:105 +0xc\r\nmain.test()\r\n        /Dig101-Go/test.go:17 +0x72\r\nmain.main()\r\n        /Dig101-Go/test.go:20 +0x11\r\n```", "labels": ["NeedsInvestigation"], "number_of_comments": 9, "created_at": "2020-02-17 10:25:33", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566136879": {"author_username": "pierrre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37260, "title": "x/net/html: text node is moved outside <table>", "body": "### What version of Go are you using (`go version`)?\r\n\r\nPlayground, Go 1.13\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nPlayground\r\n\r\n### What did you do?\r\n\r\nhttps://play.golang.org/p/UmY2tC6CML5\r\n\r\n### What did you expect to see?\r\n\r\nThe output HTML should be identical to the input.\r\n\r\n### What did you see instead?\r\n\r\nThe `test` text node is moved before `<table>`.\r\n\r\n\r\n\r\nYes, I know that it's not correct to have a text node directly inside a `<table>`.\r\nHowever, I'm manipulating an HTML document containing templating instructions from https://github.com/flosch/pongo2 .\r\nMy goal is to do some changes in the HTML **before** rendering the template.\r\n\r\nIs it possible to not move these text nodes, even if the HTML is not strictly valid ?\r\nIs there another workaround ?", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-17 08:33:28", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566035133": {"author_username": "erifan", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37257, "title": "gollvm: runtime and runtime/pprof packages test failed", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14rc1 gollvm LLVM 11.0.0git linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/erifan01/.cache/go-build\"\r\nGOENV=\"/home/erifan01/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/erifan01/gopath\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/erifan01/gollvm-master/install\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/erifan01/gollvm-master/install/tools\"\r\nGCCGO=\"/home/erifan01/gollvm-master/install/bin/llvm-goc\"\r\nAR=\"ar\"\r\nCC=\"/usr/bin/cc\"\r\nCXX=\"/usr/bin/c++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build180143903=/tmp/go-build -gno-record-gcc-switches -funwind-tables\"\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n$ ninja check-gollvm\r\n\r\n\r\n### What did you expect to see?\r\n\r\nAll test pass\r\n\r\n### What did you see instead?\r\n\r\nTests of package runtime and runtime/pprof failed\r\n\r\n@thanm @ianlancetaylor @cherrymui ", "labels": ["NeedsInvestigation"], "number_of_comments": 4, "created_at": "2020-02-17 03:32:25", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566011612": {"author_username": "darkfeline", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37256, "title": "go/ast: fix inflection in comments to match plurality", "body": "\r\n", "labels": ["cla: yes"], "number_of_comments": 4, "created_at": "2020-02-17 01:43:58", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566007440": {"author_username": "henvic", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37255, "title": "proposal: os/signal: add WithContext function", "body": "As previously discussed on issues such as #21521 and #16472, or on several other places handling POSIX signals through context seems to be somewhat useful (and a little bit hard to do correctly?), and I would like to propose a way to handle it by adding a new signal.WithContext function.\r\n\r\nThere's also an idea to improve the current approach to handling signals (see https://github.com/golang/go/issues/21521#issuecomment-337038699). I didn't give it a try yet, unfortunately. I only found the earlier proposals here after trying to write some code, so I decided to create this new issue anyway to share my idea.\r\n\r\nPeople using some sort of it or talking about the subject:\r\n* https://github.com/henvic/ctxsignal (package I wrote a while ago)\r\n* https://twitter.com/dmitshur/status/1227777318162030592 (thread)\r\n* https://twitter.com/matryer/status/869096368039710720 (thread)\r\n* [Make Ctrl+C cancel the context.Context](https://medium.com/@matryer/make-ctrl-c-cancel-the-context-context-bd006a8ad6ff) (blog post)\r\n* https://github.com/oklog/run/commit/9c53bcd6fefd554246da88d55efcc283aff63659\r\n* https://github.com/FiloSottile/mostly-harmless/blob/22c6a9e08ad95b602b470652ad2d401d8750e264/covfefe/covfefe.go#L118-L139\r\n* https://github.com/shurcooL/home/blob/d0f5a32e4901b05ae9979b1a9e7b67caba549778/main.go#L61-L73\r\n* https://github.com/search?l=Go&p=1&q=context+signal&type=Repositories lists 18 other packages for the same thing.", "labels": ["Proposal"], "number_of_comments": 6, "created_at": "2020-02-17 01:21:15", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566002905": {"author_username": "josharian", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37254, "title": "runtime: programs sometimes stall at launch", "body": "A weird thing has been happening to me recently, and I'm not sure how to debug it.\r\n\r\nI'll run `go install cmd/compile` to install a modified compiler. (In this instance, the modifications were envvar-guarded logging, so it was not a broken compiler.)\r\n\r\nThen I'll execute the compiler. To rule out any `go tool` problems or the like, I am running the compiler directly using an absolute path: `/Users/josh/go/tip/pkg/tool/darwin_amd64/compile -S x.go`. And the compiler hangs.\r\n\r\nIf I send a SIGQUIT, I don't get a backtrace:\r\n\r\n```\r\n$ /Users/josh/go/tip/pkg/tool/darwin_amd64/compile -S x.go\r\n^\\[1]    12198 quit       /Users/josh/go/tip/pkg/tool/darwin_amd64/compile -S x.go\r\n```\r\n\r\nIt's as if the runtime stalled during launch.\r\n\r\nSubsequent compiler runs usually work as normal.\r\n\r\nI can't reproduce reliably, but it has happened enough that I think I'm probably not going crazy.\r\n\r\nWhat should I do to debug next time this happens?\r\n\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-17 00:55:24", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565983041": {"author_username": "Matts966", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37253, "title": "x/tools/analysis/singlechecker: method calls sometimes have different count of arguments because of closure", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.8 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"~/go/bin\"\r\nGOCACHE=\"~/Library/Caches/go-build\"\r\nGOENV=\"~/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"~/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/Cellar/go/1.13.8/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.13.8/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"~/go/src/golang.org/x/net/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/_q/1mwpxmn91wj5fs_c_f29mz3h0000gn/T/go-build604211852=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\n**analysis code**\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\r\n\t\"golang.org/x/tools/go/analysis/singlechecker\"\r\n\r\n\t\"golang.org/x/tools/go/analysis\"\r\n\t\"golang.org/x/tools/go/analysis/passes/buildssa\"\r\n\t\"golang.org/x/tools/go/ssa\"\r\n)\r\n\r\nfunc main() { singlechecker.Main(listargs) }\r\n\r\nvar listargs = &analysis.Analyzer{\r\n\tName:     \"listargs\",\r\n\tDoc:      \"List up all the calls and their arguments\",\r\n\tRun:      run,\r\n\tRequires: []*analysis.Analyzer{buildssa.Analyzer},\r\n}\r\n\r\nfunc run(pass *analysis.Pass) (interface{}, error) {\r\n\tssainput := pass.ResultOf[buildssa.Analyzer].(*buildssa.SSA)\r\n\tfor _, fn := range ssainput.SrcFuncs {\r\n\t\tfor _, b := range fn.Blocks {\r\n\t\t\tfor _, i := range b.Instrs {\r\n\t\t\t\tc, ok := i.(ssa.CallInstruction)\r\n\t\t\t\tif ok {\r\n\t\t\t\t\t// fmt.Println(\"********************\")\r\n\t\t\t\t\tfmt.Println(c.Common().StaticCallee().Object())\r\n\t\t\t\t\tfor j, a := range c.Common().Args {\r\n\t\t\t\t\t\tfmt.Println(\"arg\", j, a)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// fmt.Println(\"********************\")\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn nil, nil\r\n}\r\n```\r\n\r\n**target code**\r\n```\r\npackage main\r\n\r\ntype X struct{}\r\n\r\nfunc (X) method() {}\r\n\r\nfunc x() {\r\n        var x X\r\n        x.method()\r\n        m := x.method\r\n        m()\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nfunc (_~/listargs/test/m.X).method()\r\narg 0 *t0\r\nfunc (_~/listargs/test/m.X).method()\r\narg 0 *t0\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nfunc (_~/listargs/test/m.X).method()\r\narg 0 *t0\r\nfunc (_~/listargs/test/m.X).method()\r\n```\r\n\r\nCreated `closure` does not have arguments though its `object` is the same as `(X).method`. When developing analysis tools, the consistency of the count of arguments is important for programmers so I think `m` is better with a receiver argument. \r\nIs this behavior intended?", "labels": ["NeedsInvestigation", "Tools"], "number_of_comments": 2, "created_at": "2020-02-16 22:38:01", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565960883": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37252, "title": "go.dev: lower score of previous path in case of module rename", "body": "### What is the URL of the page with the issue?\r\n\r\nhttps://pkg.go.dev/github.com/myitcv/govim/cmd/govim/config?tab=doc\r\n\r\n### What is your user agent?\r\n\r\n<pre>\r\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.66 Safari/537.36\r\n</pre>\r\n\r\n### Screenshot\r\n\r\n![Screen Shot 2020-02-16 at 20 02 26](https://user-images.githubusercontent.com/3374574/74611793-4734ac80-50f7-11ea-9e61-600fb5a45dea.png)\r\n\r\n### What did you do?\r\n\r\nVisited the above page.\r\n\r\n### What did you expect to see?\r\n\r\nExpected to see `v0.0.29` as the latest version.\r\n\r\n### What did you see instead?\r\n\r\nSaw `v0.0.22` which was released a long time ago:\r\n\r\n![Screen Shot 2020-02-16 at 20 03 13](https://user-images.githubusercontent.com/3374574/74611813-659aa800-50f7-11ea-9474-740f7b7b18a9.png)\r\n\r\n\r\n\r\n\r\n", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 6, "created_at": "2020-02-16 20:03:42", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565917079": {"author_username": "aka-rider", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37250, "title": "proposal: errors: add new function Temporary(error) bool", "body": "Good day.\r\n\r\nThis is proposal to add the Temporary function into errors package. I tend to rewrite it over and over again in every project.\r\n\r\nPossible implementation:\r\n~~~go\r\n// Temporary returns true if it makes sense to retry the call that returned the error.\r\nfunc Temporary(err error) bool {\r\n\tif err, ok := err.(interface{ Temporary() bool }); ok {\r\n\t\treturn err.Temporary()\r\n\t}\r\n\treturn false\r\n}\r\n~~~\r\n\r\nMainly, this function will be used in conjunction with the net package.\r\nNevertheless, I think Temporary function belongs to the erros package, in this case user code and other packages may follow the same convention.\r\n\r\nThe main reason for adding a new function into the go standard library is to promote the \"Temporary\" concept.\r\nIf there's no common mechanism to determine if operation can be retried then error handling becomes more intricate.\r\nAlso, I think the function is in line with the \"errors are values.\"", "labels": ["Proposal"], "number_of_comments": 3, "created_at": "2020-02-16 14:50:28", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565850098": {"author_username": "amarjeetanandsingh", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37246, "title": "cmd/compile: \"ICE: 'main': schedule does not include all values in block b19 crash\" for Go1.12 and Go1.13 but fixed in Go1.14", "body": "### What version of Go are you using (`go version`)?\r\n<pre>\r\n$ go version\r\ngo version go1.13.4 darwin/amd64\r\n</pre>\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/amarjeet.anand/Library/Caches/go-build\"\r\nGOENV=\"/Users/amarjeet.anand/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/amarjeet.anand/go/\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/Cellar/go/1.13.4/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.13.4/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/51/451rh2r11ms9t3v8r41m3240m4hm72/T/go-build510712061=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\nA program to reproduce the error.\r\nhttps://play.golang.org/p/mHJcF72uF9J\r\n\r\n\r\n### What did you see instead?\r\nIt gives error as below :-\r\n<pre>\r\n# command-line-arguments\r\n./3.go:11:23: internal compiler error: 'main': schedule does not include all values in block b19\r\n\r\nPlease file a bug report including a short program that triggers the error.\r\nhttps://golang.org/issue/new\r\n</pre>", "labels": ["NeedsDecision"], "number_of_comments": 3, "created_at": "2020-02-16 04:33:27", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565834982": {"author_username": "FiloSottile", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37245, "title": "x/crypto/ssh: add support for hostkeys@openssh.com", "body": "The `hostkeys@openssh.com` extension lets a server notify a client of all its host keys to enable a smooth transition if they have [UpdateHostKeys](https://manpages.debian.org/buster/openssh-client/ssh_config.5.en.html#UpdateHostKeys) enabled. We should offer it server-side.", "labels": ["FeatureRequest", "NeedsFix", "help wanted"], "number_of_comments": 0, "created_at": "2020-02-16 01:31:49", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565805950": {"author_username": "bradfitz", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37244, "title": "x/build: add NetBSD 9.0 builder", "body": "NetBSD 9.0 is out:\r\nhttps://netbsd.org/releases/formal-9/NetBSD-9.0.html\r\n\r\nTracking bug for adding a builder.\r\n\r\n/cc @bsiegert ", "labels": ["Builders", "NeedsFix", "OS-NetBSD", "new-builder"], "number_of_comments": 3, "created_at": "2020-02-15 20:38:08", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565780709": {"author_username": "infeno", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37243, "title": "proposal: Go 2: improve error handling with \u201c??\u201d keyword for a special case", "body": "**Would you consider yourself a novice, intermediate, or experienced Go programmer?**\r\nIntermediate\r\n\r\n**What other languages do you have experience with?**\r\nPHP, Swift, Javascript\r\n\r\n**Would this change make Go easier or harder to learn, and why?**\r\nEasier to read and less to type.\r\n\r\n**Has this idea, or one like it, been proposed before?**\r\nNo, I like to change the meaning of `??` for a special case\r\n\r\n**Who does this proposal help, and why?**\r\nI have seen different ideas for error handling and adding more characters seem requires more time to learn and explaining how it works, why not add 2 symbols?\r\nhttps://github.com/golang/go/issues/21161\r\nhttps://github.com/golang/go/issues/32437\r\nhttps://github.com/golang/go/issues/37165\r\n\r\n**What is the proposed change?**\r\nPropose to add `??` as a shorthand for `if err != nil`\r\n\r\n**Is this change backward compatible?**\r\nThis is a new keyword in additional to the existing ones.\r\n\r\n**Show example code before and after the change.**\r\n\r\nExisting approach is explicit and verbose\r\n```\r\ndata, err := getJSONFile(\u201c1.json\u201d)\r\nif err != nil {\r\n\tfmt.Println(err)\r\n}\r\n\r\nok := getJSONFile(\u201c1.json\u201d); if !ok {\r\n\tfmt.Println(ok)\r\n}\r\n```\r\n\r\nThe is valid:\r\nhttps://github.com/evanw/esbuild/blob/master/src/esbuild/main/main.go#L58\r\n```\r\nexpr, ok := parser.ParseJson(log, source)\t\r\ndone()\r\nif !ok {\r\n\treturn false\r\n}\r\n```\r\n\r\nNew approach for fast typing\r\n\r\nThis method is an additional keyword, allowing `??` to be translated into `if err != nil` behind the scene.\r\n```\r\ndata, err := getJSONFile(\u201c1.json\u201d) ?? {\r\n\tfmt.Println(err)\r\n}\r\n\r\nerr := getJSONFile(\u201c1.json\u201d) ?? {\r\n\tfmt.Println(err)\r\n}\r\n```\r\n\r\n1. Does not need to repeat `if err != nil` all the time when `??` keyword took <1 second to type.\r\n2. Less noise, more productivity, will probably have an impact on developers\u2019 pattern.\r\n3. It purpose is strictly for handling error scenario since `??` is not implemented in Go.\r\n4. The shortest keyword, in return we get the best readability.\r\n\r\n**What is the cost of this proposal? (Every language change has a cost).**\r\n    * What is the compile time cost?\r\nNegligible, as it can be translate behind the scene.\r\n\r\n**Can you describe a possible implementation?**\r\nNo\r\n\r\n**How would the language spec change?**\r\nNo\r\n\r\n**Orthogonality: how does this change interact or overlap with existing features?**\r\nThis change enable developers to type less and improve readability.\r\n\r\n**Is the goal of this change a performance improvement?**\r\nCompiler: no, Developer: yes\r\n\r\n**Does this affect error handling?**\r\nYes\r\n\r\n* Is this about generics?\r\nNo", "labels": ["Go2", "LanguageChange", "Proposal", "Proposal-FinalCommentPeriod", "error-handling"], "number_of_comments": 3, "created_at": "2020-02-15 17:15:52", "reactions": {"total_count": 18, "+1": 0, "-1": 17, "laugh": 0, "heart": 0, "hooray": 0}}, "565775532": {"author_username": "bep", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37242, "title": "cmd/go: changes/corruption in module cache not detected", "body": "**Note:** to me this is a functional problem, I'm not using the \"security\" word.\r\n\r\nSee environment info at the bottom.\r\n\r\nTo reproduce:\r\n\r\nRun this to generate a `go.sum` file\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\r\n\t\"github.com/bep/testmodlib\"\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(testmodlib.Hello()) // Prints \"hello\"\r\n\r\n}\r\n```\r\n\r\nThen manually edit `$GOPATH/pkg/mod/github.com/bep/testmodlib@v1.0.0/lib.go` to make the `Hello` func return `modified` (or whatever).\r\n\u00a8\r\nThen rerun the program above. It now prints `modified\u00b4.\r\n\r\nSince I have a `go.sum` file for that library, I would expect the build to fail.\r\n\r\nThe reason I raise this is that I on rare occasions have seen empty cache folders. I'm not able to give further details about when/how this happens, but for me, it happens only on `MacOS`. In most situations, this will be visible (break the build), but not always.\r\n\r\n```\r\nuname -a && go version && go env\r\nDarwin bep-mac16.local 19.3.0 Darwin Kernel Version 19.3.0: Thu Jan  9 20:58:23 PST 2020; root:xnu-6153.81.5~1/RELEASE_X86_64 x86_64\r\ngo version go1.13.7 darwin/amd64\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/bep/Library/Caches/go-build\"\r\nGOENV=\"/Users/bep/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/bep/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/Users/bep/dev/go/bep/temp/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/wy/g1rt5g3s5bd9flpq8g1741740000gn/T/go-build844380845=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n```", "labels": ["WaitingForInfo"], "number_of_comments": 3, "created_at": "2020-02-15 16:40:08", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565749814": {"author_username": "samzhiwei", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37241, "title": "x/mobile: Undefined symbols for architecture", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\nThe latest version\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\nFollow [the guide](https://github.com/golang/go/wiki/Mobile#building-and-deploying-to-ios-1) step by step\r\n\r\n\r\n### What did you expect to see?\r\nUse gomoblie to build a framework for iOS\r\n\r\nI try to build a .framework for iOS. After draging .framewok file in to a new demo project and build it in iPhoneX. Importing .framework is fine , and Xcode can completion the code automatically.\r\n\r\nBut Xcode log:\r\n\r\n> ld: warning: ignoring file ~/Libgodemo.framework/Libgodemo, file is universal (4 slices) but does not contain the arm64 architecture: ~/Libgodemo.framework/Libgodemo\r\n> Undefined symbols for architecture arm64:\r\n>   \"_LibgodemoGreetings\", referenced from:\r\n>       @objc ViewController.viewDidLoad() -> () in ViewController.o\r\n> ld: symbol(s) not found for architecture arm64\r\n> clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n\r\nThe same problem come out in iOS simulator (Undefined symbols for architecture x86_64)\r\n\r\nThen, I check the .framework file architecture symbol use `lipo -info`\r\nLog:\r\n\r\n> Architectures in the fat file: ~/Libgodemo.framework/Versions/A/Libgodemo are: armv7 i386 x86_64 arm64 \r\n\r\nThe .framework file is support arm64, but Xcode ignore the file due to its  unsupport arm64. Any idea for this?\r\n\r\n\r\n", "labels": ["NeedsInvestigation", "WaitingForInfo", "mobile"], "number_of_comments": 1, "created_at": "2020-02-15 13:44:19", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565736514": {"author_username": "johanavril", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37240, "title": "go.dev: incorrect go source code download path for generating documentation", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions, please email go-discovery-feedback@google.com.\r\n-->\r\n \r\n### What is the URL of the page with the issue?\r\n https://go.dev/about\r\n \r\n \r\n### What is your user agent?\r\n Chrome 80 on Linux\r\n<!-- \r\nYou can find your user agent here:\r\nhttps://www.whatismybrowser.com/detect/what-is-my-user-agent\r\n-->\r\n \r\n \r\n \r\n### Screenshot\r\n![image](https://user-images.githubusercontent.com/38969878/74587192-30705600-5022-11ea-9c11-2ab303e3ebdf.png)\r\n\r\n<!--\r\nPlease paste a screenshot of the page.\r\n-->\r\n \r\n \r\n \r\n### What did you do?\r\n accessing the page\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\n-->\r\n \r\n \r\n \r\n### What did you expect to see?\r\n the go source code path to be proxy.golang.org/&lt;module&gt;/@v/&lt;version&gt;.zip\r\n \r\n \r\n### What did you see instead?\r\nthe go source code path is proxy.golang.org/&lt;module&gt;@&lt;version&gt;.zip\r\n\r\n\r\n", "labels": ["Documentation", "NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-02-15 11:39:19", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565731373": {"author_username": "tt", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37239, "title": "x/crypto/ssh: TCP/IP port forwarding expects IP addresses", "body": "[`(*ssh.Client).ListenTCP`](https://github.com/golang/crypto/blob/034e5325b6ab92faa14d15c30e86919e911cf8e0/ssh/tcpip.go#L101-L139) expects an IP address (via `*net.TCPAddr`) and therefore [`(*ssh.Client).Listen`](https://github.com/golang/crypto/blob/034e5325b6ab92faa14d15c30e86919e911cf8e0/ssh/tcpip.go#L19-L37) attempts to resolve addresses.\r\n\r\nHowever, [section 7.1 of RFC 4254](https://tools.ietf.org/html/rfc4254#section-7.1) states:\r\n\r\n> The 'address to bind' and 'port number to bind' specify the IP\r\n> address (or domain name) and port on which connections for forwarding\r\n> are to be accepted.  Some strings used for 'address to bind' have\r\n> special-case semantics.\r\n> \r\n>    -  \"\" means that connections are to be accepted on all protocol\r\n>       families supported by the SSH implementation.\r\n> \r\n>    -  \"0.0.0.0\" means to listen on all IPv4 addresses.\r\n> \r\n>    -  \"::\" means to listen on all IPv6 addresses.\r\n> \r\n>    -  \"localhost\" means to listen on all protocol families supported by\r\n>       the SSH implementation on loopback addresses only ([RFC3330] and\r\n>       [RFC3513]).\r\n> \r\n>    -  \"127.0.0.1\" and \"::1\" indicate listening on the loopback\r\n>       interfaces for IPv4 and IPv6, respectively.\r\n\r\nThere are two consequences of the current interface:\r\n\r\n1. You can only provide resolvable names. This prohibits two of the strings with special-case semantics from working (`\"\"`, reported in #33227, and `\"::\"`).\r\n\r\n2. Resolution happens client side. This changes the meaning of the string `\"localhost\"` from being \"all protocol families supported by the SSH implementation on loopback addresses only\" to being only one of those and may provide a different result for other names (AWS hostnames resolving to internal addresses inside a data center comes to mind).\r\n\r\nOutside of defining a new public interface, I think the least breaking change would be to extract an unexported `listenTCP` function taking a string address and call this from `Listen` which can then drop resolution but of course if you're relying on that behavior, it will still be surprising.\r\n\r\nI'm happy to submit a pull request but I'd appreciate some thoughts on how to best evolve the interface into something that both supports the scope of the RFC and doesn't disregard current users.", "labels": ["NeedsInvestigation"], "number_of_comments": 2, "created_at": "2020-02-15 10:51:25", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565716696": {"author_username": "iswade", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37238, "title": "runtime: with GDB, callstack falls into infinite loop with CGO on GOOS=linux GOARCH=arm64", "body": "### What version of Go are you using (`go version`)?\r\ngo version go1.13.8 linux/arm64\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nGOARCH=\"arm64\"\r\nGOHOSTARCH=\"arm64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build664418125=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n### What did you do?\r\nrun go developped program\r\n\r\n### What did you expect to see?\r\nprogram run normally\r\n\r\n### What did you see instead?\r\nprogram run normally but the callstask seems fall into infinite loop:\r\n\r\n```\r\nThread 30 (Thread 0xfffe1dde3f60 (LWP 610668)):\r\n#0  runtime.futex () at /usr1/paxos/go/src/runtime/sys_linux_arm64.s:461\r\n#1  0x0000fffe22fd7ab0 in runtime.futexsleep (addr=0xfffe23d072f8 <runtime.newmHandoff+24>, val=0, ns=-1) at /usr1/paxos/go/src/runtime/os_linux.go:44\r\n#2  0x0000fffe22fb6db0 in runtime.notesleep (n=0xfffe23d072f8 <runtime.newmHandoff+24>) at /usr1/paxos/go/src/runtime/lock_futex.go:151\r\n#3  0x0000fffe22fe00c0 in runtime.templateThread () at /usr1/paxos/go/src/runtime/proc.go:1906\r\n#4  0x0000fffe22fdeb98 in runtime.mstart1 () at /usr1/paxos/go/src/runtime/proc.go:1201\r\n#5  0x0000fffe22fdeab8 in runtime.mstart () at /usr1/paxos/go/src/runtime/proc.go:1167\r\n#6  0x0000fffe2350176c in crosscall1 () at gcc_arm64.S:40\r\n#7  0x0000fffe2350176c in crosscall1 () at gcc_arm64.S:40\r\n#8  0x0000fffe2350176c in crosscall1 () at gcc_arm64.S:40\r\n#9  0x0000fffe2350176c in crosscall1 () at gcc_arm64.S:40\r\n#10 0x0000fffe2350176c in crosscall1 () at gcc_arm64.S:40\r\n#11 0x0000fffe2350176c in crosscall1 () at gcc_arm64.S:40\r\n#12 0x0000fffe2350176c in crosscall1 () at gcc_arm64.S:40\r\n#13 0x0000fffe2350176c in crosscall1 () at gcc_arm64.S:40\r\n#14 0x0000fffe2350176c in crosscall1 () at gcc_arm64.S:40\r\n#15 0x0000fffe2350176c in crosscall1 () at gcc_arm64.S:40\r\n.....\r\n```\r\n\r\nApplication(C language) calls library1.so(Golang), and library1.so(Golang) call another library2.so(C language) with cgo.\r\n\r\nWe build the library1.so with -buildmode=c-shared, and it is used as dynamic library.\r\n\r\nThe problem only exists at linux/arm64.\r\nThe problem does not exists at linux/amd64.\r\n\r\n\r\n", "labels": ["NeedsInvestigation", "OS-Linux", "arch-arm64"], "number_of_comments": 3, "created_at": "2020-02-15 08:26:06", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565716552": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37237, "title": "x/tools/gopls: support advanced query syntax for Symbol", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +b7689f5aa3 Fri Jan 31 06:02:00 2020 +0000 linux/amd64\r\n$ go list -m golang.org/x/tools\r\ngolang.org/x/tools v0.0.0-20200214144324-88be01311a71\r\n$ go list -m golang.org/x/tools/gopls\r\ngolang.org/x/tools/gopls v0.1.8-0.20200214144324-88be01311a71\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/myitcv/.cache/go-build\"\r\nGOENV=\"/home/myitcv/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/myitcv/gostuff\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/myitcv/gos\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/myitcv/gos/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/myitcv/gostuff/src/github.com/myitcv/govim/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build646330205=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThis is a request/proposal more than an issue.\r\n\r\nWe were discussing with @findleyr a means by which symbol search can be made more useful (in Vim). With #37236 fixed, the existing Symbol method will return matches from within the workspace (main module). But a fairly common query is to find symbols matching the query within the \"current\" package, where \"current\" is defined by the file within which the cursor is located. i.e. I want to jump to the definition of the method `(*T).M`.\r\n\r\nBecause the editor/client knows nothing about packages, I think this will require a query similar to the following. Imagine we are searching using the term `hello`, with the cursor in the file `main.go`\r\n\r\n```\r\npackage:/path/to/main.go hello\r\n```\r\n\r\n`gopls` would then translate the file URI to a package and suitably constrain the results.\r\n\r\n\r\n---\r\n\r\ncc @stamblerre @findleyr \r\n\r\nFYI @leitzler\r\n", "labels": ["FeatureRequest", "NeedsInvestigation", "Tools", "gopls"], "number_of_comments": 1, "created_at": "2020-02-15 08:24:48", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565661700": {"author_username": "opennota", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37235, "title": "strings: Title and ToTitle have similar names but do different things", "body": "`Title` returns a copy of the string s with all Unicode letters that begin words mapped to their Unicode title case.\r\n\r\n`ToTitle` returns a copy of the string s with all Unicode letters mapped to their Unicode title case.\r\n\r\nIdeally (Go2) they should have completely different names.", "labels": ["Go2"], "number_of_comments": 2, "created_at": "2020-02-15 03:19:24", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565599326": {"author_username": "wbl", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37234, "title": "x/sys: Missing TIME_OOP and friends", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.6 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nLinux\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/watsonladd/.cache/go-build\"\r\nGOENV=\"/home/watsonladd/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/watsonladd/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/cfsetup_build/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build211195283=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nTried to interpret the return value of Adjtimex\r\n\r\n### What did you expect to see?\r\nThe constants from http://man7.org/linux/man-pages/man2/adjtimex.2.html defined in the package.\r\n\r\n\r\n### What did you see instead?\r\nThe constants are not defined\r\n", "labels": ["NeedsFix", "OS-Linux", "help wanted"], "number_of_comments": 3, "created_at": "2020-02-14 23:08:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565598565": {"author_username": "kevinburkemeter", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37233, "title": "runtime/race: leak in long-running programs, more transparent memory statistics", "body": "I don't really have specific recommendations here, but I wanted to report this troubleshooting session, because this is the worst time I've ever had trying to troubleshoot Go program performance, I was at my wit's end trying to debug it, Go has a brand of being not difficult to troubleshoot, and \"I can find the problems quickly\" is a big part of the reason I like the language. So some time spent thinking about and fixing these issues seems useful.\r\n\r\nThe details of the program are not that important, but I had a pretty simple program that checks for rows in a Postgres database, updates their status if it finds one, then makes an HTTP request with the contents of the database row. I tested it by writing a single database row once per second, with a single worker. Via `*DBStats` I never had more than 4 database conns open at a time.\r\n\r\nWhat I observed was **high and growing RSS usage.** In production this would result in the program being OOM killed after some length of time. Locally on my Mac, RAM use grew from 140MB to 850MB when I left it running overnight.\r\n\r\nI tried all of the tricks I could find via blog posts:\r\n\r\n- disabling HTTP2 support\r\n- disabling MADV_DONTNEED\r\n- setting Connection: close on the HTTP Client\r\n- manually inspecting the code for goroutine leaks (constant use of around 20 goroutines)\r\n- manually inspecting the code for defers in a for loop in a long running function, unbounded array appends etc. (none)\r\n- ensuring HTTP bodies were fully consumed, DB queries closed after use, etc.\r\n\r\nNone of these made a difference, the memory usage kept growing. Running pprof and looking at the runtime memory statistics, I was struck by a difference between the reported values and the actual observed memory usage. These numbers are after the program had been running all night and Activity Monitor told me it was using 850MB of RAM.\r\n\r\n```\r\n# runtime.MemStats\r\n# Alloc = 3410240\r\n# TotalAlloc = 2834416608\r\n# Sys = 213078288\r\n# Lookups = 0\r\n# Mallocs = 38955235\r\n# Frees = 38943138\r\n# HeapAlloc = 3410240\r\n# HeapSys = 199819264\r\n# HeapIdle = 194469888\r\n# HeapInuse = 5349376\r\n# HeapReleased = 192643072\r\n# HeapObjects = 12097\r\n# Stack = 1376256 / 1376256\r\n# MSpan = 132600 / 196608\r\n# MCache = 13888 / 16384\r\n# BuckHashSys = 2045579\r\n# GCSys = 8042776\r\n# OtherSys = 1581421\r\n# NextGC = 4194304\r\n# LastGC = 1581710840991223000\r\n# PauseNs = [...]\r\n# PauseEnd = [...]\r\n# NumGC = 1187\r\n# NumForcedGC = 0\r\n# GCCPUFraction = 4.524177278457185e-06\r\n# DebugGC = false\r\n```\r\n\r\nSpecifically there's only about 200MB of \"Sys\" allocated and that number stayed pretty constant even though Activity Monitor reported the program was using about 850MB of RSS. \r\n\r\nAnother odd thing was the `inuse_space` heap profile only reported about 340kB of RAM usage. This sample was taken after reducing `runtime.MemProfileRate` to 512 and after leaving the program running all night.\r\n\r\n```\r\n(pprof) top20\r\nShowing nodes accounting for 313.47kB, 91.83% of 341.36kB total\r\nDropped 100 nodes (cum <= 1.71kB)\r\nShowing top 20 nodes out of 130\r\n      flat  flat%   sum%        cum   cum%\r\n   76.76kB 22.49% 22.49%    76.76kB 22.49%  runtime.malg\r\n   68.02kB 19.93% 42.41%    68.02kB 19.93%  bufio.NewReaderSize (inline)\r\n      54kB 15.82% 58.23%       54kB 15.82%  github.com/rcrowley/go-metrics.newExpDecaySampleHeap (inline)\r\n   15.35kB  4.50% 62.73%    57.89kB 16.96%  github.com/kevinburke/rickover/dequeuer.(*Dequeuer).Work\r\n   15.35kB  4.50% 67.23%    15.35kB  4.50%  net/http.(*persistConn).roundTrip\r\n   14.80kB  4.34% 71.56%    15.90kB  4.66%  database/sql.(*Rows).awaitDone\r\n    9.99kB  2.93% 74.49%    13.55kB  3.97%  github.com/lib/pq.NewConnector\r\n    8.77kB  2.57% 77.06%     8.77kB  2.57%  database/sql.(*Tx).awaitDone\r\n    8.28kB  2.43% 79.48%    69.90kB 20.48%  github.com/lib/pq.(*Connector).open\r\n       8kB  2.34% 81.83%        8kB  2.34%  bufio.NewWriterSize\r\n       8kB  2.34% 84.17%        8kB  2.34%  hash/crc32.slicingMakeTable\r\n    5.24kB  1.53% 85.71%    10.23kB  3.00%  github.com/lib/pq.(*conn).prepareTo\r\n       4kB  1.17% 86.88%        4kB  1.17%  runtime.allgadd\r\n```\r\n\r\nI would have expected that number to be a lot higher.\r\n\r\nEventually I realized that I had been running this program with the race detector on - performance isn't super important but correctness is so I wanted to ensure I caught any unsafe reads or writes. Some searching around in the issue tracker revealed this issue - https://github.com/golang/go/issues/26813 - which seems to indicate that the race detector might not clean up correctly after defers and recovers. \r\n\r\nRecompiling and running the program without the race detector seems to eliminate the leak. It would be great to have confirmation that #26813 is actually the problem, though. github.com/lib/pq uses recover and panic quite heavily to do fast stack unwinds - similar to the JSON package - but as far as I can tell from adding print statements to my test program, it's not ever actually panicking, so maybe just the heavy use of `recover` and my use of `defer context.cancel()` is enough to set it off.\r\n\r\nLook, it is fine if the race detector leaks memory, and I understand running programs in production for days on end with the race detector on is atypical. What bothered me more was **how hard this was to track down, and how poorly the tooling did at identifying the actual problem.** The [only documentation on the runtime performance of the race detector states](https://golang.org/doc/articles/race_detector.html#Runtime_Overheads):\r\n\r\n> The cost of race detection varies by program, but for a typical program, memory usage may increase by 5-10x and execution time by 2-20x.\r\n\r\nI read pretty much every blog post anyone had written on using pprof and none of them mentioned this issue, either.\r\n\r\nIt would be nice if runtime.MemStats had a section about memory allocated for the race detector, or if there was more awareness/documentation of this issue somewhere. I'm sure there are other possible solutions that I'm probably not aware of because I'm not super familiar", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-14 23:05:16", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565564435": {"author_username": "ChrisHines", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37232, "title": "go.dev: support different GOOS/GOARCH values when displaying package documentation", "body": "### What did you do?\r\n\r\n- Try to view operating system specific package documentation on the pkg.go.dev discovery site.\r\n- For example `os/exec.LookPath` has different docs on Linux and Windows. Compare \r\n   - https://golang.org/pkg/os/exec/?GOOS=linux#LookPath\r\n   - https://golang.org/pkg/os/exec/?GOOS=windows#LookPath\r\n\r\n### What did you expect to see?\r\n\r\nAn easy to discover and use way to see OS specific package documentation on the pkg.go.dev discovery site.\r\n\r\n### What did you see instead?\r\n\r\nNo documented or otherwise discoverable solution on the pkg.go.dev discovery site.\r\n\r\n### Notes\r\n\r\nThis idea extends to GOARCH specific or build tag specific docs.", "labels": ["FeatureRequest", "NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-02-14 21:28:22", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565497653": {"author_username": "gopherbot", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37230, "title": "PowerRegisterSuspendResumeNotification error on Azure App Services with go 1.13.7 [1.13 backport]", "body": "@networkimprov requested issue #37149 to be considered for backport to the next 1.13 minor release.\n\n> @gopherbot please backport. It's another instance of this regression...\n", "labels": ["CherryPickCandidate"], "number_of_comments": 0, "created_at": "2020-02-14 18:52:10", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565497645": {"author_username": "gopherbot", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37229, "title": "PowerRegisterSuspendResumeNotification error on Azure App Services with go 1.13.7 [1.12 backport]", "body": "@networkimprov requested issue #37149 to be considered for backport to the next 1.12 minor release.\n\n> @gopherbot please backport. It's another instance of this regression...\n", "labels": ["CherryPickCandidate"], "number_of_comments": 0, "created_at": "2020-02-14 18:52:08", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565439451": {"author_username": "aka-rider", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37228, "title": "errors: add new function Temporary(error) bool", "body": "This is proposal to add the Temporary function into errors package. I tend to rewrite it over and over again in every project.\r\n\r\nMainly, this function will be used in conjunction with the net package. \r\nNevertheless, I think Temporary function belongs to the erros package, in this case user code and other packages may follow the same convention.", "labels": ["cla: yes"], "number_of_comments": 7, "created_at": "2020-02-14 16:44:26", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565437525": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37227, "title": "cmd/go: behavior of go list ... is not documented in module mode", "body": "`go help packages` documents the special path `all` both for *gopath* and *module* mode:\r\n```\r\n\"all\" expands to all packages found in all the GOPATH trees. For example, 'go list all' lists all the packages on the local system. When using modules, \"all\" expands to all packages in the main module and their dependencies, including dependencies needed by tests of any of those.\r\n```\r\n\r\nHowever the `...` pattern is documented only for *gopath* module:\r\n```\r\nAn import path is a pattern if it includes one or more \"...\" wildcards, each of which can match any string, including the empty string and strings containing slashes. Such a pattern expands to all package directories found in the GOPATH trees with names matching the patterns.\r\n```\r\n\r\nHow is the `...` pattern supposed to work in *module* mode?\r\n\r\nAs a test, I ran `go list ... | wc -l ` inside the `github.com/golang/mod` (`golang.org/x/mod`) directory with different versions of the *go* tool.  The directory is outside GOPATH.  The results are:\r\n\r\n - `go1.11.13`: 501\r\n - `go1.12.16`: 526\r\n - `go1.13.8`: 632\r\n - `go1.14rc1`: 634\r\n\r\nAs a side note, how can I tell `go list` to list **only** packages in the *main* module?", "labels": ["Documentation", "GoCommand", "NeedsInvestigation", "modules"], "number_of_comments": 17, "created_at": "2020-02-14 16:40:45", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565322975": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37225, "title": "cmd/go: global go get does not reference main package's module's go.sum", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +b7689f5aa3 Fri Jan 31 06:02:00 2020 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/myitcv/.cache/go-build\"\r\nGOENV=\"/home/myitcv/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/tmp/tmp.lzY0uMO3kp\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/myitcv/gos\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/myitcv/gos/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build624481406=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThe current advice for [globally installing a tool](https://github.com/golang/go/issues/30515#issuecomment-582044819) is some variant of:\r\n\r\n```\r\n(cd $(mktemp -d); GO111MODULE=on go get example.com/tool)\r\n```\r\n\r\nThe following command sequence succeeds:\r\n\r\n```\r\nexport GOPATH=$(mktemp -d)\r\ncd $(mktemp -d)\r\nGO111MODULE=on go get github.com/myitcvscratch/badmain@v0.0.0-20200214123625-d46c956f729b\r\n```\r\n\r\nHowever the following command sequence does not:\r\n\r\n```\r\ncd $(mktemp -d)\r\ngit clone -q https://github.com/myitcvscratch/badmain\r\ncd badmain/\r\ngit checkout d46c956\r\ngo install\r\n```\r\n\r\nIt fails with:\r\n\r\n```\r\nverifying golang.org/x/tools@v0.0.0-20200213224642-88e652f7a869: checksum mismatch\r\n        downloaded: h1:DPqS0AlgYBVHhG5jnEVScBXXIS+xjgn7O8s1E3sDqxc=\r\n        go.sum:     h1:DPqS0AlgYBVHhG5jnEVScBXXIS+xjgn7O8s1E3sD=\r\n```\r\n\r\n(an error I have deliberately introduced)\r\n\r\n### What did you expect to see?\r\n\r\nGiven we are installing a tool outside of a module context, have no `go.{mod,sum}` and hence are relying on a temporary module, part of me is not surprised by this behaviour. \r\n\r\nHowever I think it's problematic. It feels like the default advice for installing tools globally should use _some_ `go.sum` reference when installing said tool, rather than blindly accepting whatever it sees. In this case it could use the `go.sum` that is part of the `github.com/myitcvscratch/badmain` module.\r\n\r\nArguably `go get`'s of this sort should fail if either the `go.mod` or `go.sum` is incomplete, but that's perhaps another issue.\r\n\r\n### What did you see instead?\r\n\r\nAs above.", "labels": ["GoCommand", "NeedsInvestigation", "modules"], "number_of_comments": 8, "created_at": "2020-02-14 13:20:37", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565223306": {"author_username": "ajeecai", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37223, "title": "x/tools/gopls: using a lot of memory", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes, I have update gopls with `GO111MODULE=on go get golang.org/x/tools/gopls@master golang.org/x/tools@master`\r\n\r\n$ gopls version\r\ngolang.org/x/tools/gopls master\r\n    golang.org/x/tools/gopls@v0.1.8-0.20200213144451-3187b3c41574 h1:cDdkE3V1eIXwN6tdzqVXVYz3RkYVbE8y0n+sn6klUn4=\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"auto\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/ajee/.cache/go-build\"\r\nGOENV=\"/home/ajee/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/ajee/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://goproxy.io\"\r\nGOROOT=\"/usr/lib/go-1.13\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/lib/go-1.13/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build734902289=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nUse vs code 1.42.0, download https://github.com/asticode/go-astilectron-demo and browse its code, after a bit change then save to make gopls activated. \r\n\r\n\r\n\r\n### What did you expect to see?\r\nFrom htop, this memory used by gopls should not be excessive. \r\n\r\n\r\n### What did you see instead?\r\nThe memory usage is soar, up to 9G, sometimes 12G by gopls, and it never goes down.\r\n![image](https://user-images.githubusercontent.com/3023271/74520491-a6a58780-4f52-11ea-92ad-5ae4bf51f969.png)\r\n\r\n\r\nThe similar issue is discussed in https://github.com/golang/go/issues/30309, @stamblerre  encourages to open a new issue. \r\n\r\nThe pprofile svg file is attached as required (in zip file as github required). Any information needed, pls tell me. \r\n\r\nThanks \r\n\r\n[pprof001.zip](https://github.com/golang/go/files/4203876/pprof001.zip)\r\n", "labels": ["Tools", "WaitingForInfo", "gopls"], "number_of_comments": 7, "created_at": "2020-02-14 10:02:40", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565175460": {"author_username": "dan-lind", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37221, "title": "x/tools/gopls: support `gofmt -s` in formatting", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.8 linux/amd64\r\n</pre>\r\n\r\n### What version of gopls are you using (`gopls version`)?\r\n\r\n<pre>\r\n$ gopls version\r\ngolang.org/x/tools/gopls v0.3.2\r\n    golang.org/x/tools/gopls@v0.3.2 h1:eP1aj1AvT6ynElQH6KP0mmOT2gnWa1gYclHL4wGUbMo=\r\n</pre>\r\n\r\n\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/ko1dli/.cache/go-build\"\r\nGOENV=\"/home/ko1dli/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/ko1dli/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/linuxbrew/.linuxbrew/Cellar/go/1.13.8/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/linuxbrew/.linuxbrew/Cellar/go/1.13.8/libexec/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc-5\"\r\nCXX=\"g++-5\"\r\nCGO_ENABLED=\"0\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build977859433=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n\r\n\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nGiven settings.json with\r\n```\r\n    \"go.formatTool\": \"gofmt\",\r\n    \"go.formatFlags\": [\"-s\"],\r\n    \"[go]\": {\r\n        \"editor.formatOnSave\": true,\r\n        \"editor.codeActionsOnSave\": {\r\n            \"source.organizeImports\": true,\r\n        },\r\n        // Optional: Disable snippets, as they conflict with completion ranking.\r\n        \"editor.snippetSuggestions\": \"none\",\r\n    },\r\n```\r\n\r\n\r\n```\r\ntestKey := []*apigateway.ApiKey{\r\n\t\t&apigateway.ApiKey{\r\n\t\t\tName:  aws.String(\"test\"),\r\n\t\t\tId:    aws.String(\"test\"),\r\n\t\t\tValue: aws.String(\"ThisIsMyApiKey\"),\r\n\t\t},\r\n\t}\r\n```\r\n\r\nI save my file\r\n\r\n### What did you expect to see?\r\nProperly formatted code\r\n\r\n```\r\ntestKey := []*apigateway.ApiKey{\r\n\t\t{\r\n\t\t\tName:  aws.String(\"test\"),\r\n\t\t\tId:    aws.String(\"test\"),\r\n\t\t\tValue: aws.String(\"ThisIsMyApiKey\"),\r\n\t\t},\r\n\t}\r\n```\r\n\r\n\r\n### What did you see instead?\r\nNothing changes, causing our CI to complain that the files was not formatted using gofmt -s\r\n\r\n### Relevant logs\r\n\r\n<details><summary><code>gopls -rpc.trace -v check #file#</code> Output</summary><br><pre>\r\n2020/02/14 09:19:17 Info:2020/02/14 09:19:17 Build info\r\n----------\r\ngolang.org/x/tools/gopls v0.3.2\r\n    golang.org/x/tools/gopls@v0.3.2 h1:eP1aj1AvT6ynElQH6KP0mmOT2gnWa1gYclHL4wGUbMo=\r\n    github.com/BurntSushi/toml@v0.3.1\r\n    github.com/sergi/go-diff@v1.0.0 h1:Kpca3qRNrduNnOQeazBd0ysaKrUJiIuISHxogkT9RPQ=\r\n    golang.org/x/mod@v0.1.1-0.20191105210325-c90efee705ee h1:WG0RUwxtNT4qqaXX3DPA8zHFNm/D9xaBpxzHt1WcA/E=\r\n    golang.org/x/sync@v0.0.0-20190423024810-112230192c58\r\n    golang.org/x/tools@v0.0.0-20200212213342-7a21e308cf6c h1:D2X+P0Z6ychko7xn2jvd38yxQfdU0eksO4AHfd8AWFI=\r\n    golang.org/x/xerrors@v0.0.0-20191011141410-1b5146add898 h1:/atklqdjdhuosWIl6AIbOeHJjicWYPqR9bpxqxYG2pA=\r\n    honnef.co/go/tools@v0.0.1-2019.2.3 h1:3JgtbtFHMiCmsznwGVTUWbgGov+pVqnlf1dEJTNAXeM=\r\n    mvdan.cc/xurls/v2@v2.1.0 h1:KaMb5GLhlcSX+e+qhbRJODnUUBvlw01jt4yrjFIHAuA=\r\n\r\nGo info\r\n-------\r\ngo version go1.13.8 linux/amd64\r\n\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/ko1dli/.cache/go-build\"\r\nGOENV=\"/home/ko1dli/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/ko1dli/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/linuxbrew/.linuxbrew/Cellar/go/1.13.8/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/linuxbrew/.linuxbrew/Cellar/go/1.13.8/libexec/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc-5\"\r\nCXX=\"g++-5\"\r\nCGO_ENABLED=\"0\"\r\nGOMOD=\"/c/Users/ko1dli/git/base/src/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build981242842=/tmp/go-build -gno-record-gcc-switches\"\r\n2020/02/14 09:19:20 Info:2020/02/14 09:19:20 go/packages.Load\r\n        snapshot = 0\r\n        query = [./... builtin]\r\n        packages = 223\r\n</pre></details>\r\n\r\n<details><summary><code>gopls logs</code> Output</summary><br><pre>\r\n[Trace - 09:11:49.333 AM] Sending request 'textDocument/codeLens - (15)'.\r\nParams: {\"textDocument\":{\"uri\":\"file:///c/Users/ko1dli/git/base/src/onboarding/sandbox/pre-token-generation/handler_test.go\"}}\r\n\r\n\r\n[Trace - 09:11:49.333 AM] Received response 'textDocument/codeLens - (15)' in 0ms.\r\nResult: {}\r\n\r\n\r\n[Trace - 09:11:49.543 AM] Sending request 'textDocument/codeLens - (16)'.\r\nParams: {\"textDocument\":{\"uri\":\"file:///c/Users/ko1dli/git/base/src/onboarding/sandbox/pre-token-generation/handler_test.go\"}}\r\n\r\n\r\n[Trace - 09:11:49.544 AM] Received response 'textDocument/codeLens - (16)' in 1ms.\r\nResult: {}\r\n\r\n\r\n[Trace - 09:11:49.852 AM] Sending request 'textDocument/codeAction - (17)'.\r\nParams: {\"textDocument\":{\"uri\":\"file:///c/Users/ko1dli/git/base/src/onboarding/sandbox/pre-token-generation/handler_test.go\"},\"range\":{\"start\":{\"line\":0,\"character\":0},\"end\":{\"line\":244,\"character\":0}},\"context\":{\"diagnostics\":[]}}\r\n\r\n\r\n[Trace - 09:11:49.857 AM] Received response 'textDocument/codeAction - (17)' in 4ms.\r\nResult: {}\r\n\r\n\r\n[Trace - 09:11:49.864 AM] Sending request 'textDocument/formatting - (18)'.\r\nParams: {\"textDocument\":{\"uri\":\"file:///c/Users/ko1dli/git/base/src/onboarding/sandbox/pre-token-generation/handler_test.go\"},\"options\":{\"tabSize\":4,\"insertSpaces\":false}}\r\n\r\n\r\n[Trace - 09:11:49.870 AM] Received response 'textDocument/formatting - (18)' in 5ms.\r\nResult: [{\"range\":{\"start\":{\"line\":35,\"character\":1},\"end\":{\"line\":36,\"character\":1}},\"newText\":\"\"},{\"range\":{\"start\":{\"line\":43,\"character\":0},\"end\":{\"line\":44,\"character\":1}},\"newText\":\"\"}]\r\n\r\n\r\n[Trace - 09:11:49.938 AM] Sending notification 'textDocument/didChange'.\r\nParams: {\"textDocument\":{\"uri\":\"file:///c/Users/ko1dli/git/base/src/onboarding/sandbox/pre-token-generation/handler_test.go\",\"version\":3},\"contentChanges\":[{\"range\":{\"start\":{\"line\":43,\"character\":0},\"end\":{\"line\":44,\"character\":1}},\"rangeLength\":2,\"text\":\"\"},{\"range\":{\"start\":{\"line\":35,\"character\":1},\"end\":{\"line\":36,\"character\":1}},\"rangeLength\":2,\"text\":\"\"}]}\r\n\r\n\r\n[Trace - 09:11:50.033 AM] Sending notification 'textDocument/didSave'.\r\nParams: {\"textDocument\":{\"uri\":\"file:///c/Users/ko1dli/git/base/src/onboarding/sandbox/pre-token-generation/handler_test.go\",\"version\":3}}\r\n\r\n\r\n[Trace - 09:11:50.102 AM] Sending request 'textDocument/foldingRange - (19)'.\r\nParams: {\"textDocument\":{\"uri\":\"file:///c/Users/ko1dli/git/base/src/onboarding/sandbox/pre-token-generation/handler_test.go\"}}\r\n\r\n\r\n[Trace - 09:11:50.103 AM] Received response 'textDocument/foldingRange - (19)' in 0ms.\r\nResult: [{\"startLine\":2,\"startCharacter\":8,\"endLine\":13,\"endCharacter\":37,\"kind\":\"imports\"},{\"startLine\":26,\"startCharacter\":50,\"endLine\":58,\"endCharacter\":103},{\"startLine\":61,\"startCharacter\":66,\"endLine\":114,\"endCharacter\":103},{\"startLine\":117,\"startCharacter\":71,\"endLine\":169,\"endCharacter\":93},{\"startLine\":172,\"startCharacter\":41,\"endLine\":183,\"endCharacter\":93},{\"startLine\":186,\"startCharacter\":39,\"endLine\":197,\"endCharacter\":93},{\"startLine\":200,\"startCharacter\":72,\"endLine\":233,\"endCharacter\":25},{\"startLine\":236,\"startCharacter\":41,\"endLine\":240,\"endCharacter\":48}]\r\n\r\n\r\n[Trace - 09:11:50.312 AM] Sending request 'textDocument/codeLens - (20)'.\r\nParams: {\"textDocument\":{\"uri\":\"file:///c/Users/ko1dli/git/base/src/onboarding/sandbox/pre-token-generation/handler_test.go\"}}\r\n\r\n\r\n[Trace - 09:11:50.315 AM] Received response 'textDocument/codeLens - (20)' in 2ms.\r\nResult: {}\r\n\r\n\r\n[Trace - 09:11:50.482 AM] Sending notification 'workspace/didChangeWatchedFiles'.\r\nParams: {\"changes\":[{\"uri\":\"file:///c/Users/ko1dli/git/base/src/onboarding/sandbox/pre-token-generation/handler_test.go\",\"type\":2}]}\r\n\r\n\r\n[Trace - 09:11:50.486 AM] Sending request 'textDocument/codeLens - (21)'.\r\nParams: {\"textDocument\":{\"uri\":\"file:///c/Users/ko1dli/git/base/src/onboarding/sandbox/pre-token-generation/handler_test.go\"}}\r\n\r\n\r\n[Trace - 09:11:50.489 AM] Received response 'textDocument/codeLens - (21)' in 3ms.\r\nResult: {}\r\n\r\n\r\n[Trace - 09:11:50.639 AM] Sending request 'textDocument/documentSymbol - (22)'.\r\nParams: {\"textDocument\":{\"uri\":\"file:///c/Users/ko1dli/git/base/src/onboarding/sandbox/pre-token-generation/handler_test.go\"}}\r\n\r\n\r\n[Trace - 09:11:50.642 AM] Received response 'textDocument/documentSymbol - (22)' in 2ms.\r\nResult: [{\"name\":\"apiMock\",\"detail\":\"*mocks.MockApigwService\",\"kind\":13,\"range\":{\"start\":{\"line\":16,\"character\":0},\"end\":{\"line\":16,\"character\":35}},\"selectionRange\":{\"start\":{\"line\":16,\"character\":4},\"end\":{\"line\":16,\"character\":11}}},{\"name\":\"r\",\"detail\":\"CognitoEventUserPoolsPreTokenGenerationRequest\",\"kind\":13,\"range\":{\"start\":{\"line\":18,\"character\":0},\"end\":{\"line\":22,\"character\":1}},\"selectionRange\":{\"start\":{\"line\":18,\"character\":4},\"end\":{\"line\":18,\"character\":5}}},{\"name\":\"event\",\"detail\":\"CognitoEventUserPoolsPreTokenGeneration\",\"kind\":13,\"range\":{\"start\":{\"line\":24,\"character\":0},\"end\":{\"line\":24,\"character\":63}},\"selectionRange\":{\"start\":{\"line\":24,\"character\":4},\"end\":{\"line\":24,\"character\":9}}},{\"name\":\"TestPreTokenGenerationSuccess\",\"detail\":\"(t *testing.T)\",\"kind\":12,\"range\":{\"start\":{\"line\":26,\"character\":0},\"end\":{\"line\":59,\"character\":1}},\"selectionRange\":{\"start\":{\"line\":26,\"character\":5},\"end\":{\"line\":26,\"character\":34}}},{\"name\":\"TestPreTokenGenerationSuccessWithMultipleKeys\",\"detail\":\"(t *testing.T)\",\"kind\":12,\"range\":{\"start\":{\"line\":61,\"character\":0},\"end\":{\"line\":115,\"character\":1}},\"selectionRange\":{\"start\":{\"line\":61,\"character\":5},\"end\":{\"line\":61,\"character\":50}}},{\"name\":\"TestPreTokenGenerationNoStageFoundWithMultipleKeys\",\"detail\":\"(t *testing.T)\",\"kind\":12,\"range\":{\"start\":{\"line\":117,\"character\":0},\"end\":{\"line\":170,\"character\":1}},\"selectionRange\":{\"start\":{\"line\":117,\"character\":5},\"end\":{\"line\":117,\"character\":55}}},{\"name\":\"TestGetApiKeysFailed\",\"detail\":\"(t *testing.T)\",\"kind\":12,\"range\":{\"start\":{\"line\":172,\"character\":0},\"end\":{\"line\":184,\"character\":1}},\"selectionRange\":{\"start\":{\"line\":172,\"character\":5},\"end\":{\"line\":172,\"character\":25}}},{\"name\":\"TestPreTokenNoKeys\",\"detail\":\"(t *testing.T)\",\"kind\":12,\"range\":{\"start\":{\"line\":186,\"character\":0},\"end\":{\"line\":198,\"character\":1}},\"selectionRange\":{\"start\":{\"line\":186,\"character\":5},\"end\":{\"line\":186,\"character\":23}}},{\"name\":\"TestValidateCognitoEventUserPoolsPreTokenGeneration\",\"detail\":\"(t *testing.T)\",\"kind\":12,\"range\":{\"start\":{\"line\":200,\"character\":0},\"end\":{\"line\":234,\"character\":1}},\"selectionRange\":{\"start\":{\"line\":200,\"character\":5},\"end\":{\"line\":200,\"character\":56}}},{\"name\":\"createMocks\",\"detail\":\"(t gomock.TestReporter)\",\"kind\":12,\"range\":{\"start\":{\"line\":236,\"character\":0},\"end\":{\"line\":241,\"character\":1}},\"selectionRange\":{\"start\":{\"line\":236,\"character\":5},\"end\":{\"line\":236,\"character\":16}}}]\r\n\r\n\r\n[Trace - 09:11:50.650 AM] Sending request 'textDocument/codeLens - (23)'.\r\nParams: {\"textDocument\":{\"uri\":\"file:///c/Users/ko1dli/git/base/src/onboarding/sandbox/pre-token-generation/handler_test.go\"}}\r\n\r\n\r\n[Trace - 09:11:50.651 AM] Received response 'textDocument/codeLens - (23)' in 0ms.\r\nResult: {}\r\n\r\n\r\n[Trace - 09:11:50.906 AM] Sending request 'textDocument/documentLink - (24)'.\r\nParams: {\"textDocument\":{\"uri\":\"file:///c/Users/ko1dli/git/base/src/onboarding/sandbox/pre-token-generation/handler_test.go\"}}\r\n\r\n\r\n[Trace - 09:11:50.923 AM] Received response 'textDocument/documentLink - (24)' in 16ms.\r\nResult: [{\"range\":{\"start\":{\"line\":3,\"character\":2},\"end\":{\"line\":3,\"character\":9}},\"target\":\"https://pkg.go.dev/context\"},{\"range\":{\"start\":{\"line\":4,\"character\":2},\"end\":{\"line\":4,\"character\":8}},\"target\":\"https://pkg.go.dev/errors\"},{\"range\":{\"start\":{\"line\":5,\"character\":2},\"end\":{\"line\":5,\"character\":31}},\"target\":\"https://pkg.go.dev/sas/common/aws/lambda/handler\"},{\"range\":{\"start\":{\"line\":6,\"character\":2},\"end\":{\"line\":6,\"character\":21}},\"target\":\"https://pkg.go.dev/sas/common/aws/xray\"},{\"range\":{\"start\":{\"line\":7,\"character\":2},\"end\":{\"line\":7,\"character\":18}},\"target\":\"https://pkg.go.dev/sas/common/mocks\"},{\"range\":{\"start\":{\"line\":8,\"character\":2},\"end\":{\"line\":8,\"character\":9}},\"target\":\"https://pkg.go.dev/testing\"},{\"range\":{\"start\":{\"line\":10,\"character\":2},\"end\":{\"line\":10,\"character\":31}},\"target\":\"https://pkg.go.dev/github.com/aws/aws-sdk-go/aws\"},{\"range\":{\"start\":{\"line\":11,\"character\":2},\"end\":{\"line\":11,\"character\":46}},\"target\":\"https://pkg.go.dev/github.com/aws/aws-sdk-go/service/apigateway\"},{\"range\":{\"start\":{\"line\":12,\"character\":2},\"end\":{\"line\":12,\"character\":31}},\"target\":\"https://pkg.go.dev/github.com/golang/mock/gomock\"},{\"range\":{\"start\":{\"line\":13,\"character\":2},\"end\":{\"line\":13,\"character\":36}},\"target\":\"https://pkg.go.dev/github.com/stretchr/testify/assert\"},{\"range\":{\"start\":{\"line\":20,\"character\":17},\"end\":{\"line\":20,\"character\":24}},\"target\":\"https://test.se\"}]\r\n\r\n\r\n2020/02/14 09:12:02 background imports cache refresh starting\r\n2020/02/14 09:12:11 background refresh finished after 8.699511s with err: <nil>\r\n</pre></details>", "labels": ["Tools", "gopls"], "number_of_comments": 2, "created_at": "2020-02-14 08:25:41", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565137731": {"author_username": "resssoft", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37220, "title": "compile/arm64: - undefined: hooks [windows]", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n<pre>\r\ngo version go1.13.8 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nset GO111MODULE=\r\nset GOARCH=386\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\UserName\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\UserName\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\UserName\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_amd64\r\nset GCCGO=gccgo\r\nset GO386=sse2\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=0\r\nset GOMOD=\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m32 -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\UserName\\AppData\\Local\\Temp\\go-build321695466=/tmp/go-build -gno-record-gcc-switches\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\ninstall mingw-w64 from sourceforge.net\r\n\r\n<details><summary><code>go get \"github.com/go-vgo/robotgo\"</code> Output</summary><br><pre>\r\n# github.com/go-vgo/robotgo\r\nC:\\Users\\UserName\\go\\src\\github.com\\go-vgo\\robotgo\\hook.go:53:10: undefined: hook.AddEvent\r\nC:\\Users\\UserName\\go\\src\\github.com\\go-vgo\\robotgo\\hook.go:65:2: undefined: hook.StopEvent\r\nC:\\Users\\UserName\\go\\src\\github.com\\go-vgo\\robotgo\\hook.go:70:19: undefined: hook.Event\r\nC:\\Users\\UserName\\go\\src\\github.com\\go-vgo\\robotgo\\hook.go:71:9: undefined: hook.Start\r\nC:\\Users\\UserName\\go\\src\\github.com\\go-vgo\\robotgo\\hook.go:76:2: undefined: hook.End\r\nC:\\Users\\UserName\\go\\src\\github.com\\go-vgo\\robotgo\\hook.go:85:7: undefined: hook.Start\r\nC:\\Users\\UserName\\go\\src\\github.com\\go-vgo\\robotgo\\hook.go:98:18: undefined: hook.KeyHold\r\nC:\\Users\\UserName\\go\\src\\github.com\\go-vgo\\robotgo\\hook.go:106:18: undefined: hook.KeyUp\r\nC:\\Users\\UserName\\go\\src\\github.com\\go-vgo\\robotgo\\keycode.go:14:16: undefined: Map\r\nC:\\Users\\UserName\\go\\src\\github.com\\go-vgo\\robotgo\\keycode.go:25:15: undefined: Map\r\nC:\\Users\\UserName\\go\\src\\github.com\\go-vgo\\robotgo\\hook.go:106:18: too many errors\r\n</pre></details>\r\n\r\n\r\n<details><summary> <code>gcc -v</code> Output</summary><br><pre>\r\nUsing built-in specs.\r\nCOLLECT_GCC=gcc\r\nCOLLECT_LTO_WRAPPER=c:/mingw/bin/../libexec/gcc/mingw32/8.2.0/lto-wrapper.exe\r\nTarget: mingw32\r\nConfigured with: ../src/gcc-8.2.0/configure --build=x86_64-pc-linux-gnu --host=mingw32 --target=mingw32 --prefix=/mingw --disable-win32-registry --with-arch=i586 --with-tune=generic --enable-languages=c,c++,objc,obj-c++,fortran,ada --with-pkgversion='MinGW.org GCC-8.2.0-5' --with-gmp=/mingw --with-mpfr=/mingw --with-mpc=/mingw --enable-static --enable-shared --enable-threads --with-dwarf2 --disable-sjlj-exceptions --enable-version-specific-runtime-libs --with-libiconv-prefix=/mingw --with-libintl-prefix=/mingw --enable-libstdcxx-debug --with-isl=/mingw --enable-libgomp --disable-libvtv --enable-nls --disable-build-format-warnings\r\nThread model: win32\r\ngcc version 8.2.0 (MinGW.org GCC-8.2.0-5)\r\n</pre></details>\r\n\r\n### Compile for 386\r\ngo1.13.8.windows-386\r\nInstall mingw-get-0.6.3-mingw32-pre-20170905-1-bin.tar.xz from http://www.mingw.org/\r\n<details><summary> <code>go get \"github.com/go-vgo/robotgo\"</code> Output</summary><br><pre>\r\n# github.com/robotn/gohook\r\nC:\\Users\\UserName\\AppData\\Local\\Temp\\go-build569959594\\b043\\_x003.o: In function `eb_port_create':\r\nC:/Users/UserName/go/src/github.com/robotn/gohook/chan/eb_chan.h:382: undefined reference to `sched_yield'\r\nC:\\Users\\UserName\\AppData\\Local\\Temp\\go-build569959594\\b043\\_x003.o: In function `eb_port_free':\r\nC:/Users/UserName/go/src/github.com/robotn/gohook/chan/eb_chan.h:350: undefined reference to `sched_yield'\r\nC:/Users/UserName/go/src/github.com/robotn/gohook/chan/eb_chan.h:341: undefined reference to `sched_yield'\r\nC:\\Users\\UserName\\AppData\\Local\\Temp\\go-build569959594\\b043\\_x003.o: In function `cleanup_ops':\r\nC:/Users/UserName/go/src/github.com/robotn/gohook/chan/eb_chan.h:858: undefined reference to `sched_yield'\r\nC:/Users/UserName/go/src/github.com/robotn/gohook/chan/eb_chan.h:858: undefined reference to `sched_yield'\r\nC:\\Users\\UserName\\AppData\\Local\\Temp\\go-build569959594\\b043\\_x003.o:C:/Users/UserName/go/src/github.com/robotn/gohook/chan/eb_chan.h:643: more undefined references to `sched_yield' follow\r\ncollect2.exe: error: ld returned 1 exit status\r\n</pre></details>\r\n\r\n", "labels": ["OS-Windows", "WaitingForInfo"], "number_of_comments": 2, "created_at": "2020-02-14 06:44:31", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565092802": {"author_username": "divjotarora", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37219, "title": "proposal: x/crypto/ocsp: Return ocsp.Request from CreateRequest instead of []byte", "body": "The `ocsp.CreateRequest` function returns an OCSP request as a `[]byte`. It would be helpful to instead have it return `ocsp.Request`, which can then be marshalled into `[]byte` if needed.\r\n\r\nMy specific use case is implementing a cache for OCSP responses. Per https://community.digicert.com/en/blogs.entry.html/2015/02/26/what-is-ocsp.html, the cache key should be the `CertID` sequence for the OCSP request (issueNameHash + issueKeyHash + serialNumber). All of these fields are calculated in `ocsp.CreateRequest` but because that function returns a `[]byte`, accessing them after it's been called would require an additional call to `ocsp.ParseRequest`, which seems wasteful.\r\n\r\nI'm not sure what the stability guarantee is for the x/crypto/ocsp library, but if changing the return type for the existing function isn't feasible, perhaps a new function could be added or the existing function could be deprecated and split into two functions.", "labels": ["Proposal"], "number_of_comments": 0, "created_at": "2020-02-14 04:12:24", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564992983": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37218, "title": "cmd/go: go list incorrectly says that can only use path@version syntax with 'go get'", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14rc1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/home/manlio/.local/bin\"\r\nGOCACHE=\"/home/manlio/.cache/go-build\"\r\nGOENV=\"/home/manlio/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/manlio/.local/lib/go:/home/manlio/src/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/manlio/sdk/go1.14rc1\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/manlio/sdk/go1.14rc1/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/dev/null\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build001001616=/tmp/go-build -gno-record-gcc-switches\"\r\nGOROOT/bin/go version: go version go1.14rc1 linux/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.14rc1\r\nuname -sr: Linux 5.5.2-arch1-1\r\n/usr/lib/libc.so.6: GNU C Library (GNU libc) stable release version 2.31.\r\ngdb --version: GNU gdb (GDB) 9.1\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nExecuting:\r\n```\r\ngo list -json golang.org/x/tools/gopls@v0.3.0\r\n```\r\nreports the error:\r\n```\r\ncan't load package: package golang.org/x/tools/gopls@v0.3.0: can only use path@version syntax with 'go get'\r\n```\r\n\r\nHowever the error message is wrong, since `path@version` can also be used with `go list -m` and `go mod download`.", "labels": ["GoCommand", "NeedsFix"], "number_of_comments": 1, "created_at": "2020-02-13 22:40:50", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564976149": {"author_username": "miquella", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37217, "title": "os/exec: (*SysProcAttr).Foreground causes the spawned process to hang", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.6 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes \u2014 tried with `go1.14rc1`\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/markse/.cache/go-build\"\r\nGOENV=\"/home/markse/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/markse\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build088413182=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n    \"os\"\r\n    \"os/exec\"\r\n    // \"os/signal\"\r\n    \"syscall\"\r\n)\r\n\r\nfunc main() {\r\n    // This does make it work, but shouldn't be necessary and causes side-effects\r\n    // signal.Ignore(syscall.SIGTTIN, syscall.SIGTTOU)\r\n\r\n    cmd := exec.Command(\"echo\", \"hello\")\r\n    cmd.SysProcAttr = &syscall.SysProcAttr{\r\n        Foreground: true,\r\n    }\r\n    cmd.Stdin, cmd.Stdout, cmd.Stderr = os.Stdin, os.Stdout, os.Stderr\r\n    cmd.Run()\r\n}\r\n\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nThe process should execute `echo` and display `hello`.\r\n\r\n### What did you see instead?\r\n\r\nThe process hangs.\r\n\r\n`ps` shows the child process as suspended and doesn't appear to have called `execve` yet:\r\n\r\n```console\r\n$ ps j\r\n PPID   PID  PGID   SID TTY      TPGID STAT   UID   TIME COMMAND\r\n\u2026\r\n 6072 25553 25553  6072 pts/0    25553 Dl+   1000   0:00 ./foreground\r\n25553 25558 25558  6072 pts/0    25553 T     1000   0:00 ./foreground\r\n\u2026\r\n```\r\n\r\n# Explanation\r\n\r\nFrom what we can determine, we believe this is what is happening:\r\n\r\n1. The process is forked ([ref](https://github.com/golang/go/blob/go1.14rc1/src/syscall/exec_linux.go#L205))\r\n2. The child calls `setpgid`/`SYS_SETPGID`, creating a new background process group ([ref](https://github.com/golang/go/blob/go1.14rc1/src/syscall/exec_linux.go#L265))\r\n3. The child calls `tcsetpgrp`/`TIOCSPGRP`, causing the process to be suspended ([ref](https://github.com/golang/go/blob/go1.14rc1/src/syscall/exec_linux.go#L280))\r\n\r\nWhile a process in the foreground process group is allowed to call `tcsetpgrp`, a process in a background process group has an additional hurdle. From the man page for `tcsetpgrp`:\r\n\r\n> If `tcsetpgrp()` is called by a member of a background process group in its session, and the calling process is not blocking or ignoring `SIGTTOU`, a `SIGTTOU` signal is sent to all members of this background process group.\r\n\r\nWhich explains why the process is getting suspended, as the default action for `SIGTTOU` is to stop the process. This also explains when ignoring `SIGTTOU` before spawning the process fixes the problem. However, this has an undesired side-effect: the subsequently exec'd process then ignores `SIGTTOU` as well.\r\n\r\n# Conclusion\r\n\r\nUnfortunately, because all of this work is done in the child fork, there is no way for Go user code to reset the ignored `SIGTTOU` before exec'ing the process.\r\n\r\nSo there is no way to have a user ignore the `SIGTTOU` signal without an adverse effect on the child process.\r\n\r\nProposal: if the `SIGTTOU` signal could be ignored for the duration of the `tcsetpgrp`/`TIOCSPGRP` call and restored to its prior state immediately following, we believe this would elicit the expected behavior without adverse side-effects.", "labels": ["NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-02-13 22:01:45", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564933791": {"author_username": "hyangah", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37215, "title": "x/tools/gopls: enable debug server and some tracing by default", "body": "currently we ask users to supply flags such as `-port` and `-rpc.trace` and restart gopls when debugging is needed. Please consider turning on the debug port by default and make some traces available.\r\n\r\n- Port number needs to be picked up randomly - so we will need a way for the client to ask gopls about the debug port location.\r\n- May need too allow opt-out.\r\n", "labels": ["Tools", "gopls"], "number_of_comments": 0, "created_at": "2020-02-13 20:32:22", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564933687": {"author_username": "heschik", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37214, "title": "cmd/go: \"package not found\" error is less useful than GOPATH's when the missing package could have been in the main module", "body": "Given the following setup:\r\n```\r\n-- gopath/src/example.com/go.mod --\r\nmodule example.com\r\n\r\ngo 1.14\r\n-- gopath/src/example.com/main.go --\r\npackage main\r\n\r\nimport (\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\r\n\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"example.com/mypkg\"\r\n)\r\n\r\nfunc main() {\r\n\u00a0 \u00a0 \u00a0 \u00a0 fmt.Println(mypkg.Message)\r\n}\r\n-- gopath/src/example.com/mypackage/doc.go --\r\npackage mypackage\r\n\r\nconst Message = \"sup\"\r\n```\r\n\r\nand then running:\r\n\r\n```\r\n$ export GOPATH=$PWD/gopath\r\n$ cd gopath/src/example.com\r\n$ GO111MODULE=off go run main.go\r\nmain.go:6:2: cannot find package \"example.com/mypkg\" in any of:\r\n\t.../go/src/example.com/mypkg (from $GOROOT)\r\n\t../gopath/src/example.com/mypkg (from $GOPATH)\r\n```\r\n\r\nThis is clear and actionable: there are two directories that could have contained the package, and neither did. You can ls the directories, compare the paths to the filesystem, etc.\r\n\r\nIn module mode:\r\n\r\n```\r\n$ GO111MODULE=on gotip run main.go\r\ngo: finding module for package example.com/mypkg\r\nmain.go:6:2: cannot find module providing package example.com/mypkg: unrecognized import path \"example.com/mypkg\": reading https://example.com/mypkg?go-get=1: 404 Not Found\r\n```\r\n\r\nThis is much less actionable. Why is it going to the Internet for a package that should be on the local filesystem? Did it look anywhere first, and if so where? (If example.com were a GitHub URL the error would be different, but talking about private repos isn't any more helpful here.)\r\n\r\nIn case it wasn't obvious, the problem is a typo: the package is named mypackage, not mypkg. I think the GOPATH error gives a new user a fighting chance of finding their mistake; the module error needs at least a basic understanding of package-to-module resolution, and nested modules (!) to make any sense.\r\n\r\nConcretely, I would like to see the module mode error look more like the GOPATH error:\r\n\r\n```\r\nmain.go:6:2: cannot find package \"example.com/mypkg\" in any of:\r\n   \t.../go/src/example.com/mypkg (standard library)\r\n\t../gopath/src/example.com/mypkg (module example.com)\r\n       https://example.com/mypkg (module example.com/mypkg): unrecognized import path \"example.com/mypkg\": reading https://example.com/mypkg?go-get=1: 404 Not Found\r\n```\r\n\r\n@bcmills @jayconrod\r\n\r\n", "labels": ["GoCommand", "NeedsFix", "modules"], "number_of_comments": 3, "created_at": "2020-02-13 20:32:11", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564842691": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37213, "title": "x/tools/gopls: invalidate package IDs (specific to command-line-arguments)", "body": "Now that we load the entire workspace, we can invalidate package IDs when metadata changes.", "labels": ["Tools", "gopls"], "number_of_comments": 1, "created_at": "2020-02-13 17:34:17", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564730662": {"author_username": "DrRibosome", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37211, "title": "encoding/xml: Decoder allocates (and does not release) memory for every control <?...?> encountered", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/jcrawford/.cache/go-build\"\r\nGOENV=\"/home/jcrawford/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/jcrawford/git/gowork\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/jcrawford/opt/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/jcrawford/opt/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/jcrawford/git/djtest/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build917252283=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nParse an xml file that includes multiple `<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>` control tags in the same file.\r\n\r\nFor each encountered tag, a new reader will be created and will _not_ be released (see below for details).\r\n\r\nIt is possible to trigger this with a degenerate xml consisting of _only_ repeated tags. As an example, I created a file of ~400kb in size containing 9030 lines of:\r\n```\r\n$ head bad.xml \r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\r\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\r\n```\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"encoding/xml\"\r\n\t\"golang.org/x/net/html/charset\"\r\n\t\"io\"\r\n\t\"os\"\r\n\t\"runtime/pprof\"\r\n)\r\n\r\nfunc main() {\r\n\tpath := \"bad.xml\"\r\n\r\n\tf, err := os.Open(path)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tdec := xml.NewDecoder(f)\r\n\tdec.CharsetReader = charset.NewReaderLabel\r\n\r\n\ttype Unused struct{}\r\n\r\n\tfor {\r\n\t\tvar value Unused\r\n\t\terr = dec.Decode(&value)\r\n\t\tif err == io.EOF {\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\theapOut, err := os.Create(\"heap\")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tpprof.WriteHeapProfile(heapOut)\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\nMemory usage somewhat constant\r\n\r\n\r\n### What did you see instead?\r\nMemory usage grows for every `<?...?>` tag encountered.\r\n\r\nProfiling the heap with pprof, the problem appears to be that for every `<?...?>` tag encountered in `xml.Decoder.rawToken`, a new `*charset.Reader` is created through `charset.NewReaderLabel`. The decoder then switches to this new reader with `xml.Decoder.switchToReader` (and also wraps it in another `*bufio.Reader`). However, it looks like references to the previous readers (created when we encountered previous `<?...?>` tags) are never garbage collected. As a result, parsing a large file with enough `<?...?>` can exhaust the system memory.\r\n\r\nAs an example, running `go tool pprof heap` on the heap file produced above shows 44 MB of usage for the 9030 line example (which was ~400kb in size) \r\n```\r\n(pprof) top\r\nShowing nodes accounting for 44.67MB, 100% of 44.67MB total\r\nShowing top 10 nodes out of 12\r\n      flat  flat%   sum%        cum   cum%\r\n   25.10MB 56.18% 56.18%    25.10MB 56.18%  golang.org/x/text/transform.NewReader\r\n   19.58MB 43.82%   100%    19.58MB 43.82%  bufio.NewReaderSize\r\n         0     0%   100%    19.58MB 43.82%  bufio.NewReader\r\n         0     0%   100%    44.67MB   100%  encoding/xml.(*Decoder).Decode\r\n         0     0%   100%    44.67MB   100%  encoding/xml.(*Decoder).DecodeElement\r\n         0     0%   100%    44.67MB   100%  encoding/xml.(*Decoder).Token\r\n         0     0%   100%    44.67MB   100%  encoding/xml.(*Decoder).rawToken\r\n         0     0%   100%    19.58MB 43.82%  encoding/xml.(*Decoder).switchToReader\r\n         0     0%   100%    44.67MB   100%  encoding/xml.(*Decoder).unmarshal\r\n         0     0%   100%    25.10MB 56.18%  golang.org/x/net/html/charset.NewReaderLabel\r\n```", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-13 14:44:34", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564723865": {"author_username": "pfwgbe", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37210, "title": "cmd/vet: warn about more malformed JSON struct tags", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.4 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes, the problem appears with 1.13.8 as well.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/XYZ/Library/Caches/go-build\"\r\nGOENV=\"/Users/XYZ/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"example.com/*\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/XYZ/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"http://proxy.example.com\"\r\nGOROOT=\"/Users/XYZ/go/go1.13.4\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/Users/XYZ/go/go1.13.4/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/fm/6cbjfz6s33qbxn77r5lt89cc0000gp/T/go-build495195143=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\nI ran `go vet` on the following code:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"encoding/json\"\r\n)\r\n\r\ntype S struct {\r\n\tFoo int `json:\"fnord.foo\"`\r\n}\r\n\r\nfunc main() {\r\n\tdata := []byte(`\r\n\t\t{\r\n\t\t\t\"fnord\": {\r\n\t\t\t\t\"foo\": 1\r\n\t\t\t}\r\n\t\t}\r\n\t`)\r\n\r\n\tvar s S\r\n\terr := json.Unmarshal(data, &s)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tfmt.Printf(\"%#v\\n\", s)\r\n}\r\n```\r\n\r\n\r\n### What did you expect to see?\r\nI expected `go vet` to warn me about the undecodable parts of the struct, with something like \"`encoding/json` does not support dot-separated paths\"\r\n\r\n### What did you see instead?\r\n`go vet` did not print any output and had a zero exit value, indicating that there are no problems with the code.", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-13 14:33:50", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564633576": {"author_username": "Doorer", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37208, "title": "x/sys/unix: If mips64le termios Ispeed and Ospeed can work", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\nIn mips64le , The Termios struct doesn't has member Ospeed or Ispeed\r\nstruct termios\r\n  {\r\n    tcflag_t c_iflag;           /* input mode flags */\r\n    tcflag_t c_oflag;           /* output mode flags */\r\n    tcflag_t c_cflag;           /* control mode flags */\r\n    tcflag_t c_lflag;           /* local mode flags */\r\n    cc_t c_line;                /* line discipline */\r\n    cc_t c_cc[NCCS];            /* control characters */\r\n  };\r\n\r\nIn golang/sys/unix/ztypes_linux_mips64le.go, I found this define\r\nTermios struct {\r\n\tIflag  uint32\r\n\tOflag  uint32\r\n\tCflag  uint32\r\n\tLflag  uint32\r\n\tLine   uint8\r\n\tCc     [23]uint8\r\n\tIspeed uint32\r\n\tOspeed uint32\r\n}\r\nWill the member Ispped and Ospeed  can work ?\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.3 linux/mips64le\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nI think so\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"mips64le\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/jlzhang/.cache/go-build\"\r\nGOENV=\"/home/jlzhang/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"mips64le\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/jlzhang/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"direct\"\r\nGOROOT=\"/usr/lib/golang\"\r\nGOSUMDB=\"off\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/lib/golang/pkg/tool/linux_mips64le\"\r\nGCCGO=\"gccgo\"\r\nGOMIPS64=\"hardfloat\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"0\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -mabi=64 -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build438676280=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\nI use termios ,but can not work. I found the diffrent between syscall and unix\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nno\r\n\r\n### What did you expect to see?\r\nno\r\n\r\n### What did you see instead?\r\nno", "labels": ["WaitingForInfo"], "number_of_comments": 5, "created_at": "2020-02-13 11:54:56", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564510520": {"author_username": "orlangure", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37206, "title": "testing: when using a custom TestMain, m.Run does not return if one of the tests it runs panics", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/yury/Library/Caches/go-build\"\r\nGOENV=\"/Users/yury/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/yury/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/Users/yury/go/src/github.com/orlangure/myproject/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/p1/rjgq2gp55pj58ckbsn94yfz80000gn/T/go-build564127360=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI wrote a function, a test for it, and `TestMain` to perform setup and teardown for testing this function:\r\n\r\nmain.go\r\n```go\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n\tfmt.Println(\"vim-go\")\r\n}\r\n\r\nfunc p() {\r\n\tpanic(\"foo\")\r\n}\r\n```\r\n\r\np_test.go\r\n```go\r\npackage main\r\n\r\nimport \"testing\"\r\n\r\nfunc TestP(t *testing.T) {\r\n\tp()\r\n}\r\n```\r\n\r\nmain_test.go\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"os\"\r\n\t\"testing\"\r\n)\r\n\r\nfunc TestMain(m *testing.M) {\r\n\tos.Exit(testMain(m))\r\n}\r\n\r\nfunc testMain(m *testing.M) int {\r\n\tsetup()\r\n\tdefer teardown()\r\n\r\n\treturn m.Run()\r\n}\r\n\r\nfunc setup() {\r\n\tfmt.Println(\"setting up\")\r\n}\r\n\r\nfunc teardown() {\r\n\tfmt.Println(\"tearing down\")\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\nI expected to see \"setting up\" and \"tearing down\" at some point, and a panic \"foo\" message with a stack trace.\r\n\r\n\r\n### What did you see instead?\r\nOnly setup and panic output appeared:\r\n\r\n```\r\nsetting up\r\n--- FAIL: TestP (0.00s)\r\npanic: foo [recovered]\r\n        panic: foo\r\n\r\ngoroutine 19 [running]:\r\ntesting.tRunner.func1(0xc0000b6100)\r\n        /usr/local/go/src/testing/testing.go:874 +0x3a3\r\npanic(0x1111220, 0x116b4d0)\r\n        /usr/local/go/src/runtime/panic.go:679 +0x1b2\r\nakeyless.io/akeyless-main-repo/go/src/t.p(...)\r\n...\r\nFAIL\r\n```\r\n\r\nThe program probably called `os.Exit` at some point while running the tests, or panicked in a separate go routine with no way for me to recover. I would expect both setup and teardown functions to be called at some point.", "labels": ["NeedsInvestigation"], "number_of_comments": 4, "created_at": "2020-02-13 08:12:28", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564492235": {"author_username": "gonzojive", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37205, "title": "x/tools/gopls: support and documentation for bazel-based projects", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nn/a\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nn/a\r\n\r\n### What did you do?\r\n\r\nWrote a project with bazel with .go files and .proto files. The protobufs generate go code, which I'm not sure how to make understandable to gopls. Code completion for this code does not work in VSCode.\r\n\r\n### What did you expect to see?\r\n\r\n1. Documentation of how to set up a Bazel-based project in the [User guide](https://github.com/golang/tools/blob/master/gopls/doc/user.md).\r\n2. An example project that works and loads in an IDE like VS Code\r\n\r\n\r\n### What did you see instead?\r\n\r\nScattered information on the level of support and no example projects.\r\n\r\n### Related links:\r\n\r\n1. https://github.com/bazelbuild/rules_go/issues/512 - main source of updates on gopackagesdriver progress\r\n2. https://github.com/bazelbuild/rules_go/wiki/Editor-and-tool-integration: Design doc for gopackagesdriver - I'm not sure how accurate this is\r\n3. https://github.com/microsoft/vscode-go/issues/2755 - gopls support for GOPACKAGESDRIVER in VS Code\r\n4. https://github.com/bazelbuild/rules_go/issues/393 - editor integration issue for rules_go\r\n5. https://github.com/golang/go/issues/34341 - documentation request for GOPACKAGESDRIVER\r\n6. Code: [jmhodges/rules_go/go/tools/gopackagesdriver](https://github.com/jmhodges/rules_go/tree/a710386e6956baa4a83d73d406c8d0255354818b/go/tools/gopackagesdriver), [gopackagesdriver in rules_go feature branch](https://github.com/bazelbuild/rules_go/tree/feature/gopackagesdriver/go/tools/gopackagesdriver), [tools/go/packages/external.go](https://github.com/golang/tools/blob/master/go/packages/external.go) seems to implement the external packages driver", "labels": ["Documentation", "FeatureRequest", "Tools", "gopls"], "number_of_comments": 5, "created_at": "2020-02-13 07:29:57", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564432507": {"author_username": "mdwhatcott", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37203, "title": "testing: parallel subtest log output not properly constrained in go1.14rc1", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14rc1 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n- The bad behavior reported below can be consistently reproduced with go1.14rc1.\r\n- The good behavior reported below can be consistently reproduced with go1.13.8.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/mike/Library/Caches/go-build\"\r\nGOENV=\"/Users/mike/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/mike\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/Users/mike/src/github.com/smartystreets/gunit/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/d1/m6l916pn5sn0t3wp5jgy63sr0000gn/T/go-build658210039=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nConsider the following sample program, which runs 10 subtests using `t.Parallel()`:\r\n\r\n```\r\npackage example\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"testing\"\r\n)\r\n\r\nfunc Test(t *testing.T) {\r\n\tfor x := 0; x < 10; x++ {\r\n\t\tt.Run(\"Hello\"+fmt.Sprint(x), func(t *testing.T) {\r\n\t\t\tt.Parallel()\r\n\t\t\tt.Log(t.Name())\r\n\t\t})\r\n\t}\r\n}\r\n\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expected to see the output aligned with the final report for each subtest, which works\r\nin go1.13.8 (just released earlier today).\r\n\r\n```\r\n$ go version && go test -v\r\ngo version go1.13.8 darwin/amd64\r\n=== RUN   Test\r\n=== RUN   Test/Hello0\r\n=== PAUSE Test/Hello0\r\n=== RUN   Test/Hello1\r\n=== PAUSE Test/Hello1\r\n=== RUN   Test/Hello2\r\n=== PAUSE Test/Hello2\r\n=== RUN   Test/Hello3\r\n=== PAUSE Test/Hello3\r\n=== RUN   Test/Hello4\r\n=== PAUSE Test/Hello4\r\n=== RUN   Test/Hello5\r\n=== PAUSE Test/Hello5\r\n=== RUN   Test/Hello6\r\n=== PAUSE Test/Hello6\r\n=== RUN   Test/Hello7\r\n=== PAUSE Test/Hello7\r\n=== RUN   Test/Hello8\r\n=== PAUSE Test/Hello8\r\n=== RUN   Test/Hello9\r\n=== PAUSE Test/Hello9\r\n=== CONT  Test/Hello0\r\n=== CONT  Test/Hello5\r\n=== CONT  Test/Hello9\r\n=== CONT  Test/Hello8\r\n=== CONT  Test/Hello4\r\n=== CONT  Test/Hello3\r\n=== CONT  Test/Hello2\r\n=== CONT  Test/Hello1\r\n=== CONT  Test/Hello7\r\n=== CONT  Test/Hello6\r\n--- PASS: Test (0.00s)\r\n    --- PASS: Test/Hello0 (0.00s)\r\n        stuff_test.go:12: Test/Hello0\r\n    --- PASS: Test/Hello5 (0.00s)\r\n        stuff_test.go:12: Test/Hello5\r\n    --- PASS: Test/Hello9 (0.00s)\r\n        stuff_test.go:12: Test/Hello9\r\n    --- PASS: Test/Hello8 (0.00s)\r\n        stuff_test.go:12: Test/Hello8\r\n    --- PASS: Test/Hello4 (0.00s)\r\n        stuff_test.go:12: Test/Hello4\r\n    --- PASS: Test/Hello3 (0.00s)\r\n        stuff_test.go:12: Test/Hello3\r\n    --- PASS: Test/Hello2 (0.00s)\r\n        stuff_test.go:12: Test/Hello2\r\n    --- PASS: Test/Hello1 (0.00s)\r\n        stuff_test.go:12: Test/Hello1\r\n    --- PASS: Test/Hello7 (0.00s)\r\n        stuff_test.go:12: Test/Hello7\r\n    --- PASS: Test/Hello6 (0.00s)\r\n        stuff_test.go:12: Test/Hello6\r\nPASS\r\nok  \texample\t0.086s\r\n```\r\n\r\n\r\n### What did you see instead?\r\n\r\nNotice that in go1.14rc1 the test log output appears in unexpected places in the \r\noverall verbose output. This change in behavior makes the output more difficult to decipher for \r\nhumans and causes test log output to be lost when scanned by test runners in \r\neditors and IDEs (such as Intellij GoLand).\r\n\r\n```\r\n$ go version && go test -v\r\ngo version go1.14rc1 darwin/amd64\r\n=== RUN   Test\r\n=== RUN   Test/Hello0\r\n=== PAUSE Test/Hello0\r\n=== RUN   Test/Hello1\r\n=== PAUSE Test/Hello1\r\n=== RUN   Test/Hello2\r\n=== PAUSE Test/Hello2\r\n=== RUN   Test/Hello3\r\n=== PAUSE Test/Hello3\r\n=== RUN   Test/Hello4\r\n=== PAUSE Test/Hello4\r\n=== RUN   Test/Hello5\r\n=== PAUSE Test/Hello5\r\n=== RUN   Test/Hello6\r\n=== PAUSE Test/Hello6\r\n=== RUN   Test/Hello7\r\n=== PAUSE Test/Hello7\r\n=== RUN   Test/Hello8\r\n=== PAUSE Test/Hello8\r\n=== RUN   Test/Hello9\r\n=== PAUSE Test/Hello9\r\n=== CONT  Test/Hello0\r\n    Test/Hello0: stuff_test.go:12: Test/Hello0\r\n=== CONT  Test/Hello5\r\n=== CONT  Test/Hello4\r\n    Test/Hello4: stuff_test.go:12: Test/Hello4\r\n=== CONT  Test/Hello3\r\n    Test/Hello5: stuff_test.go:12: Test/Hello5\r\n    Test/Hello3: stuff_test.go:12: Test/Hello3\r\n=== CONT  Test/Hello8\r\n    Test/Hello8: stuff_test.go:12: Test/Hello8\r\n=== CONT  Test/Hello2\r\n    Test/Hello2: stuff_test.go:12: Test/Hello2\r\n=== CONT  Test/Hello7\r\n=== CONT  Test/Hello1\r\n    Test/Hello7: stuff_test.go:12: Test/Hello7\r\n    Test/Hello1: stuff_test.go:12: Test/Hello1\r\n=== CONT  Test/Hello6\r\n    Test/Hello6: stuff_test.go:12: Test/Hello6\r\n=== CONT  Test/Hello9\r\n    Test/Hello9: stuff_test.go:12: Test/Hello9\r\n--- PASS: Test (0.00s)\r\n    --- PASS: Test/Hello0 (0.00s)\r\n    --- PASS: Test/Hello4 (0.00s)\r\n    --- PASS: Test/Hello5 (0.00s)\r\n    --- PASS: Test/Hello3 (0.00s)\r\n    --- PASS: Test/Hello8 (0.00s)\r\n    --- PASS: Test/Hello2 (0.00s)\r\n    --- PASS: Test/Hello7 (0.00s)\r\n    --- PASS: Test/Hello1 (0.00s)\r\n    --- PASS: Test/Hello6 (0.00s)\r\n    --- PASS: Test/Hello9 (0.00s)\r\nPASS\r\nok  \texample\t0.915s\r\n```\r\n\r\nThis feels very much like a newly-introduced bug.", "labels": ["NeedsInvestigation"], "number_of_comments": 7, "created_at": "2020-02-13 04:30:40", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564240408": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37201, "title": "runtime: TestCgoPprofPIE is flaky", "body": "[2020-02-12T18:22:50-363bcd0/linux-ppc64le-power9osu](https://build.golang.org/log/1aa4511be96a9122a43eaf00d505ea84ec5e4c66)\r\n[2020-02-07T18:08:01-b806182/linux-amd64-jessie](https://build.golang.org/log/3828f8edcad5e964fcb48d064340ebaa471120c2)\r\n\r\n```\r\n--- FAIL: TestCgoPprofPIE (8.17s)\r\n    crash_cgo_test.go:311: [/workdir/go/bin/go tool pprof -traces /workdir/tmp/go-build499031835/testprogcgo_-buildmode=pie.exe /workdir/tmp/prof767840548]:\r\n        File: testprogcgo_-buildmode=pie.exe\r\n        Build ID: 8fb7f17909e63decefe761e095ce9dbd1c97e738\r\n        Type: cpu\r\n        Time: Feb 7, 2020 at 6:35pm (UTC)\r\n        Duration: 200.51ms, Total samples = 0 \r\n        -----------+-------------------------------------------------------\r\n    crash_cgo_test.go:319: cpuHog traceback missing.\r\n    crash_cgo_test.go:311: [/workdir/go/bin/go tool pprof -traces /workdir/tmp/prof767840548]:\r\n        File: testprogcgo_-buildmode=pie.exe\r\n        Build ID: 8fb7f17909e63decefe761e095ce9dbd1c97e738\r\n        Type: cpu\r\n        Time: Feb 7, 2020 at 6:35pm (UTC)\r\n        Duration: 200.51ms, Total samples = 0 \r\n        -----------+-------------------------------------------------------\r\n    crash_cgo_test.go:319: cpuHog traceback missing.\r\nFAIL\r\nFAIL\truntime\t33.607s\r\n```\r\n\r\nGiven the timing of the logs, it's not clear to me whether this is a regression in Go 1.14 or simply an already-flaky test coming to the surface.\r\n\r\nCC @mknyszek @aclements @hyangah @ianlancetaylor @mpx ", "labels": ["NeedsInvestigation"], "number_of_comments": 5, "created_at": "2020-02-12 20:08:34", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564167393": {"author_username": "rakyll", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37198, "title": "go.dev: Examples title is not generated, anchor link to examples is not working", "body": "On https://pkg.go.dev/cloud.google.com/go, the \"Examples\" anchor link is not working because there is no \"Examples\" title in the page. I couldn't reproduce it in other pages.", "labels": ["NeedsFix", "go.dev"], "number_of_comments": 3, "created_at": "2020-02-12 17:55:20", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564164242": {"author_username": "glinton", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37197, "title": "cmd/go: go list should not add a dependency to go.mod", "body": "Possibly related to https://github.com/golang/go/issues/36812\r\nRe-open of https://github.com/golang/go/issues/28014 which was not a duplicate of 27643\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/me/.cache/go-build\"\r\nGOENV=\"/home/me/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/opt/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/opt/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/tmp/listTest/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build352932148=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n```sh\r\nmkdir /tmp/listTest\r\ncd /tmp/listTest\r\n\r\ngo mod init test\r\n# go: creating new go.mod: module test\r\n\r\ncat go.mod\r\n# module test\r\n# \r\n# go 1.13\r\n\r\ngo list github.com/golang/protobuf/proto\r\n# github.com/golang/protobuf/proto\r\n\r\ncat go.mod\r\n# module test\r\n# \r\n# go 1.13\r\n# \r\n# require github.com/golang/protobuf v1.3.3 // indirect\r\n\r\ngo mod tidy\r\n\r\ncat go.mod \r\n# module test\r\n# \r\n# go 1.13\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nI expected to see if the package argument to `go list` was present in my go environment. No file writes.\r\n\r\n### What did you see instead?\r\n\r\nI saw that the package argument to `go list` was present, but I also saw an intrusive update to my `go.mod`.\r\n", "labels": ["NeedsInvestigation", "WaitingForInfo", "modules"], "number_of_comments": 2, "created_at": "2020-02-12 17:49:17", "reactions": {"total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564118758": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37196, "title": "time: a Timer should not send to its channel after its Stop method returns", "body": "In https://github.com/golang/go/issues/14383#issuecomment-220657111, @rsc said:\r\n\r\n> There is an argument for making\r\n>\r\n> ```go\r\n> tr := time.NewTimer(0)\r\n> tr.Stop()\r\n> // There may or may not be a value in the channel now. But definitely\r\n> // one should not be added after we receive it.\r\n> select {\r\n>         case <-tr.C:\r\n>         default:\r\n> }\r\n> ```\r\n> work, but it doesn't today, and we're certainly not going to do that for Go 1.7. Maybe early in Go 1.8 if someone wants to file a _different_ bug.\r\n\r\nAs far as I can tell, no different bug was filed: the documentation for `(*Timer).Stop` still says:\r\nhttps://github.com/golang/go/blob/7d2473dc81c659fba3f3b83bc6e93ca5fe37a898/src/time/sleep.go#L57-L66\r\nand that behavior is still resulting in subtle bugs (#27169). (Note that @rsc himself assumed that a `select` should work in this way in https://github.com/golang/go/issues/14038#issuecomment-219909704.)\r\n\r\nI think we should tighten up the invariants of `(*Timer).Stop` to eliminate this subtlety.\r\n\r\nCC @empijei @matttproud @the80srobot @ianlancetaylor ", "labels": ["NeedsDecision", "early-in-cycle"], "number_of_comments": 4, "created_at": "2020-02-12 16:32:11", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564118319": {"author_username": "ridersofrohan", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37195, "title": "x/tools/gopls: import errors are not disappearing on first file of project", "body": "When I create a new project, I run `go mod init` and then create the first .go file for that package. I first type\r\n\r\n`package main`\r\n\r\nthen proceed to type \r\n```\r\nfunc main() {\r\n\tlog.Println(\"HERE\")\r\n}\r\n```\r\n\r\nWhen I hit save, the `import log` shows up, which is correct but then the error on the `log.Println()` does not disappear.\r\n\r\nThe error messages that keep coming up are: \"getting file for AllImportsFixes: command-line-arguments has no metadata\" and \"diagnose: no workspace packages: command-line-arguments has no metadata\".\r\n\r\nThis issue seems to be on [go/packages/golist.go#L289](https://github.com/golang/tools/blob/ea181f53ac568019e9fb1574c252555775c01e28/go/packages/golist.go#L289) and seems to be caused from falling back to using an ad-hoc package is there is an error loading the package, I think the problem here is that if the file does not have a package line yet, then the package that gets returned from go/packages will be \"command-line-arguments\". gopls caches this package and attempts to keep loading this package on file changes and never gets any metadata back.", "labels": ["Tools", "gopls"], "number_of_comments": 0, "created_at": "2020-02-12 16:31:31", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564111425": {"author_username": "kindermoumoute", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37194, "title": "go.dev: README relative image links are broken", "body": "In tab `overview` all relative urls from the `README.md` are correctly replaced to absolute urls using GitHub's base url. This should be done as well for relative image path. \r\n\r\n### What did you do?\r\nGo to https://pkg.go.dev/github.com/scaleway/scaleway-sdk-go?tab=overview\r\n\r\n\r\n### What did you expect to see?\r\nImage rendering correctly\r\n\r\n\r\n### What did you see instead?\r\nBroken image link\r\n", "labels": ["NeedsFix", "go.dev"], "number_of_comments": 1, "created_at": "2020-02-12 16:20:56", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564098162": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37193, "title": "cmd/compile: the compiler should probably recognize runtime.Goexit", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14rc1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/home/manlio/.local/bin\"\r\nGOCACHE=\"/home/manlio/.cache/go-build\"\r\nGOENV=\"/home/manlio/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/manlio/.local/lib/go:/home/manlio/src/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/manlio/sdk/go1.14rc1\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/manlio/sdk/go1.14rc1/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/dev/null\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build423783759=/tmp/go-build -gno-record-gcc-switches\"\r\nGOROOT/bin/go version: go version go1.14rc1 linux/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.14rc1\r\nuname -sr: Linux 5.5.2-arch1-1\r\n/usr/lib/libc.so.6: GNU C Library (GNU libc) stable release version 2.31.\r\ngdb --version: GNU gdb (GDB) 8.3.1\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nhttps://play.golang.org/p/SZZ4gDss0DK\r\n\r\n### What did you expect to see?\r\n\r\nThe program to be compiled.\r\n\r\n### What did you see instead?\r\n\r\n```\r\n/prog.go:13:1: missing return at end of function\r\n```\r\n\r\nThe Go compiler does not know that `runtime.Goexit` causes the function to exit, so the `return` statement is unreachable and not required.\r\n\r\nOf course there are similar functions like `os.Exit`, but `Goexit` is part of the runtime, so it should probably be recognized by the compiler.\r\n\r\nOn the other hand, `vet` **should** know about `runtime.Goexit` and should report that the statements after `Goexit()` are not reachable.\r\n\r\nThe `compile` or `vet` commands should also report an error if a function used in the `go` statement has a non empty result in the signature, but this is a different issue and probably there is a reason why it does not report an error.", "labels": ["NeedsDecision"], "number_of_comments": 4, "created_at": "2020-02-12 16:00:51", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563893694": {"author_username": "dolmen", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37188, "title": "image/color: documentation doesn't include links to relevant color theory resources", "body": "\r\n### What version of Go are you using (`go version`)?\r\n\r\n\r\n<pre>\r\n$ go version\r\n1.13.7\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes: https://tip.golang.org/pkg/image/color/\r\n\r\n### What did you expect to see?\r\n\r\nThe `image/color` relies on some color theory. But no pointers are given to learn about that theory.\r\n\r\nHere are a few questions for which the documentation should give answers or even just hints:\r\n* What is Alpha?\r\n* What is the difference between alpha-premultiplied and non-alpha-premultiplied (some answer exists in doc for type [RGBA](https://tip.golang.org/pkg/image/color/#RGBA), but more in overview would be helpful) and when should one be used).\r\n\r\nAlso, no examples. That would be useful to understand [Model](https://tip.golang.org/pkg/image/color/#Model).\r\n\r\n### What did you see instead?\r\n\r\nThe [package overview section](https://tip.golang.org/pkg/image/color/#pkg-overview) is a single sentence:\r\n\r\n> Package color implements a basic color library.\r\n", "labels": ["Documentation", "NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-12 10:17:26", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563882715": {"author_username": "hhrutter", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37187, "title": "pkg.go.dev: Prioritize github organizations", "body": "Hi!\r\n\r\nThank you for pkg.go.dev.\r\nGreat and very useful site!\r\n\r\nI am the maintainer of the repository previously known as:\r\nhttps://github.com/hhrutter/pdfcpu\r\n\r\nWe rolled pdfcpu into an organization some time ago and it is now located at:\r\nhttps://github.com/pdfcpu/pdfcpu\r\n\r\nWhen I search for `pdfcpu` the first couple of hits I get are for the old location of the repo and this is no good.\r\n\r\nI am hoping there is a way to prioritize packages for search terms where both an organization and the repository name match over others.\r\n\r\nSimply put if I search for `pdfcpu` I expect the first hits to point to:\r\nhttps://github.com/pdfcpu/pdfcpu\r\n\r\n\r\n", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 2, "created_at": "2020-02-12 09:58:41", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563753456": {"author_username": "muirdm", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37183, "title": "x/tools/gopls: unimported completions do a lot of work", "body": "I noticed unimported completions were adding 30ms latency to every completion request via `imports.GetAllCandidates`. It seems to be mostly from allocations:\r\n\r\n`filepath.Join` in `findPackage`\r\n`path.Join` in `canonicalize`\r\n`filepath.Rel` in `canUse`\r\n`strconv.Atoi` in `ImportPathToAssumedName` (perhaps due to error allocation)\r\n\r\nThere is also an `ioutil.ReadDir` call in `findPackage` that gets called hundreds of time. It was trying to read non-existent directories in the module cache that do exist for different versions of the module.\r\n\r\nMaybe the easiest thing is to offer some way to disable unimported package name candidates, leaving unimported package member candidates. That way we wouldn't call `GetAllCandidates` at all most of the time. I know we don't want config option bloat, though.\r\n\r\nMaybe another option is to have a very coarse cache of the result of imports.GetAllCandidates that gets busted whenever any watched file event comes? It's weird that everything is mostly cached already but we still do some much work every time.\r\n\r\n/cc @heschik ", "labels": ["Tools", "gopls"], "number_of_comments": 1, "created_at": "2020-02-12 04:58:00", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563718933": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37182, "title": "x/mod/zip: TestVCS is failing on linux-amd64-longtest and linux-386-longtest sometimes", "body": "Spotted at https://build.golang.org/?repo=golang.org%2fx%2fmod on the longtest builders.\r\n\r\n```\r\n--- FAIL: TestVCS (0.00s)\r\n    --- FAIL: TestVCS/rsc.io_quote@v1.5.1 (31.75s)\r\n        zip_test.go:944: fetch -f --depth=1 origin refs/tags/v1.5.1:refs/tags/v1.5.1: exit status 128\r\n    --- FAIL: TestVCS/rsc.io_quote_v3@v3.0.0 (31.75s)\r\n        zip_test.go:944: fetch -f --depth=1 origin refs/tags/v3.0.0:refs/tags/v3.0.0: exit status 128\r\n    --- FAIL: TestVCS/rsc.io_quote@v1.1.0 (31.79s)\r\n        zip_test.go:944: fetch -f --depth=1 origin refs/tags/v1.1.0:refs/tags/v1.1.0: exit status 128\r\nFAIL\r\nFAIL\tgolang.org/x/mod/zip\t37.982s\r\n```\r\n\r\nI can't reproduce locally on macOS right now. Unsure if it was a temporary problem, Linux-specific, or if something about the builders is different. Needs investigation.\r\n\r\n/cc @matloob @jayconrod @bcmills", "labels": ["NeedsInvestigation", "help wanted"], "number_of_comments": 3, "created_at": "2020-02-12 03:18:09", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563642183": {"author_username": "quackenbush", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37180, "title": "cmd/compile: error has incorrect column number", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n1.13.7\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/pdq/gocode\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/Cellar/go/1.13.7\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.13.7/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/mv/slwhmwcj03d0npjtlsnjcm2m0000gn/T/go-build196033875=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\npdq@quackbook-air ~/v/simscope $\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nPlayground: https://play.golang.org/p/DyuvyvPwrv6\r\n\r\n```\r\npackage main\r\n\r\ntype ABC struct {\r\n\tA string\r\n}\r\n\r\nfunc hello(first string, second string, third bool) {\r\n}\r\n\r\nfunc main() {\r\nvar abc ABC\r\nhello(\"hello\", \"world\", abc)\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n./prog.go:12:24: cannot use abc (type ABC) as type bool in argument to hello\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n./prog.go:12:16: cannot use abc (type ABC) as type bool in argument to hello\r\n```\r\n\r\nNOTE: I removed leading whitespace in the source code to eliminate ambiguity.  \r\n\r\nThe error is pointing to the second argument column (\"world\" on column 12) instead of the third argument column (abc on column 24).\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 5, "created_at": "2020-02-12 00:29:00", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563514146": {"author_username": "phil-flyclops", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37177, "title": "x/mobile: asset.Open does not work in iOS when called within a generated framework", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.6 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/phil/Library/Caches/go-build\"\r\nGOENV=\"/Users/phil/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/phil/Projects/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/opt/go/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/opt/go/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/s_/fn36m4ms5pb1dhwc8jsn35fm0000gn/T/go-build556855453=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nExported a `gomobile bind` produced framework which attempted to use `golang.org/x/mobile/asset`'s Open function\r\nhttps://godoc.org/golang.org/x/mobile/asset#Open\r\n\r\nI used the platform specific output in Android and iOS projects.\r\n\r\n### What did you expect to see?\r\n\r\nI expected that on Android I would be able to read the file at run time if it was placed in the `src/main/assets` directory of the Android project where our GoMobile library was being included\r\n\r\nI expected that on iOS I would be able to read the file at run time if it was set up as a Bundle Resource in XCode for the project where our GoMobile framework was being included\r\n\r\n### What did you see instead?\r\n\r\nOn Android it was able to discover a JSON file in the `src/main/assets` directory with a known name without issue.\r\n\r\nOn iOS I added the file in XCode and verified it was available in the `[[NSBundle mainBundle] resourcePath]` directory in Objective-C at runtime.  Gomobile could not discover this, and was looking in a relatively pathed /assets directory instead of the directory where Bundle Resources where placed in the app.\r\n\r\nThe source code of the iOS implementation of the function does not seem to actually use any native APIs to discover the root of where it should look for bundle resources https://github.com/golang/mobile/blob/master/asset/asset_darwin_armx.go\r\n", "labels": ["NeedsInvestigation", "mobile"], "number_of_comments": 1, "created_at": "2020-02-11 22:08:59", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563509700": {"author_username": "ihgann", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37176, "title": "crypto/x509: certificate validation in Windows fails to validate IP in SAN", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.5 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/ganni/Library/Caches/go-build\"\r\nGOENV=\"/Users/ganni/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/ganni/.gvm/pkgsets/go1.13.5/global\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/Users/ganni/.gvm/gos/go1.13.5\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/Users/ganni/.gvm/gos/go1.13.5/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/jk/kkbbm14x25l9hj_xj1rb4scm002zdg/T/go-build540477719=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI ran the following quick program to reproduce it:\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"io/ioutil\"\r\n\t\"net/http\"\r\n\t\"os\"\r\n\t\"time\"\r\n)\r\n\r\nfunc main() {\r\n\tclient := http.Client{\r\n\t\tTimeout: 5 * time.Second,\r\n\t}\r\n\tresp, err := client.Get(\"https://192.168.210.129\")\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t\tos.Exit(1)\r\n\t\treturn\r\n\t}\r\n\r\n\tdefer resp.Body.Close()\r\n\tbody, err := ioutil.ReadAll(resp.Body)\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t\tos.Exit(1)\r\n\t\treturn\r\n\t}\r\n\r\n\tfmt.Printf(\"Response:\\n\\n%s\", string(body))\r\n}\r\n```\r\n\r\nWhere `192.168.210.129` is a custom server using a self-signed certificate. The notable aspects of this cert are that I'm connecting via IP (which is not present in the CN) and it is only present in the `IP Address` field of the SAN, like so:\r\n\r\n```\r\nIP Address=192.168.210.129\r\n```\r\n\r\nWhen I compile the binary to run on a Windows box, I run the following:\r\n\r\n```\r\nGOOS=windows GOARCH=386 go build -o quicktest.exe main.go\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nI expect to see a response from the server. This server is healthy and I can access it from my browser, so I expect to see an HTML output from the last line.\r\n\r\n### What did you see instead?\r\n\r\nI see the following output while running:\r\n\r\n```\r\nPS C:\\> C:\\quicktest.exe\r\nGet https://192.168.210.129: x509: certificate is valid for 192.168.210.129, not 192.168.210.129\r\n```\r\n\r\nThe interesting part is that it that's the same IP address in both notes.\r\n\r\nI then ran a modified version of `go` to add a `panic` near https://sourcegraph.com/github.com/golang/go@release-branch.go1.11/-/blob/src/crypto/x509/root_windows.go#L129, changing:\r\n\r\n```\r\n\u00a0 if status.Error != 0 {\r\n\u00a0   switch status.Error {\r\n\u00a0   case syscall.CERT_E_EXPIRED:\r\n\u00a0     return CertificateInvalidError{c, Expired, \"\"}\r\n\u00a0   case syscall.CERT_E_CN_NO_MATCH:\r\n\u00a0     return HostnameError{c, opts.DNSName}\r\n```\r\n\r\nto\r\n\r\n```\r\n\u00a0 if status.Error != 0 {\r\n\u00a0   switch status.Error {\r\n\u00a0   case syscall.CERT_E_EXPIRED:\r\n\u00a0     return CertificateInvalidError{c, Expired, \"\"}\r\n\u00a0   case syscall.CERT_E_CN_NO_MATCH:\r\n      panic(\"failed here\")\r\n\u00a0     // return HostnameError{c, opts.DNSName}\r\n```\r\n\r\nand see the following stack trace to verify this is indeed where it fails, which is Windows-specific.\r\n\r\n```\r\nWindows PowerShell\r\nCopyright (C) 2016 Microsoft Corporation. All rights reserved.\r\n\r\nPS C:\\> & 'C:\\quicktestcustom.exe'\r\npanic: failed here\r\n\r\ngoroutine 21 [running]:\r\ncrypto/x509.checkChainSSLServerPolicy(0x128cc2c0, 0xb2d7b8, 0x128adb6c, 0xb14850, 0x128adab8)\r\n        /code/github.com/golang/go-darwin-amd64-bootstrap/src/crypto/x509/root_windows.go:130 +0x2c7\r\ncrypto/x509.(*Certificate).systemVerify(0x128cc2c0, 0x128adb6c, 0x0, 0x0, 0x0, 0x0, 0x0)\r\n        /code/github.com/golang/go-darwin-amd64-bootstrap/src/crypto/x509/root_windows.go:213 +0x652\r\ncrypto/x509.(*Certificate).Verify(0x128cc2c0, 0x1289a280, 0xf, 0x128f65c0, 0x0, 0x526d9c8, 0xbf88e6b7, 0x112bdfd, 0x0, 0\r\nx814560, ...)\r\n        /code/github.com/golang/go-darwin-amd64-bootstrap/src/crypto/x509/verify.go:750 +0x5b6\r\ncrypto/tls.(*Conn).verifyServerCertificate(0x128fc000, 0x12892320, 0x1, 0x1, 0x3eb, 0x0)\r\n        /code/github.com/golang/go-darwin-amd64-bootstrap/src/crypto/tls/handshake_client.go:815 +0x1e4\r\ncrypto/tls.(*clientHandshakeState).doFullHandshake(0x128adec8, 0x128ba0e0, 0x68)\r\n        /code/github.com/golang/go-darwin-amd64-bootstrap/src/crypto/tls/handshake_client.go:452 +0x136c\r\ncrypto/tls.(*clientHandshakeState).handshake(0x128adec8, 0x128a26c0, 0x0)\r\n        /code/github.com/golang/go-darwin-amd64-bootstrap/src/crypto/tls/handshake_client.go:397 +0x343\r\ncrypto/tls.(*Conn).clientHandshake(0x128fc000, 0x0, 0x0)\r\n        /code/github.com/golang/go-darwin-amd64-bootstrap/src/crypto/tls/handshake_client.go:206 +0x47a\r\ncrypto/tls.(*Conn).Handshake(0x128fc000, 0x0, 0x0)\r\n        /code/github.com/golang/go-darwin-amd64-bootstrap/src/crypto/tls/conn.go:1340 +0xe0\r\nnet/http.(*persistConn).addTLS.func2(0x0, 0x128fc000, 0x128f4400, 0x128f43c0)\r\n        /code/github.com/golang/go-darwin-amd64-bootstrap/src/net/http/transport.go:1453 +0x34\r\ncreated by net/http.(*persistConn).addTLS\r\n        /code/github.com/golang/go-darwin-amd64-bootstrap/src/net/http/transport.go:1449 +0x175\r\n```\r\n\r\nI also further validated I do not see such issues on Linux or Mac machines.\r\n\r\nFor additional debugging help, I should also mention I only have access to one specific Windows machine that I tested with at the time, so I'm not sure if this is apparent on other Windows versions.\r\n\r\nMy Windows version is: `Windows Server 2012 R2 Standard`", "labels": ["NeedsInvestigation", "OS-Windows"], "number_of_comments": 3, "created_at": "2020-02-11 22:03:05", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563503392": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37175, "title": "x/exp: reconsider using single module for all unrelated experimental packages of various maturity levels", "body": "The [`golang.org/x/exp`](https://pkg.go.dev/golang.org/x/exp) repository is described in its [README](https://github.com/golang/exp#readme) as:\r\n\r\n> # exp\r\n> \r\n> This subrepository holds experimental and deprecated (in the `old`\r\n> directory) packages.\r\n> \r\n> The idea for this subrepository originated as the `pkg/exp` directory\r\n> of the main repository, but its presence there made it unavailable\r\n> to users of the binary downloads of the Go installation. The\r\n> subrepository has therefore been created to make it possible to `go\r\n> get` these packages.\r\n> \r\n> **Warning:** Packages here are experimental and unreliable. Some may\r\n> one day be promoted to the main repository or other subrepository,\r\n> or they may be modified arbitrarily or even disappear altogether.\r\n> \r\n> In short, code in this subrepository is not subject to the Go 1\r\n> compatibility promise. (No subrepo is, but the promise is even more\r\n> likely to be violated by go.exp than the others.)\r\n>\r\n> Caveat emptor.\r\n\r\nIt currently contains various unrelated experimental packages that are not related to each other. Some of them are more experimental and less stable, while others are more stable and less experimental.\r\n\r\nBack when GOPATH mode was the only build mode available, there was not a high cost to having many unrelated packages in one repository.\r\n\r\nIn module mode, having many unrelated packages in one module can contribute to increasing the size of the module graph.\r\n\r\nFor example, the `cloud.google.com/go` module [requires](https://github.com/googleapis/google-cloud-go/blob/8424551aaabf77725889145395f5d6e92f7bb652/go.mod#L19) `golang.org/x/exp` because it uses `cmd/apidiff`, which means all transitive module requirements of all packages in `golang.org/x/exp` are added to anyone's module that uses at least one Google Cloud Client library from `cloud.google.com/go`.\r\n\r\nThe module mirror (https://proxy.golang.org) helps protect users from individual dependencies being unavailable at the origin server, but at this time there are still some users that haven't started using it for various reasons. I expect that number will continue to go down over time. See various user feedback from a recent outage affecting one of `golang.org/x/exp` dependencies:\r\n\r\n- https://twitter.com/houseofcat_io/status/1226998473876221952\r\n- https://twitter.com/SkyTweetHome/status/1226998970905440256\r\n- https://twitter.com/codyaray/status/1227007742914813952\r\n- https://github.com/shurcooL/home/issues/37\r\n\r\nIt can be argued that perhaps the `cloud.google.com/go` module should not be requiring `golang.org/x/exp` (that can still be investigated in a separate issue at https://github.com/googleapis/google-cloud-go/issues), but maybe there can be a better solution in `golang.org/x/exp` that would make it possible to keep separate packages and their dependencies more isolated.\r\n\r\nOne possible idea is to move the `shiny` project into a nested module at `golang.org/x/exp/shiny`, which would remove its dependencies from the main module. It's unclear how scaleable such a solution is or how applicable it would be in the general case, but it would likely help people who want to import `cmd/apidiff`.\r\n\r\nOpening this issue to discuss and look for ways to improve the current situation if possible.\r\n\r\nOther related issues:\r\n\r\n- #27900 - cmd/go: 'go mod why' should have an answer for every module in 'go list -m all'\r\n- #29935 - x/build: reconsider the large number of third-party dependencies\r\n- #35221 - x/exp: depends on unreliable repository\r\n\r\n/cc @bcmills @jayconrod @matloob @jba @dsymonds @robpike", "labels": ["NeedsInvestigation", "modules"], "number_of_comments": 4, "created_at": "2020-02-11 21:53:39", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563480181": {"author_username": "randall77", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37174, "title": "runtime: Darwin slow when using signals + int->float instructions", "body": "Split off from #37121 \r\n\r\n```\r\npackage bench1\r\n\r\nimport (\r\n\t\"math\"\r\n\t\"testing\"\r\n)\r\n\r\nconst N = 64\r\n\r\nfunc BenchmarkFast(b *testing.B) {\r\n\tvar x, y, z [N]float32\r\n\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\tmulFast(&x, &y, &z)\r\n\t}\r\n}\r\n\r\nfunc mulFast(x, y, z *[N]float32) {\r\n\tfor i := 0; i < N; i++ {\r\n\t\tz[i] = x[i] * y[i]\r\n\t}\r\n}\r\n\r\nfunc BenchmarkSlow(b *testing.B) {\r\n\tvar z [N]float32\r\n\tvar x, y [N]uint32\r\n\r\n\tfor i := 0; i < b.N; i++ {\r\n\t\tmulSlow(&x, &y, &z)\r\n\t}\r\n}\r\n\r\nfunc mulSlow(x, y *[N]uint32, z *[N]float32) {\r\n\tfor i := 0; i < N; i++ {\r\n\t\tz[i] = math.Float32frombits(x[i]) * math.Float32frombits(y[i])\r\n\t}\r\n}\r\n```\r\n```\r\n% ~/go1.12.9/bin/go test bench1_test.go -test.bench .\\* -test.benchtime=10000000x \r\ngoos: darwin\r\ngoarch: amd64\r\nBenchmarkFast-16    \t10000000\t        55.9 ns/op\r\nBenchmarkSlow-16    \t10000000\t        61.1 ns/op\r\nPASS\r\n% ~/go1.12.9/bin/go test bench1_test.go -test.bench .\\* -test.benchtime=10000000x -test.cpuprofile=cpu.prof\r\ngoos: darwin\r\ngoarch: amd64\r\nBenchmarkFast-16    \t10000000\t        89.7 ns/op\r\nBenchmarkSlow-16    \t10000000\t       223 ns/op\r\nPASS\r\n```\r\nFor some strange reason, code that includes int->float instructions runs a *lot* slower when profiling is on.\r\n\r\nThis bug is reproducible from at least 1.11.\r\n", "labels": ["NeedsInvestigation", "OS-Darwin", "Performance"], "number_of_comments": 12, "created_at": "2020-02-11 21:12:47", "reactions": {"total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563476424": {"author_username": "cherrymui", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37173, "title": "cmd/link: go version fails on internally linked PIE", "body": "### What version of Go are you using (`go version`)?\r\n\r\ntip (1c241d28792fad017cbd64bae72ea3f3ee51e4df)\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nlinux/amd64\r\n\r\n### What did you do?\r\n\r\nRelated to issue #31861, `go version` still fails on internally linked PIE.\r\n\r\n```\r\n$ go build -buildmode=pie -ldflags=-linkmode=internal hello.go \r\n$ go version hello\r\nhello: go version not found\r\n```\r\n\r\nIt seems the problem is that for building PIE, we generate dynamic relocations for address references. This includes the address references for the build info, specifically in symbols `.go.buildinfo`, `runtime.buildVersion`, and `runtime.modinfo`. When we generate dynamic relocations, we just leave the bytes in the binary unset (as zero), as the dynamic linker will overwrite it at run time anyway. But `go version` examines the file, so it won't be able to follow the address references.\r\n\r\nI see the following ways for fixing this:\r\n1. when generating dynamic relocations, also apply the relocations statically (to the address without the base), so the file content can be used to find the reference. However, this will make the linker resolve more relocations that are unnecessary.\r\n2. ~only apply the static relocations to specific symbols (namely, `.go.buildinfo`, `runtime.buildVersion`, and `runtime.modinfo`). We need to keep the list of special symbols in sync with the runtime and the go command, though.~\r\n3. teach `go version` about resolving dynamic relocations. Seems overkill.\r\n\r\n@ianlancetaylor @rsc @bcmills for thoughts. I can do the implementation once we decide which way to go.\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 2, "created_at": "2020-02-11 21:05:44", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563458406": {"author_username": "chauncyc", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37172, "title": "proposal: crypto/x509: parse additional fields in CertificateRequest", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ 1.13.4\r\n\r\n</pre>\r\n\r\n`ParseCertificate` parses many common extensions and puts them in the `Certificate` struct. I'd like for `ParseCertificateRequest` to do the same. Specifically, I currently manually parse the following fields from `CertificateRequest.Extensions`, and would like for them to be added to `CertificateRequest`, with the corresponding changes to `ParseCertificateRequest` and `CreateCertificateRequest`, exactly as they're implemented for `Certificate`:\r\n\r\n- KeyUsage\r\n- ExtKeyUsage\r\n- UnknownExtKeyUsage\r\n- IsCA\r\n- MaxPathLen\r\n- BasicConstraintsValid\r\n- MaxPathLenZero\r\n- SubjectKeyId\r\n- PolicyIdentifier", "labels": ["Proposal", "Proposal-Crypto"], "number_of_comments": 2, "created_at": "2020-02-11 20:29:44", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563450804": {"author_username": "cagedmantis", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37171, "title": "x/build: build infrastructure secrets should be stored in a single secure location.", "body": "Secrets required by services in the build repository do not currently have a canonical storage location. The secrets should also be encrypted and stored in a secure location which has a clear audit log of access and changes made to the secrets. We should explore the possible options for secrets management.\r\n\r\n@toothrot @dmitshur @FiloSottile ", "labels": ["Builders"], "number_of_comments": 3, "created_at": "2020-02-11 20:15:00", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563395979": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37170, "title": "x/tools/gopls: add support for extracting a function/variable as a code action", "body": "See https://github.com/microsoft/vscode-go/issues/3040.\r\n\r\nhttps://microsoft.github.io/language-server-protocol/specifications/specification-3-15/#textDocument_codeAction has more details on the possibilities here.\r\n\r\nThe function refactoring can be implemented by making use of guru's freevars code.", "labels": ["Tools", "gopls"], "number_of_comments": 0, "created_at": "2020-02-11 18:31:35", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563381414": {"author_username": "jayconrod", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37169, "title": "cmd/go: error not reported for packages in vendor/ in module mode, without vendoring", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, also reproduces with 1.14rc1.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/jayconrod/Library/Caches/go-build\"\r\nGOENV=\"/Users/jayconrod/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/jayconrod/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"direct\"\r\nGOROOT=\"/opt/go/installed\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/opt/go/installed/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/Users/jayconrod/Code/test/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/rq/x0692kqj6ml8cvrhcqh5bswc008xj1/T/go-build248121802=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nCreated a regular package in a directory named `vendor`, not created with `go mod vendor`, not using `-mod=vendor`.\r\n\r\n```\r\n! go list -deps example.com/m\r\n\r\n-- go.mod --\r\nmodule example.com/m\r\n\r\ngo 1.14\r\n-- use.go --\r\npackage use\r\n\r\nimport (\r\n\t_ \"example.com/m/vendor\"\r\n\t_ \"example.com/m/vendor/x\"\r\n)\r\n-- vendor/vendor.go --\r\npackage vendor\r\n-- vendor/x/x.go --\r\npackage x\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nErrors reported for packages in `vendor/` when `-mod=vendor` is not active.\r\n\r\nThese are being treated as regular packages. Other modules won't be able to import these packages, since vendor directories are excluded from module zip files.\r\n\r\n### What did you see instead?\r\n\r\n`go list` treats these like regular packages:\r\n\r\n```\r\n$ go list -deps example.com/m\r\nexample.com/m/vendor\r\nexample.com/m/vendor/x\r\nexample.com/m\r\n```\r\n\r\ncc @matloob @bcmills \r\n", "labels": ["GoCommand", "NeedsFix", "modules"], "number_of_comments": 2, "created_at": "2020-02-11 18:02:48", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563380235": {"author_username": "FiloSottile", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37168, "title": "proposal: new cryptographic assembly policy", "body": "The crypto packages are unfortunately rich in assembly implementations, which are especially hard to review and maintain due to the diversity of architectures, and to the complexity of the optimizations.\r\n\r\nOur current assembly policy at [golang.org/wiki/AssemblyPolicy](https://golang.org/wiki/AssemblyPolicy) has failed to make reviews manageable with the resources the security team currently has. https://go-review.googlesource.com/q/hashtag:crypto-assembly\r\n\r\nThe result is suboptimal for everyone: implementers have to follow more rules, but reviewers still can\u2019t effectively review their CLs, and no one is happy.\r\n\r\nI am proposing a new, much stricter policy. This acknowledges the reality that assembly reviews are currently not moving at an acceptable pace, and shifts more of the load on the implementers, but with a promise that their work won\u2019t go wasted in the review queue. It should also progressively increase the maintainability, reliability and security of the assembly codebases, as well as surface improvement areas for the compiler so that the assembly can be eventually removed.\r\n\r\nThis policy would apply to all packages in `crypto/...` and `golang.org/x/crypto/...`. Due to its use in cryptographic packages, and to the fact that it's partially maintained by the security team, this policy would also extend to `math/big`.\r\n\r\n---\r\n\r\n* We prefer portable Go, not assembly. Code in assembly means (N packages * M architectures) to maintain, rather than just N packages.\r\n* Minimize use of assembly. We'd rather have a small amount of assembly for a 50% speedup rather than twice as much assembly for a 55% speedup. Explain the decision to place the assembly/Go boundary where it is in the commit message, and support it with benchmarks.\r\n* Use higher level programs to generate assembly, either standalone Go programs or `go get`-able programs, like [avo](https://github.com/mmcloughlin/avo). Output of other reproducible processes (like formally verified code generators) will also be considered. Discuss the implementation strategy on the issue tracker in advance.\r\n* Use small, testable units (25\u201375 lines) called from higher-level logic written in Go. If using small, testable units called from logic written in Go is too slow, use small, testable assembly functions with Go-compatible wrappers, so that Go tests can still test the individual units.\r\n* Any assembly function needs a reference Go implementation, that\u2019s tested and fuzzed side-by-side with the assembly. Follow [golang.org/wiki/TargetSpecific](https://golang.org/wiki/TargetSpecific) for structure and testing practices.\r\n* Document in the Go code why the implementation requires assembly (specific performance benefit, access to instructions, etc), so we can reevaluate as the compiler improves.\r\n\r\n", "labels": ["Proposal", "Proposal-Crypto"], "number_of_comments": 11, "created_at": "2020-02-11 18:00:26", "reactions": {"total_count": 30, "+1": 20, "-1": 1, "laugh": 0, "heart": 9, "hooray": 0}}, "563364850": {"author_username": "brompwnie", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37167, "title": "crypto/tls: This change removes the size parameter from the Generate functions", "body": "The \"size\" parameter appears to not be used by the Generate functions, removing it.\r\n", "labels": ["cla: yes"], "number_of_comments": 6, "created_at": "2020-02-11 17:31:44", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563287977": {"author_username": "rbucker", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37166, "title": "proposal: package tools", "body": "## BACKGROUND\r\n\r\nMy development environment just ran out of disk space and when I checked I determined that `$HOME/go` was the culprit. I started to look at the contents only to discover that there were so\r\nmany packages from places I've never hear of. Granted some were OK because they were legit. For example:\r\n\r\n```\r\ncloud.google.com\r\n```\r\n\r\nbut others like a seriously sketchy\r\n\r\n```\r\ngo.uber.org\r\nopencensus.io\r\ngocloud\r\n```\r\n\r\n### Feature request(s)\r\n\r\nI do not doubt that is a complex ask but it is a serious flaw and potentially worse that docker hub\r\n\r\n- need a white list of packages or git repos\r\n- need an abort on nth level deps\r\n- need tools to fork a project tree recursively\r\n- need a way to determine if some set of libs could potentially communicate outside their sandbox", "labels": ["Proposal", "Proposal-FinalCommentPeriod"], "number_of_comments": 1, "created_at": "2020-02-11 15:33:48", "reactions": {"total_count": 5, "+1": 0, "-1": 3, "laugh": 0, "heart": 0, "hooray": 0}}, "563257143": {"author_username": "carlmjohnson", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37165, "title": "Proposal: Add `??` operator to select first non-zero value", "body": "It is often asked why Go does not have a ternary operator. The Go FAQ says,\r\n\r\n> The if-else form, although longer, is unquestionably clearer. A language needs only one conditional control flow construct.\r\n\r\nHowever, technically Go has [a second form of control flow](https://play.golang.org/p/67wbLR-NB7c):\r\n\r\n```go\r\nfunc printer(i int) bool {\r\n    fmt.Println(i)\r\n    return i%2 != 0\r\n}\r\n\r\nfunc main() {\r\n    _ = printer(1) && printer(2) && printer(3)\r\n    // Output: 1\\n2\\n\r\n}\r\n```\r\n\r\nI believe that many of the usecases that people want a ternary operator for could be covered by adding a `??` operator that is similar to `&&` but instead short-circuit evaluates non-boolean expressions while the resulting value is a zero-value.\r\n\r\nFor example, these two snippets would be identical:\r\n\r\n```go\r\nport := os.Getenv(\"PORT\")\r\nif port == \"\" {\r\n    port = DefaultPort\r\n}\r\n```\r\n\r\n```\r\nport := os.Getenv(\"PORT\") ?? DefaultPort\r\n```\r\n\r\nAnother use case might be\r\n\r\n```\r\nfunc New(c http.Client) *APIClient {\r\n    return &APIClient{ c ?? http.DefaultClient }\r\n}\r\n```\r\n\r\nIn general, `??` would be very useful for setting default values with less boilerplate. \r\n\r\nAnother use for `??` might be \r\n\r\n```\r\nfunc write() (err error) {\r\n    // ...\r\n    defer func() {\r\n        closeerr := w.Close()\r\n        err = err ?? closeerr\r\n    }()\r\n    _, err = w.Write(b)\r\n    // ...\r\n}\r\n```\r\n\r\nSome rules: `??` should only work if all expressions evaluate to the same type (as is the case for other operators), and `??` should not work for boolean types, since that would cause confusion in the case of a pointer to a bool. If/when Go gets generics, you can trivially write `first(ts ...T) T`, so the operator is only worth adding to the language if it has short-circuit evaluation.\r\n\r\nIn summary, ternary is notoriously unclear, but `??` would not be any more unclear than `&&`. I believe it would be more clear than an equivalent if-statement since it would more clearly express the intent of setting a default, non-zero value.", "labels": ["Go2", "LanguageChange", "Proposal", "Proposal-Hold"], "number_of_comments": 13, "created_at": "2020-02-11 14:48:09", "reactions": {"total_count": 23, "+1": 12, "-1": 9, "laugh": 0, "heart": 0, "hooray": 0}}, "562921147": {"author_username": "muirdm", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37163, "title": "x/tools/gopls: improve completion in binary expressions", "body": "When completing in situations like:\r\n\r\n```go\r\nif foo == bar || baz<> {\r\n}\r\n```\r\n\r\nWe detect the expected type as \"bool\" since that is the type of \"foo == bar\". That causes \"bool\" candidates to dominate the rankings. However, if your intention is to type \"baz.blub == 123\", bool candidates are counterproductive, and often obscure the candidate you want.\r\n\r\nI propose we get rid of the binary operator type inference for `||` and `&&` so all candidates are easily completable.\r\n\r\n/cc @stamblerre ", "labels": ["Tools", "gopls"], "number_of_comments": 1, "created_at": "2020-02-11 01:08:12", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562889588": {"author_username": "chris3torek", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37161, "title": "os: small-count Readdirnames followed by seek-to-zero can lead to duplicate names", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.11.2 linux/amd64\r\ngo version go1.13.5 freebsd/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nI think so, since the code has not changed. (It's kind of a minor bug too...)\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n(I'll just include the freebsd one here - as long as the calls go through the `file_unix.go` code the OS is not particularly relevant)\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/torek/.cache/go-build\"\r\nGOENV=\"/home/torek/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"freebsd\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"freebsd\"\r\nGOPATH=\"/home/torek/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/freebsd_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build370595268=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nThis has to be run where there is a file system with some direntries (and probably it's specific to Unix-like systems with getdirentries calls).  It does reproduce even on [the Go Playground](https://play.golang.org/p/H-SSg_FvFQq) though.\r\n<pre>\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"log\"\r\n\t\"os\"\r\n)\r\n\r\nfunc main() {\r\n\tdf, err := os.Open(\".\")\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tnames, err := df.Readdirnames(1)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tfmt.Println(\"first Readdirnames(1):\", names)\r\n\tif _, err = df.Seek(0, 0); err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tnames, err = df.Readdirnames(0)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tfmt.Println(\"second Readdirnames:\", names)\r\n}\r\n</pre>\r\n\r\n\r\n### What did you expect to see?\r\nOutput in which file names don't repeat, in the second output line.\r\n\r\n\r\n### What did you see instead?\r\nOutput in which file names *do* repeat.  Here's what happens in the Playground:\r\n<pre>\r\nfirst Readdirnames(1): [dev]\r\nsecond Readdirnames: [tmp etc usr dev tmp etc usr]\r\n</pre>\r\n\r\n### The root cause\r\nThe actual cause of the bug is pretty straightforward.  If you use `Readdirnames` to the end of the directory, the block holding `getdirentries` data is fully consumed, but if you call it with a small count (such as the `1` in the example above), it's not.  So in `os/dir_unix.go`, the `dirinfo` data has `d.bufp < d.nbuf`.\r\n\r\nThe `Seek` function has a test in it:\r\n\r\n        r, e := f.seek(offset, whence)\r\n        if e == nil && f.dirinfo != nil && r != 0 {\r\n                e = syscall.EISDIR\r\n        }\r\n\r\nwhich makes sure that the only allowable seek on a directory is to zero, but this never clears out the `dirinfo`.  So the buffered entries remain, and we get them on the next call to Readdirnames(-1)\u2014on the Playground this is `tmp` `etc` and `usr`. Then the buffer is drained so we call the underlying `getdirentries` system call again, filling the buffer with `dev`, `tmp`, `etc`, and `usr`, and we retrieve them, resulting in the doubled-up entries.\r\n\r\nOne proposed fix would be to move `f.dirinfo` checking from `os/file.go`'s `Seek` to the next level down. If seeking on a directory, check the offset-and-whence there (perhaps seeking directories to nonzero locations and/or to the end should be allowed on some systems; this could also allow relative seek by 0 bytes to return an offset, if desirable) and zap any buffered data there.", "labels": ["NeedsFix"], "number_of_comments": 4, "created_at": "2020-02-10 23:25:09", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562767554": {"author_username": "narqo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37158, "title": "cmd/go: Build fails when build with -trimpath due to lack of gcc", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes, in both 1.13 and 1.14rc1\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"off\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/root/.cache/go-build\"\r\nGOENV=\"/root/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build998143923=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nWhen one builds a Go binary inside Docker container (`golang:1.13.7-alpine3.10`) adding `-trimpath` to the build command, fails the build if a C compiler wasn't pre-installed.\r\n\r\nDockerfile:\r\n\r\n```\r\nFROM golang:1.13.7-alpine3.10\r\nENV GO111MODULE=off\r\nCOPY . /go/src/github.com/<goproject>\r\nWORKDIR /go/src/github.com/<goproject>\r\nRUN go build -trimpath -o gobin ./<main.go>\r\n```\r\n\r\nThe same code, with the same docker image, but w/o `-trimpath` builds successfully.\r\n\r\n### What did you expect to see?\r\nExpected, that `go build -trimpath` will have the same behaviour as one with no flag.\r\n\r\n### What did you see instead?\r\nBuild fails, requiring gcc.\r\n\r\n```\r\n# runtime/cgo\r\nexec: \"gcc\": executable file not found in $PATH\r\n```\r\n\r\nAs was pointed out by @ianlancetaylor for a similar question on go-nuts [1], this is (likely) due to `runtime/cgo` needs to be rebuilt in order to trim the paths.\r\n\r\nI believe, there isn't any documentation or a note, describing this, so the change in go build's behaviour is surprising for a user.\r\n\r\n[1]: https://groups.google.com/d/msg/golang-nuts/dsqLZi2mEog/8pcaXIrABAAJ", "labels": ["NeedsInvestigation"], "number_of_comments": 2, "created_at": "2020-02-10 19:10:59", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562681944": {"author_username": "rod-hynes", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37157, "title": "x/crypto: Panic in chacha20 with valid counter value", "body": "### What version of Go are you using (`go version`)?\r\n\r\nGo 1.13.7\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\ndarwin/amd64\r\n\r\n### What did you do?\r\n\r\nRan the following test, which reproduces the panic.\r\n\r\nNote that this test uses the pending CL https://github.com/golang/crypto/pull/108, which adds the SetCounter method to x/crypto/chacha20. While the panic on the last valid counter value, 2^32-1, is present in the current x/crypto/chacha20, it's unlikley to be hit in typical use as the counter value cannot be set and always starts at 0.\r\n\r\n```\r\nfunc TestIETFQUICHeaderProtection(t *testing.T) {\r\n\tvar key [32]byte\r\n\tvar nonce [12]byte\r\n\tvar block [64]byte\r\n\tc, _ := NewUnauthenticatedCipher(key[:], nonce[:])\r\n\tc.SetCounter(0xffffffff)\r\n\tc.XORKeyStream(block[:], block[:])\r\n}\r\n```\r\n\r\nBackground:\r\n\r\nIETF ChaCha20 allows 2^32 blocks: https://tools.ietf.org/html/rfc7539#section-2.3.2.\r\n\r\nIETF QUIC ChaCha20-based header protection, https://tools.ietf.org/html/draft-ietf-quic-tls-24#section-5.4.4, initializes the ChaCha20 counter with \"4 bytes of [...] sampled ciphertext\", so it's possible to have any counter value in [0, 2^32-1] and attempt to encrypt one block.\r\n\r\nWe hit this panic in production while using https://github.com/lucas-clemente/quic-go, which uses a recent fork of x/crypto/internal/chacha20 that exposes a function to set the counter value.\r\n\r\nRelated issue: https://github.com/lucas-clemente/quic-go/issues/2326.\r\n\r\n### What did you expect to see?\r\n\r\nSuccessful test run.\r\n\r\n### What did you see instead?\r\n\r\n```\r\n=== RUN   TestIETFQUICHeaderProtection\r\n--- FAIL: TestIETFQUICHeaderProtection (0.00s)\r\npanic: chacha20: counter overflow [recovered]\r\n\tpanic: chacha20: counter overflow\r\n\r\ngoroutine 7 [running]:\r\ntesting.tRunner.func1(0xc000094100)\r\n\t/usr/local/go/src/testing/testing.go:874 +0x3a3\r\npanic(0x1117dc0, 0x1187e60)\r\n\t/usr/local/go/src/runtime/panic.go:679 +0x1b2\r\ngolang.org/x/crypto/chacha20.(*Cipher).XORKeyStream(0xc000034eb0, 0xc000034e70, 0x40, 0x40, 0xc000034e70, 0x40, 0x40)\r\n\t/Users/Work/Code/gopath/src/github.com/lukechampine/crypto/chacha20/chacha_generic.go:206 +0x393\r\ngolang.org/x/crypto/chacha20.TestIETFQUICHeaderProtection(0xc000094100)\r\n\t/Users/Work/Code/gopath/src/github.com/lukechampine/crypto/chacha20/chacha_test.go:32 +0x161\r\ntesting.tRunner(0xc000094100, 0x1169418)\r\n\t/usr/local/go/src/testing/testing.go:909 +0xc9\r\ncreated by testing.(*T).Run\r\n\t/usr/local/go/src/testing/testing.go:960 +0x350\r\nexit status 2\r\nFAIL\tgolang.org/x/crypto/chacha20\t0.322s\r\n```\r\n\r\nHere is a fix implemented by @lukechampine: https://github.com/lukechampine/crypto/commit/d3e589b4e01df3bbbbfde424de7fcc0b607f6636 (briefly discussed here: https://github.com/golang/crypto/pull/108#issuecomment-579802871).\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-10 16:36:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562666146": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37156, "title": "dl: add go1.5.4, go1.6.4 and go1.7.6", "body": "The `golang.org/dl` module for some reasons does not include `go1.5.x`, `go1.6.x` and `go1.7.x`.\r\nI tested on my PC and they can be installed correctly.  Is there a reason why they should not be included?\r\n\r\nRationale:\r\nI was finding the minimal required Go version to build and test a package, for fun.  It worked until go1.8.x.  Now I found that it works up to go1.7.x.", "labels": ["Builders", "NeedsFix", "help wanted"], "number_of_comments": 1, "created_at": "2020-02-10 16:11:31", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562641994": {"author_username": "rossus", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37155, "title": "x/mobile/bind: function with argument of type declared in same package skipped after binding", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/user/.cache/go-build\"\r\nGOENV=\"/home/user/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/user/go\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/snap/go/current\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/snap/go/current/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build676544878=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\n```\r\ntype Item struct {\r\n    Label string\r\n}\r\n\r\nfunc UseItem(item Item) {}\r\n```\r\n\r\n```\r\n$ gomobile bind -o Item.aar -v -target=android github.com/my/repo/mobile/pkg\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nfunction UseItem() is working normally after bind\r\n\r\n### What did you see instead?\r\n\r\nAfter unzipping the `.jar` file I can see inside it file with:\r\n```\r\n// skipped function UseItem with unsupported parameter or return types\r\n```", "labels": ["NeedsInvestigation", "mobile"], "number_of_comments": 3, "created_at": "2020-02-10 15:35:18", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562572747": {"author_username": "bajro17", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37154, "title": "Template URL escape", "body": "I have problem with escaping URL in my template. I using GORM and have type Tag struct with field URL I pass this to template but template escape url. I also see before is available to use | unescape pipe but this dont exist anymore? \r\n\r\n<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.13 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n### What did you expect to see?\r\n\r\nI want see literal URL \r\n\r\n### What did you see instead?\r\nescaped URL", "labels": ["WaitingForInfo"], "number_of_comments": 1, "created_at": "2020-02-10 13:49:10", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562403060": {"author_username": "kstenerud", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37152, "title": "cmd/go: Allow empty go files", "body": "When isolating tests, it's convenient to be able to just comment out entire source files by typing `CTRL-a`, `CTRL-/`. However, if you do that in a go source file, the compiler complains:\r\n\r\n    expected 'package', found 'EOF'\r\n\r\nWhat would be nicer would be to have the go compiler simply ignore empty go files, so that we don't have to go back to the top of the file and uncomment that one package line just to keep it happy.\r\n\r\nThe end result is the same either way: A compilation unit that does nothing.\r\n", "labels": ["NeedsDecision", "WaitingForInfo"], "number_of_comments": 4, "created_at": "2020-02-10 08:33:57", "reactions": {"total_count": 3, "+1": 1, "-1": 2, "laugh": 0, "heart": 0, "hooray": 0}}, "562307245": {"author_username": "kpfaulkner", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37149, "title": "PowerRegisterSuspendResumeNotification error on Azure App Services with go 1.13.7", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\nGo version 1.13.7 (also with 1.13.6/5/4.. )   but works with 1.13\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n1.13.7 yes\r\n\r\nBelieve this might be related to issue 35447\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nNote, building is fine (details below are just from the compile machine). It's on Azure App Services where the error happens (runtime).\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nC:\\Users\\kenfa\\projects\\gorepo> go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\kenfa\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\kenfa\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\kenfa\\projects\\gopath\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=c:\\users\\kenfa\\packages\\go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=c:\\users\\kenfa\\packages\\go\\pkg\\tool\\windows_amd64\r\nset GCCGO=gccgo\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\kenfa\\AppData\\Local\\Temp\\go-build929673298=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\nRunning a binary (windows executable) in an Azure App Service generates the stack trace:\r\n\r\nA simple repro can be achieved with:\r\n\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n  fmt.Printf(\"hello world\\n\")\r\n}\r\n\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nhello world\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\nruntime: PowerRegisterSuspendResumeNotification failed with errno= 5\r\nfatal error: runtime: PowerRegisterSuspendResumeNotification failure\r\n\r\nruntime stack:\r\nruntime.throw(0x4dbc9c, 0x37)\r\n\tc:/users/kenfa/packages/go/src/runtime/panic.go:774 +0x79 fp=0x82fdd8 sp=0x82fda8 pc=0x42cf09\r\nruntime.monitorSuspendResume()\r\n\tc:/users/kenfa/packages/go/src/runtime/os_windows.go:307 +0x20a fp=0x82fe80 sp=0x82fdd8 pc=0x42992a\r\nruntime.goenvs()\r\n\tc:/users/kenfa/packages/go/src/runtime/os_windows.go:544 +0x1ba fp=0x82fed8 sp=0x82fe80 pc=0x42a2aa\r\nruntime.schedinit()\r\n\tc:/users/kenfa/packages/go/src/runtime/proc.go:554 +0xa9 fp=0x82ff30 sp=0x82fed8 pc=0x42f8f9\r\nruntime.rt0_go(0x82ff60, 0x7fff2bc184d4, 0x82ff60, 0x0, 0x7fff2bc184d4, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\tc:/users/kenfa/packages/go/src/runtime/asm_amd64.s:214 +0x13d fp=0x82ff38 sp=0x82ff30 pc=0x452e5d", "labels": ["NeedsInvestigation", "OS-Windows", "release-blocker"], "number_of_comments": 7, "created_at": "2020-02-10 03:46:45", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562298921": {"author_username": "BurtonQin", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37148, "title": "src/runtime/testdata/testprogcgo: fix goroutine leak on timeout", "body": "ping <- false on Line 69 is definitely executed. If channel recvs from time.After on Line 73 earlier than from ping, it leaves from the select statement. No other goroutines can pull messages from ping. Therefore, the goroutine is blocked forever, leading to goroutine leak. The fix is to add <-ping after time.After. Same is true for Line 78 and Line 81.", "labels": ["cla: yes"], "number_of_comments": 2, "created_at": "2020-02-10 03:12:06", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562230829": {"author_username": "lolgear", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37146, "title": "x/mobile: add option to pass in gobind", "body": "```zsh\r\n% ~/go/bin/gomobile bind -target iOS ./lib\r\n```\r\nwill not work until you set PATH environment variable which points to `gobind`.\r\nIt is something that I don't expect.\r\n\r\nI expect that `~/go/bin/gomobile init` will fix all issues and everything will be fine.\r\nCould you add option to set path to binary `gobind`?\r\n\r\n```zsh\r\n% ~/go/bin/gomobile bind -bin ~/go/bin/gobind -target iOS ./lib\r\n```", "labels": ["NeedsInvestigation", "mobile"], "number_of_comments": 1, "created_at": "2020-02-09 20:05:13", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562217626": {"author_username": "cyolosec", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37145, "title": "net/http: potential DOS: request context not cancelled if a client sends one byte after ServeHTTP starts", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/<omitted>/Library/Caches/go-build\"\r\nGOENV=\"/Users/<omitted>/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/eranshmuely/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/Cellar/go/1.13.7/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.13.7/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/1t/f2jm2c3x12n35wmyv6w4vmwc0000gn/T/go-build114416166=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nran the following code:\r\n\r\npackage main\r\n\r\n```go\r\npackage main\r\n\r\nimport \"net/http\"\r\n\r\nfunc main() {\r\n\thttp.ListenAndServe(\":9090\", http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {\r\n\t\tprintln(1)\r\n\t\t<-req.Context().Done()\r\n\t\tprintln(2)\r\n\t}))\r\n}\r\n```\r\n\r\nand then ran the following command:\r\n```\r\n$ nc localhost 9090\r\nGET / HTTP/1.1\r\nhost: test\r\n\r\nt\r\n\r\n<CTRL+C>\r\n```\r\n\r\n### What did you expect to see?\r\nThe request context should have been cancelled as per documentation:\r\n```go\r\n...\r\n//\r\n// For incoming server requests, the context is canceled when the\r\n// client's connection closes, the request is canceled (with HTTP/2),\r\n// or when the ServeHTTP method returns.\r\nfunc (r *Request) Context() context.Context {\r\n\tif r.ctx != nil {\r\n\t\treturn r.ctx\r\n\t}\r\n\treturn context.Background()\r\n}\r\n...\r\n```\r\n\r\nand thus i expected to see the following output:\r\n```\r\n1\r\n2\r\n```\r\n\r\n### What did you see instead?\r\n```\r\n1\r\n```\r\n\r\nThe context did not cancel and the goroutine that serves the ```http.Handler``` never returns.\r\n```http.Server```s that ```select``` directly on \r\n```go\r\nreq.Context().Done()\r\n```  \r\nand not \r\n```go\r\ncontext.WithTimeout(req.Context())\r\n``` \r\n(or something like that) could be vulnerable to denial of service attacks.", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-09 18:23:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562187153": {"author_username": "metala", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37144, "title": "proposal: Go 2: time: deprecate time.Tick(d Duration)", "body": "### Proposal Summary\r\nDeprecate `time.Tick(d)` in favour of `time.NewTicker(d)`. It's a very special case, where the ticker never stops and the channel cannot be recovered by the garbage collector. The name time.Tick() does not reflect it and if you really want that same functionality, it's just `time.NewTicker(d).C`, with the exception when `d <= 0`.\r\n\r\n### Would you consider yourself a novice, intermediate, or experienced Go programmer?\r\nIntermediate\r\n\r\n### What other languages do you have experience with?\r\nComfortable with C, Python, JavaScript, PHP, C#, Lua.\r\n\r\n### Would this change make Go easier or harder to learn, and why?\r\nEasier, by applying the principle of least astonishment. We can see that this function is already abused in some public repositories.\r\n\r\n### Has this idea, or one like it, been proposed before?\r\nTo my knowledge, no.\r\n\r\n### Who does this proposal help, and why?\r\nThe newcomers to Go as it will decrease ambiguity. We can see that there were issues in the past (#11662, #17757) and you can find public repositories (in GitHub, for instance), where this function is used improperly.\r\n\r\n### What is the proposed change?\r\nMark the function `time.Tick()` as deprecated in the standard library documentation and remove it in a later version. It won't introduce changes to the language specification.\r\n\r\n### Is this change backward compatible?\r\nIt is breaking the Go 1 compatibility guarantee. Thus, this proposal is labeled Go2.\r\n\r\n### Show example code before and after the change.\r\n#### Before\r\n```\r\nfor t := range time.Tick(d) {\r\n  // loop body\r\n}\r\n```\r\n#### After\r\n```\r\nfor t := range time.NewTicker(d).C {\r\n  // loop body\r\n}\r\n```\r\n### What is the cost of this proposal?\r\nIt probably breaks more than a few packages and binaries, which use that function. No compile time or runtime cost.\r\n\r\nI've based the proposal on the [language change template](https://go.googlesource.com/proposal/+/refs/heads/master/go2-language-changes.md), but I have removed the last few points I found to be irrelevant.\r\n\r\n", "labels": ["Go2", "Proposal"], "number_of_comments": 11, "created_at": "2020-02-09 14:45:20", "reactions": {"total_count": 5, "+1": 2, "-1": 3, "laugh": 0, "heart": 0, "hooray": 0}}, "562149775": {"author_username": "BurtonQin", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37143, "title": "net/textproto, sync: add unlock before panic", "body": "In src/net/textproto/pipeline.go,\r\nfunc (s *sequencer) End(id uint), s.mu.Lock() is at line 100,\r\nand s.mu.Unlock() is at line 113.\r\nHowever, there is a panic at line 102.\r\nIf the panic is executed, s.mu will still be locked even after recovery.\r\nThe fix is to add s.mu.Unlock() before panic.\r\nI found the similar \"missing unlock before panic\" problems in two functions in src/sync/rwmutex_test.go", "labels": ["cla: yes"], "number_of_comments": 7, "created_at": "2020-02-09 09:38:38", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562095542": {"author_username": "balasanjay", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37142, "title": "sync: shrink types in sync package", "body": "# Proposal: shrink types in sync package\r\n\r\n## Current API\r\n\r\nThe types in the sync package make use of semaphore operations provided by the runtime package. Specifically, they use the following two APIs\r\n\r\n`semacquire(s *uint32)`: waits until `*s > 0` and atomically decrements it.\r\n\r\n`semrelease(s *uint32)`: atomically increments `*s` and notifies any goroutine blocked in a `semacquire` (if any).\r\n\r\nEach semaphore logically manages a queue of goroutines. The sync types store their atomically-modified state separate from their semaphores; for this reason, semaphores have to support out-of-order operations (e.g. when unlocking a `sync.Mutex`, you could have a `semrelease` show up to the semaphore 'before' a corresponding `semacquire`). The separation into atomic state and semaphores also results in the sync types having a larger memory footprint.\r\n\r\n## Proposed new API\r\n\r\nLet's consider a slightly different API for queueing and dequeueing goroutines.\r\n\r\n`semqueue(s *uint32, mask uint32, cmp uint32, bit uint8) bool`: checks `(*s & mask) == cmp`; if false, will immediately return false (indicating 'barging'). Otherwise, puts the calling goroutine to sleep; if this goroutine is the first to sleep for the given `s` and `bit`, will also perform `*s = *s | (1 << bit)`.\r\n\r\n`semdequeue(s *uint32, bit uint8, dequeueAll bool) int`: wakes up 1 goroutine sleeping on a corresponding `semqueue` call with a matching `s` and `bit` (or all, if `dequeueAll` is true). If there are no more goroutines sleeping, then will unset the corresponding `bit` in `*s`: `*s = *s & ^(1 << bit)`. Returns the number of woken goroutines.\r\n\r\nNotes about this API:\r\nThe names listed above are placeholders (other suggestions welcome).\r\n\r\nAll of the operations for the given function are atomic (by making use of a lock keyed on `s`).\r\n\r\nAlso, the real signatures will likely need to be more complicated to support mutex profiling, and FIFO vs LIFO queueing.\r\n\r\n## Benefits\r\n\r\nGiven this API, I believe we could shrink the types in the `sync` package. This is because this new API only ever modifies a single bit in an atomic word, so all the other bits are available to store atomic state. We can manage multiple logical queues using the same 4-byte atomic word; this will allow it to handle types like `sync.RWMutex` that have a queue for readers and a queue for writers. Here are the possible savings for reimplementing various types in the `sync` package:\r\n\r\n| Type | Current Size (bytes) | New Size (bytes) |\r\n| --- | --- | --- |\r\n| `sync.Once` | 12 | 4 |\r\n| `sync.Mutex` | 8 | 4 |\r\n| `sync.RWMutex` | 24 | ~~4~~ 8 |\r\n\r\nThese are the ones I'm fairly confident about. I also think we can shrink `sync.Waitgroup`, and `sync.Cond` (the former from 12 bytes to 4 bytes, and I think we can shave off 28 bytes from the latter), but I'm less sure of these two as I'm unfamiliar with their implementations.\r\n\r\nAlso, while this isn't the goal, I think this might also improve the performance of `(*sync.RWMutex).Unlock`. It currently repeatedly calls `semrelease` in a loop to wake readers, acquiring and releasing locks for each iteration. The API above offers batch dequeue functionality, which will allow us to avoid a number of atomic operations.\r\n\r\n## Backwards Compatibility\r\n\r\nThis is only modifying internal details of the Go runtime, so from that perspective it should be backwards compatible. There are two other considerations here:\r\n\r\nIf any users are carefully sizing their types to avoid false sharing or to align with cache-line boundaries, changing the size of types in `sync` could be problematic for them.\r\n\r\nThere are users who are using `go:linkname` to directly invoke `semacquire` and `semrelease`. See [gVisor](https://github.com/google/gvisor/blob/17b9f5e66238bde1e4ed3bd9e5fb67342c8b58ec/pkg/sync/downgradable_rwmutex_unsafe.go#L27) for an example of this. So, even if we convert all uses in the standard library, we will likely want to have these functions stick around for a little while.\r\n\r\n## Edits\r\n - Reordered types in order of implementation simplicity\r\n - Increased size of `sync.RWMutex` from 4 to 8 bytes (see comments for explanation)", "labels": ["NeedsDecision"], "number_of_comments": 23, "created_at": "2020-02-08 23:50:21", "reactions": {"total_count": 6, "+1": 5, "-1": 1, "laugh": 0, "heart": 0, "hooray": 0}}, "562086685": {"author_username": "xbit", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37141, "title": "proposal: Go 2: simplify error handling - error passing with \"pass\"", "body": "# Introduction\r\n\r\nFor the most part, I like the simplicity of error handling in Go, but I would very much like a less verbose way to pass errors. \r\n\r\nPassing errors should still be explicit and simple enough to understand. This proposal builds on top of the many existing proposals and suggestions, and attempts to fix the problems in the [proposed try built-in](https://github.com/golang/go/issues/32437) see [design doc](https://github.com/golang/proposal/blob/master/design/32437-try-builtin.md). Please read the original proposal if you haven't already some of the questions may already be answered there.\r\n\r\nWould you consider yourself a novice, intermediate, or experienced Go programmer?\r\n- I have been using Go almost exclusively for the past two years, and I have been a developer for the past 10 years.\r\n\r\nWhat other languages do you have experience with?\r\n\r\n- C, Java, C#, Python, Javascript, Typescript, Kotlin, Prolog, Rust, PHP ... and others that I don't remember.\r\n\r\nWould this change make Go easier or harder to learn, and why?\r\n- It may make Go slightly harder to learn because its an additional keyword.\r\n\r\n\r\nWho does this proposal help, and why?\r\n- This proposal helps all Go developers in their daily use of the language because it makes error handling less verbose.\r\n\r\n# Proposal\r\n\r\n### What is the proposed change?\r\n\r\nAdding a new keyword `pass`. \r\n\r\n    pass expr\r\n\r\nPass statements may only be used inside a function  with at least one result parameter where the last result is of type error.\r\n\r\nPass statements take an expression. The expression can be a simple error value. It can also be a function \r\nor a method call that returns an error.\r\n\r\nCalling `pass` with any other type or a different context will result in a compile-time error.\r\n\r\nIf the result of the expression is `nil`, `pass` will not perform any action, and execution continues.\r\n\r\nIf the result of the expression  `!= nil`, `pass` will return from the function.\r\n \r\n- For unnamed result parameters, `pass` assumes their default \"zero\" values.\r\n- For named result parameters, `pass` will return the value they already have. \r\n\r\nThis works similar to the proposed `try` built-in.\r\n\r\n**Is this change backward compatible?**\r\n\r\nYes.\r\n\r\n**Show example code before and after the change.**\r\n\r\nA simple example:\r\n\r\nbefore:\r\n\r\n    f, err := os.Open(filename)\r\n    if err != nil {\r\n           return ..., err\r\n    }\r\n    defer f.Close()\r\n\r\nafter:\r\n\r\n    f, err := os.Open(filename)\r\n    pass err\r\n    defer f.Close()\r\n\r\n\r\n\r\nIn the example above, if the value of err is `nil`. it is equivalent to calling `pass` in the following way (does not perform any action):\r\n\r\n    pass nil\r\n\r\n Consequently, the following is expected to work with `pass` (passing a new error)\r\n\r\n    pass errors.New(\"some error\")\r\n\r\nSince `pass` accepts an expression that must be evaluated to an `error` . We can create handlers without any additional changes to the language.\r\n\r\nFor example, the following [`errors.Wrap()`](https://github.com/pkg/errors/blob/614d223910a179a466c1767a985424175c39b465/errors.go#L184) function works with `pass`.\r\n\r\n    // Wrap returns an error annotating err with a stack trace\r\n    // at the point Wrap is called, and the supplied message.\r\n    // If err is nil, Wrap returns nil.\r\n    func Wrap(err error, message string) error {\r\n\t    if err == nil {\r\n\t    \t    return nil\r\n\t    }\r\n\t   err = &withMessage{\r\n\t\t    cause: err,\r\n\t\t    msg:   message,\r\n\t    }\r\n\t    return &withStack{\r\n\t\t    err,\r\n\t\t    callers(),\r\n\t    }\r\n    }\r\n\r\n\r\nBecause `Wrap` returns `nil` when `err == nil`, you can use it to wrap errors:\r\n\r\n    f, err := os.Open(filename)\r\n    pass errors.Wrap(err, \"couldn't open file\")\r\n\r\n\r\nthe following does not perform any action (because `Wrap` will return `nil`):\r\n\r\n     pass errors.Wrap(nil, \"this pass will not return\")\r\n\r\nYou can define any function that takes an error to add logging, context, stack traces ... etc.\r\n\r\n    func Foo(err Error) error {\r\n        if err == nil {\r\n             return nil\r\n        }      \r\n\r\n        // wrap the error or return a new error\r\n    }\r\n\r\n\r\n\r\nTo use it\r\n\r\n     f, err := os.Open(filename)\r\n     pass Foo(err)\r\n\r\n\r\n\r\n`pass` is designed specifically for passing errors and nothing else. \r\n\r\n### Other examples:\r\n(Example updated to better reflect different usages of `pass`)\r\n\r\nHere's an example in practice. Code from [`codehost.newCodeRepo()`](https://github.com/golang/go/blob/3f51350c706c8ff663f12867bcfec98aa9fc46bf/src/cmd/go/internal/modfetch/codehost/git.go#L72) (found by searching for `err != nil` - comments removed)\r\n\r\nThis example shows when it's possible to use `pass`, and how it may look like in the real world.\r\n\r\nbefore:\r\n\r\n    func newGitRepo(remote string, localOK bool) (Repo, error) {\r\n    \tr := &gitRepo{remote: remote}\r\n    \tif strings.Contains(remote, \"://\") {\r\n    \t\tvar err error\r\n    \t\tr.dir, r.mu.Path, err = WorkDir(gitWorkDirType, r.remote)\r\n    \t\tif err != nil {\r\n    \t\t\treturn nil, err\r\n    \t\t}\r\n    \r\n    \t\tunlock, err := r.mu.Lock()\r\n    \t\tif err != nil {\r\n    \t\t\treturn nil, err\r\n    \t\t}\r\n    \t\tdefer unlock()\r\n    \r\n    \t\tif _, err := os.Stat(filepath.Join(r.dir, \"objects\")); err != nil {\r\n    \t\t\tif _, err := Run(r.dir, \"git\", \"init\", \"--bare\"); err != nil {\r\n    \t\t\t\tos.RemoveAll(r.dir)\r\n    \t\t\t\treturn nil, err\r\n    \t\t\t}\r\n    \t\r\n    \t\t\tif _, err := Run(r.dir, \"git\", \"remote\", \"add\", \"origin\", \"--\", r.remote); err != nil {\r\n    \t\t\t\tos.RemoveAll(r.dir)\r\n    \t\t\t\treturn nil, err\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\tr.remoteURL = r.remote\r\n    \t\tr.remote = \"origin\"\r\n    \t} else {\r\n    \t\tif strings.Contains(remote, \":\") {\r\n    \t\t\treturn nil, fmt.Errorf(\"git remote cannot use host:path syntax\")\r\n    \t\t}\r\n    \t\tif !localOK {\r\n    \t\t\treturn nil, fmt.Errorf(\"git remote must not be local directory\")\r\n    \t\t}\r\n    \t\tr.local = true\r\n    \t\tinfo, err := os.Stat(remote)\r\n    \t\tif err != nil {\r\n    \t\t\treturn nil, err\r\n    \t\t}\r\n    \t\tif !info.IsDir() {\r\n    \t\t\treturn nil, fmt.Errorf(\"%s exists but is not a directory\", remote)\r\n    \t\t}\r\n    \t\tr.dir = remote\r\n    \t\tr.mu.Path = r.dir + \".lock\"\r\n    \t}\r\n    \treturn r, nil\r\n    }\r\n    \r\n\r\n\r\nafter:\r\n\r\n    func newGitRepo(remote string, localOK bool) (Repo, error) {\r\n    \tr := &gitRepo{remote: remote}\r\n    \tif strings.Contains(remote, \"://\") {\t\r\n    \t\tvar err error\r\n    \t\tr.dir, r.mu.Path, err = WorkDir(gitWorkDirType, r.remote)\r\n    \t\tpass err\r\n    \r\n    \t\tunlock, err := r.mu.Lock()\r\n    \t\tpass err\r\n    \t\tdefer unlock()\r\n    \r\n    \t\tif _, err := os.Stat(filepath.Join(r.dir, \"objects\")); err != nil {\r\n    \t\t\tif _, err := Run(r.dir, \"git\", \"init\", \"--bare\"); err != nil {\r\n    \t\t\t\tos.RemoveAll(r.dir)\r\n    \t\t\t\tpass err\r\n    \t\t\t}\r\n    \t\r\n    \t\t\tif _, err := Run(r.dir, \"git\", \"remote\", \"add\", \"origin\", \"--\", r.remote); err != nil {\r\n    \t\t\t\tos.RemoveAll(r.dir)\r\n    \t\t\t\tpass err\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\t\r\n    \t\tr.remoteURL = r.remote\r\n    \t\tr.remote = \"origin\"\r\n    \t} else {\r\n    \t\tif strings.Contains(remote, \":\") {\r\n    \t\t\tpass fmt.Errorf(\"git remote cannot use host:path syntax\")\r\n    \t\t}\r\n    \t\tif !localOK {\r\n    \t\t\tpass fmt.Errorf(\"git remote must not be local directory\")\r\n    \t\t}\r\n    \t\tr.local = true\r\n    \t\tinfo, err := os.Stat(remote)\r\n    \t\tpass err\r\n    \t\t\r\n    \t\tif !info.IsDir() {\r\n    \t\t\tpass fmt.Errorf(\"%s exists but is not a directory\", remote)\r\n    \t\t}\r\n    \t\tr.dir = remote\r\n    \t\tr.mu.Path = r.dir + \".lock\"\r\n    \t}\r\n    \treturn r, nil\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### What is the cost of this proposal? (Every language change has a cost).\r\n* How many tools (such as vet, gopls, gofmt, goimports, etc.) would be affected?\r\n\r\nBecause this is a new keyword, I'm not sure how much some of these tools would be affected,\r\nbut they shouldn't need any significant changes.\r\n\r\n* What is the compile time cost?\r\n\r\nCompile time cost may be affected because the compiler may need to \r\nperform additional optimizations to function or method calls used with `pass`.\r\n\r\n* What is the run time cost?\r\n\r\nThis depends on the implementation. Simple expressions like this:\r\n\r\n    pass err\r\n    \r\nshould have equivalent runtime cost to the current `err != nil`.\r\n\r\nHowever, function or method calls will add run time cost and this will largely depend on the implementation.\r\n    \r\n\r\n\r\n### Can you describe a possible implementation?\r\n\r\nFor the simple case, the compiler may be able to expand `pass` statements \r\n\r\n    pass err\r\n    \r\nto    \r\n\r\n    if err != nil {\r\n        return result paramters ...\r\n    }\r\n\r\nFor function or method calls there maybe a better way to do it \r\npossibly inline these calls for common cases?\r\n\r\n\r\n\r\n### How would the language spec change?\r\n\r\nThe new keyword `pass` must be added to the language spec with a more formal definition.\r\n\r\n\r\n### Orthogonality: how does this change interact or overlap with existing features?\r\n\r\nIn some cases, `pass` may overlap with a `return` statement.\r\n\r\n    func someFunc() error {\r\n        if cond {\r\n            pass errors.New(\"some error\") \r\n        }  \r\n        ...   \r\n\r\n    \r\n\r\ninstead of\r\n\r\n    func someFunc() error {\r\n        if cond {\r\n            return errors.New(\"some error\") \r\n        }\r\n        ...  \r\n\r\nIt may not be clear which keyword should be used here.\r\n`pass`  is only useful in these cases when there is multiple result parameters.\r\n\r\n    func someFunc() (int, int, error) {\r\n        if cond {\r\n            pass errors.New(\"some error\") \r\n        }\r\n        ...  \r\n\r\ninstead of\r\n\r\n    func someFunc() (int, int, error) {\r\n        if cond {\r\n            return 0, 0, errors.New(\"some error\") \r\n        }  \r\n        ...\r\n\r\n(Edited to make example more clear)\r\n    \r\n### Is the goal of this change a performance improvement?\r\n\r\nNo\r\n\r\n### Does this affect error handling?\r\n\r\nYes, here is the following advantages of `pass` and how it may differ [from other proposals](https://github.com/golang/go/issues?utf8=%E2%9C%93&q=label%3Aerror-handling).\r\n\r\n\r\n#### Advantages to using `pass`\r\n* `pass` is still explicit.\r\n* Supports wrapping errors and using simple handlers without new keywords such `handle` ... etc.\r\n* it makes it easier to scan code. Avoids confusing `err == nil` with `err != nil`. Since `pass` only returns when error is not `nil` in all cases.\r\n* should work fairly easily with existing error handling libraries.\r\n* should work with breakpoints\r\n* much less verbose.\r\n* Fairly simple to understand. \r\n\r\n\r\n### Is this about generics?\r\n\r\nNo\r\n\r\n\r\nEdit: Updated to follow [the template](https://go.googlesource.com/proposal/+/refs/heads/master/go2-language-changes.md)", "labels": ["Go2", "LanguageChange", "Proposal", "error-handling"], "number_of_comments": 8, "created_at": "2020-02-08 22:21:30", "reactions": {"total_count": 15, "+1": 3, "-1": 7, "laugh": 0, "heart": 0, "hooray": 0}}, "562075338": {"author_username": "paulbdavis", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37140, "title": "x/tools/gopls: Cannot install 0.3.1 with go get", "body": "## What did you do?\r\n`go get -u golang.org/x/tools/gopls@gopls/v0.3.1`\r\n\r\n#### What did you expect to see?\r\nExpected gopls to be installed at the newest tagged version\r\n\r\n#### What did you see instead?\r\n```\r\ngo get: golang.org/x/tools/gopls@v0.3.1 requires\r\n        golang.org/x/tools@v0.0.0-20200204151227-34c67990bfe7: invalid version: unknown revision 34c67990bfe7\r\n```\r\n\r\nSeeing this is odd since that revision *does* seem to exist as the commit just before the tag\r\n\r\nCloning the repo and checking out the tag and building worked fine.\r\n\r\n#### Build info\r\n\r\n```\r\ngolang.org/x/tools/gopls v0.3.1\r\n    golang.org/x/tools/gopls@(devel)\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/sergi/go-diff@v1.0.0 h1:Kpca3qRNrduNnOQeazBd0ysaKrUJiIuISHxogkT9RPQ=\r\n    golang.org/x/mod@v0.1.1-0.20191105210325-c90efee705ee h1:WG0RUwxtNT4qqaXX3DPA8zHFNm/D9xaBpxzHt1WcA/E=\r\n    golang.org/x/sync@v0.0.0-20190423024810-112230192c58 h1:8gQV6CLnAEikrhgkHFbMAEhagSSnXWGV915qUMm9mrU=\r\n    golang.org/x/tools@v0.0.0-20200204151227-34c67990bfe7 => ../\r\n    golang.org/x/xerrors@v0.0.0-20191011141410-1b5146add898 h1:/atklqdjdhuosWIl6AIbOeHJjicWYPqR9bpxqxYG2pA=\r\n    honnef.co/go/tools@v0.0.1-2019.2.3 h1:3JgtbtFHMiCmsznwGVTUWbgGov+pVqnlf1dEJTNAXeM=\r\n    mvdan.cc/xurls/v2@v2.1.0 h1:KaMb5GLhlcSX+e+qhbRJODnUUBvlw01jt4yrjFIHAuA=\r\n```\r\n\r\n#### Go info\r\n\r\n```\r\ngo version go1.13.7 linux/amd64\r\n\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/home/paul/dev/go/bin\"\r\nGOCACHE=\"/home/paul/.cache/go-build\"\r\nGOENV=\"/home/paul/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"bitbucket.org/getcoinshub/*\"\r\nGONOSUMDB=\"bitbucket.org/getcoinshub/*\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/paul/dev/go\"\r\nGOPRIVATE=\"bitbucket.org/getcoinshub/*\"\r\nGOPROXY=\"direct\"\r\nGOROOT=\"/usr/lib/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/lib/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/paul/dev/golang-tools/gopls/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build329549544=/tmp/go-build -gno-record-gcc-switches\"\r\n```\r\n", "labels": ["Tools", "WaitingForInfo", "gopls"], "number_of_comments": 7, "created_at": "2020-02-08 20:43:05", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562058655": {"author_username": "neild", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37138, "title": "x/exp/apidiff: resolution of type aliases depends on type names", "body": "```go\r\npackage v1\r\ntype T interface { F() }\r\nfunc F(T) {}\r\n```\r\n\r\n```go\r\npackage v2\r\nimport \"example.com/x/common\"\r\ntype T = common.T2\r\nfunc F(T) {}\r\n```\r\n\r\n```go\r\npackage common\r\ntype T2 interface { F() }\r\n```\r\n\r\n```shell\r\n$ apidiff example.com/x/v1 example.com/x/v2\r\nIncompatible changes:\r\n- F: changed from func(T) to func(example.com/x/common.T2)\r\n- T: changed from T to example.com/x/common.T2\r\n```\r\n\r\nThis is obviously wrong: `v1` and `v2` have identical APIs; we've just extracted the `v2.T` type into a separate package.\r\n\r\nAt first I thought apidiff wasn't keeping track of type aliases, but if I keep the exact same API but keep the *name* of the type the same (`common.T`, not `common.T2`) then it reports no API change.", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-08 18:26:06", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562044029": {"author_username": "stephenandwood", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37137, "title": "go.dev: README with \".markdown\" extension rendered as plain text on overview tab", "body": "### What is the URL of the page with the issue?\r\n \r\n https://pkg.go.dev/github.com/dustin/go-humanize?tab=overview\r\n \r\n### What is your user agent?\r\n \r\nIssue is independent of user agent. \r\n  \r\n### What did you do?\r\n \r\nI visited the page. \r\n \r\n### What did you expect to see?\r\n \r\nI expected to see the markdown in the readme file rendered as HTML. The file is rendered as HTML on GitHub. [link](https://github.com/dustin/go-humanize#readme).\r\n \r\n### What did you see instead?\r\n\r\nI saw the markdown source as text.\r\n\r\n", "labels": ["NeedsFix", "go.dev"], "number_of_comments": 1, "created_at": "2020-02-08 16:35:10", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562000111": {"author_username": "sylr", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37135, "title": "go.dev: Use pkg.go.dev as source to determine impacts of breaking changes", "body": "Although it seems `pkg.go.dev` [does not provide API](https://github.com/golang/go/issues/36785) for the moment it is something currently discussed according to https://blog.golang.org/pkg.go.dev-2020.\r\n\r\nOne feature of `pkg.go.dev` is to track who imports what and that could be useful to determine the consequences of modifying public structs and methods.\r\n\r\nIf `pkg.go.dev` could provide an API to list packages which import specified packages, a tool could be written to assert the magnitude of the disruption a series of git commits in a project would provoke in the go eco-system.\r\n\r\nSuch tool could be part of the go mod toolchain, e.g.:\r\n\r\n```shell\r\n$ go mod what origin/master..HEAD\r\nChanges from origin/master to HEAD modified following exported signatures:\r\n  github.com/org/go-lib/pkg/pkg1.New(...) (modified)\r\n  github.com/org/go-lib/pkg/pkg2.NewWithContext(...) (deleted)\r\n  github.com/org/go-lib/pkg/pkg2.Struct{...} (modified)\r\nThese changes would impact:\r\n  github.com/big-corp/oss-project/pkg/pkg1\r\n  github.com/oss-org/oss-project/v2/pkg/pkg3\r\n```\r\n\r\nThoughts ?", "labels": ["FeatureRequest", "NeedsInvestigation", "go.dev"], "number_of_comments": 4, "created_at": "2020-02-08 10:18:42", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561969521": {"author_username": "wz2b", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37133, "title": "encoding/xml: decoding a>b>c decoration syntax should support namespaces", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n### What version of Go are you using (`go version`)?\r\n<pre>\r\n$ go version\r\ngo version 1.13.5 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes, behaves same on 1.13.7\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nWindows/amd64 but this is repeatable at least on linux\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\nI set up a struct with\r\n\r\nI set up this set of structures\r\n```\r\ntype myGetValueResponseEnvelope struct {\r\n\tXMLName xml.Name `xml:\"http://schemas.xmlsoap.org/soap/envelope/ Envelope\"`\r\n\tBody    myGetValueResponseBody\r\n}\r\ntype myGetValueResponseBody struct {\r\n\tXMLName xml.Name `xml:\"http://schemas.xmlsoap.org/soap/envelope/ Body\"`\r\n\tValue   string   `xml:\"getValueResponse>getValueReturn\"`\r\n}\r\n```\r\nto decode this XML:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n   <soapenv:Body>\r\n      <getValueResponse soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\r\n         <getValueReturn xsi:type=\"xsd:string\">69.1</getValueReturn>\r\n      </getValueResponse>\r\n   </soapenv:Body>\r\n</soapenv:Envelope>\r\n```\r\n\r\nbut I wanted to eliminate the second object by using a>b>c syntax.   Note though that the soapenv namespace is as far as Body but not farther. So I attempted this\r\n\r\n```\r\ntype myGetValueResponseEnvelope struct {\r\n\tXMLName xml.Name `xml:\"http://schemas.xmlsoap.org/soap/envelope/ Envelope\"`\r\n\tValue string `xml:\"http//schemas.xmlsoap.org/soap/envelope Envelope>getValueResponse>getValueReturn\"`\r\n}\r\n```\r\n\r\nbut it doesn't SEEM with a>b>c syntax that there's any way to have namespaces in all or (in my case) part of the xpath.\r\n\r\nI can just eliminate the namespace requirement on Body and it actually decodes just fine, so this isn't an urgent issue at the moment, but some day I may want to be more selective.  Regardless it seems the answer would be to split on > then ' ' then process it as usual.\r\n\r\n\r\n", "labels": ["ExpertNeeded", "NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-08 04:41:29", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561967893": {"author_username": "maraino", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37132, "title": "proposal: x/crypto/ssh: add methods to marshal private keys to the OpenSSH format ", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.6 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nApplies to all OSes.\r\n\r\n### What did you do?\r\n\r\nN/A\r\n\r\n### What did you expect to see?\r\n\r\nN/A\r\n\r\n### What did you see instead?\r\n\r\nN/A\r\n\r\n### Proposal \r\n\r\nx/crypto/ssh now has methods to parse private keys using OpenSSH format, but there's no way to write those keys so they can be used by OpenSSH. My proposal is to add the following methods to the `x/crypto/ssh` package:\r\n\r\n```go\r\nMarshalPrivateKey(key crypto.PrivateKey, comment string) (*pem.Block, error) \r\n\r\nMarshalPrivateKeyWithPassphrase(key crypto.PrivateKey, comment string, passphrase []byte) (*pem.Block, error)\r\n```\r\n\r\nOpenSSH supports the PKCS#1 and EC private keys, but only supports Ed25519 using the OpenSSH format, but newer versions are already using the new format for all types of keys.\r\n\r\nI've already coded those methods and will push a contribution asap. ", "labels": ["Proposal", "Proposal-Crypto"], "number_of_comments": 3, "created_at": "2020-02-08 04:20:59", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561902888": {"author_username": "dhowden", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37130, "title": "cmd/go: credentials from .netrc are not applied to URLs containing an explicit port", "body": "\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n\r\nRun a go mod proxy on a custom port (i.e. https://myproxy.mydomain.com:4433).\r\n\r\nSetup .netrc:\r\n\r\n```\r\nmachine myproxy.mydomain.com\r\n  login username\r\n  password secret\r\n```\r\n\r\nNote: the .netrc spec defines the `machine` property as the `machine name`: https://www.gnu.org/software/inetutils/manual/html_node/The-_002enetrc-file.html.\r\n\r\nSet `GOPROXY` env variable:\r\n\r\n```\r\nexport GOPROXY=\"myproxy.mydomain.com:4433\"\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nAuth credentials passed in proxy requests.\r\n\r\n### What did you see instead?\r\n\r\nNo auth credentials passed in proxy requests.\r\n\r\n### Work around\r\n\r\nNote: it is possible to get around this by adding the port to the `machine name` property in the .netrc file.\r\n\r\n```\r\nmachine myproxy.mydomain.com:4433\r\n  login username\r\n  password secret\r\n```\r\n\r\nCC: @bcmills \r\n", "labels": ["GoCommand", "NeedsFix"], "number_of_comments": 1, "created_at": "2020-02-07 22:24:33", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561900148": {"author_username": "phemmer", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37129, "title": "Proposal: Allow function to satisfy interface while returning interface superset", "body": "## Current behavior\r\nCurrently for a function to satisfy an interface, the signature of the function has to match the interface signature exactly.  \r\nIn the case where the interface signature says the function should return an interface, the function can only return that interface, and not another interface which is a superset.\r\n\r\nMeaning if you have the interfaces:\r\n```go\r\ntype ReaderOpener interface {\r\n  Open() io.Reader\r\n}\r\ntype ReadSeekerOpener interface {\r\n  Open() io.ReadSeeker\r\n}\r\n```\r\n\r\nThen the following type would satisfy `ReadSeekerOpener`, but not `ReaderOpener`.\r\n```go\r\ntype MyStruct struct {}\r\nfunc (ms MyStruct) Open() io.ReadSeeker {}\r\n```\r\n\r\nAttempting to use `MyStruct` to satisfy `ReaderOpener` results in:\r\n```\r\ncannot use MyStruct literal (type MyStruct) as type ReaderOpener in assignment:\r\n\tMyStruct does not implement ReaderOpener (wrong type for Open method)\r\n\t\thave Open() io.ReadSeeker\r\n\t\twant Open() io.Reader\r\n```\r\n\r\n## Proposal\r\nThe proposal is to allow functions returning an interface to satisfy the interface if the function returns an interface which is a superset of the one being satisfied.\r\n\r\nMeaning that in the above code, `MyStruct` would satisfy both `ReadSeekerOpener` and `ReaderOpener`.\r\n\r\nNow there is one particular about how \"superset\" is defined. It could either be 2 completely different interfaces with no inheritance, or one interface could be a composition containing the other.\r\nMeaning:\r\n```go\r\ntype Reader interface {\r\n  Read([]byte) (int, error)\r\n}\r\ntype ReadSeeker {\r\n  Read([]byte) (int, error)\r\n  Seek(int64, int) (int64, error)\r\n}\r\n```\r\nvs.\r\n```go\r\ntype Reader interface {\r\n  Read([]byte) (int, error)\r\n}\r\ntype ReadSeeker {\r\n  Reader\r\n  Seek(int64, int) (int64, error)\r\n}\r\n```\r\nThe key difference being that the latter `ReadSeeker` interface embeds the interface required in the `ReaderOpener` `Open()` signature.\r\n\r\nWhile I think it might be nice if both would satisfy the proposed rule, if it matters, I think it would be reasonable to allow the latter to satisfy the proposal, but not the former.\r\n\r\n### Additional considerations\r\n#### Explicit types\r\nThere's also the related case of an explicit type:\r\n```go\r\ntype ReaderOpener func() io.Reader\r\n```\r\nand whether a function which returns `io.ReadSeeker` should be assignable to a variable of this type.\r\n\r\nI don't know that this needs to be addressed in this proposal, but I mention it as it seems related.\r\n\r\n#### Function argument subsets\r\nIn theory the return superset logic should be able to be applied to function arguments, and whether interfaces can be subsets. Meaning whether a function with the signature `func(io.Reader)` should satisfy `interface { func(io.ReadSeeker) }`. In theory since the function only needs `io.Reader`, if it's given `io.ReadSeeker`, it should be able to operate normally.\r\nSo the consideration is that if return values are relaxed to allow interface supersets. Should function arguments be relaxed to allow interface subsets?", "labels": ["Go2", "LanguageChange", "Proposal"], "number_of_comments": 2, "created_at": "2020-02-07 22:16:51", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561896520": {"author_username": "stephenandwood", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37128, "title": "go.dev: README images should be proxied to protect user privacy", "body": "The overview page links directly to images referenced from the readme markdown.  These references allow third parties to track users on pkg.go.dev.\r\n\r\nGithub proxies images referenced from the readme to prevent such tracking.  See the following for more information:\r\n\r\n- https://github.blog/2014-01-28-proxying-user-images/\r\n- https://help.github.com/en/github/authenticating-to-github/about-anonymized-image-urls\r\n\r\npkg.go.dev should do the same.\r\n\r\n### What is the URL of the page with the issue?\r\n\r\nhttps://pkg.go.dev/github.com/labstack/echo?tab=overview and many other ?tab=overview pages.\r\n  \r\n### What did you do?\r\n \r\nI visited the page. \r\n \r\n### What did you expect to see?\r\n \r\nI expected to see requests to pkg.go.dev and it's trusted partners.\r\n\r\n### What did you see instead?\r\n\r\nI saw image requests to sourcegraph.com, img.sheilds.go and goreportcard.com.  \r\n\r\n\r\n", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-02-07 22:06:56", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561888591": {"author_username": "laboger", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37126, "title": "runtime: gdb stepping behavior when debugging Go program on ppc64le changed when split-stack prologue marked non-preemptible", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo1.14rc1\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nlinux/ppc64le\r\n</pre></details>\r\n\r\n### What did you do?\r\nTried to debug Go program on ppc64le using gdb by breaking at a function's address then stepping through the first several instructions.\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\n### What did you expect to see?\r\nNormal gdb behavior, gdb prompt returning within a reasonable amount of time (usually immediately) when stepping through code at the beginning of a function. This type of stepping works normally for programs compiled with Go 1.13.\r\n\r\nI found that this behavior started with b2482e4, so with that knowledge I now know that if I break after the split-stack prologue code the hanging/delay doesn't happen and only happens with functions that have split-stack prologue.\r\n\r\n### What did you see instead?\r\nBreak at the beginning of a function that has a split-stack prolog using its address. After typing 'ni' to go to the next instruction, gdb hangs and the prompt can take a long time and sometimes does not return (or I didn't wait long enough).", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-07 21:46:24", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561842670": {"author_username": "simon04", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37125, "title": "doc: Rewrite godoc.org links to pkg.go.dev", "body": "> Pkg.go.dev is a new destination for Go discovery & docs", "labels": ["cla: yes"], "number_of_comments": 4, "created_at": "2020-02-07 20:00:03", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561825301": {"author_username": "klauspost", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37121, "title": "runtime: go1.14rc1 performance regression", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n\u03bb go version\r\ngo version go1.13 windows/amd64\r\n</pre>\r\n\r\nAnd Go 1.14-RC1.\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n\u03bb go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\klaus\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\klaus\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=c:\\gopath\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=c:\\go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=c:\\go\\pkg\\tool\\windows_amd64\r\nset GCCGO=gccgo\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0 -fdebug-prefix-map=c:\\temp\\wintemp\\go-build453787042=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nIsolated code: [reproducer.zip](https://github.com/golang/go/files/4172583/reproducer.zip)\r\n\r\n`go test -bench=. -test.benchtime=10s`\r\n\r\nMost of the code is needed for the test setup, only `(*tokens).EstimatedBits` and `mFastLog2` is run during the benchmark.\r\n\r\n```\r\n\u03bb benchcmp go113.txt go114.txt\r\nbenchmark                             old ns/op     new ns/op     delta\r\nBenchmark_tokens_EstimatedBits-12     663           716           +7.99%\r\n\r\nbenchmark                             old MB/s     new MB/s     speedup\r\nBenchmark_tokens_EstimatedBits-12     1.51         1.40         0.93x\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nEquivalent performance.\r\n\r\n### What did you see instead?\r\n\r\n8% performance regression.", "labels": ["NeedsInvestigation", "Performance", "release-blocker"], "number_of_comments": 15, "created_at": "2020-02-07 19:24:37", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561815659": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37120, "title": "x/build/cmd/releasebot: check that previous minor release tag is merged into release branch", "body": "Issue #34505 was about checking that the security branch (in the private Go repository where the security fix is developed) is merged into the public release branch.\r\n\r\nIt was meant to add a safety measure to detect a situation where the step of merging the security branch was either forgotten or incomplete by the time the next minor release is made, which would cause the minor release to not include the fix from the previous security release. (Minor releases are sometimes made in very short succession after the preceding security release, and other times after a long amount of time.)\r\n\r\nA fix for this was implemented in [CL 206437](https://golang.org/cl/206437). It checks that non-security releases contain the HEAD commit from the security release branch if such a branch exists.\r\n\r\nWhile discussing this safety measure with @FiloSottile and @katiehockman, Filippo came up with a strategy of checking that minor releases contain the tag of the previous minor release. We expect that to be true for all minor releases. It has some advantages:\r\n\r\n- it will detect a problem even if the security release branches have been deleted (without being merged)\r\n- it does not need to access the private Go repository for non-security releases, which reduces the risk of accidentally revealing an upcoming security fix\r\n\r\nThis is the tracking issue for implementing that strategy.\r\n\r\nTo be able to implement this, we will need to parse the Go version being released, and compute the tag for the previous minor release (e.g., if releasing \"go1.13.8\", compute \"go1.13.7\"). The [`version`](https://pkg.go.dev/golang.org/x/build/maintner/maintnerd/maintapi/version) package may be helpful for this purpose. It may need to be extended to support beta and RC version strings, if those are in scope for this task.\r\n\r\n/cc @FiloSottile @katiehockman @cagedmantis @toothrot", "labels": ["Builders", "NeedsInvestigation", "Security"], "number_of_comments": 0, "created_at": "2020-02-07 19:03:01", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561804964": {"author_username": "katiehockman", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37118, "title": "crypto/cipher: NewGCMWithNonceSize allows zero-length nonce", "body": "`cipher.NewGCMWithNonceSize` allows for any nonce size, including one that is zero length. This is not allowed by NIST SP 800-38D and encrypting with such an IV leaks the authentication key.\r\n\r\n[NIST SP 800-38D](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf):\r\n\r\n> The bit lengths of the input strings to the authenticated encryption function shall meet the\r\n> following requirements:\r\n> ...\r\n> 1 \u2264 len(IV) \u2264 264-1\r\n\r\nAllowing a zero-length nonce opens the package up to misuse, and there is never a valid reason to do this. It could be argued that `cipher.NewGCMWithNonceSize` isn't meant to be as safe, and the recommended approach is to use `cipher.NewGCM`, however this is a hardening measure that has no negative side effects, in my opinion.\r\n\r\n[cipher.NewGCMWithNonceSize docs](https://pkg.go.dev/crypto/cipher?tab=doc#NewGCMWithNonceSize):\r\n\r\n> Only use this function if you require compatibility with an existing cryptosystem that uses non-standard nonce lengths. All other users should use NewGCM, which is faster and more resistant to misuse.\r\n\r\n/cc @FiloSottile ", "labels": ["NeedsFix"], "number_of_comments": 2, "created_at": "2020-02-07 18:38:46", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561787247": {"author_username": "thepudds", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37116, "title": "runtime: 10ms-26ms latency from GC in go1.14rc1, possibly due to 'GC (idle)' work", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go1.14rc1 version\r\n\r\ngo version go1.14rc1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, go1.14rc1.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nUbuntu 18.04.2 LTS (stock GCE image). 4 vCPUs, 15 GB.\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go1.14rc1 env\r\n\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/user/.cache/go-build\"\r\nGOENV=\"/home/user/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/user/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/user/sdk/go1.14rc1\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/user/sdk/go1.14rc1/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build656951356=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n</pre></details>\r\n\r\n### Background\r\n\r\nA recent [blog post](https://blog.discordapp.com/why-discord-is-switching-from-go-to-rust-a190bbca2b1f) reported an issue they saw in the >2 year old Go 1.10 when there are \"tens of millions\" of entries in an LRU, along with CPU spikes and response time spikes every two minutes, with a p95 response time reportedly hitting 50ms-300ms.  \r\n\r\nThe two minute periodicity was explained within the blog by the following, which seems plausible:\r\n\r\n> we had written the Go code very efficiently and had very few allocations. We were not creating a lot of garbage.\r\n> After digging through the Go source code, we learned that Go will force a garbage collection run every 2 minutes at minimum. In other words, if garbage collection has not run for 2 minutes, regardless of heap growth, go will still force a garbage collection.\r\n\r\nA separate recent [post](https://old.reddit.com/r/programming/comments/eyuebc/why_discord_is_switching_from_go_to_rust/fgk56y4/) from one of the engineers theorized the problem was due to a very long linked list, but I am less sure if this comment is a precise description of the actual root cause:\r\n\r\n> we used a large free-list like structure, a very long linked list. The head of the list is maintained as a variable, which means that Go's mark phase must start scanning from the head and then pointer chase its way through the list. For whatever reason, Go does (did?) this section in a single-threaded manner with a global lock held. As a result, everything must wait until this extremely long pointer chase occurs.\r\n\r\nAn engineer from the same team might have also posted this roughly 2.5 years ago in https://github.com/golang/go/issues/14812#issuecomment-411589415\r\n\r\n> I've also got a service that's encountering long request latencies due to CPU starvation when the GC runs. Like a couple others have mentioned, I think the GC may act poorly on long linked lists - I have a 1M-long list/map used as an LRU cache.\r\n\r\n### What did you do?\r\n\r\nWrite a simple GC benchmark intended to emulate a LRU with a separate free list.\r\n\r\nIt's not 100% clear what their exact data structures were, including whether or not it was just an LRU that linked elements within the LRU to help with expiring the older items, vs. maybe there was an additional free list that was separate from the LRU, vs. something else entirely.\r\n\r\nLast night, without too much data, I put together a simple gc benchmark of a LRU cache along with a separate free list.\r\n\r\nThe benchmark is here: \r\n\r\nhttps://play.golang.org/p/-Vo1hqIAoNz\r\n\r\nHere is a sample run with 50M items in a LRU cache (a map + the items within the map also are on a linked list), as well as 1M items on separate free list, and a background allocation rate of about 10k/sec:\r\n\r\n```\r\n$ go1.14rc1 build \r\n$ GODEBUG=gctrace=1 ./lru-gc-benchmark -free-list-items=1000000 -lru-items=50000000 -duration=20m -bg-alloc-sleep=10ms\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nIdeally, sub-ms worst-case latency impact of GC.\r\n\r\n### What did you see instead?\r\n\r\nThis was fairly quick and dirty, and might not be at all related to the problem reported in the blog, but seemed to observe occasionally higher latency values.\r\n\r\nIt is important to note that the issue here does not seem to be anywhere near the scale reported in the blog:\r\n  * The amplitude of the latency impact here (10ms-26ms) seems substantially smaller than what was reported on the blog (50ms-300ms).\r\n  * The issue here is reporting worst-case latency, rather than p95 latency on the blog.\r\n\r\nHere is an example where a single 26ms worst-case latency was observed when looking up an element in the LRU during a forced GC.\r\n\r\n```\r\n$ go1.14rc1 build  && GODEBUG=gctrace=1 ./lru-gc-benchmark -free-list-items=1000000 -lru-items=50000000 -duration=20m -bg-alloc-sleep=10ms \r\n\r\ngc 1 @0.011s 5%: 0.066+4.1+0.023 ms clock, 0.26+0.30/3.0/6.9+0.095 ms cpu, 4->4->3 MB, 5 MB goal, 4 P\r\ngc 2 @0.022s 10%: 0.008+9.0+0.021 ms clock, 0.033+0.33/8.7/10+0.087 ms cpu, 7->7->6 MB, 8 MB goal, 4 P\r\ngc 3 @0.044s 10%: 0.012+13+0.020 ms clock, 0.049+0/12/23+0.083 ms cpu, 13->13->12 MB, 14 MB goal, 4 P\r\ngc 4 @0.087s 10%: 0.009+26+0.030 ms clock, 0.038+0/24/46+0.12 ms cpu, 27->27->25 MB, 28 MB goal, 4 P\r\ngc 5 @0.177s 10%: 0.010+49+0.023 ms clock, 0.042+0/47/89+0.095 ms cpu, 53->54->50 MB, 54 MB goal, 4 P\r\ngc 6 @0.369s 10%: 0.015+98+0.022 ms clock, 0.060+0/98/179+0.089 ms cpu, 107->108->100 MB, 108 MB goal, 4 P\r\ngc 7 @0.767s 10%: 0.012+195+0.021 ms clock, 0.049+0/194/380+0.086 ms cpu, 213->216->200 MB, 214 MB goal, 4 P\r\ngc 8 @1.586s 11%: 7.4+377+0.028 ms clock, 29+71/376/742+0.11 ms cpu, 426->430->398 MB, 427 MB goal, 4 P\r\ngc 9 @3.343s 11%: 0.024+787+0.023 ms clock, 0.099+236/785/1501+0.094 ms cpu, 853->859->795 MB, 854 MB goal, 4 P\r\ngc 10 @7.071s 11%: 0.023+1806+0.023 ms clock, 0.092+497/1803/3513+0.095 ms cpu, 1706->1719->1591 MB, 1707 MB goal, 4 P\r\ngc 11 @14.905s 12%: 49+3796+0.023 ms clock, 196+1084/3796/7271+0.093 ms cpu, 3411->3439->3182 MB, 3412 MB goal, 4 P\r\ngc 12 @31.292s 14%: 226+8162+0.043 ms clock, 904+5028/8161/14256+0.17 ms cpu, 6823->6866->6353 MB, 6824 MB goal, 4 P\r\nLRU count:       50.00M\r\nFree list count: 1.00M\r\nBG allocation:   10000 / sec (approx.)\r\nBG retain count: 10000\r\nPrinting slowest lookup times:\r\ni=0          bgAllocs=540000   at=64.026s  lookup=0.009ms\r\ni=4096       bgAllocs=540100   at=64.028s  lookup=0.016ms\r\ni=8944       bgAllocs=540100   at=64.030s  lookup=0.118ms\r\ni=9410       bgAllocs=540100   at=64.031s  lookup=0.123ms\r\ni=52120      bgAllocs=540300   at=64.053s  lookup=0.141ms\r\ni=54295      bgAllocs=540300   at=64.054s  lookup=0.148ms\r\ni=81167      bgAllocs=540400   at=64.068s  lookup=0.185ms\r\ni=141525     bgAllocs=540700   at=64.099s  lookup=0.193ms\r\ni=473297     bgAllocs=542400   at=64.271s  lookup=0.205ms\r\ni=820934     bgAllocs=544200   at=64.451s  lookup=0.233ms\r\ni=1045129    bgAllocs=545300   at=64.572s  lookup=0.323ms\r\ni=49675599   bgAllocs=810200   at=91.600s  lookup=0.651ms\r\ni=59934276   bgAllocs=863000   at=97.000s  lookup=0.661ms\r\ni=63432689   bgAllocs=881700   at=98.900s  lookup=0.696ms\r\nGC forced\r\ni=173370432  bgAllocs=1476800   at=159.688s  lookup=3.407ms\r\ni=173381145  bgAllocs=1476800   at=159.727s  lookup=26.235ms\r\ngc 13 @159.687s 5%: 0.096+17356+0.020 ms clock, 0.38+0.65/17348/34668+0.081 ms cpu, 9642->9659->8463 MB, 12706 MB goal, 4 P\r\nGC forced\r\ngc 14 @297.047s 4%: 0.12+17250+0.021 ms clock, 0.49+30/17250/34376+0.086 ms cpu, 8696->8713->8463 MB, 16926 MB goal, 4 P\r\nGC forced\r\ngc 15 @434.306s 4%: 0.10+16952+0.024 ms clock, 0.41+0.20/16949/33820+0.096 ms cpu, 8696->8712->8463 MB, 16927 MB goal, 4 P\r\n```\r\n\r\nI would guess that 26ms lookup latency is likely related to this 26ms 'GC (idle)' period where the main goroutine did not seem to be on a P:\r\n\r\n![image](https://user-images.githubusercontent.com/20628140/74051363-c9113100-49a5-11ea-98dc-10c4c3000c13.png)\r\n\r\nAnother sample run:\r\n```\r\n\r\n$ go1.14rc1 build  && GODEBUG=gctrace=1 ./lru-gc-benchmark -free-list-items=1000000 -lru-items=50000000 -duration=20m -bg-alloc-sleep=10ms \r\n\r\ngc 1 @0.011s 6%: 0.014+4.3+0.025 ms clock, 0.056+0.023/3.7/6.6+0.10 ms cpu, 4->4->3 MB, 5 MB goal, 4 P\r\ngc 2 @0.021s 10%: 0.009+8.4+0.026 ms clock, 0.038+0.34/7.8/11+0.10 ms cpu, 7->7->6 MB, 8 MB goal, 4 P\r\ngc 3 @0.043s 10%: 0.009+12+0.023 ms clock, 0.036+0/11/23+0.092 ms cpu, 13->13->12 MB, 14 MB goal, 4 P\r\ngc 4 @0.084s 11%: 0.010+24+0.023 ms clock, 0.041+0/24/42+0.093 ms cpu, 27->27->25 MB, 28 MB goal, 4 P\r\ngc 5 @0.171s 10%: 0.014+48+0.024 ms clock, 0.058+0/47/93+0.097 ms cpu, 53->54->50 MB, 54 MB goal, 4 P\r\ngc 6 @0.364s 10%: 0.017+97+0.022 ms clock, 0.070+0/96/177+0.088 ms cpu, 107->108->100 MB, 108 MB goal, 4 P\r\ngc 7 @0.758s 10%: 5.6+203+0.022 ms clock, 22+0.49/201/386+0.091 ms cpu, 213->216->200 MB, 214 MB goal, 4 P\r\ngc 8 @1.605s 10%: 0.019+411+0.023 ms clock, 0.078+0/409/796+0.095 ms cpu, 426->432->399 MB, 427 MB goal, 4 P\r\ngc 9 @3.312s 11%: 28+790+0.031 ms clock, 114+194/787/1520+0.12 ms cpu, 853->860->795 MB, 854 MB goal, 4 P\r\ngc 10 @6.964s 12%: 46+1586+0.033 ms clock, 185+730/1585/2988+0.13 ms cpu, 1706->1716->1587 MB, 1707 MB goal, 4 P\r\ngc 11 @14.638s 13%: 79+3760+0.022 ms clock, 316+1164/3758/7168+0.088 ms cpu, 3411->3438->3182 MB, 3412 MB goal, 4 P\r\ngc 12 @31.187s 18%: 196+6723+0.007 ms clock, 785+11516/6720/7379+0.028 ms cpu, 6823->6824->6311 MB, 6824 MB goal, 4 P\r\nLRU count:       50.00M\r\nFree list count: 1.00M\r\nBG allocation:   10000 / sec (approx.)\r\nBG retain count: 10000\r\nPrinting slowest lookup times:\r\ni=0          bgAllocs=530900   at=63.844s  lookup=0.006ms\r\ni=100        bgAllocs=530900   at=63.844s  lookup=0.006ms\r\ni=671        bgAllocs=530900   at=63.844s  lookup=0.028ms\r\ni=2407       bgAllocs=530900   at=63.845s  lookup=0.030ms\r\ni=4258       bgAllocs=530900   at=63.847s  lookup=0.120ms\r\ni=80012      bgAllocs=531300   at=63.886s  lookup=0.634ms\r\ni=134006913  bgAllocs=1258500   at=138.086s  lookup=0.679ms\r\ni=145128912  bgAllocs=1321200   at=144.486s  lookup=0.703ms\r\nGC forced\r\ni=170136450  bgAllocs=1454900   at=158.133s  lookup=16.008ms\r\ngc 13 @158.108s 6%: 0.11+17483+0.022 ms clock, 0.44+0.23/17480/34884+0.089 ms cpu, 9639->9656->8463 MB, 12622 MB goal, 4 P\r\nGC forced\r\ngc 14 @295.596s 5%: 0.13+16977+0.024 ms clock, 0.52+28/16977/33847+0.099 ms cpu, 8695->8712->8463 MB, 16927 MB goal, 4 P\r\nGC forced\r\ni=632749868  bgAllocs=3978800   at=432.596s  lookup=11.794ms\r\ngc 15 @432.576s 4%: 0.073+17356+0.021 ms clock, 0.29+0.23/17355/34654+0.084 ms cpu, 8697->8714->8463 MB, 16927 MB goal, 4 P\r\nGC forced\r\ngc 16 @569.938s 4%: 0.17+16911+0.021 ms clock, 0.71+4.9/16908/33760+0.086 ms cpu, 8696->8713->8463 MB, 16926 MB goal, 4 P\r\nGC forced\r\ngc 17 @706.859s 3%: 0.19+17107+0.023 ms clock, 0.76+0.41/17106/34143+0.093 ms cpu, 8697->8714->8463 MB, 16927 MB goal, 4 P\r\nGC forced\r\ni=1327474340 bgAllocs=7763400   at=843.987s  lookup=8.791ms\r\ngc 18 @843.969s 3%: 0.28+17297+0.022 ms clock, 1.1+0.82/17295/34532+0.088 ms cpu, 8696->8713->8463 MB, 16927 MB goal, 4 P\r\ni=1344317800 bgAllocs=7849300   at=861.294s  lookup=13.015ms\r\n...\r\n^C\r\n```\r\n\r\nI suspect this trace section corresponds to the `at=432.596s  lookup=11.794ms` observed latency:\r\n\r\n![image](https://user-images.githubusercontent.com/20628140/74051285-a717ae80-49a5-11ea-89c4-c05189e5db61.png)\r\n\r\nIn both cases, the traces started roughly 100 seconds after the start of the process, so the timestamps between the log message vs. images are offset roughly by 100 seconds.\r\n\r\n### Related issues \r\n\r\nThis issue might very well be a duplicate. For example, there is a recent list of 5 known issues in https://github.com/golang/go/issues/14812#issuecomment-574203014. That said, if this issue is explained by one of the 5 items there, it is not immediately obvious to me which one, including some of the issues in that list are resolved now, but this happens in go1.14rc1. Also possibly related to #14179, #18155, or others.\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 8, "created_at": "2020-02-07 17:58:36", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561759818": {"author_username": "mmirolim", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37115, "title": "x/tools/go/packages: loader doesn't handle/recognize \"context canceled\" error ", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/mm/.cache/go-build\"\r\nGOENV=\"/home/mm/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/mm/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/mm/go/src/github.com/mmirolim/gtr/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build542977077=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\nI used packages.Load function with Config.Context set. If context canceled and packages.loader in loadPackage function, appendError prints \"internal error\" message\r\nhttps://github.com/golang/tools/blob/master/go/packages/packages.go#L791 \r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nTo reproduce error, we can inject delay in loader.loadRecursive/loadPackage function and \r\nmodify testParseFileModifyAST, set context to config, which will be canceled before delay in loader.\r\nhttps://github.com/golang/tools/blob/master/go/packages/packages_test.go#L870\r\n### What did you expect to see?\r\nno error messages in stdout\r\n\r\n\r\n### What did you see instead?\r\n..... many lines of ...\r\n2020/02/07 16:18:23 internal error: error \"context canceled\" (*errors.errorString) without position\r\n.....\r\n", "labels": ["NeedsInvestigation", "Tools"], "number_of_comments": 2, "created_at": "2020-02-07 17:01:47", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561743077": {"author_username": "bk2204", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37113, "title": "proposal: path/filepath: add a function to canonicalize paths", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.12.7 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nApplies to all OSes\r\n\r\n### What did you do?\r\n\r\n1. Mounted a UNC path as a drive letter.\r\n2. In CMD, switched the current working directory to that drive.\r\n3. Called filepath.Abs on a relative path.\r\n4. Called filepath.EvalSymlinks on the result of that function.\r\n\r\n### What did you expect to see?\r\n\r\nThe same results as calling GetFinalPathNameByHandle: a UNC path.\r\n\r\n### What did you see instead?\r\n\r\nA path using the drive letter instead of the UNC path.\r\n\r\n### Notes\r\n\r\nThis affects any attempt to canonicalize paths using the output of Git in such a situation.  Git produces some paths as absolute and some paths as relative, and uses GetFinalPathNameByHandle for canonicalizing absolute paths.  However, Go lacks a function to canonicalize paths in a standard way, so it isn't possible to produce results equivalent to a C program and still write code that works portably across systems.\r\n\r\nGo should add a function that is explicitly defined to canonicalize paths in a way equivalent to the underlying operating system, since using filepath.Abs and filepath.EvalSymlinks doesn't work correctly on Windows.  It does work fine on Unix, but Unix paths are much simpler and easier to reason about.\r\n\r\nIt was determined in #17084 that filepath.Abs and filepath.EvalSymlinks were sufficient in this case, but that doesn't appear to be true.  I expect there are other cases in which those don't work on Windows, but I am insufficiently versed in Windows paths to know what those are.\r\n\r\nThis was originally reported to the Git LFS project in git-lfs/git-lfs#4012.", "labels": ["FeatureRequest", "NeedsInvestigation", "Proposal"], "number_of_comments": 4, "created_at": "2020-02-07 16:30:17", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561734067": {"author_username": "mknyszek", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37112, "title": "proposal: API for unstable runtime metrics", "body": "# Proposal: API for unstable runtime metrics\r\n\r\n## Background & Motivation\r\n\r\nToday runtime metrics are exposed in two ways.\r\n\r\nThe first way is via the struct-based sampling APIs `runtime.ReadMemStats` and `runtime/debug.GCStats`. These functions accept a pointer to a struct and then populate the struct with data from the runtime.\r\n\r\nThe problems with this type of API are:\r\n* Removing/renaming old metrics from the structs is impossible.\r\n  * For example, `MemStats.BySize` is hard-coded to 61 size classes when there are currently 83. We cannot ever change `BySize`.\r\n* Adding implementation-specific metrics to the structs is discouraged, because it pollutes the API when inevitably they'll be deprecated.\r\n* `runtime.ReadMemStats` has a global effect on the application because it forces a STW. This has a direct effect on latency. Being able to tease apart which metrics actually need gives users more control over performance.\r\n\r\nThe good things about this type of API are:\r\n* Protected by the Go 1 compatibility promise.\r\n* Easy for applications to ingest, use for their own purposes, or push to a metrics collection service or log.\r\n\r\nThe second is via `GODEBUG` flags which emit strings containing metrics to standard error (e.g. `gctrace`, `gcpacertrace`, `scavtrace`).\r\n\r\nThe problems with this type of API are:\r\n* Difficult for an application to ingest because it must be parsed.\r\n* Format of the output is not protected by the Go 1 backwards compatibility promise.\r\n\r\nThe good things about this type of API are:\r\n* We can freely change it and add implementation-specific metrics.\r\n* We never have to live with bad decisions.\r\n\r\nI would like to propose a new API which takes the best of both approaches.\r\n\r\n## Requirements\r\n\r\n* The API should be easily extendable with new metrics.\r\n* The API should be easily retractable, to deprecate old metrics.\r\n    * Removing a metric should not break any Go applications as per the Go 1 compatibility promise.\r\n* The API should be discoverable, to obtain a list of currently relevant metrics.\r\n* The API should be rich, allowing a variety of metrics (e.g. distributions).\r\n* The API implementation should minimize CPU/memory usage, such that it does not appreciably\r\n  affect any of the metrics being measured.\r\n* The API should include useful existing metrics already exposed by the runtime.\r\n\r\n## Goals\r\n\r\nGiven the requirements, I suggest we prioritize the following concerns when designing the API in the following order.\r\n\r\n1. Extensibility.\r\n    * Metrics are \u201cunstable\u201d and therefore it should always be compatible to add or remove metrics.\r\n    * Since metrics will tend to be implementation-specific, this feature is critical.\r\n1. Discoverability.\r\n    * Because these metrics are \u201cunstable,\u201d there must be a way for the application, and for the human writing the application, to discover the set of usable metrics and be able to do something useful with that information (e.g. log the metric).\r\n    * The API should enable collecting a subset of metrics programmatically. For example, one might want to \u201ccollect all memory-related metrics\u201d or \u201ccollect all metrics which are efficient to collect\u201d.\r\n1. Performance.\r\n    * Must have a minimized effect on the metrics it returns in the steady-state.\r\n    * Should scale up to 100s of metrics, an amount that a human might consider \u201ca lot.\u201d\r\n        * Note that picking the right types to expose can limit the amount of metrics we need to expose. For example, a distribution type would significantly reduce the number of metrics.\r\n1. Ergonomics.\r\n    * The API should be as easy to use as it can be, given the above.\r\n\r\n## Design\r\n\r\nSee full design document here. (TODO: add a link to the design document).\r\n\r\nHighlights:\r\n* Expose a new sampling-based API in a new package, the `runtime/metrics` package.\r\n* Use string keys for each metric which include the unit of the metric in an easily-parseable format.\r\n* Expose a discovery API which provides metadata about each metric at runtime, such as whether it requires a STW and whether it's cumulative (counter as opposed to a gauge).\r\n* Add a Histogram interface to the package which represents a distribution.\r\n* Support for event-based metrics is discussed and left open, but considered outside the scope of this proposal.\r\n\r\n## Backwards Compatibility\r\n\r\nNote that although the set of metrics the runtime exposes will not be stable across Go versions, the API to discover and access those metrics will be.\r\n\r\nTherefore, this proposal strictly increases the API surface of the Go standard library without changing any existing functionality and is therefore Go 1 compatible.\r\n", "labels": ["Proposal"], "number_of_comments": 1, "created_at": "2020-02-07 16:14:27", "reactions": {"total_count": 5, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561725208": {"author_username": "hunterloftis", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37111, "title": "go.dev: search can show \"zero results\" on an exact package match", "body": "### What did you do?\r\n\r\nI typed a full package url into the search box at go.dev, hoping to go to a particular package:\r\n\r\n![Screen Shot 2020-02-07 at 10 55 58 AM](https://user-images.githubusercontent.com/364501/74044208-bb08e380-4998-11ea-8ded-5ea9288bb56e.png)\r\n\r\n### What did you expect to see?\r\n\r\nI expected to either go directly to that package, or for that package to be a link in the search results.\r\n\r\n### What did you see instead?\r\n\r\n![Screen Shot 2020-02-07 at 10 55 53 AM](https://user-images.githubusercontent.com/364501/74044183-ac223100-4998-11ea-93e0-aaa00b335e9c.png)\r\n", "labels": ["WaitingForInfo", "go.dev"], "number_of_comments": 4, "created_at": "2020-02-07 15:58:36", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561725054": {"author_username": "dmage", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37110, "title": "go.dev: consider making header non-sticky ", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions, please email go-discovery-feedback@google.com.\r\n-->\r\n \r\n### What is the URL of the page with the issue?\r\n \r\n https://pkg.go.dev/k8s.io/klog?tab=doc or any other package.\r\n \r\n### What is your user agent?\r\n \r\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36\r\n \r\n### Screenshot\r\n\r\n> <img width=\"641\" alt=\"Screenshot 2020-02-07 at 16 49 19\" src=\"https://user-images.githubusercontent.com/443137/74043532-d8a27100-49c9-11ea-9a50-deff7f1162c9.png\"> \r\n \r\n### What did you expect to see?\r\n \r\nI'd expect my screen space to be used efficiently.\r\n \r\n### What did you see instead?\r\n\r\nA quite big header.", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-02-07 15:58:20", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561669329": {"author_username": "yo8", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37106, "title": "go.dev: support ` Refresh now` like godoc.org", "body": "### What did you do?\r\n\r\nView documents on `pkg.go.dev`.\r\n\r\n### What did you expect to see?\r\n\r\nLatest documents.\r\n\r\n### What did you see instead?\r\n\r\nOut-of-date documents, even its counterpart on `godoc.org` was updated a few days ago.", "labels": ["FeatureRequest", "NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-02-07 14:27:21", "reactions": {"total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561631523": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37105, "title": "x/website: show release dates on downloads page", "body": "Looking through https://golang.org/dl/, it would be nice to be able to see when a Go version was released. Otherwise you have to cross manually cross reference with golang-nuts.\r\n\r\ne.g. https://groups.google.com/d/msg/golang-nuts/s8EXcSSJ5cg/bjzWK9DABAAJ\r\n\r\nThis information might be available elsewhere, but the downloads page would also seem to be a good place to make it available?", "labels": ["NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-02-07 13:17:02", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561528976": {"author_username": "rogpeppe", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37103, "title": "cmd/go: `go help get` should show module-get not GOPATH get", "body": "<pre>\r\n$ go version\r\ngo version go1.14rc1 linux/amd64\r\n</pre>\r\n\r\nRunning `go help get` prints the help for the GOPATH usage. As modules are now the preferred approach, I think that `go help get` should be changed to produce the current `go help module-get` output and the current page be moved to`go help gopath-get`.\r\n", "labels": ["Documentation", "GoCommand", "NeedsDecision"], "number_of_comments": 2, "created_at": "2020-02-07 09:48:08", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561509274": {"author_username": "ptman", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37102, "title": "pkg.go.dev: show the package version that introduced a change in documentation", "body": "### What is the URL of the page with the issue?\r\n \r\n pkg.go.dev\r\n \r\n### What did you expect to see?\r\n \r\nThe same info as on e.g. https://golang.org/pkg/context/ about which version introduced changes.", "labels": ["Documentation", "FeatureRequest", "NeedsInvestigation", "go.dev"], "number_of_comments": 2, "created_at": "2020-02-07 09:09:32", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561470362": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37101, "title": "x/tools/gopls: build constraints not respected for new files", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +b7689f5aa3 Fri Jan 31 06:02:00 2020 +0000 linux/amd64\r\n$ go list -m golang.org/x/tools\r\ngolang.org/x/tools v0.0.0-20200205190317-6e8b36d2c76b\r\n$ go list -m golang.org/x/tools/gopls\r\ngolang.org/x/tools/gopls v0.1.8-0.20200205190317-6e8b36d2c76b\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/myitcv/.cache/go-build\"\r\nGOENV=\"/home/myitcv/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/myitcv/gostuff\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/myitcv/gos\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/myitcv/gos/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/myitcv/.vim/plugged/govim/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build540934445=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nStarting with an empty module, create (and save) the following files in sequence:\r\n\r\n```\r\n-- main.go --\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(hello())\r\n}\r\n```\r\n\r\n```\r\n-- hello_linux.go --\r\npackage main\r\n\r\nfunc hello() string {\r\n\treturn \"linux\"\r\n}\r\n```\r\n\r\n```\r\n-- hello_darwin.go --\r\npackage main\r\n\r\nfunc hello() string {\r\n\treturn \"darwin\"\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nNo diagnostic errors.\r\n\r\n### What did you see instead?\r\n\r\n```\r\nPublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\r\n    URI:         \"file:///home/myitcv/gostuff/src/github.com/myitcv/playground/hello_darwin.go\",\r\n    Version:     57,\r\n    Diagnostics: {\r\n        {\r\n            Range: protocol.Range{\r\n                Start: protocol.Position{Line:2, Character:5},\r\n                End:   protocol.Position{Line:2, Character:10},\r\n            },\r\n            Severity:           1,\r\n            Code:               nil,\r\n            Source:             \"compiler\",\r\n            Message:            \"hello redeclared in this block\",\r\n            Tags:               nil,\r\n            RelatedInformation: nil,\r\n        },\r\n    },\r\n}\r\nPublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\r\n    URI:         \"file:///home/myitcv/gostuff/src/github.com/myitcv/playground/hello_linux.go\",\r\n    Version:     65,\r\n    Diagnostics: {\r\n        {\r\n            Range: protocol.Range{\r\n                Start: protocol.Position{Line:2, Character:5},\r\n                End:   protocol.Position{Line:2, Character:10},\r\n            },\r\n            Severity:           1,\r\n            Code:               nil,\r\n            Source:             \"compiler\",\r\n            Message:            \"other declaration of hello\",\r\n            Tags:               nil,\r\n            RelatedInformation: nil,\r\n        },\r\n    },\r\n}\r\n```\r\n\r\nIf you close and restart the editor (or indeed `gopls`) the diagnostics go away.\r\n\r\n---\r\n\r\ncc @stamblerre\r\n\r\nFYI @leitzler\r\n", "labels": ["NeedsInvestigation", "Tools", "gopls"], "number_of_comments": 0, "created_at": "2020-02-07 07:35:03", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561464057": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37100, "title": "syscall/js: add support for fork/exec syscalls?", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +b7689f5aa3 Fri Jan 31 06:02:00 2020 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/myitcv/.cache/go-build\"\r\nGOENV=\"/home/myitcv/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/myitcv/gostuff\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/myitcv/gos\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/myitcv/gos/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/myitcv/gostuff/src/github.com/myitcv/playground/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build703123889=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```\r\n-- go.mod --\r\nmodule mod\r\n\r\n-- main.go --\r\npackage main\r\n\r\nimport (\r\n        \"fmt\"\r\n        \"os\"\r\n        \"os/exec\"\r\n)\r\n\r\nfunc main() {\r\n        cmd := exec.Command(\"echo\", \"hello\")\r\n        cmd.Stdout = os.Stdout\r\n        cmd.Stderr = os.Stderr\r\n        if err := cmd.Run(); err != nil {\r\n                fmt.Fprintln(os.Stderr, err)\r\n                os.Exit(1)\r\n        }\r\n}\r\n```\r\n\r\n```\r\nGOOS=js GOARCH=wasm go build -o main.wasm\r\n$(go env GOROOT)/misc/wasm/go_js_wasm_exec main.wasm\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\nhello\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\nexec: \"echo\": executable file not found in $PATH\r\n```\r\n\r\nAs some folks on Slack kindly pointed out, this is because `GOOS=js ARCH=wasm` does not support fork/exec syscalls. Those same folks were not clear that it made sense for this to be supported (especially given the browser focus of this port), but when executing through NodeJS (i.e. the `go_js_wasm_exec` wrapper) it does have meaning.\r\n\r\nThoughts?\r\n\r\ncc @neelance ", "labels": ["Arch-Wasm", "FeatureRequest", "NeedsInvestigation"], "number_of_comments": 2, "created_at": "2020-02-07 07:18:34", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561460624": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37099, "title": "go.dev: support package owner-initiated redirect from godoc.org to pkg.go.dev", "body": "### What is the URL of the page with the issue?\r\n\r\nhttps://godoc.org/github.com/govim/govim\r\n\r\n### What is your user agent?\r\n\r\n<pre>\r\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.66 Safari/537.36\r\n</pre>\r\n\r\n### Screenshot\r\n\r\n<img width=\"744\" alt=\"Screen Shot 2020-02-07 at 06 55 04\" src=\"https://user-images.githubusercontent.com/3374574/74007687-d2cf7000-4976-11ea-92f5-864d26281310.png\">\r\n\r\n\r\n### What did you do?\r\n\r\nEnded up on https://godoc.org/github.com/govim/govim (through a Google search)\r\n\r\n### What did you expect to see?\r\n\r\nWhat would I like to have seen? To have been automatically redirected to https://pkg.go.dev/github.com/govim/govim?tab=doc\r\n\r\n### What did you see instead?\r\n\r\nThe notice shown in the screenshot above, telling me about pkg.go.dev\r\n\r\nThis issue is really a suggestion that we add a mechanism to redirect traffic from godoc.org to pkg.go.dev at a package owner's request. For example, a special tag in the source VCS, e.g. `redirect_to_pkg.go.dev`, could signal to godoc.org that packages within that repository should be redirected. Taking GitHub as an example, such tags can be created/removed from the UI, making this a simple task with no commits required (which is useful if a project has gone into maintenance mode). On the godoc side, I suspect the required changes would be minimal (citation required) because godoc already has the necessary logic for refreshing from VCS. \r\n\r\nThis would allow:\r\n\r\n* allow a partial and package owner-driven redirect of traffic, controlled by the package owner\r\n* help reduce the load on godoc.org and likely exercise pkg.go.dev more \r\n* remove the need for users to install a client side (browser) redirect from godoc.org to pkg.go.dev (which is potentially too blunt a tool in any case, if there are problems preventing some docs from being viewed on pkg.go.dev for example)\r\n\r\nClearly this redirect cannot be permanent, in case the package owner subsequently discovers a problem with the docs as visible on pkg.go.dev and needs to (temporarily) revert back to godoc.org.\r\n\r\nThis is, however, just a humble suggestion. My understanding of godoc.org (implementation) is very limited.\r\n\r\ncc @julieqiu ", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 4, "created_at": "2020-02-07 07:09:17", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561410627": {"author_username": "noahgoldman", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37098, "title": "x/tools/packages: Swig causes generated C++ sources in CompiledGoFiles", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/ngoldman/Library/Caches/go-build\"\r\nGOENV=\"/Users/ngoldman/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/ngoldman/projects/golang\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/Cellar/go/1.13.7/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.13.7/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/Users/ngoldman/projects/pixelserver/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/vz/db5rfql17xndlv94d_cxrw1c0000gr/T/go-build075487118=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThe function `(golang.org/x/tools/go/packages).Load` was called on a package that uses Swig to generate C++ interfaces.  The minimal case to reproduce this behavior is to create a Go source with nothing but a package declaration `package x`, as well as an empty Swig interface file with the extension `.swigcxx`.\r\n\r\nI can reproduce this with the following test case (utilizing the [packagestest](https://godoc.org/golang.org/x/tools/go/packages/packagestest) package).\r\n\r\n```go\r\npackage swigtest\r\n\r\nimport (\r\n\t\"go/parser\"\r\n\t\"go/token\"\r\n\t\"io/ioutil\"\r\n\t\"testing\"\r\n\r\n\t\"golang.org/x/tools/go/packages\"\r\n\t\"golang.org/x/tools/go/packages/packagestest\"\r\n)\r\n\r\nfunc TestSwigCompiledFilesCXX(t *testing.T) { packagestest.TestAll(t, testSwigCompiledFilesCXX) }\r\nfunc testSwigCompiledFilesCXX(t *testing.T, exporter packagestest.Exporter) {\r\n\texported := packagestest.Export(t, exporter, []packagestest.Module{{\r\n\t\tName: \"golang.org/fake\",\r\n\t\tFiles: map[string]interface{}{\r\n\t\t\t\"a/a.go\":      \"package a\",\r\n\t\t\t\"a/a.swigcxx\": \"\",\r\n\t\t}}})\r\n\tdefer exported.Cleanup()\r\n\r\n\tinitial, err := packages.Load(exported.Config, \"golang.org/fake/a\")\r\n\tif err != nil {\r\n\t\tt.Fatalf(\"failed to load the package: %v\", err)\r\n\t}\r\n\t// Try and parse each of the files\r\n\tfor _, pkg := range initial {\r\n\t\tfor _, file := range pkg.CompiledGoFiles {\r\n\t\t\tfset := token.NewFileSet()\r\n\t\t\t_, err := parser.ParseFile(fset, file, nil, parser.ImportsOnly)\r\n\t\t\tif err != nil {\r\n\t\t\t\tt.Errorf(\"failed to parse file '%s': %v\", file, err)\r\n\r\n\t\t\t\tcontents, err := ioutil.ReadFile(file)\r\n\t\t\t\tif err != nil {\r\n\t\t\t\t\tt.Fatalf(\"failed to read the un-parsable file '%s': %v\", file, err)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tt.Logf(\"Contents of un-parsable file: %s\", contents[:1000])\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nI'd expect that that `(golang.org/x/tools/go/packages).Load` would return `*Package` types, for which each value of `CompiledGoFiles` would be a Go source file, not a C++ source.\r\n\r\nThe discussion in #28749 and the [subsequent change](https://go-review.googlesource.com/c/tools/+/163597) to `golang.org/x/tools/go/packages` indicates that the intention is to only contain Go sources in `(*Package).CompiledGoFiles`.  The current behavior of removing sources present in `(*Package).OtherFiles` from `(*Package).CompiledGoFiles` (see [golist.go#L546](https://github.com/golang/tools/blob/master/go/packages/golist.go#L546)) will filter out any files defined in most of the other fields returned from `go list ...` (see [golist.go#L400](https://github.com/golang/tools/blob/master/go/packages/golist.go#L400)).\r\n\r\n### What did you see instead?\r\n\r\nThe output of `(golang.org/x/tools/go/packages).Load` on a package that uses Swig to generate C++ interfaces results in the package containing Swig-generated C++ in `(*Package).CompiledGoFiles`.\r\n\r\nHere are the results of running the test case above.  The test case prints the first 1000 characters of the non-Go sources to show that they are C++ files.\r\n\r\n```\r\n--- FAIL: TestSwigCompiledFilesCXX (1.49s)\r\n    --- FAIL: TestSwigCompiledFilesCXX/GOPATH (0.75s)\r\n        swig_test.go:33: failed to parse file '/Users/ngoldman/Library/Caches/go-build/bf/bfad65d54097c367b8e59c1820fb6d949ec7321895ea57c2f5748e961325b7c5-d': /Users/ngoldman/Library/Caches/go-build/bf/bfad65d54097c367b8e59c1820fb6d949ec7321895ea57c2f5748e961325b7c5-d:13:1: illegal character U+0023 '#'\r\n        swig_test.go:40: Contents of un-parsable file: /* ----------------------------------------------------------------------------\r\n             * This file was automatically generated by SWIG (http://www.swig.org).\r\n             * Version 4.0.1\r\n             *\r\n             * This file is not intended to be easily readable and contains a number of\r\n             * coding conventions designed to improve portability and efficiency. Do not make\r\n             * changes to this file unless you know what you are doing--modify the SWIG\r\n             * interface file instead.\r\n             * ----------------------------------------------------------------------------- */\r\n            \r\n            // source: a.swigcxx\r\n            \r\n            #define SWIGMODULE a\r\n            \r\n            #ifdef __cplusplus\r\n            /* SwigValueWrapper is described in swig.swg */\r\n            template<typename T> class SwigValueWrapper {\r\n              struct SwigMovePointer {\r\n                T *ptr;\r\n                SwigMovePointer(T *p) : ptr(p) { }\r\n                ~SwigMovePointer() { delete ptr; }\r\n                SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }\r\n              } pointer;\r\n              SwigValueWrapper& operator=(const SwigValueWrapper<T>\r\n    --- FAIL: TestSwigCompiledFilesCXX/Modules (0.74s)\r\n        swig_test.go:33: failed to parse file '/Users/ngoldman/Library/Caches/go-build/bf/bfad65d54097c367b8e59c1820fb6d949ec7321895ea57c2f5748e961325b7c5-d': /Users/ngoldman/Library/Caches/go-build/bf/bfad65d54097c367b8e59c1820fb6d949ec7321895ea57c2f5748e961325b7c5-d:13:1: illegal character U+0023 '#'\r\n        swig_test.go:40: Contents of un-parsable file: /* ----------------------------------------------------------------------------\r\n             * This file was automatically generated by SWIG (http://www.swig.org).\r\n             * Version 4.0.1\r\n             *\r\n             * This file is not intended to be easily readable and contains a number of\r\n             * coding conventions designed to improve portability and efficiency. Do not make\r\n             * changes to this file unless you know what you are doing--modify the SWIG\r\n             * interface file instead.\r\n             * ----------------------------------------------------------------------------- */\r\n            \r\n            // source: a.swigcxx\r\n            \r\n            #define SWIGMODULE a\r\n            \r\n            #ifdef __cplusplus\r\n            /* SwigValueWrapper is described in swig.swg */\r\n            template<typename T> class SwigValueWrapper {\r\n              struct SwigMovePointer {\r\n                T *ptr;\r\n                SwigMovePointer(T *p) : ptr(p) { }\r\n                ~SwigMovePointer() { delete ptr; }\r\n                SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }\r\n              } pointer;\r\n              SwigValueWrapper& operator=(const SwigValueWrapper<T>\r\nFAIL\r\n```", "labels": ["NeedsInvestigation", "Tools"], "number_of_comments": 2, "created_at": "2020-02-07 04:15:31", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561355384": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37097, "title": "wiki: Go-Release-Cycle has an out of date statement on backporting policy", "body": "There is a statement in the [Release Maintenance](https://golang.org/wiki/Go-Release-Cycle#release-maintenance)\u00a0section of the Go Release Cycle wiki page that is out of date:\r\n\r\n> Minor releases to address non-security problems for Go 1.x stop once Go 1.x+1 is released.\r\n\r\nI plan to edit the page to make it say:\r\n\r\n> Minor releases to address non-security problems for Go 1.x stop once Go 1.x+2 is released.\r\n\r\nThis is because we've accepted a backport policy clarification in proposal #34536, which makes it clear that the last two releases are supported equally.\r\n\r\n(Filing this issue before making the change, as documented in the first paragraph of that wiki page.)\r\n\r\n/cc @rsc @andybons @cagedmantis @toothrot", "labels": ["Documentation", "NeedsDecision"], "number_of_comments": 1, "created_at": "2020-02-07 00:46:46", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561335529": {"author_username": "josharian", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37096, "title": "cmd/compile: ARM's MOVWnop causes regalloc to insert unnecessary copies", "body": "MOVWnop is a nop/copy designed to ensure type safety. It generates no code. However, it is not free; regalloc sometimes makes a copy of a value to provide to MOVWnop, since it doesn't know that MOVWnop doesn't modify its argument.\r\n\r\nI noticed this while tracking down regressions due to changes in rewrite rule order application.\r\n\r\nI don't know what the best approach to fixing it is. Suggestions?\r\n\r\ncc @cherrymui \r\n", "labels": ["NeedsInvestigation", "Performance"], "number_of_comments": 1, "created_at": "2020-02-06 23:41:54", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561332001": {"author_username": "Gregory-Ledray", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37095, "title": "misc/wasm: On WSL, test code works when served over HTTPS / HTTP/2; not with HTTP 1.1", "body": "#### Yes, I'm aware the name of this Issue seems impossible. But it's true.\r\n\r\n### What version of Go are you using (`go version`)?\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes?\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/greg/.cache/go-build\"\r\nGOENV=\"/home/greg/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/greg/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/mnt/c/Users/gledr/Polyapp_Apps/gocode/src/gitlab.com/polyapp-open-source/buggyHTTP/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build313322648=/tmp/go-build -gno-record-gcc-swit\r\nches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"github.com/rs/cors\"\r\n\t\"net/http\"\r\n\t\"os\"\r\n\t\"runtime\"\r\n\t\"time\"\r\n)\r\n\r\nfunc main() {\r\n\tmux := http.NewServeMux()\r\n\tfs := http.FileServer(http.Dir(\"./serveThis\"))\r\n\tmux.Handle(\"/\", fs)\r\n\thandler := cors.New(cors.Options{\r\n\t\tAllowCredentials: true,\r\n\t\tAllowedMethods:   []string{\"GET\", \"POST\", \"PUT\"},\r\n\t\tAllowedOrigins:   []string{\"https://localhost:*\", \"http://localhost:*\", \"*\"},\r\n\t\tAllowedHeaders:   []string{\"Accept\", \"Accept-Language\", \"Accept-Encoding\", \"Content-Type\", \"Content-Length\", \"Authorization\"},\r\n\t\tMaxAge:           120,\r\n\t}).Handler(mux)\r\n\tserver := &http.Server{\r\n\t\tAddr:           \":5100\",\r\n\t\tHandler:        handler,\r\n\t\tIdleTimeout:    60 * time.Second,\r\n\t\tReadTimeout:    60 * time.Second,\r\n\t\tWriteTimeout:   60 * time.Second,\r\n\t\tMaxHeaderBytes: 1 << 20,\r\n\t}\r\n\r\n\tvar err error\r\n\r\n\t// working (the errors are expected - it succeeded because it says in the browser:\r\n\t// --- FAIL: TestAlwaysFail (0.00s)\r\n\t// main_integration_test.go:25: always fail\r\n\ttlsPath := \"\"\r\n\tif runtime.GOOS == \"windows\" {\r\n\t\ttlsPath = os.Getenv(\"TLSPATH\") + \"\\\\\\\\\"\r\n\t} else {\r\n\t\ttlsPath = os.Getenv(\"TLSPATH\") + string(os.PathSeparator)\r\n\t}\r\n\terr = server.ListenAndServeTLS(tlsPath+\"server.crt\", tlsPath+\"server.key\")\r\n\r\n\t// TODO not working\r\n\t// error in Firefox: DOMException: \"The operation was aborted. \"\r\n\t// error in Chrome: Failed to load resource: the server responded with a status of 404 (Not Found)\r\n\t// next error in Chrome: Failed to load resource: net::ERR_CONTENT_LENGTH_MISMATCH\r\n\t// next error in Chrome: TypeError: Could not download wasm module\r\n\t// err = server.ListenAndServe()\r\n\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n```\r\n### What did you expect to see?\r\nExplained in the comments, but the file in the repo is a test file compiled to WASM and being loaded into the browser to help me run the tests. I expect it to run the tests, which it does do when using TLS.\r\n\r\n### What did you see instead?\r\nWhen using HTTP 1.1 (aka ListenAndServe, not ListenAndServeTLS) the WASM file fails to load.\r\n\r\n### Reproduction Info\r\nYou can use the repo here with these instructions: \r\n```\r\ngit clone https://gitlab.com/polyapp-open-source/buggyHTTP\r\ncd buggyHTTP\r\ngo build\r\n./buggyHTTP\r\n```\r\nThen open a browser to https://localhost:5100 and see that it works (this is the https version, after all).\r\n\r\nGo back and switch which lines are being used to serve the files. Rebuild and serve.\r\n\r\n### Notes\r\n* I've seen this happen if I compile in WSL.\r\n* **It does NOT happen if I compile the Go program with Windows**.\r\n* I did a lot of stumbling around to try to solve this problem before realizing the problem was not using TLS / HTTP 2. You can read about that, and instructions on how to build the binary, here: https://github.com/chromedp/chromedp/issues/571", "labels": ["Arch-Wasm", "NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-02-06 23:32:24", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561306540": {"author_username": "wader", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37094, "title": "proposal: exec: add (*Cmd).ExtraInPipe and ExtraOutPipe", "body": "Add convenience methods for using `Cmd.ExtraFiles` that returns `io.ReadCloser` and `io.WriteCloser` and also deal with file descriptor numbers in the child process. Similar to existing `StdinPipe` and `StdoutPipe` methods.\r\n\r\nAn implementation in the exec package could look something like this:\r\n```go\r\n// ExtraInPipe returns a pipe and fd number that will be connected to a\r\n// readable fd in the child process.\r\n//\r\n// See StdinPipe for how to handle close and exit.\r\nfunc (c *Cmd) ExtraInPipe() (io.WriteCloser, uintptr, error) {\r\n\tpr, pw, err := os.Pipe()\r\n\tif err != nil {\r\n\t\treturn nil, 0, err\r\n\t}\r\n\tc.ExtraFiles = append(c.ExtraFiles, pr)\r\n\tc.closeAfterStart = append(c.closeAfterStart, pr)\r\n\twc := &closeOnce{File: pw}\r\n\tc.closeAfterWait = append(c.closeAfterWait, wc)\r\n\treturn wc, uintptr(len(c.ExtraFiles)) + 2, nil\r\n}\r\n\r\n// ExtraOutPipe returns a pipe and a fd number that will be connected to a\r\n// writable fd in the child process.\r\n//\r\n// See StdoutPipe for how to handle close and exit.\r\nfunc (c *Cmd) ExtraOutPipe() (io.ReadCloser, uintptr, error) {\r\n\tpr, pw, err := os.Pipe()\r\n\tif err != nil {\r\n\t\treturn nil, 0, err\r\n\t}\r\n\tc.ExtraFiles = append(c.ExtraFiles, pw)\r\n\tc.closeAfterStart = append(c.closeAfterStart, pw)\r\n\tc.closeAfterWait = append(c.closeAfterWait, pr)\r\n\treturn pr, uintptr(len(c.ExtraFiles)) + 2, nil\r\n}\r\n```\r\n\r\nBoth are very similar to how `StdinPipe` and `StdoutPipe` works but also returns the fd number that will be available in the forked child process.\r\n\r\nSome design note and issues:\r\n\r\nIf you want to use `exec.Command()` and pass an extra pipe fd number as argument you will need to modify `Cmd.Args` field afterwards.\r\n\r\nWhat happens if `ExtraInPipe` or `ExtraOutPipe` is used but `Cmd.Start()` is never called? enough with `os.Pipe()` newFile close finalizer for cleanup? user should close them? same issue for `StdinPipe` and `StdoutPipe` i guess?\r\n\r\nMight be unintuitive that the public ExtraFiles field gets modified.\r\n\r\nUses `uintptr` for fd number. Same as `File.Fd()`.\r\n\r\nWill not work on Windows. Same as for `Cmd.ExtraFiles`.\r\n\r\nRelated to #15460", "labels": ["Proposal"], "number_of_comments": 1, "created_at": "2020-02-06 22:25:45", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561268822": {"author_username": "zaddok", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37092, "title": "text/template: Permit user of Reader objects in templates", "body": "In the case where we need to use a reader to avoid buffering large amounts of data in memory, there appears no way to use this reader in a go template.\r\n\r\nThis issue was raised before here:\r\n\r\nhttps://github.com/golang/go/issues/25160\r\n\r\nIn summary, it was dismissed on the basis of \"most people don't need this\".  I would like to contest this. There are a lot of things \"most people don't need\" but what if the reason for the need is an important edge case (i.e. applications processing large data sets). Surely there are some people processing applications that operate over large data sets? ", "labels": ["FeatureRequest", "NeedsInvestigation"], "number_of_comments": 3, "created_at": "2020-02-06 21:04:51", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561247347": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37091, "title": "x/tools/gopls: add quick fixes that behave like goreturns", "body": "A main reason that users are still not using `gopls` for formatting is that they prefer to use [`goreturns`](https://github.com/sqs/goreturns), which combines `goimports`, `gofmt`, and also fills in default values for function returns, if they are left blank. We could add that same behavior as a quick-fix suggestion that gets offered as part of `textDocument/codeAction`.", "labels": ["Tools", "gopls"], "number_of_comments": 0, "created_at": "2020-02-06 20:20:16", "reactions": {"total_count": 5, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 2}}, "561232816": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37090, "title": "x/website: make it safer to make changes to templated HTML pages", "body": "Issue #37072 was about making it safer to make changes to draft release notes. But the golang.org website (and in turn, the tip copy at tip.golang.org) still has many pages that use templates.\r\n\r\nRight now, if a change introduces an error on one of the templated pages, there isn't a test or trybot that catches that error. We should find a way to automate finding this kind of a problem, otherwise it can lead to broken pages on golang.org (when manually deployed, if the deployment regression tests don't catch it) and tip.golang.org (which is automatically deployed as soon as the CL is submitted).\r\n\r\nSee [CL 217877](https://golang.org/cl/217877) and [CL 218217](https://golang.org/cl/218217) for a recent occurrence that should ideally be caught in the future.\r\n\r\n/cc @bcmills @golang/osp-team", "labels": ["NeedsInvestigation", "Testing"], "number_of_comments": 0, "created_at": "2020-02-06 19:51:37", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561219020": {"author_username": "jared2501", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37089, "title": "x/net/http2/h2c: http BaseContext/ConnContext methods are not used", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.13.7 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What did you do? What did you expect to see? What did you see instead?\r\n\r\nCurrently, the `http2/h2c` package does not use the `http.Server.BaseContext` or `http.Server.ConnContext` methods. This means if I use the h2c package to upgrade a connection, the context for the user's is inherited from the background context rather than any context returned from the `BaseContext` or `ConnContext` functions. \r\n\r\nA possible fix would be something like this:\r\n\r\n```diff\r\ndiff --git a/http2/h2c/h2c.go b/http2/h2c/h2c.go\r\nindex 07c5c9a..349a5e6 100644\r\n--- a/http2/h2c/h2c.go\r\n+++ b/http2/h2c/h2c.go\r\n@@ -11,6 +11,7 @@ package h2c\r\n import (\r\n        \"bufio\"\r\n        \"bytes\"\r\n+       \"context\"\r\n        \"encoding/base64\"\r\n        \"encoding/binary\"\r\n        \"errors\"\r\n@@ -84,6 +85,10 @@ func (s h2cHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\r\n                }\r\n                defer conn.Close()\r\n\r\n+               ctx := context.Background()\r\n+               if server, ok := r.Context().Value(http.ServerContextKey).(*http.Server); ok && server.ConnContext != nil {\r\n+                       ctx = server.ConnContext(ctx, conn)\r\n+               }\r\n                s.s.ServeConn(conn, &http2.ServeConnOpts{Handler: s.Handler})\r\n                return\r\n        }\r\n@@ -91,6 +96,10 @@ func (s h2cHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\r\n        if conn, err := h2cUpgrade(w, r); err == nil {\r\n                defer conn.Close()\r\n\r\n+               ctx := context.Background()\r\n+               if server, ok := r.Context().Value(http.ServerContextKey).(*http.Server); ok && server.ConnContext != nil {\r\n+                       ctx = server.ConnContext(ctx, conn)\r\n+               }\r\n                s.s.ServeConn(conn, &http2.ServeConnOpts{Handler: s.Handler})\r\n                return\r\n        }\r\n```\r\n\r\nDoes this seem reasonable?", "labels": ["NeedsInvestigation"], "number_of_comments": 10, "created_at": "2020-02-06 19:24:39", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561209478": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37088, "title": "misc/android: go_android_exec fails to copy other package sources in the main module when executing tests", "body": "In order to ensure that a test binary can find any associated test data, `go test` runs the resulting test binary in its own source directory.\r\n\r\nThat implies that, if a `go` binary is present, the test can `go build` both files in its own directory and any associated packages in the same module.\r\n\r\nUnfortunately, `adbCopyTree` function in `go_android_exec.go` does not ensure that the source code for the complete module is present. Instead, it copies only the `go.mod` and `go.sum` files and `testdata` directories going up the tree.\r\n\r\nThat implies that `go_android_exec` cannot successfully execute an external test that runs an associated `main` package as a subprocess if that `main` package imports any other package outside of the standard library, such as in [CL 218277](https://golang.org/cl/218277).\r\n\r\nCC @hajimehoshi @hyangah @steeve @eliasnaur ", "labels": ["NeedsFix", "help wanted", "mobile"], "number_of_comments": 0, "created_at": "2020-02-06 19:04:53", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561152979": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37087, "title": "x/tools/gopls: not working on a monorepo", "body": "Reported on Twitter: https://twitter.com/magiconair/status/1225358273576083456?s=20.\r\n\r\nThis is probably caused by the fact that the initial workspace load is running on the entire monorepo (if the directory being opened is the monorepo root). The output of `gopls -rpc.trace -v check path/to/file.go` would be helpful here, as well as the time it takes.", "labels": ["Tools", "gopls"], "number_of_comments": 7, "created_at": "2020-02-06 17:14:10", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561141179": {"author_username": "howardjohn", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37086, "title": "runtime: golang 1.14.rc1 3-5% performance regression from golang 1.13 during protobuf marshalling", "body": "<pre>\r\n$ go1.14rc1 version\r\ngo version go1.14rc1 linux/amd64\r\n$ go version\r\ngo version go1.13 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nThis is an issue with the latest release\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/usr/local/google/home/howardjohn/.cache/go-build\"\r\nGOENV=\"/usr/local/google/home/howardjohn/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/usr/local/google/home/howardjohn/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/usr/local/google/home/howardjohn/go/src/istio.io/istio/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build462288476=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRan a benchmark for our application on go 1.13 and go 1.14rc1. performance took about a ~5% hit.\r\n\r\n```\r\n$ go test ./pilot/pkg/proxy/envoy/v2/ -bench=BenchmarkEDS -run=^$ -benchmem -benchtime=20s\r\ngoos: linux\r\ngoarch: amd64\r\npkg: istio.io/istio/pilot/pkg/proxy/envoy/v2\r\nBenchmarkEDS/100/1-6              264200             90238 ns/op            8964 B/op        361 allocs/op\r\nBenchmarkEDS/1000/1-6              30642            775560 ns/op           62452 B/op       3061 allocs/op\r\nBenchmarkEDS/10000/1-6              3147           6909406 ns/op          604528 B/op      30086 allocs/op\r\nBenchmarkEDS/100/100-6              3217           7292090 ns/op          876827 B/op      35645 allocs/op\r\nBenchmarkEDS/1000/100-6              355          67245095 ns/op         6318974 B/op     307880 allocs/op\r\nBenchmarkEDS/10000/100-6              34         657385493 ns/op        70324914 B/op    3240990 allocs/op\r\nPASS\r\nok      istio.io/istio/pilot/pkg/proxy/envoy/v2 176.394s\r\n```\r\n\r\n```\r\n$ go1.14rc1 test ./pilot/pkg/proxy/envoy/v2/ -bench=BenchmarkEDS -run=^$ -benchmem -benchtime=20s\r\ngoos: linux\r\ngoarch: amd64\r\npkg: istio.io/istio/pilot/pkg/proxy/envoy/v2\r\nBenchmarkEDS/100/1-6              246732             97406 ns/op            8964 B/op        361 allocs/op\r\nBenchmarkEDS/1000/1-6              29126            823575 ns/op           62454 B/op       3061 allocs/op\r\nBenchmarkEDS/10000/1-6              3036           7492450 ns/op          604574 B/op      30087 allocs/op\r\nBenchmarkEDS/100/100-6              3120           7801905 ns/op          876848 B/op      35645 allocs/op\r\nBenchmarkEDS/1000/100-6              339          70948842 ns/op         6323512 B/op     307986 allocs/op\r\nBenchmarkEDS/10000/100-6              33         689077376 ns/op        70629433 B/op    3248162 allocs/op\r\nPASS\r\nok      istio.io/istio/pilot/pkg/proxy/envoy/v2 180.654\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nHopefully performance improves or remains constant\r\n\r\n### What did you see instead?\r\n\r\nPerformance decrease\r\n\r\n\r\n### Additional Info\r\n\r\nThis benchmark is basically just doing a bunch of protobuf marshalling.\r\n\r\nProfile shows 1.14 spends 16% of time on gcBgMarkWorker, but 1.13 only 14.5%.\r\n\r\nCPU profiles:\r\n[profiles.tar.gz](https://github.com/golang/go/files/4166487/profiles.tar.gz)\r\n\r\n\r\nLet me know if there is more info I can provide, I realize these reports typically need a lot of info to track down the root cause. You might/should be able to reproduce by running the same command after checking out the repo at this PR: https://github.com/istio/istio/pull/20899\r\n", "labels": ["NeedsInvestigation", "Performance"], "number_of_comments": 13, "created_at": "2020-02-06 16:53:25", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561129056": {"author_username": "iamjameslove", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37085, "title": "proposal: Go 2: permit using errors.Return, etc., on LHS of an error assignment", "body": "This approach has probably been discussed in the past. I like to make this a quick feedback.\r\n\r\nExisting code:\r\n```\r\nbg, err := task.NewBackground()\r\nIf err != null {\r\n\u2026\r\n}\r\n```\r\n\r\nIf I could instantly identify different type of errors handling in a quick reading, it could be written with `errors.###` that are implements to receive strings, custom types, etc:\r\n\r\nRadom ideas when return errors from `.NewBackground()` is not null:\r\n```\r\nbg, errors.Return := task.NewBackground()\r\nbg, errors.Fatal := task.NewBackground()\r\nbg, errors.Console := task.NewBackground()\r\nbg, errors.Info := task.NewBackground()\r\nbg, errors.Log := task.NewBackground()\r\nbg, errors.CustomSentAlert := task.NewBackground()\r\n```\r\n\r\nGo runtime will handles according to each API.\r\n\r\nDoes this make sense for handling common errors? I could be wrong as to how these approach works or could be done on package.\r\n", "labels": ["Go2", "LanguageChange", "Proposal", "error-handling"], "number_of_comments": 4, "created_at": "2020-02-06 16:33:22", "reactions": {"total_count": 5, "+1": 0, "-1": 3, "laugh": 0, "heart": 0, "hooray": 0}}, "561117256": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37084, "title": "x/tools/gopls: add support for OnTypeFormatting", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +b7689f5aa3 Fri Jan 31 06:02:00 2020 +0000 linux/amd64\r\n$ go list -m golang.org/x/tools\r\ngolang.org/x/tools v0.0.0-20200205190317-6e8b36d2c76b\r\n$ go list -m golang.org/x/tools/gopls\r\ngolang.org/x/tools/gopls v0.1.8-0.20200205190317-6e8b36d2c76b\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nPer https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_onTypeFormatting, add support for `OnTypeFormatting`.\r\n\r\n@stamblerre I'll leave you to milestone.\r\n\r\ncc @findleyr \r\n\r\nFYI @leitzler\r\n", "labels": ["Tools", "gopls"], "number_of_comments": 0, "created_at": "2020-02-06 16:14:46", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561011308": {"author_username": "jpninanjohn", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37083, "title": "encoding/json: Encoder adds new line at the end of response which is different from how Marshal works ", "body": "### What version of Go are you using (`go version`)?\r\n```bash\r\n$ go version\r\n\r\n 1.13.5\r\n```\r\n\r\n### Issue:\r\n\r\nEncoder and Marshal behaves differently. [Refer](https://play.golang.org/p/1ok_9d0o_FP)\r\n\r\nThere is a newline added for encoder. [Refer to this code](https://github.com/golang/go/blob/master/src/encoding/json/stream.go#L217).\r\n\r\n**Where does this break:**\r\n\r\nIn cases where content length is asserted on. Eg. In gin, context.JSON uses Encoder that adds the new line to response thus making the content length of response one more than what was in the actual response. The convention is broken as many libraries dont read the newline.  Hence read content length will be one lesser than content length sent in the response. \r\nThis fails in HTTP clients due to a difference in the actual content length and the Content-Length header\r\n\r\n[Refer this issue](https://github.com/gin-gonic/gin/issues/2209)\r\n\r\n### What did you expect to see?\r\nEncoder and Marshal should result in the exact same JSON string.\r\n\r\n\r\n### What did you see instead?\r\nAn additional line added in response when encoder is used to convert object to json.\r\n\r\n----------------------------------------------------\r\ncc @dineshba @kaushikneelichetty @kishaningithub", "labels": ["WaitingForInfo"], "number_of_comments": 5, "created_at": "2020-02-06 13:25:54", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560911496": {"author_username": "dotaheor", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37081, "title": "x/tools/go/types/typeutil: wrong computed method set", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 linux/amd64\r\n</pre>\r\n\r\n### What did you do?\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"go/ast\"\r\n\t\"go/importer\"\r\n\t\"go/parser\"\r\n\t\"go/token\"\r\n\t\"go/types\"\r\n\t\"log\"\r\n\t\"reflect\"\r\n\t\r\n\t\"golang.org/x/tools/go/types/typeutil\"\r\n)\r\n\r\nconst input = `\r\npackage abc\r\n\r\ntype Conn struct {\r\n\tframeReader\r\n\tPayloadType int\r\n}\r\n\r\ntype frameReader interface {\r\n\tPayloadType() byte\r\n}\r\n`\r\n\r\nvar fset = token.NewFileSet()\r\n\r\nfunc main() {\r\n\tf, err := parser.ParseFile(fset, \"hello.go\", input, 0)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\tconf := types.Config{Importer: importer.Default()}\r\n\tinfo := &types.Info{Types: make(map[ast.Expr]types.TypeAndValue)}\r\n\tpkg, err := conf.Check(\"cmd/hello\", fset, []*ast.File{f}, info)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\t\r\n\tct := pkg.Scope().Lookup(\"Conn\").Type()\r\n\t\r\n\tvar cache typeutil.MethodSetCache\r\n\tvar methetset = cache.MethodSet(ct)\r\n\tfmt.Println(methetset)\r\n\t\t// MethodSet {\r\n\t\t// \tmethod (cmd/hello.Conn) PayloadType() byte\r\n\t\t// }\r\n\t\r\n\tfmt.Println(reflect.TypeOf(Conn{}).NumMethod())\r\n\t\t// 0\r\n}\r\n\r\ntype Conn struct {\r\n\tframeReader\r\n\tPayloadType int\r\n}\r\n\r\ntype frameReader interface {\r\n\tPayloadType() byte\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nType `Conn` has no methods.\r\n\r\n### What did you see instead?\r\n\r\nType `Conn` has one method.", "labels": ["NeedsFix"], "number_of_comments": 8, "created_at": "2020-02-06 10:17:22", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560809097": {"author_username": "tebeka", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37078, "title": "go.dev: How to get listed in \"In-person training\"?", "body": "There are 4 companies mentioned in the \"In-person training\" section at https://learn.go.dev/.\r\n\r\nIt's not clear why these companies where selected and now to get listed there. IMO there should be clear guidelines and instructions on how to get listed there.\r\n\r\nAlso it might be a good idea to split these companies by country.\r\n\r\nDisclaimer: I want my company to be listed there as well.", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 2, "created_at": "2020-02-06 06:33:48", "reactions": {"total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560754655": {"author_username": "vincepri", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37076, "title": "x/tools/gopls: high memory usage in sigs.k8s.io/cluster-api", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/vince/Library/Caches/go-build\"\r\nGOENV=\"/Users/vince/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/vince/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org\"\r\nGOROOT=\"/usr/local/Cellar/go/1.13.7/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.13.7/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/Users/vince/go/src/sigs.k8s.io/cluster-api/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/8r/hwtdskms33z018dpqfl8__mc0000gn/T/go-build025802019=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRunning `VSCode` with latest `gopls` developing with [Cluster API](https://github.com/kubernetes-sigs/cluster-api), a Kubernetes sub-project.\r\n\r\n### What did you expect to see?\r\n\r\nReasonable memory usage in Activity Monitor.\r\n\r\n### What did you see instead?\r\n\r\n`gopls` process that was attached to `cluster-api` codebase was about 30GB after developing on the codebase.\r\n", "labels": ["Tools", "WaitingForInfo", "gopls"], "number_of_comments": 12, "created_at": "2020-02-06 03:24:22", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560721433": {"author_username": "darkfeline", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37074, "title": "x/crypto/ssh: Semantics of Conn.Wait and Conn.Close unclear in docs", "body": "The semantics of Conn.Wait and Conn.Close are unclear as of the docs currently.\r\n\r\nhttps://pkg.go.dev/golang.org/x/crypto/ssh?tab=doc\r\n\r\n```\r\n\t// Close closes the underlying network connection\r\n\tClose() error\r\n\r\n\t// Wait blocks until the connection has shut down, and returns the\r\n\t// error causing the shutdown.\r\n\tWait() error\r\n```\r\n\r\nIs it necessary to call both, and in which order, or is just Close enough?", "labels": ["Documentation", "NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-06 01:15:53", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560679294": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37069, "title": "x/tools/gopls: failures when switching from GOPATH to modules", "body": "Reported by @tbpg (please correct me if I'm mistaken here).\r\n\r\nRepro steps:\r\n1) Open a package that was previously set up to work in GOPATH mode.\r\n2) Initialize a module.\r\n3) There is a missing dependency - add it to the `go.mod`.\r\n4) Errors about the missing dependency do not go away.", "labels": ["Tools", "gopls"], "number_of_comments": 1, "created_at": "2020-02-05 22:59:38", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560633284": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37064, "title": "x/tools/gopls: go list error prevented initial workspace load", "body": "@katiehockman reported a separate issue, but in her logs I noticed the following, specifically these `go list` errors (which would come to `gopls` by way of `go/packages`):\r\n\r\n```\r\ninternal error: go list gives conflicting information for package crypto/internal/subtle\r\n```\r\n\r\n```\r\ninternal error: go list gives conflicting information for package crypto/internal/randutil\r\n```\r\n\r\n@jayconrod or @bcmills: What does this `go list` error mean?\r\n\r\nLog snippet:\r\n\r\n```\r\n2020/02/05 14:33:43 initial workspace load failed: internal error: go list gives conflicting information for package crypto/internal/subtle\r\n[Info  - 2:33:43 PM] 2020/02/05 14:33:43 go/packages.Load\r\n\tsnapshot = 0\r\n\tquery = [./... builtin]\r\n\tpackages = 0\r\n[Error - 2:33:43 PM] 2020/02/05 14:33:43 initial workspace load failed: internal error: go list gives conflicting information for package crypto/internal/subtle\r\n[Info  - 2:33:43 PM] 2020/02/05 14:33:43 go/packages.Load\r\n\tsnapshot = 1\r\n\tquery = [file=/<redacted>/go/src/crypto/ecdsa/ecdsa.go]\r\n\tpackages = 0\r\n2020/02/05 14:33:43 DocumentSymbols failed: getting file for DocumentSymbols: internal error: go list gives conflicting information for package crypto/internal/randutil\r\n\tURI = file:///<redacted>/go/src/crypto/ecdsa/ecdsa.go\r\n[Info  - 2:33:43 PM] 2020/02/05 14:33:43 go/packages.Load\r\n\tsnapshot = 1\r\n\tquery = [file=/<redacted>/go/src/crypto/ecdsa/ecdsa.go]\r\n\tpackages = 0\r\n```", "labels": ["Tools", "gopls"], "number_of_comments": 1, "created_at": "2020-02-05 21:16:10", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560614212": {"author_username": "ORESoftware", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37062, "title": "cmd/go: the `go run` command works with symlinks, but `go test` doesn't like them?", "body": "\r\n<pre>\r\n$ go version:\r\ngo version go1.13.4 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nI symlink a folder to $GOPATH like so:\r\n\r\n```\r\nln -sf \"$HOME/codes/golang/foo\"  \"$GOPATH/src/channelmeter/foo\"\r\n\r\n```\r\n\r\nI get this warning:\r\n\r\n```\r\nwarning: ignoring symlink /Users/alex/go/src/channelmeter/foo\r\n```\r\n\r\nwhen I run this:\r\n\r\n```\r\ngo test -coverprofile out.html all \r\n```\r\n\r\nbut when I use `go run` it can handle the symlink.\r\nSo it seems like `go test` cannot handle the same symlinks that `go run` can.\r\n\r\n\r\n\r\n", "labels": ["WaitingForInfo"], "number_of_comments": 1, "created_at": "2020-02-05 20:35:50", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560561113": {"author_username": "smariot", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37060, "title": "x/text/encoding/simplifiedchinese: infinite loop decoding HZGB2312 strings ending with ~", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/smariot/.cache/go-build\"\r\nGOENV=\"/home/smariot/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/smariot/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build492816801=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nhttps://play.golang.org/p/NI4shjahCS_p\r\n\r\n### What did you expect to see?\r\n\r\nI expected the program to terminate.\r\n\r\n### What did you see instead?\r\n\r\nEndlessly increasing memory usage.\r\n\r\n### Possible fix: ###\r\n\r\n_hzgb2312.go:60_: replace <pre>r = utf8.RuneError</pre> with <pre>r, size = utf8.RuneError, 1</pre>", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-05 18:49:05", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560547686": {"author_username": "x04", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37059, "title": "net/http: HTTP/2 SETTINGS frame being read incorrectly", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14beta1 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=on\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\<redacted>\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\<redacted>\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOFLAGS= -mod=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOINSECURE=\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\<redacted>\\go\r\nset GOPRIVATE=\r\nset GOPROXY=direct\r\nset GOROOT=C:\\Users\\<redacted>\\go\\go1.14beta1\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Users\\<redacted>\\go\\go1.14beta1\\pkg\\tool\\windows_amd64\r\nset GCCGO=gccgo\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Users\\<redacted>\\go\\go1.14beta1\\src\\go.mod\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\<redacted>\\AppData\\Local\\Temp\\go-build787882606=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nI outputted all HTTP/2 frames that are received by the net/http server corresponding to their type, and when looking at the SETTINGS frames the first settings ID always appears to be wrong. \r\n\r\nFor example, the first setting from Chrome is 0x1 or SETTINGS_HEADER_TABLE_SIZE, but the ID outputted by when looping through the settings in the frame is 239 when the expected value is 1.\r\n\r\nAnother example would be when I used Go's http.Client and the first setting is always 0x2 or SETTINGS_ENABLE_PUSH, but the outputted value 16384 when the expected value is 2.\r\n\r\n\r\n### What did you expect to see?\r\n\r\n(Read above for explanation on what I'm talking about)\r\nExpected first setting ID from latest Chrome: 1, SETTINGS_HEADER_TABLE_SIZE\r\nExpected first setting ID from Go's http client: 2, SETTINGS_ENABLE_PUSH\r\n\r\n### What did you see instead?\r\n\r\n(Read above for explanation on what I'm talking about)\r\n\"Received\" first setting ID from latest Chrome: 239\r\n\"Received\" first setting ID from Go's http client: 16384", "labels": ["NeedsInvestigation", "WaitingForInfo"], "number_of_comments": 4, "created_at": "2020-02-05 18:21:14", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560525676": {"author_username": "lebovski", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37058, "title": "x/time: rate limiter frequency does not correspond to expected frequency", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/alx/.cache/go-build\"\r\nGOENV=\"/home/alx/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/alx/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build377469486=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI use rate limiter from standard library in order to limit the number of cycles of a some operation. The actual RPS is printed every second.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"log\"\r\n\t\"sync/atomic\"\r\n\t\"time\"\r\n\r\n\t\"golang.org/x/time/rate\"\r\n)\r\n\r\nfunc main() {\r\n\tvar (\r\n\t\trps      = 100000\r\n\t\tduration = 10 * time.Second\r\n\t)\r\n\r\n\trequests := rps * int(duration.Seconds())\r\n\r\n\tctx, endCancel := context.WithTimeout(context.Background(), duration)\r\n\tdefer endCancel()\r\n\r\n\tcount := newCounter(ctx)\r\n\tcount.logState()\r\n\r\n\tlimiter := rate.NewLimiter(rate.Every(time.Second/time.Duration(rps)), 1)\r\n\tfor i := 0; i < requests; i++ {\r\n\t\tcount.inc()\r\n\r\n\t\terr := limiter.Wait(ctx)\r\n\t\tif err != nil {\r\n\t\t\tlog.Println(\"Limiter error\", err)\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n}\r\n\r\ntype counter struct {\r\n\tctx context.Context\r\n\ti   int64\r\n}\r\n\r\nfunc newCounter(context context.Context) *counter {\r\n\treturn &counter{\r\n\t\tctx: context,\r\n\t\ti:   0,\r\n\t}\r\n}\r\n\r\nfunc (c *counter) inc() {\r\n\tatomic.AddInt64(&c.i, 1)\r\n}\r\n\r\nfunc (c *counter) get() int64 {\r\n\treturn atomic.LoadInt64(&c.i)\r\n}\r\n\r\nfunc (c *counter) logState() {\r\n\tgo func() {\r\n\t\tfor {\r\n\t\t\tselect {\r\n\t\t\tcase <-c.ctx.Done():\r\n\t\t\t\treturn\r\n\t\t\tdefault:\r\n\t\t\t}\r\n\r\n\t\t\tbefore := c.get()\r\n\t\t\ttime.Sleep(time.Second)\r\n\t\t\tafter := c.get()\r\n\t\t\tlog.Println(after - before)\r\n\t\t}\r\n\t}()\r\n}\r\n```\r\n\r\n\r\n\r\n### What did you expect to see?\r\nExpected that the actual RPS would be about 100000, but in fact it's only about 26000. Also the CPU is underloaded (CPU usage is around 60-70% on my hardware, so it doesn't even consume a single core).\r\n\r\n### What did you see instead?\r\n```\r\n2020/02/05 16:59:06 26208\r\n2020/02/05 16:59:07 26139\r\n2020/02/05 16:59:08 25750\r\n2020/02/05 16:59:09 25942\r\n2020/02/05 16:59:10 25252\r\n2020/02/05 16:59:11 25847\r\n2020/02/05 16:59:12 25949\r\n2020/02/05 16:59:13 25353\r\n2020/02/05 16:59:14 26985\r\n2020/02/05 16:59:15 Limiter error rate: Wait(n=1) would exceed context deadline\r\n```", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-05 17:37:23", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560503833": {"author_username": "b-", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37056, "title": "cmd/compile: add support for compiling without the MMX requirement on GOARCH=386", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\nThis program can only be run on processors with MMX support.\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output and architecture information</summary><br><pre>\r\n$ go env\r\nThis software can only be run on processors with MMX support.\r\n</pre>\r\nI am using https://github.com/tbodt/ish which emulates \u201cmore of a i486. No MMX support.\u201d</details>\r\n\r\n### What did you do?\r\nI first discovered this as I attempted to install Keybase on https://github.com/tbodt/ish. However, it\u2019s not actually a Keybase issue but rather a golang/iSH issue, as iSH does not implement the Pentium MMX Extensions, when golang compiled with $GO386=387 actually requires Pentium MMX extensions. https://github.com/tbodt/ish/issues/57\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nhttps://github.com/tbodt/ish/issues/618", "labels": ["NeedsInvestigation"], "number_of_comments": 4, "created_at": "2020-02-05 16:57:43", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560500849": {"author_username": "gazerro", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37055, "title": "net/http: document that SetCookie can quote the value", "body": "The `SetCookie` function quotes the value if it contains spaces or commas but this behavior is not documented in `SetCookie` documentation:\r\n\r\n> SetCookie adds a Set-Cookie header to the provided ResponseWriter's headers. The provided cookie must have a valid Name. Invalid cookies may be silently dropped.\r\n", "labels": ["Documentation", "NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-05 16:52:51", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560493241": {"author_username": "muirdm", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37054, "title": "x/tools/go/analysis/analysistest: support modules", "body": "Currently the analysistest helper only supports a GOPATH like tree. This is fine for stand alone analyses, but does not help much for analyses designed to run against a particular module. For example, you have an analysis that checks all code in your module correctly/safely interacts with a specific package in your module. Ideally you would be able to write an analysis test with a stub file that is able to load other packages/dependencies of the current module.\r\n\r\n/cc @matloob @heschik \r\n\r\n", "labels": ["NeedsInvestigation", "Tools"], "number_of_comments": 3, "created_at": "2020-02-05 16:40:20", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560465681": {"author_username": "cagedmantis", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37050, "title": "cmd/compile/internal/ssa: test TestNexting failing", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version release-1_14-work.mailed linux/amd64\r\n</pre>\r\n\r\n\r\n### What operating system and processor architecture are you using?\r\n\r\nDebian GNU/Linux rodete\r\namd64\r\n\r\n\r\n### What did you do?\r\n\r\nRan test from the `src` directory.\r\n`$ go/src> go test cmd`\r\n\r\n### What did you expect to see?\r\n\r\nPassing tests\r\n\r\n### What did you see instead?\r\n\r\n```\r\n--- FAIL: TestNexting (7.71s)\r\n    --- FAIL: TestNexting/dlv-dbg-hist (7.71s)\r\npanic: There was an error writing 'b main.test\r\n', write |1: broken pipe\r\n [recovered]\r\n        panic: There was an error writing 'b main.test\r\n', write |1: broken pipe\r\n\r\ngoroutine 249 [running]:\r\ntesting.tRunner.func1.1(0xc84b60, 0xc0004aa3b0)\r\n        /home/chuck/Code/go/src/testing/testing.go:942 +0x3d0\r\ntesting.tRunner.func1(0xc00051d680)\r\n        /home/chuck/Code/go/src/testing/testing.go:945 +0x3f9\r\npanic(0xc84b60, 0xc0004aa3b0)\r\n        /home/chuck/Code/go/src/runtime/panic.go:967 +0x15d\r\ncmd/compile/internal/ssa_test.(*ioState).writeReadExpect(0xc0002f7030, 0xcf606d, 0xc, 0xcf42fc, 0xa, 0x0, 0x0, 0xc000318000, 0x87)\r\n        /home/chuck/Code/go/src/cmd/compile/internal/ssa/debug_test.go:861 +0x299\r\ncmd/compile/internal/ssa_test.(*delveState).start(0xc00002a1e0)\r\n        /home/chuck/Code/go/src/cmd/compile/internal/ssa/debug_test.go:562 +0x216\r\ncmd/compile/internal/ssa_test.runDbgr(0xed5180, 0xc00002a1e0, 0x3e8, 0x2a)\r\n        /home/chuck/Code/go/src/cmd/compile/internal/ssa/debug_test.go:279 +0x35\r\ncmd/compile/internal/ssa_test.testNexting(0xc00051d680, 0xcec462, 0x4, 0xc0000974d0, 0x7, 0xcec5f0, 0x5, 0x3e8, 0x1423490, 0x0, ...)\r\n        /home/chuck/Code/go/src/cmd/compile/internal/ssa/debug_test.go:246 +0x5dd\r\ncmd/compile/internal/ssa_test.subTest.func1(0xc00051d680)\r\n        /home/chuck/Code/go/src/cmd/compile/internal/ssa/debug_test.go:180 +0xae\r\ntesting.tRunner(0xc00051d680, 0xc000076690)\r\n        /home/chuck/Code/go/src/testing/testing.go:993 +0xdc\r\ncreated by testing.(*T).Run\r\n        /home/chuck/Code/go/src/testing/testing.go:1044 +0x357\r\nFAIL    cmd/compile/internal/ssa        133.862s\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 5, "created_at": "2020-02-05 15:57:33", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560435976": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37047, "title": "all: builders and TryBots should check documentation for broken links", "body": "We occasionally end up with broken or outdated links in documentation (see https://github.com/golang/go/issues/37042#issuecomment-582448476, #27860, #21951, #19244).\r\n\r\nTesting for broken links would not be entirely trivial, but nonetheless pretty straightforward to implement: we have an HTML parser in `golang.org/x/net/html`, and it is easy enough to issue a `HEAD` request for link targets to see if they resolve. (For links with anchors, we would probably want to also check the `Content-Type` header and then parse the actual linked HTML to ensure that the anchor exists.)\r\n\r\nCC @golang/osp-team ", "labels": ["Builders", "Documentation", "NeedsInvestigation", "Testing", "help wanted"], "number_of_comments": 5, "created_at": "2020-02-05 15:11:14", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560431283": {"author_username": "teeaa", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37046, "title": "x/tools/gopls: Strange output with gopls >= 0.3.0, no actual errors detected", "body": "#### What did you do?\r\nMade an error in code:\r\n```\r\npackage main\r\n\r\nfunc main() {\r\n\tasd asd asd() asd\r\n}\r\n```\r\n\r\n#### What did you expect to see?\r\ngopls to report the error (or rather, squiggly lines in vs code)\r\n\r\n#### What did you see instead?\r\nNo errors, lots of strange logs in gpls output:\r\n```\r\n$ gopls -rpc.trace -v check go/src/foobar/cmd/daemon/main.go\r\n2020/02/05 14:44:15 Info:2020/02/05 14:44:15 Build info\r\n----------\r\ngolang.org/x/tools/gopls v0.3.1\r\n    golang.org/x/tools/gopls@v0.3.1 h1:yNTWrf4gc4Or0UecjOas5pzOa3BL0WDDyKDV4Wz5VaM=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/sergi/go-diff@v1.0.0 h1:Kpca3qRNrduNnOQeazBd0ysaKrUJiIuISHxogkT9RPQ=\r\n    golang.org/x/mod@v0.1.1-0.20191105210325-c90efee705ee h1:WG0RUwxtNT4qqaXX3DPA8zHFNm/D9xaBpxzHt1WcA/E=\r\n    golang.org/x/sync@v0.0.0-20190423024810-112230192c58 h1:8gQV6CLnAEikrhgkHFbMAEhagSSnXWGV915qUMm9mrU=\r\n    golang.org/x/tools@v0.0.0-20200204151227-34c67990bfe7 h1:hWZVyLW37WdETuLIGQMvQIhMfXXAOANmAIEAluZMy3c=\r\n    golang.org/x/xerrors@v0.0.0-20191011141410-1b5146add898 h1:/atklqdjdhuosWIl6AIbOeHJjicWYPqR9bpxqxYG2pA=\r\n    honnef.co/go/tools@v0.0.1-2019.2.3 h1:3JgtbtFHMiCmsznwGVTUWbgGov+pVqnlf1dEJTNAXeM=\r\n    mvdan.cc/xurls/v2@v2.1.0 h1:KaMb5GLhlcSX+e+qhbRJODnUUBvlw01jt4yrjFIHAuA=\r\n\r\nGo info\r\n-------\r\ngo version go1.13.7 linux/amd64\r\n\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/home/teeaa/foo/bar/go/bin\"\r\nGOCACHE=\"/home/teeaa/.cache/go-build\"\r\nGOENV=\"/home/teeaa/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/teeaa/foo/bar/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/lib/go-1.13\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/lib/go-1.13/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build526571037=/tmp/go-build -gno-record-gcc-switches\"\r\n2020/02/05 14:44:15 Info:2020/02/05 14:44:15 go/packages.Load\r\n\tsnapshot = 0\r\n\tquery = [./ builtin]\r\n\tpackages = 2\r\n2020/02/05 14:44:15 Info:2020/02/05 14:44:15 go/packages.Load\r\n\tsnapshot = 1\r\n\tquery = [./]\r\n\tpackages = 1\r\n2020/02/05 14:44:15 Info:2020/02/05 14:44:15 go/packages.Load\r\n\tsnapshot = 0\r\n\tquery = [./]\r\n\tpackages = 1\r\n2020/02/05 14:44:15 diagnose: no workspace packages: no metadata for [LOAD_INVALID_VIEW]\r\n\tsnapshot = 0\r\n\tdirectory = 0xaf2ea0\r\n2020/02/05 14:44:15 diagnose: no workspace packages: no metadata for [LOAD_INVALID_VIEW]\r\n\tsnapshot = 1\r\n\tdirectory = 0xaf2ea0\r\n2020/02/05 14:44:15 Error:2020/02/05 14:44:15 diagnose: no workspace packages: no metadata for [LOAD_INVALID_VIEW]\r\n\tsnapshot = 0\r\n\tdirectory = 0xaf2ea0\r\n2020/02/05 14:44:15 Error:2020/02/05 14:44:15 diagnose: no workspace packages: no metadata for [LOAD_INVALID_VIEW]\r\n\tsnapshot = 1\r\n\tdirectory = 0xaf2ea0\r\n/home/teeaa/foo/bar/go/src/foobar/cmd/daemon/main.go:4:6: expected ';', found asd\r\n```\r\n\r\n#### Build info\r\n\r\n```\r\ngolang.org/x/tools/gopls v0.3.1\r\n    golang.org/x/tools/gopls@v0.3.1 h1:yNTWrf4gc4Or0UecjOas5pzOa3BL0WDDyKDV4Wz5VaM=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/sergi/go-diff@v1.0.0 h1:Kpca3qRNrduNnOQeazBd0ysaKrUJiIuISHxogkT9RPQ=\r\n    golang.org/x/mod@v0.1.1-0.20191105210325-c90efee705ee h1:WG0RUwxtNT4qqaXX3DPA8zHFNm/D9xaBpxzHt1WcA/E=\r\n    golang.org/x/sync@v0.0.0-20190423024810-112230192c58 h1:8gQV6CLnAEikrhgkHFbMAEhagSSnXWGV915qUMm9mrU=\r\n    golang.org/x/tools@v0.0.0-20200204151227-34c67990bfe7 h1:hWZVyLW37WdETuLIGQMvQIhMfXXAOANmAIEAluZMy3c=\r\n    golang.org/x/xerrors@v0.0.0-20191011141410-1b5146add898 h1:/atklqdjdhuosWIl6AIbOeHJjicWYPqR9bpxqxYG2pA=\r\n    honnef.co/go/tools@v0.0.1-2019.2.3 h1:3JgtbtFHMiCmsznwGVTUWbgGov+pVqnlf1dEJTNAXeM=\r\n    mvdan.cc/xurls/v2@v2.1.0 h1:KaMb5GLhlcSX+e+qhbRJODnUUBvlw01jt4yrjFIHAuA=\r\n```\r\n\r\n#### Go info\r\n\r\n```\r\ngo version go1.13.7 linux/amd64\r\n\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/home/teeaa/foo/bar/go/bin\"\r\nGOCACHE=\"/home/teeaa/.cache/go-build\"\r\nGOENV=\"/home/teeaa/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/teeaa/foo/bar/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/lib/go-1.13\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/lib/go-1.13/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build187624939=/tmp/go-build -gno-record-gcc-switches\"\r\n```\r\n\r\nThis same error happens if I run it from \"workspace\" root (/home/teeaa/foo/bar) or from GOPATH root (/home/teeaa/foo/bar/go). However if I open just the \"app\" dir (/home/teeaa/foo/bar/go/src/foobar/cmd/daemon/) the errors appear as expected but jumping to different code points defined in packages doesn't work anymore in VS Code. If I open the src root (/home/teeaa/foo/bar/go/src) the errors in my package are displayed correctly, as well as over 1K errors in installed dependencies :( Also it takes ages to load.\r\n\r\nOn Gopls 0.2.2 everything works.", "labels": ["Tools", "gopls"], "number_of_comments": 1, "created_at": "2020-02-05 15:03:56", "reactions": {"total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560387258": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37044, "title": "net: consider rejecting null byte in LookupHost (and similar) on all platforms consistently", "body": "This is a followup to issues #31597 and #37031.\r\n\r\nIt is my current understanding that no valid host can contain the null byte ('\\x00'), so any such string input is not valid.\r\n\r\n`net.LookupHost` currently operates differently when given an input that contains a null byte. For example, for `net.LookupHost(\"foo\\x00bar\")`:\r\n\r\n- in Go 1.13, on Windows, it caused a panic (#31597)\r\n- in Go 1.14, on Windows, it returns an error (see [here](https://github.com/golang/go/blob/go1.14beta1/src/net/lookup_windows.go#L107))\r\n- on macOS with cgo DNS resolver, it does the equivalent of `net.LookupHost(\"foo\")`\r\n- on macOS with pure Go DNS resolver, it does something different\r\n\r\nIt seems that the `getaddrinfo` C API used on many platforms accepts a null-terminated C-style string and cannot be given a string containing null bytes.\r\n\r\nAs @ianlancetaylor points out, in the `syscall` package we reject strings with embedded null bytes, since they won't work with system calls that expect C strings, see [`syscall.ByteSliceFromString`](https://github.com/golang/go/blob/go1.13.7/src/syscall/syscall.go#L44-L56).\r\n\r\nPerhaps this is an opportunity to make Go operate more consistently on such inputs on all platforms by reporting an error when the `name` string contains a null byte. There may be more functions in `net` that could benefit from this input validation, but to be able to make this change, we need to be confident that this change won't break correct Go programs.\r\n\r\n/cc @FiloSottile @ianlancetaylor @mikioh @bradfitz", "labels": ["NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-02-05 13:54:29", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560334003": {"author_username": "c-yan", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37041, "title": "x/tools/godoc: struct field anchor is added to wrong location when another field comment above it has same prefix", "body": "[Certificate.Leaf](https://tip.golang.org/pkg/crypto/tls/#Certificate.Leaf) is linked to Certificate.PrivateKey instead of the location in the Certificate.Leaf field.", "labels": ["NeedsInvestigation", "Tools"], "number_of_comments": 3, "created_at": "2020-02-05 12:16:00", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560231031": {"author_username": "beoran", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37039, "title": "Proposal: Go 2: add C# like nameof() built-in function", "body": "## Proposal\r\n\r\nI propose to add C# like nameof built-in compile time function. This proposal is based on the C# standard here: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/nameof. The main use of this is to make error values and logging easier to refactor, especially when using tools such as go pls, and also for use in ORM and intepreters where the name of an identifier, constant or stuct member, might often have to be mapped to an identical string value.\r\n\r\n### nameof built-in function\r\n\r\nThe nameof built-in function obtains the name of a variable, type, or member \r\nas a string constant:\r\n\r\n```go\r\n// In the shopping package, we have the following type: \r\n\r\ntype CartItem struct {\r\n    Name string\r\n    Stock int\r\n    Price uint\r\n    profitMargin float64\r\n}\r\n\r\n// And suppose we have this method on it.\r\nfunc (c * CartItem) Checkout() {\r\n}\r\n\r\n// Then in another package: \r\nfmt.Println(nameof(shopping.CartItem))  // output: CartItem\r\nfmt.Println(nameof(int))  // output: int\r\nfmt.Println(nameof(shopping.CartItem.Price))  // output: Price\r\nfmt.Println(nameof(shopping.CartItem.Checkout))  // output: Checkout\r\nci := shopping.CartItem{}\r\nfmt.Println(nameof(ci.Checkout))  // output: Checkout\r\n\r\n// more examples\r\nvar numbers = []int{ 1, 2, 3 };\r\nfmt.Println(nameof(numbers));  // output: numbers\r\nfmt.Println(nameof(len(numbers)))  // output: len\r\nfmt.Println(nameof(nameof));  // output: nameof\r\n\r\n// Expressions which have no name return the empty string.\r\nfmt.Println(nameof())  // output: (the empty string)\r\nfmt.Println(nameof(1+2))  // output: (the empty string)\r\n\r\n// usage with constants\r\ntype AstKind string\r\nconst AstExpression = AstKind(nameof(AstExpression))\r\nfmt.Println(AstExpression)  // output: AstExpression\r\n\r\n// However, names that don't exist or are not exported are a compilation error\r\nfmt.Println(nameof(CartItem.Reductions))  // error: nameof(): CartItem has no field Reductions \r\nfmt.Println(nameof(CartItem.profitMargin)) // error: nameof(): CartItem field profitMargin is not exported\r\nfmt.Println(nameof(someUndefinedFoo)) // error: nameof(): Unknown variable someUndefinedFoo \r\n```\r\n\r\nAs the preceding example shows, in the case of a type and a package, the produced name is not fully qualified. The same goes for struct members, only the name of the last field in the chain of field accesses is produced.\r\n\r\nThe nameof built-in function is evaluated at compile time and has no effect at run time.\r\n\r\nYou can use the nameof built-in function or ORM, for constants that evaluate to themselves as a string value, and for debugging, or to make error values or log messages more maintainable. For example:\r\n\r\n```go\r\nimport \"github.com/sirupsen/logrus\"\r\n\r\ntype Named {\r\n    Name *string\r\n}\r\n\r\nfunc (n *Named) SetName(name *string) error {\r\n    if name == nil {\r\n        logrus.WithField(nameof(name), name).Error(\"cannot be nil\")\r\n        return fmt.Errorf(nameof(name) + \" cannot be nil\" )\r\n    }\r\n    n.Name = name\r\n}\r\n\r\n```\r\n\r\n## Proposal template\r\n\r\n- Would you consider yourself a novice, intermediate, or experienced Go programmer? \r\nI am experienced, I have been using Go for 10 years since before v1.0.\r\n- What other languages do you have experience with?\r\nBatch files, Basic, C, C++, D, Java, Javascript, Lua, Objective-C, Oberon, Pascal, PHP, Python, R, Ruby, Shell scripts, Visual Basic, ... I do not have experience with C#, but in the previous issues, it seemed that a C#-like nameof was the one most people seemed interested in for Go as well.\r\n- Would this change make Go easier or harder to learn, and why?\r\nIt would not make Go easier to learn, but also not substantially harder. If the new built-in function is well documented, everyone who doesn't know it yet can read its documentation to find out how it works. Furthermore, it will be familiar to C# users.\r\n- Has this idea, or one like it, been proposed before?\r\nThis idea is based on the proposal #36332 and #36924.\r\n- If so, how does this proposal differ?\r\nIn stead of special syntax I proposed a built-in function, which is more Go-like and easier to learn. Furthermore, it is not based on reflection, but a compile time,, similar as it is in C# which has proven utility in that language, and it seems like most people are interested in this kind of nameof() function.\r\n- Who does this proposal help, and why?\r\nThis proposal would help people writing ORM's, interpreters, or with debugging aid, and other people who need to use the names of Go language artifacts, such as struct field names, or type names have to be used as strings. It is especially convenient to prevent errors during refactoring when using tools such as go pls. \r\n- Is this change backward compatible?\r\nYes, adding a new built in function is normally completely backwards compatible, and does not break the Go1 compatibility guarantee.\r\n- Show example code before and after the change.\r\n\r\nExample: Logging and error values:\r\n\r\n_Before_:\r\n\r\n```go\r\nimport \"github.com/sirupsen/logrus\"\r\n\r\ntype Named {\r\n    Name *string\r\n}\r\n\r\nfunc (n *Named) SetName(name *string) error {\r\n    if name == nil {\r\n        logrus.WithField(\"name\", name).Error(\"cannot be nil\")\r\n        return fmt.Errorf(\"name cannot be nil\" )\r\n    }\r\n    n.Name = name\r\n}\r\n```\r\n_After_:\r\n```go\r\n\r\nimport \"github.com/sirupsen/logrus\"\r\n\r\ntype Named {\r\n    Name *string\r\n}\r\n\r\nfunc (n *Named) SetName(name *string) error {\r\n    if name == nil {\r\n        logrus.WithField(nameof(name), name).Error(\"cannot be nil\")\r\n        return fmt.Errorf(nameof(name) + \" cannot be nil\" )\r\n    }\r\n    n.Name = name\r\n}\r\n```\r\n\r\nWhile the before looks simpler, it has a problem: when you rename the `name`variable, especially using tools, \"name\" in the string will not be changed by the tool as well. The nameof function can be supported by such tools, and then refactor the name correctly so the error ans log message will also be correct.  \r\n\r\n\r\nExample: Orm-ish use:\r\n\r\n_Before_: \r\n```go\r\nimport \"database/sql\"\r\n\r\ntype CartItem struct {\r\n    Name string\r\n    Stock int\r\n    Price uint    \r\n}\r\n\r\nfunc (ci CartItem) Insert(db *sql.DB) error {\r\n\t// Not very future proof. If the struct changes, I could easily forget to change field name here as well.\r\n\tquery := \"INSERT INTO CartItem (Name, Stock, Price) VALUES (?, ?, ?)\"\r\n\terr := db.Exec(query, ci.Name, ci.Stock, ci.Price)\r\n\treturn err\r\n}\r\n```\r\n_After_: \r\n```go\r\nfunc (ci *CartItem) Insert(db *DB) error {\r\n\t// Get the field names at compile time. Less chance for error.\r\n        // If the fields don't exist we will get a compiler error. \r\n        fields := []String { nameof(ci.Name),  nameof(ci.Stock), nameof(ci.Price) } \r\n\tquery := \"INSERT INTO CartItem (\" + strings.Join(fields , \", \") +  \") VALUES (?, ?, ?)\"\r\n\terr := db.Exec(query, ci.Name, ci.Stock, ci.Price)\r\n\treturn err\r\n}\r\n```\r\n\r\nIn this case, the after code is also somewhat more complex, but it is definitely more correct. If the struct layout changes, then in stead of getting a run time error, we will get a compile time error which is far preferable in such a situation.\r\n\r\n\r\n- What is the cost of this proposal? (Every language change has a cost).\r\n    The function has to be implemented, documented and tested.\r\n  - How many tools (such as vet, gopls, gofmt, goimports, etc.) would be affected?\r\n    The gopls tool may or may not have to be updated to allow refactoring of the contents of a nameof() call. \r\n  - What is the compile time cost?\r\n    Low, because only if the function is used, the compiler has at do a few name and field lookups, but it should already have that data available. \r\n  - What is the run time cost?\r\n     None, the whole point is to have this functionality at compile time.\r\n- Can you describe a possible implementation?\r\n  See above for the proposal based on C# documentation, extended with some more situations.\r\n- How would the language spec change?\r\n  The Built-in_functions section would need to get a sub chapter on \"Obtaining Names\" or such.\r\n- Orthogonality: how does this change interact or overlap with existing features?\r\n  It does not overlap with reflect, except maybe for names of fields, but nameof() can also fetch names of non-expressions, which is not possible using reflect. It would also allow to check on compile time whether a variable or constant exists: eg:  \r\n```go\r\nvar _ = nameof(Foo) // compile error if Foo does not exist. May happen due to build tags, etc. \r\n```\r\n\r\n- Is the goal of this change a performance improvement?\r\n  No.\r\n- Does this affect error handling?\r\n  Only in that it improves the quality of error values in when renaming variables. \r\n- Is this about generics?\r\nNo.\r\n", "labels": ["Go2", "LanguageChange", "Proposal"], "number_of_comments": 12, "created_at": "2020-02-05 09:04:31", "reactions": {"total_count": 9, "+1": 7, "-1": 0, "laugh": 0, "heart": 0, "hooray": 2}}, "560212366": {"author_username": "zikaeroh", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37038, "title": "x/review/git-codereview: package documentation for multi-commit branch workflow does not match behavior", "body": "The package documentation for `git-codereview` [says](https://godoc.org/golang.org/x/review/git-codereview#hdr-Multiple_Commit_Work_Branches):\r\n\r\n> The 'git codereview change' command amends the top commit in the stack (HEAD).\r\n\r\nHowever, [CL 20049](https://golang.org/cl/20049) appears to have removed this behavior, instead stating that some combination `git commit --amend` and `git rebase` should be used instead.\r\n\r\nI'd appreciate it if these docs were updated to better explain the current behavior (potentially with an example).\r\n\r\nI'm working on a multi-change contribution, and am finding this a little bit confusing to figure out.", "labels": ["Documentation", "NeedsFix", "help wanted"], "number_of_comments": 1, "created_at": "2020-02-05 08:24:52", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560194805": {"author_username": "zikaeroh", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37037, "title": "dl/internal/version, dl/gotip: merge gotip into internal/version", "body": "`dl/internal/version` and `dl/gotip` contain much of the same code. Fixes for issues like #36976 need to be applied to both, even though their underlying operation is nearly identical (including duplicated helpers and tests). `internal/version` could back `gotip` instead.\r\n\r\nSplitting out from https://github.com/golang/go/issues/36976#issuecomment-581589078.\r\n\r\nI have a CL chain I'm planning to submit to clean this up (and fix #36976).", "labels": ["NeedsInvestigation"], "number_of_comments": 2, "created_at": "2020-02-05 07:41:37", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560105733": {"author_username": "oakad", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37033, "title": "proposal: runtime: provide centralized facility for managing (c)go pointer handles", "body": "Any non-trivial program relying on cgo eventually will find itself in need to use callbacks and interact with go objects. The current \"customary\" way to deal with this situation is for package implementer to come with some sort of global map to establish correspondence between go pointers and some sort of custom cgo handle.\r\n\r\n(I'm talking about pointers to complex go objects, which are normally disallowed by cgo call checker).\r\n\r\nThis is unfortunate, as many cgo enabled packages are required to carry boilerplate code with a lot of potential for hard to find bugs, such as:\r\n\r\n1. Handle assignment collisions\r\n2. Pointer \"leaks\"\r\n3. Concurrency issues, accessing those \"pointer to handle\" maps\r\n\r\nTherefore, it will be nice if go runtime provided a small API to handle the above case cleanly, to the tune of:\r\n\r\n```\r\n// Make i non-collectable and non-movable and return a cgo handle h for it\r\nfunc cgoMakeHandle(i interface{}) (h uintptr)\r\n\r\n// Given a cgo handle, return a Go reference for the object, if valid\r\nfunc cgoGetHandle(h uintptr) (i interface{}, ok bool)\r\n\r\n// Same as \"get\" above, but the handle h becomes invalid, and reference i becomes collectable\r\n// and movable again\r\nfunc cgoReleaseHandle(h uintptr) (i interface{}, ok bool)\r\n```\r\n\r\nThe `h` handle, while valid, is then supposed to be safely passable to native code and back.", "labels": ["Proposal"], "number_of_comments": 7, "created_at": "2020-02-05 02:44:37", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560066182": {"author_username": "FiloSottile", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37032, "title": "dev.boringcrypto: switch Docker images to Debian Buster", "body": "Debian Stretch will reach EOL this year. By then we should switch the Go+BoringCrypto Docker images to be based on Buster. The `golang` docker images default to Buster already.\r\n\r\nNot really sure how to announce this change, as there is no Go+BoringCrypto release notes.", "labels": ["NeedsFix"], "number_of_comments": 1, "created_at": "2020-02-05 00:22:20", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560025939": {"author_username": "glycerine", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37029, "title": "runtime: VirtualAlloc of 4294967296 bytes failed with errno=1455 on windows/amd64 go 1.13.4", "body": "I just encountered a similar panic to #33716 . I am running Go 1.13.4 windows/amd64. My windows VM has 5GB of RAM. Go tried to allocate 4GB of RAM and crashed. This is a big long running program (had been running for about 24 hours at the point of crash) so no easy repro test case available immediately.\r\n\r\nIt seems rather unreasonable for Go to ask for that much memory on a 5GB box.\r\n\r\nruntime: VirtualAlloc of 4294967296 bytes failed with errno=1455\r\nfatal error: out of memory\r\n\r\nruntime stack:\r\nruntime.throw(0x2977e71, 0xd)\r\n        c:/go/src/runtime/panic.go:774 +0x79\r\nruntime.sysUsed(0xc280b26000, 0x100000000)\r\n        c:/go/src/runtime/mem_windows.go:83 +0x230\r\nruntime.(*mheap).allocSpanLocked(0x4087660, 0x80000, 0x40ab448, 0x1210fda0)\r\n        c:/go/src/runtime/mheap.go:1228 +0x203\r\nruntime.(*mheap).alloc_m(0x4087660, 0x80000, 0x101, 0x1210fdd0)\r\n        c:/go/src/runtime/mheap.go:1022 +0xd0\r\nruntime.(*mheap).alloc.func1()\r\n        c:/go/src/runtime/mheap.go:1093 +0x53\r\nruntime.(*mheap).alloc(0x4087660, 0x80000, 0x10101, 0xc000048000)\r\n        c:/go/src/runtime/mheap.go:1092 +0x91\r\nruntime.largeAlloc(0xfffffe00, 0xc000040101, 0xc000056000)\r\n        c:/go/src/runtime/malloc.go:1138 +0x9e\r\nruntime.mallocgc.func1()\r\n        c:/go/src/runtime/malloc.go:1033 +0x4d\r\nruntime.systemstack(0x0)\r\n        c:/go/src/runtime/asm_amd64.s:370 +0x6b\r\nruntime.mstart()\r\n        c:/go/src/runtime/proc.go:1146\r\n\r\ngoroutine 1 [running]:\r\nruntime.systemstack_switch()\r\n        c:/go/src/runtime/asm_amd64.s:330 fp=0xc0003e9108 sp=0xc0003e9100 pc=0x464f10\r\nruntime.mallocgc(0xfffffe00, 0x26064a0, 0x1, 0xc0003e91d0)\r\n        c:/go/src/runtime/malloc.go:1032 +0x8d4 fp=0xc0003e91a8 sp=0xc0003e9108 pc=0x411344\r\nruntime.makeslice(0x26064a0, 0xfffffe00, 0xfffffe00, 0x0)\r\n        c:/go/src/runtime/slice.go:49 +0x73 fp=0xc0003e91d8 sp=0xc0003e91a8 pc=0x44c4b3\r\nbytes.makeSlice(0xfffffe00, 0x0, 0x0, 0x0)\r\n        c:/go/src/bytes/buffer.go:229 +0x7e fp=0xc0003e9240 sp=0xc0003e91d8 pc=0x535c2e\r\nbytes.(*Buffer).grow(0xc0003e9368, 0x200, 0x40000000)\r\n        c:/go/src/bytes/buffer.go:142 +0x162 fp=0xc0003e9290 sp=0xc0003e9240 pc=0x535562\r\nbytes.(*Buffer).ReadFrom(0xc0003e9368, 0x2e01ce0, 0xc0000060e0, 0x2917ea0, 0xc00006e120, 0xc0001\\\r\nbe8b8)\r\n        c:/go/src/bytes/buffer.go:202 +0x52 fp=0xc0003e9300 sp=0xc0003e9290 pc=0x535a12\r\nio/ioutil.readAll(0x2e01ce0, 0xc0000060e0, 0x200, 0x0, 0x0, 0x0, 0x0, 0x0)\r\n        c:/go/src/io/ioutil/ioutil.go:36 +0x107 fp=0xc0003e93a0 sp=0xc0003e9300 pc=0x54c927\r\nio/ioutil.ReadAll(...)\r\n        c:/go/src/io/ioutil/ioutil.go:45\r\n...", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-04 22:48:53", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560023834": {"author_username": "tv42", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37028, "title": "cmd/doc: garbled -src output", "body": "# What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes (go1.13.7 is the latest release).\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/tv/.cache/go-build\"\r\nGOENV=\"/home/tv/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=[censored, not related]\r\nGONOSUMDB=[censored, not related]\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/tv/go\"\r\nGOPRIVATE=[censored, not related]\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/tv/sdk/go1.13.7\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/tv/sdk/go1.13.7/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/tv/go/src/eagain.net/go/securityblanket/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/home/tv/tmp/go-build488236536=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nIn a module that didn't directly use xerrors, but github.com/google/go-cmp v0.4.0 pulled in golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543:\r\n\r\n```\r\n$ go doc -src xerrors.As\r\npackage xerrors // import \"golang.org/x/xerrors\"\r\n\r\n// As finds the first error in err's chain that matches the type to which target\r\n// points, and if so, sets the target to its value and returns true. An error\r\n// matches a type if it is assignable to the target type, or if it has a method\r\n// As(interface{}) bool such that As(target) returns true. As will panic if target\r\n// is not a non-nil pointer to a type which implements error or is of interface type.\r\n//\r\n// The As method should set the target to its value and return true if err\r\n// matches the type to which target points.\r\n\r\n// Copyright 2018 The Go Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style\r\n// license that can be found in the LICENSE file.\r\n\r\n// FormatError calls the FormatError method of f with an errors.Printer\r\n// configured according to s and verb, and writes the result to s.\r\n\r\n// Assuming this function is only called from the Format method, and given\r\n// that FormatError takes precedence over Format, it cannot be called from\r\n// any package that supports errors.Formatter. It is therefore safe to\r\n// disregard that State may be a specific printer implementation and use one\r\n// of our choice instead.\r\n\r\n// limitations: does not support printing error as Go struct.\r\n\r\n// separator before next error\r\n\r\n// Note that this switch must match the preference order\r\n// for ordinary string printing (%#v before %+v, and so on).\r\n\r\n// proceed as if it were %v\r\n\r\n// Use an intermediate buffer in the rare cases that precision,\r\n// truncation, or one of the alternative verbs (q, x, and X) are\r\n// specified.\r\n\r\nfunc As(err error,\r\n\r\n// Construct format string from State s.\r\ntarget interface{}) bool {\r\n\tif target == nil {\r\n\t\tpanic(\"errors: target cannot be nil\")\r\n\t}\r\n\tval := reflect.ValueOf(target)\r\n\ttyp := val.Type()\r\n\tif typ.Kind() != reflect.Ptr || val.IsNil() {\r\n\t\tpanic(\"errors: target must be a non-nil pointer\")\r\n\t}\r\n\tif e := typ.Elem(); e.Kind() != reflect.Interface && !e.Implements(errorType) {\r\n\t\tpanic(\"errors: *target must be interface or implement error\")\r\n\t}\r\n\ttargetType := typ.Elem()\r\n\tfor err != nil {\r\n\t\tif reflect.TypeOf(err).AssignableTo(targetType) {\r\n\t\t\tval.Elem().Set(reflect.ValueOf(err))\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif x, ok :=\r\n\r\n\t\t// state tracks error printing state. It implements fmt.State.\r\n\t\terr.(interface{ As(interface{}) bool }); ok && x.As(target) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\terr = Unwrap(err)\r\n\t}\r\n\treturn false\r\n}\r\n\r\n// printer wraps a state to implement an xerrors.Printer.\r\n\r\n// Copyright 2019 The Go Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style\r\n// license that can be found in the LICENSE file.\r\n\r\n// Package xerrors implements functions to manipulate errors.\r\n//\r\n// This package is based on the Go 2 proposal for error values:\r\n//   https://golang.org/design/29934-error-values\r\n//\r\n// These functions were incorporated into the standard library's errors package\r\n// in Go 1.13:\r\n// - Is\r\n// - As\r\n// - Unwrap\r\n//\r\n// Also, Errorf's %w verb was incorporated into fmt.Errorf.\r\n//\r\n// Use this package to get equivalent behavior in all supported Go versions.\r\n//\r\n// No other features of this package were included in Go 1.13, and at present\r\n// there are no plans to include any of them.\r\n// import \"golang.org/x/xerrors\"\r\n\r\n// Copyright 2011 The Go Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style\r\n// license that can be found in the LICENSE file.\r\n\r\n// errorString is a trivial implementation of error.\r\n\r\n// New returns an error that formats as the given text.\r\n//\r\n// The returned error contains a Frame set to the caller's location and\r\n// implements Formatter to show this information when printed with details.\r\n\r\n// Copyright 2018 The Go Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style\r\n// license that can be found in the LICENSE file.\r\n\r\n// Errorf formats according to a format specifier and returns the string as a\r\n// value that satisfies error.\r\n//\r\n// The returned error includes the file and line number of the caller when\r\n// formatted with additional detail enabled. If the last argument is an error\r\n// the returned error's Format method will return it if the format string ends\r\n// with \": %s\", \": %v\", or \": %w\". If the last argument is an error and the\r\n// format string ends with \": %w\", the returned error implements an Unwrap\r\n// method returning it.\r\n//\r\n// If the format specifier includes a %w verb with an error operand in a\r\n// position other than at the end, the returned error will still implement an\r\n// Unwrap method returning the operand, but the error's Format method will not\r\n// return the wrapped error.\r\n//\r\n// It is invalid to include more than one %w verb or to supply it with an\r\n// operand that does not implement the error interface. The %w verb is otherwise\r\n// a synonym for %v.\r\n\r\n// Support a \": %[wsv]\" suffix, which works well with xerrors.Formatter.\r\n\r\n// TODO: this is not entirely correct. The error value could be\r\n// printed elsewhere in format if it mixes numbered with unnumbered\r\n// substitutions. With relatively small changes to doPrintf we can\r\n// have it optionally ignore extra arguments and pass the argument\r\n// list in its entirety.\r\n\r\n// Support %w anywhere.\r\n// TODO: don't repeat the wrapped error's message when %w occurs in the middle.\r\n\r\n// Too many %ws or argument of %w is not an error. Approximate the Go\r\n// 1.13 fmt.Errorf message.\r\n\r\n// formatPlusW is used to avoid the vet check that will barf at %w.\r\n\r\n// Return the index of the only %w in format, or -1 if none.\r\n// Also return a rewritten format string with %w replaced by %v, and\r\n// false if there is more than one %w.\r\n// TODO: handle \"%[N]w\".\r\n\r\n// Loosely copied from golang.org/x/tools/go/analysis/passes/printf/printf.go.\r\n\r\n// \"%%\" is not a format directive.\r\n\r\n// \"Replace\" the last character, the 'w', with a 'v'.\r\n\r\n// Parse the printf verb starting with a % at s[0].\r\n// Return how many bytes it occupies and whether the verb is 'w'.\r\n\r\n// Assume only that the directive is a sequence of non-letters followed by a single letter.\r\n\r\n// Copyright 2018 The Go Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style\r\n// license that can be found in the LICENSE file.\r\n\r\n// A Formatter formats error messages.\r\n\r\n// FormatError prints the receiver's first error and returns the next error in\r\n// the error chain, if any.\r\n\r\n// A Printer formats error messages.\r\n//\r\n// The most common implementation of Printer is the one provided by package fmt\r\n// during Printf (as of Go 1.13). Localization packages such as golang.org/x/text/message\r\n// typically provide their own implementations.\r\n\r\n// Print appends args to the message output.\r\n\r\n// Printf writes a formatted string.\r\n\r\n// Detail reports whether error detail is requested.\r\n// After the first call to Detail, all text written to the Printer\r\n// is formatted as additional detail, or ignored when\r\n// detail has not been requested.\r\n// If Detail returns false, the caller can avoid printing the detail at all.\r\n```\r\n\r\nRun again:\r\n\r\n```\r\n$ go doc -src xerrors.As\r\npackage xerrors // import \"golang.org/x/xerrors\"\r\n\r\n// As finds the first error in err's chain that matches the type to which target\r\n// points, and if so, sets the target to its value and returns true. An error\r\n// matches a type if it is assignable to the target type, or if it has a method\r\n// As(interface{}) bool such that As(target) returns true. As will panic if target\r\n// is not a non-nil pointer to a type which implements error or is of interface type.\r\n//\r\n// The As method should set the target to its value and return true if err\r\n// matches the type to which target points.\r\nfunc As(err error, target interface{}) bool {\r\n\tif target == nil {\r\n\t\tpanic(\"errors: target cannot be nil\")\r\n\t}\r\n\tval := reflect.ValueOf(target)\r\n\ttyp := val.Type()\r\n\tif typ.Kind() != reflect.Ptr || val.IsNil() {\r\n\t\tpanic(\"errors: target must be a non-nil pointer\")\r\n\t}\r\n\tif e := typ.Elem(); e.Kind() != reflect.Interface && !e.Implements(errorType) {\r\n\t\tpanic(\"errors: *target must be interface or implement error\")\r\n\t}\r\n\ttargetType := typ.Elem()\r\n\tfor err != nil {\r\n\t\tif reflect.TypeOf(err).AssignableTo(targetType) {\r\n\t\t\tval.Elem().Set(reflect.ValueOf(err))\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif x, ok := err.(interface{ As(interface{}) bool }); ok && x.As(target) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\terr = Unwrap(err)\r\n\t}\r\n\treturn false\r\n}\r\n$\r\n```\r\n\r\nThe garbled output shows up approximately 50% of the time.\r\n\r\n### What did you expect to see?\r\n\r\nFunction comment and body for the As function only.\r\n\r\n### What did you see instead?\r\n\r\nOutput that seems to combine two streams of source.", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-04 22:43:45", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559979678": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37026, "title": "go.dev: invalidate cache for pkg.go.dev/<import-path> when a new latest version is available", "body": "### What is the URL of the page with the issue?\r\n\r\nhttps://pkg.go.dev/github.com/sethvargo/go-githubactions?tab=doc\r\n\r\n### What is your user agent?\r\n\r\n<pre>\r\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.66 Safari/537.36\r\n</pre>\r\n\r\n### Screenshot\r\n\r\n<img width=\"1223\" alt=\"Screen Shot 2020-02-04 at 21 02 48\" src=\"https://user-images.githubusercontent.com/3374574/73786763-d8b82c00-4791-11ea-88a5-25f10f1ddd65.png\">\r\n\r\n### What did you do?\r\n\r\nVisited the above URL, shortly after `v0.1.1` was released (at the time the screenshot was taken: 2020-02-04 21.02.48 UTC)\r\n\r\n### What did you expect to see?\r\n\r\nRefreshing the page to take me to the latest version. `v0.1.1`.\r\n\r\n### What did you see instead?\r\n\r\nI was left on the `v0.1.0` page with a red link (shown in the screenshot) that prompted me to click through for the latest version.\r\n\r\nTo my mind the latest version should always be shown for the bare, non-canonical URL.\r\n\r\nThe red \"latest\" link should then show on the canonical version pages that are not the latest version. e.g.\r\n\r\nhttps://pkg.go.dev/github.com/sethvargo/go-githubactions@v0.1.0?tab=doc\r\n\r\nRelated to #36807 \r\n\r\n", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 3, "created_at": "2020-02-04 21:08:11", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559966902": {"author_username": "fzipp", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37025, "title": "go.dev: README font size for code blocks are too large", "body": "The font size for code blocks in the README on the Overview page is exceptionally tall. It's bigger than the headlines. Compare it to the font size for code blocks on the Doc page, which looks\r\nreasonable.\r\n\r\n![go dev code block font size - too tall](https://user-images.githubusercontent.com/598327/73785089-ecb25c80-4796-11ea-864f-3e9e0c1ff266.png)\r\n\r\n![go dev code block font size - good](https://user-images.githubusercontent.com/598327/73785117-fb990f00-4796-11ea-8877-a99d29e2c39f.png)\r\n", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-02-04 20:42:01", "reactions": {"total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559929272": {"author_username": "seebs", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37023, "title": "proposal: runtime: panicmem should expose the address it's panicking about.", "body": "### What version of Go are you using (`go version`)?\r\n\r\n1.13\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nprobably\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nAMD64\r\n\r\n### What did you do?\r\n\r\nI don't know, but it resulted in a segfault. :) But then I started experimenting with panic and recover, and discovered (somewhat to my surprise) that I *can* catch a SEGV's panic.\r\n\r\n### What did you expect to see?\r\n\r\nA runtime error/exception/something that has comparable information to what I'd get if I didn't recover().\r\n\r\n### What did you see instead?\r\n\r\nThe string \"invalid memory address or nil pointer dereference\"\r\n\r\nSo, contrast:\r\n\r\n```\r\nunexpected fault address 0x7f84e68d6112\r\nfatal error: fault\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x7f84e68d6112 pc=0x5f17cb]\r\n\r\ngoroutine 992352 [running]:\r\nruntime.throw(0xfab924, 0x5)\r\n        /usr/local/Cellar/go/1.13/libexec/src/runtime/panic.go:774 +0x72 fp=0xd5b852e7f8 sp=0xd5b852e7c8 pc=0x42f3b2\r\nruntime.sigpanic()\r\n        /usr/local/Cellar/go/1.13/libexec/src/runtime/signal_unix.go:401 +0x3de fp=0xd5b852e828 sp=0xd5b852e7f8 pc=0x444a3e\r\n[...]\r\n```\r\n\r\nIf I look at [runtime/]debug.StackTrace(), I can get some of this information, but I can't necessarily get the actual address of the unexpected fault. It looks to me like runtime has this information at the time when the panic is generated (or would be, if I turned on SetPanicOnFault):\r\n\r\n```\r\n        case _SIGSEGV:\r\n                if (g.sigcode0 == 0 || g.sigcode0 == _SEGV_MAPERR || g.sigcode0 == _SEGV_ACCERR) && g.sigcode1 < 0x1000 {\r\n                        panicmem()\r\n                }\r\n                // Support runtime/debug.SetPanicOnFault.\r\n                if g.paniconfault {\r\n                        panicmem()\r\n                }\r\n                print(\"unexpected fault address \", hex(g.sigcode1), \"\\n\")\r\n                throw(\"fault\")\r\n```\r\n\r\nBut it looks like panicmem doesn't expose these values. Possibly it should. I can't think of a reasonable approach immediately -- obviously I'd just like the siginfo_t exposed, except that this is unportable even by memory fault handling standards and won't be compatible between implementations. But it seems like exposing the affected address (g.sigcode1) and possibly the kind-of-error (SEGV_MAPERR or SEGV_ACCERR?)\r\n\r\nBut as a simple baseline that I think is probably supportable on current systems, if panicmem took a uintptr, and the resulting panic were an error type that could be queried for the uintptr, or displayed it by default, that might make life easier.\r\n\r\nBecause on the one hand, I want to catch the panics and prevent them from breaking things, but on the other hand, diagnosing them sort of benefits from having the address be available.\r\n\r\n(On the third hand, it might be that changing the exact panic result in these cases would break the Compatibility Promise, without some hypothetical new debug.SetFancyPanicOnFault() that would not have been used in the existing code.)", "labels": ["Proposal"], "number_of_comments": 6, "created_at": "2020-02-04 19:26:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559919599": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37022, "title": "x/build: misc-compile-other failed building linux-riscv64 on master", "body": "The `misc-compile-other` trybot failed on a revert CL in https://go-review.googlesource.com/c/go/+/217721/1#message-9811efced365690ee611f620906e7ecf9b175a15:\r\n\r\n```\r\n### Building linux-riscv64\r\n# internal/bytealg\r\ninternal/bytealg/indexbyte_riscv64.s:9:1: [riscv64] IndexByte: unknown variable s; offset 0 is b_base+0(FP)\r\ninternal/bytealg/indexbyte_riscv64.s:10:1: [riscv64] IndexByte: unknown variable s_len; offset 8 is b_len+8(FP)\r\ninternal/bytealg/indexbyte_riscv64.s:32:1: [riscv64] IndexByteString: unknown variable p; offset 0 is s_base+0(FP)\r\ninternal/bytealg/indexbyte_riscv64.s:33:1: [riscv64] IndexByteString: unknown variable b_len; offset 8 is s_len+8(FP)\r\n```\r\n\r\n_(Source: https://storage.googleapis.com/go-build-log/bd45c843/misc-compile-other_598ce4f1.log.)_\r\n\r\nNeed to investigate why this happened and where the fix belongs.\r\n\r\n/cc @4a6f656c @golang/osp-team", "labels": ["Builders", "NeedsInvestigation", "arch-riscv"], "number_of_comments": 7, "created_at": "2020-02-04 19:07:26", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559916881": {"author_username": "MasterDimmy", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37021, "title": "cmd/go: 'go build -race' with a cross-compiled GOOS should not suggest setting CGO_ENABLED", "body": "<pre>\r\n$ go version\r\ngo version go1.13.7 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYES\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\8\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\8\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\gopath\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_amd64\r\nset GCCGO=gccgo\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Go\\src\\go.mod\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0 -fdebug-prefix-map=d:\\TEMP\\go-build345576314=/tmp/go-build -gno-record-gcc-switches\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\ni compile this file for test:\r\n<details>\r\npackage main\r\n\r\nimport (\r\n \"fmt\"\r\n)\r\n\r\nfunc main() {\r\n\tc := make(chan bool)\r\n\tm := make(map[string]string)\r\n\tgo func() {\r\n\t\tm[\"1\"] = \"a\" // First conflicting access.\r\n\t\tc <- true\r\n\t}()\r\n\tm[\"2\"] = \"b\" // Second conflicting access.\r\n\t<-c\r\n\tfor k, v := range m {\r\n\t\tfmt.Println(k, v)\r\n\t}\r\n}\r\n</details>\r\n\r\nwith\r\n\r\n```\r\nset CGO_ENABLED=1\r\nset GOOS=linux\r\nset GO_ARCH=amd64\r\ngo build -race\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nsuccess compile\r\n\r\n### What did you see instead?\r\n\r\n```\r\n# runtime/cgo\r\ngcc_linux_amd64.c: In function '_cgo_sys_thread_start':\r\ngcc_linux_amd64.c:66:2: error: implicit declaration of function 'sigfillset' [-Werror=implicit-function-declaration]\r\n   66 |  sigfillset(&ign);\r\n      |  ^~~~~~~~~~\r\ncc1.exe: all warnings being treated as errors\r\n```\r\n\r\nNote, that\r\n```\r\nset CGO_ENABLED=1\r\nset GOOS=linux\r\ngo build \r\n```\r\nis succecced, but i need to compile with \"-race\" detector. If CGO_ENABLED=0\r\n\r\n```\r\nset CGO_ENABLED=0\r\nset GOOS=linux\r\ngo build -race\r\n```\r\n\r\nthen i got\r\n```\r\ngo build: -race requires cgo; enable cgo by setting CGO_ENABLED=1\r\n```", "labels": ["NeedsFix", "help wanted"], "number_of_comments": 5, "created_at": "2020-02-04 19:02:38", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559903605": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37020, "title": "x/build: golang.org/x/xerrors repository isn't on build.golang.org dashboard", "body": "We need to add post-submit builders for the golang.org/x/xerrors repository.\r\n\r\n/cc @golang/osp-team", "labels": ["Builders", "NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-02-04 18:35:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559825880": {"author_username": "pjweinb", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37018, "title": "cmd/go: document build constraints in 'go help'", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version devel +a50c3ffbd4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/usr/local/google/home/pjw/.cache/go-build\"\r\nGOENV=\"/usr/local/google/home/pjw/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\nIn x/tools/internal/lsp/span/uri_windows_test.go I removed // +build window, and renamed the test function to TestURIA (to avoid conflicts with uri_test.go)\r\n\r\nI then ran go test -run URI .\r\n### What did you expect to see?\r\nI expected to see it run TestURI (from uri_test.go) and TestURIA (from uri_windows_test.go)\r\n\r\n### What did you see instead?\r\nIt just ran TestURI\r\n\r\n[If I rename uri_window_test.go then go test will run TestURIA]", "labels": ["Documentation", "NeedsFix"], "number_of_comments": 6, "created_at": "2020-02-04 16:16:29", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559656205": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37015, "title": "cmd/go: 'go list' in module mode reports GOPATH Root and Target fields when the main module is in GOPATH/src", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14beta1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/home/manlio/.local/bin\"\r\nGOCACHE=\"/home/manlio/.cache/go-build\"\r\nGOENV=\"/home/manlio/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"github.com/perillo\"\r\nGONOSUMDB=\"github.com/perillo\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/manlio/.local/lib/go:/home/manlio/src/go\"\r\nGOPRIVATE=\"github.com/perillo\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/manlio/sdk/go1.14beta1\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/manlio/sdk/go1.14beta1/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/dev/null\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build892397541=/tmp/go-build -gno-record-gcc-switches\"\r\nGOROOT/bin/go version: go version go1.14beta1 linux/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.14beta1\r\nuname -sr: Linux 5.5.1-arch1-1\r\n/usr/lib/libc.so.6: GNU C Library (GNU libc) stable release version 2.30.\r\ngdb --version: GNU gdb (GDB) 8.3.1\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nFrom inside a module root directory, where `pkg` is a non *main* package.\r\n```\r\ngo list -f 'Target: {{ .Target }}, Root: {{ .Root }}' ./pkg\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nAn empty `Target`, since with `GO111MODULE=on` the package archives are no more installed in `$GOPATH`.\r\n\r\n### What did you see instead?\r\n\r\n```\r\nTarget: /home/manlio/src/go/pkg/linux_amd64/github.com/perillo/gocmd/pkglist.a, Root: /home/manlio/src/go\r\n```\r\n\r\nNOTE: if it is decided that `Target` will be left empty, I hope that `Root` will remain.", "labels": ["NeedsInvestigation", "modules"], "number_of_comments": 2, "created_at": "2020-02-04 11:26:14", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559577133": {"author_username": "dfava", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37012, "title": "cmd/go: `go build -race -n` escapes $WORK incorrectly", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.5 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n`go build -race -n` produces no output in the latest release.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/danielsf/Library/Caches/go-build\"\r\nGOENV=\"/Users/danielsf/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/danielsf/Dropbox/edu/uio.no/favasynthesis/src/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/Cellar/go/1.13.5/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.13.5/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/rq/c7265gd14vlc3gzwwn9prm5h0000gn/T/go-build781677843=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nI ran `go build -race -n file.go`\r\n\r\n<details><pre>\r\n$go build -race -n sortnp.go\r\n\r\n#\r\n# runtime/race\r\n#\r\n\r\nmkdir -p $WORK/b017/\r\ncd /usr/local/Cellar/go/1.13.5/libexec/src/runtime/race\r\nCGO_LDFLAGS='\"-g\" \"-O2\"' /usr/local/Cellar/go/1.13.5/libexec/pkg/tool/darwin_amd64/cgo -objdir $WORK/b017/ -importpath runtime/race -import_syscall=false -- -I $WORK/b017/ -g -O2 ./race.go\r\ncd $WORK\r\nclang -fno-caret-diagnostics -c -x c - -o /dev/null || true\r\nclang -Qunused-arguments -c -x c - -o /dev/null || true\r\nclang -fdebug-prefix-map=a=b -c -x c - -o /dev/null || true\r\nclang -gno-record-gcc-switches -c -x c - -o /dev/null || true\r\ncd $WORK/b017\r\nTERM='dumb' clang -I /usr/local/Cellar/go/1.13.5/libexec/src/runtime/race -fPIC -m64 -pthread -fmessage-length=0 -fno-common -I ./ -g -O2 -o /usr/local/Cellar/go/1.13.5/libexec/src/runtime/race/$WORK/b017/_x001.o -c _cgo_export.c\r\ncd $WORK\r\nclang -fno-caret-diagnostics -c -x c - -o /dev/null || true\r\nclang -Qunused-arguments -c -x c - -o /dev/null || true\r\nclang -fdebug-prefix-map=a=b -c -x c - -o /dev/null || true\r\nclang -gno-record-gcc-switches -c -x c - -o /dev/null || true\r\ncd $WORK/b017\r\nTERM='dumb' clang -I /usr/local/Cellar/go/1.13.5/libexec/src/runtime/race -fPIC -m64 -pthread -fmessage-length=0 -fno-common -I ./ -g -O2 -o /usr/local/Cellar/go/1.13.5/libexec/src/runtime/race/$WORK/b017/_x002.o -c race.cgo2.c\r\ncd $WORK\r\nclang -fno-caret-diagnostics -c -x c - -o /dev/null || true\r\nclang -Qunused-arguments -c -x c - -o /dev/null || true\r\nclang -fdebug-prefix-map=a=b -c -x c - -o /dev/null || true\r\nclang -gno-record-gcc-switches -c -x c - -o /dev/null || true\r\ncd $WORK/b017\r\nTERM='dumb' clang -I /usr/local/Cellar/go/1.13.5/libexec/src/runtime/race -fPIC -m64 -pthread -fmessage-length=0 -fno-common -I ./ -g -O2 -o /usr/local/Cellar/go/1.13.5/libexec/src/runtime/race/$WORK/b017/_cgo_main.o -c _cgo_main.c\r\ncd $WORK\r\nclang -fno-caret-diagnostics -c -x c - -o /dev/null || true\r\nclang -Qunused-arguments -c -x c - -o /dev/null || true\r\nclang -fdebug-prefix-map=a=b -c -x c - -o /dev/null || true\r\nclang -gno-record-gcc-switches -c -x c - -o /dev/null || true\r\ncd /usr/local/Cellar/go/1.13.5/libexec/src/runtime/race\r\nTERM='dumb' clang -I . -fPIC -m64 -pthread -fmessage-length=0 -fno-common -o $WORK/b017/_cgo_.o $WORK/b017/_cgo_main.o $WORK/b017/_x001.o $WORK/b017/_x002.o race_darwin_amd64.syso -g -O2\r\nTERM='dumb' /usr/local/Cellar/go/1.13.5/libexec/pkg/tool/darwin_amd64/cgo -dynpackage race -dynimport $WORK/b017/_cgo_.o -dynout $WORK/b017/_cgo_import.go\r\ncat >$WORK/b017/importcfg << 'EOF' # internal\r\n# import config\r\npackagefile runtime/cgo=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/runtime/cgo.a\r\nEOF\r\n/usr/local/Cellar/go/1.13.5/libexec/pkg/tool/darwin_amd64/compile -o $WORK/b017/_pkg_.a -trimpath \"$WORK/b017=>\" -race -p runtime/race -std -installsuffix race -buildid Fprz1Z1KPcZIX5FOwJQI/Fprz1Z1KPcZIX5FOwJQI -goversion go1.13.5 -D \"\" -importcfg $WORK/b017/importcfg -pack ./doc.go $WORK/b017/_cgo_gotypes.go $WORK/b017/race.cgo1.go $WORK/b017/_cgo_import.go\r\n/usr/local/Cellar/go/1.13.5/libexec/pkg/tool/darwin_amd64/pack r $WORK/b017/_pkg_.a $WORK/b017/_x001.o $WORK/b017/_x002.o ./race_darwin_amd64.syso # internal\r\n/usr/local/Cellar/go/1.13.5/libexec/pkg/tool/darwin_amd64/buildid -w $WORK/b017/_pkg_.a # internal\r\n\r\n#\r\n# command-line-arguments\r\n#\r\n\r\nmkdir -p $WORK/b001/\r\ncat >$WORK/b001/importcfg << 'EOF' # internal\r\n# import config\r\npackagefile math/rand=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/math/rand.a\r\npackagefile sort=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/sort.a\r\npackagefile runtime=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/runtime.a\r\npackagefile runtime/race=$WORK/b017/_pkg_.a\r\nEOF\r\ncd /Users/danielsf/Dropbox/edu/uio.no/favasynthesis/src/go/src\r\n/usr/local/Cellar/go/1.13.5/libexec/pkg/tool/darwin_amd64/compile -o $WORK/b001/_pkg_.a -trimpath \"$WORK/b001=>\" -race -p main -complete -installsuffix race -buildid bFDuKt7LerJobydFWkD4/bFDuKt7LerJobydFWkD4 -goversion go1.13.5 -D _/Users/danielsf/Dropbox/edu/uio.no/favasynthesis/src/go/src -importcfg $WORK/b001/importcfg -pack ./sortnp.go\r\n/usr/local/Cellar/go/1.13.5/libexec/pkg/tool/darwin_amd64/buildid -w $WORK/b001/_pkg_.a # internal\r\ncat >$WORK/b001/importcfg.link << 'EOF' # internal\r\npackagefile command-line-arguments=$WORK/b001/_pkg_.a\r\npackagefile math/rand=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/math/rand.a\r\npackagefile sort=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/sort.a\r\npackagefile runtime=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/runtime.a\r\npackagefile runtime/race=$WORK/b017/_pkg_.a\r\npackagefile math=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/math.a\r\npackagefile sync=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/sync.a\r\npackagefile internal/reflectlite=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/internal/reflectlite.a\r\npackagefile internal/bytealg=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/internal/bytealg.a\r\npackagefile internal/cpu=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/internal/cpu.a\r\npackagefile runtime/internal/atomic=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/runtime/internal/atomic.a\r\npackagefile runtime/internal/math=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/runtime/internal/math.a\r\npackagefile runtime/internal/sys=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/runtime/internal/sys.a\r\npackagefile runtime/cgo=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/runtime/cgo.a\r\npackagefile math/bits=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/math/bits.a\r\npackagefile internal/race=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/internal/race.a\r\npackagefile sync/atomic=/usr/local/Cellar/go/1.13.5/libexec/pkg/darwin_amd64_race/sync/atomic.a\r\nEOF\r\nmkdir -p $WORK/b001/exe/\r\ncd .\r\n/usr/local/Cellar/go/1.13.5/libexec/pkg/tool/darwin_amd64/link -o $WORK/b001/exe/a.out -importcfg $WORK/b001/importcfg.link -installsuffix race -buildmode=exe -buildid=ccVR6c_rQZXbuQvRXvvQ/bFDuKt7LerJobydFWkD4/bFDuKt7LerJobydFWkD4/ccVR6c_rQZXbuQvRXvvQ -race -extld=clang $WORK/b001/_pkg_.a\r\n/usr/local/Cellar/go/1.13.5/libexec/pkg/tool/darwin_amd64/buildid -w $WORK/b001/exe/a.out # internal\r\nmv $WORK/b001/exe/a.out sortnp\r\n</pre></details>\r\n\r\n### What did you expect to see? /  What did you see instead?\r\n\r\nThe output from `go build -race -n file.go` seems slightly incorrect.\r\nTake the following line for example.  I believe the tool ought to have printed `$WORK/b017/` instead of `/usr/local/Cellar/go/1.13.5/libexec/src/runtime/race/$WORK/b017/`.\r\n\r\n<pre>\r\nTERM='dumb' clang -I /usr/local/Cellar/go/1.13.5/libexec/src/runtime/race -fPIC -m64 -pthread -fmessage-length=0 -fno-common -I ./ -g -O2 -o /usr/local/Cellar/go/1.13.5/libexec/src/runtime/race/$WORK/b017/_x001.o -c _cgo_export.c\r\n</pre>\r\n\r\nI'm assuming that $WORK is a full path.  It could also be that `$WORK` is a relative path from `/usr/local/Cellar/go/1.13.5/libexec/src/runtime/race`.  If that's the case, then the following lines would break, since `$WORK` is a relative path that is now referenced from `/usr/local/Cellar/go/1.13.5/libexec/src/runtime/race` instead of `/usr/local/Cellar/go/1.13.5/libexec/src/runtime/race`:\r\n\r\n<pre>\r\ncd /Users/danielsf/Dropbox/edu/uio.no/favasynthesis/src/go/src\r\n/usr/local/Cellar/go/1.13.5/libexec/pkg/tool/darwin_amd64/compile -o $WORK/b001/_pkg_.a -trimpath \"$WORK/b001=>\" -race -p main -complete -installsuffix race -buildid bFDuKt7LerJobydFWkD4/bFDuKt7LerJobydFWkD4 -goversion go1.13.5 -D _/Users/danielsf/Dropbox/edu/uio.no/favasynthesis/src/go/src -importcfg $WORK/b001/importcfg -pack ./sortnp.go\r\n/usr/local/Cellar/go/1.13.5/libexec/pkg/tool/darwin_amd64/buildid -w $WORK/b001/_pkg_.a # internal\r\n</pre>", "labels": ["NeedsInvestigation", "help wanted"], "number_of_comments": 7, "created_at": "2020-02-04 09:03:45", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559553314": {"author_username": "yhjhoo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37011, "title": "proxy.golang.org: not able to install package github.com/denisenkom/go-mssqldb", "body": "### What version of Go are you using (`go version`)?\r\ngo version go1.13.5 windows/amd64\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What did you do?\r\ngo get github.com/denisenkom/go-mssqldb\r\n\r\n\r\n\r\n### What did you expect to see?\r\ndownload go-mssqldb driver\r\n\r\n\r\n### What did you see instead?\r\ncannot load github.com/denisenkom/go-mssqldb\r\n", "labels": ["WaitingForInfo"], "number_of_comments": 1, "created_at": "2020-02-04 08:11:31", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559474957": {"author_username": "kortschak", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37009, "title": "go.dev: \"Report an Issue\" link does not work on firefox", "body": "The \"Report an Issue\" and the \"Share Feedback\" links do not work on Firefox (hence this potentially incorrect structure of this report).\r\n\r\n### What is the URL of the page with the issue?\r\n\r\nhttps://pkg.go.dev/\r\n\r\n### What is your user agent?\r\n\r\nMozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0\r\n\r\n### What did you do?\r\n\r\nClick on \"Report an Issue\".\r\n\r\n### What did you expect to see?\r\n\r\nA browser response.\r\n\r\n### What did you see instead?\r\n\r\nNo change.", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 17, "created_at": "2020-02-04 04:04:54", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559399709": {"author_username": "shibormot", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37007, "title": "go.dev: keyboard shortcut to report a typo to package author", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions, please email go-discovery-feedback@google.com.\r\n-->\r\n \r\n### What is the URL of the page with the issue?\r\nhttps://pkg.go.dev/github.com/kardianos/service?tab=doc#Interface\r\n \r\n \r\n### What is your user agent?\r\nMozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36 \r\n\r\n<!-- \r\nYou can find your user agent here:\r\nhttps://www.whatismybrowser.com/detect/what-is-my-user-agent\r\n-->\r\n \r\n \r\n \r\n### Screenshot\r\n \r\n<!--\r\nPlease paste a screenshot of the page.\r\n-->\r\n \r\n![2020-02-04-021801_1216x766_scrot](https://user-images.githubusercontent.com/10779755/73699401-bfad6d80-46f4-11ea-9a54-7f3f86363be4.png)\r\n\r\n \r\n \r\n### What did you do?\r\n \r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\n-->\r\n \r\nI am reading documentation and see typo made by author of package.\r\n \r\n### What did you expect to see?\r\n \r\n A keyboard shortcut to report a selected typo to the author of package.\r\n \r\n### What did you see instead?\r\nNo such shortcut.\r\n\r\n\r\n", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-02-03 23:37:04", "reactions": {"total_count": 3, "+1": 0, "-1": 2, "laugh": 0, "heart": 0, "hooray": 0}}, "559349463": {"author_username": "natefinch", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37005, "title": "go.dev: go.dev/about instructions to add package to the docs need clarification", "body": "These instructions on go.dev/about for adding a package to  the docs are not actionable:\r\n\r\n> To add a package or module, simply fetch it from proxy.golang.org. \r\n\r\nI don't know what \"fetch it from proxy.golang.org\" means or how to go about doing that. I'm sure I'm not the only one.\r\n\r\nAlso, avoid putting \"simply\" or \"just\" in directions, because they trivialize a step which may actually not be trivial for the person attempting it. Like, me, trying to figure out how to fetch something from a go proxy. Remove the word and it reads exactly the same, except if I don't know how to do it, I don't feel like I've been talked down to.", "labels": ["Documentation", "go.dev"], "number_of_comments": 3, "created_at": "2020-02-03 21:36:41", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559346622": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37004, "title": "cmd/go: distinguish between cmd/go variables and runtime variables in 'go help environment'", "body": "I'm not sure if this an issue with `go env` or with `go help environment`, but the latter mentions the `GODEBUG` variable in the first section *General purpose environment variables*.\r\n\r\nHowever `go env -w GODEBUG=gctrace=1` returns an error.\r\n\r\nSince, as far as I know, `GODEBUG` is not used by the `go` command, `go help environment` is probably wrong and `GODEBUG` should be removed.\r\n\r\nIt may be better, however, to move `GODEBUG` and the other `runtime` environment variable in a new section *Runtime specific environment variables* with the other variables `GOGC`, `GOMAXPROCS`, `GORACE` and `GOTRACEBACK`.", "labels": ["Documentation", "NeedsFix"], "number_of_comments": 2, "created_at": "2020-02-03 21:30:53", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559344753": {"author_username": "jayconrod", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37003, "title": "x/exp/apidiff: report change in package name", "body": "### What did you do?\r\n\r\nCompare two packages which are identical except for package name.\r\n\r\n### What did you expect to see?\r\n\r\n`apidiff` should report a change if the package name is different. I'd argue that this is always an incompatible change.\r\n\r\nAn interesting question is whether changing a `main` package to something else is compatible. From the perspective of importing packages, it's a compatible change, since `main` couldn't be imported before. However, anything that depends on a `main` package being built as a binary will break.\r\n\r\n### What did you see instead?\r\n\r\nNo difference reported.\r\n\r\ncc @bcmills @jba @matloob ", "labels": ["NeedsFix"], "number_of_comments": 0, "created_at": "2020-02-03 21:27:06", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559342538": {"author_username": "natefinch", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37002, "title": "go.dev: automatically fetch a requested package if it does not exist on pkg.go.dev", "body": "Currently, if you request package docs from pkg.go.dev for a package that hasn't been sent to the go proxy yet, then it just returns 404.  \r\n\r\nRequesting a url from pkg.go.dev should do whatever \"add your package\" does, if that's required to view the docs, because clearly I want to view the docs and the server knows exactly what step is missing to allow me to view the docs, so just do it, please.\r\n\r\nBy returning a 404 page, it looks like there's a bug in the website. The suggested \"how to add your package\" requires some arcane steps (I presume? it's not actually spelled out) that simply shouldn't be necessary.  \r\n\r\nSee https://github.com/golang/go/issues/36986 for an example of someone reporting a \"bug\" because a package didn't show up.\r\n\r\nThis is actually super common when using godoc.org in my experience, as I will often want to view the docs on godoc.org as I'm writing the code, to see how they look there.  I'm sure others will want to do the same on pkg.go.dev.\r\n\r\nThis can also easily happen if most people in your company use a corporate proxy, so the code isn't in go's proxy yet, but then you decide you want to view the docs and you're just used to doing it on pkg.go.dev (which I do all the time for random go packages on godoc.org... rather than download them and view the docs locally, I view 99% of docs directly on godoc.org).", "labels": ["FeatureRequest", "NeedsInvestigation", "go.dev"], "number_of_comments": 2, "created_at": "2020-02-03 21:23:04", "reactions": {"total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559293933": {"author_username": "Gregory-Ledray", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 37000, "title": "misc/wasm: improve error message when wasm file is not supplied", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/greg/.cache/go-build\"\r\nGOENV=\"/home/greg/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/greg/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/greg/wasmbrowsertest/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build552182410=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n</pre></details>\r\n\r\n\r\n### What did you do?\r\nTried running a WASM binary with wasm_exec.js but didn't properly supply a .wasm file, or perhaps some other error happened. The specifics aren't important - I've seen this error a couple different ways when I did something wrong.\r\n\r\nI saw this:\r\n\r\n> TypeError: Cannot read property 'exports' of undefined\r\n    at global.Go.run (http://localhost:49700/wasm_exec.js:439:40)\r\n    at http://localhost:49700/:59:13\r\n\r\nWhich was a bit baffling the first time I read it until I poked around.\r\n\r\nI want to see this:\r\n`wasm instance was not supplied to go.run`\r\nor a similar error message.\r\n\r\nYou can get this effect by modifying wasm_exec.js a bit:\r\n```\r\n// existing code before here...\r\nasync run(instance) {\r\n    if (instance == null) {\r\n        throw new Error(\"wasm instance was not supplied to go.run\")\r\n    }\r\n// existing code continues...\r\n```\r\n\r\nI believe this is the only public function in wasm_exec.js where someone might conceivably run into an error and have no real understanding of how Javascript works since the other functions in wasm_exec.js seem rather low-level.", "labels": ["Arch-Wasm", "NeedsInvestigation"], "number_of_comments": 5, "created_at": "2020-02-03 19:46:00", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559237485": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36998, "title": "x/tools/gopls: respect GOPRIVATE setting for links to documentation on hover", "body": "Reported on Slack. We shouldn't over links to packages covered by `GOPRIVATE`.", "labels": ["Documentation", "Tools", "gopls"], "number_of_comments": 1, "created_at": "2020-02-03 17:51:29", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559187126": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36997, "title": "x/lint: golint does not recognize Unwrap methods", "body": "`golint` does not complain if a method implementing *know* interfaces is not documented.\r\nHowever when I define the `Unwrap` method, it complains:\r\n```\r\nexported method Error.Unwrap should have comment or be unexported\r\n```\r\n\r\nBy the way, how I'm supposed to document the method?\r\n```\r\n// Unwrap implements support for error unwrapping.\r\n```\r\nor\r\n```\r\n// Unwrap implements the Unwrapper interface.\r\n```\r\n?", "labels": ["NeedsInvestigation"], "number_of_comments": 6, "created_at": "2020-02-03 16:18:11", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559115478": {"author_username": "paulthomson", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36995, "title": "x/tools/gopls: support something like `compile_commands.json`", "body": "Build systems such as CMake and Ninja can output a [compilation database -- a `compile_commands.json` file](https://clang.llvm.org/docs/JSONCompilationDatabase.html) that contains every command that was executed to compile each C++ source file. \r\n\r\n[Bear](https://github.com/rizsotto/Bear) intercepts process forking/creation to get the `compile_commands.json` from _any_ build system, even those that do not natively support outputting a `compile_commands.json` file.\r\n\r\nA `compile_commands.json` file can be used by Clang tooling, such as `clangd` to get autocompletion, go-to-definition, etc. in editors like Vim, Emacs, and VSCode. The CLion IDE supports opening a `compile_commands.json` file as a C++ project to get the usual autocompletion and refactoring features.\r\n\r\nThe nice thing about `compile_commands.json` is that, _regardless of your build system_, you know that it _must_ be possible to log each invocation of the compiler, and thus get a `compile_commands.json` file, one way or another. Furthermore, regardless of the various project models or abstractions that various tools/IDEs/build systems come up with, you know it _must_ be possible to get all the required information from each invocation of the compiler, and thus any tool should be able to import a `compile_commands.json` file to create its project model. \r\n\r\n**Is there any way that `gopls` could support using a `compile_commands.json` file for golang (or a similar type of file that essentially is a log of every invocation of the go compiler)?**\r\n\r\n\r\nNote: this could also be a good \"source-of-truth\" and useful for cross-checking other ways of getting the project model. I.e. log the actual invocations of the go compiler to build a project model; we should get the same project model when obtained via other means, like when relying on the standard GOPATH directory structure.\r\n\r\nNote: the [compilation database / `compile_commands.json` spec](https://clang.llvm.org/docs/JSONCompilationDatabase.html) currently does not have fields for storing environment variables, which I assume would be required for go.", "labels": ["Tools", "gopls"], "number_of_comments": 2, "created_at": "2020-02-03 14:21:51", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559070497": {"author_username": "JavierZunzunegui", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36994, "title": "proposal: Go 2: universal WrapError type", "body": "# go2 proprosal: universal WrapError type\r\n\r\nSee filled questionare https://github.com/golang/go/issues/36994#issuecomment-581419256\r\n\r\nThis is a go2 proposal in the context of error wrapping. It is a concrete follow up to the more open ended [#35929 (errors: how should formatting be handled?)](https://github.com/golang/go/issues/35929).\r\n\r\nIt requires changes to the [errors](https://golang.org/pkg/errors/) package but no language change. All code is in [this repo](https://github.com/JavierZunzunegui/werrors).\r\n\r\n## Context\r\n\r\nError wrapping support was added in [go 1.13](https://blog.golang.org/go1.13-errors). It did not introduce some advanced features like error formatting and stack traces, not because these were not desirable  ([Error Values \u2014 Problem Overview](https://go.googlesource.com/proposal/+/master/design/go2draft-error-values-overview.md#error-formatting), [Error Printing \u2014 Draft Design](https://go.googlesource.com/proposal/+/master/design/go2draft-error-printing.md)) but because no good implementation was found that delivered them.  This puts forward an implementation that delivers on the above, and which can easily introduce new feautures going forward.\r\n\r\n## Abstract\r\n\r\nCurrently, to be a wrapping error means implementing `interface {Unwrap() error}`. \r\n\r\nUnder this proposal, it means beaing an instance of the new `WrapError` struct, which itself contains plain, non-wrapping errors. The key advantage is new features can be added accross all wrapped error uses by adding functionality to `WrapError`, as opposed to introducing additional interfaces that have to be inplemented by every individual error type.\r\n\r\n## Details\r\n\r\n### Immediate Changes\r\n\r\nThe following are to be added to [errors](https://golang.org/pkg/errors/) package (implementations in [werrors.go](https://github.com/JavierZunzunegui/werrors/blob/master/werrors.go)): \r\n- `type WrapError struct`: effectively a linked list of errors, this is set to become the universal type for all wrapped errors. It supports `Is`, `As` and `Unwrap` as expected.\r\n- `func Wrap(error, error) error`: used to produce the `WrapError` error chain. All error wrapping is set to be produced through this method.\r\n\r\nThis is the extent of the 'immediate' changes put forward by this proposal.\r\n\r\n### Follow ups\r\n\r\nThe more advanced features can be built on top of these changes as demonstrated in the following orthogonal extensions. This are in place to demostrate the ease with which such features can be delivered, but are not complete implementations of such features.\r\n- [error formatting](https://github.com/JavierZunzunegui/werrors/tree/master/extension/format/werrors).\r\n- [stack frames](https://github.com/JavierZunzunegui/werrors/tree/master/extension/frame/werrors).\r\n- [error filtering](https://github.com/JavierZunzunegui/werrors/tree/master/extension/filter/werrors).\r\n- [efficient serialisation](https://github.com/JavierZunzunegui/werrors/tree/master/extension/optimize/werrors).\r\n\r\nNote that the above can be introduced without requiring changes on any other error type other than `WrapError`. More generally, in a `WrapError` compliant world adding functionality to all wrapped errors requires updating `WrapError` only. \r\n\r\n### Limitations and Breaking Changes\r\n\r\nNote the migration to `WrapError` is needed before the follow ups above (and theremore, the primary gains) can be delivered, but `WrapError` and `Wrap` can be introduced (with no additional functionality) without any breaking change. This allows for a gradual migration before the ultimate breaking changes.\r\n\r\nThe primary backwards-incompatible changes are:\r\n- Removal of `interface {Unwrap() error}`: \r\nit was added with go1.13 to the errors package as the fundamental method that defines wrapped errors. Errors implementing this need to be changed to no longer have this method nor contain other errors in their fields, and the wrapping be provided by the new `Wrap` method. This represents the largest breaking change in the proposal. A significant error in this category is [os.PathError](https://golang.org/pkg/os/#PathError).\r\n- Limited [`fmt.Errorf`](https://golang.org/pkg/fmt/#Errorf) support: \r\nWhile `%w`-suffixed strings can be supported, having it elsewhere can't. This makes `fmt.Errorf(\"foo, err=%w, bar\", err)` unsupportable, but `fmt.Errorf(\"foo, bar, err: %w\", err)` is. Even in the suffix scenario, the requiremenet for formatting imposes for a uniform suffix syntax, presumably the `\": %w\"` that was part of an [earlier errors draft](https://go.googlesource.com/proposal/+/master/design/29934-error-values.md#changes-to). A new `fmt.WErrorf(error, string, ...interface{})` without `%w` may be altogether more suitable. Note that, more than an implementation detail, such standarisation is required if an error is to support formatting.\r\n- Phasing out type assertions: \r\nWhile the preferred error type checking is via `errors.Is` and `errors.As`, type assertions are still used widely. These will not work as expected under `WrapError`, \r\nsince the type of the error is always `WrapError` even if the last wrapped error is of the type being asserted.", "labels": ["Proposal"], "number_of_comments": 3, "created_at": "2020-02-03 13:04:54", "reactions": {"total_count": 4, "+1": 1, "-1": 3, "laugh": 0, "heart": 0, "hooray": 0}}, "558891883": {"author_username": "brunnre8", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36992, "title": "x/tools/gopls: reconsider placement of pkg.go.dev link in hover", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\ngo version go1.13.7 linux/amd64\r\n\r\ngolang.org/x/tools/gopls v0.3.0\r\n    golang.org/x/tools/gopls@v0.3.0 h1:l9KKK1/n6CIbfgaUvHBWAvCfOxcl1N+KSOK79OlPIao=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/sergi/go-diff@v1.0.0 h1:Kpca3qRNrduNnOQeazBd0ysaKrUJiIuISHxogkT9RPQ=\r\n    golang.org/x/mod@v0.1.1-0.20191105210325-c90efee705ee h1:WG0RUwxtNT4qqaXX3DPA8zHFNm/D9xaBpxzHt1WcA/E=\r\n    golang.org/x/sync@v0.0.0-20190423024810-112230192c58 h1:8gQV6CLnAEikrhgkHFbMAEhagSSnXWGV915qUMm9mrU=\r\n    golang.org/x/tools@v0.0.0-20200130224948-02f1738cbe39 h1:5ERHXLQfA0b8cHOwaOfWaaGekrA4+Ka/N74zilLnsIk=\r\n    golang.org/x/xerrors@v0.0.0-20191011141410-1b5146add898 h1:/atklqdjdhuosWIl6AIbOeHJjicWYPqR9bpxqxYG2pA=\r\n    honnef.co/go/tools@v0.0.1-2019.2.3 h1:3JgtbtFHMiCmsznwGVTUWbgGov+pVqnlf1dEJTNAXeM=\r\n    mvdan.cc/xurls/v2@v2.1.0 h1:KaMb5GLhlcSX+e+qhbRJODnUUBvlw01jt4yrjFIHAuA=\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n### Issue\r\ngopls v0.3.0 introduces go.dev links on hover.\r\n\r\nWhile this is in principle a good thing for some, currently it adds this to the top of the hover output.\r\nNow, this is the wrong order in my view as I don't want to switch to a browser when I have the hover documentation right there *in my editor*.\r\n\r\nCan the order be switched so that it puts the link at the end of the actual docs?\r\nThat still helps the people who'd like to see the link, but it's not a waste of space if the popup window is small for some reason.\r\n\r\n![Example](https://user-images.githubusercontent.com/16165454/73633140-351a2f00-465e-11ea-83bd-ff36661f84d2.jpeg)\r\n\r\n", "labels": ["Tools", "gopls"], "number_of_comments": 7, "created_at": "2020-02-03 07:22:33", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558791890": {"author_username": "euank", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36990, "title": "net/http: SameSiteDefaultMode adds an incorrect 'Set-Cookie' attribute", "body": "### Problem\r\n\r\nCurrently, `http.SameSite` offers the `http.SameSiteDefaultMode` option.\r\n\r\nThis is handled by code here:\r\n\r\nhttps://github.com/golang/go/blob/07ccdeb1927c77ede1d56ac6f1c1871183761ea4/src/net/http/cookie.go#L220-L229\r\n\r\nFor `SameSiteDefaultMode`, it adds `SameSite` (as a bare key, no `=`, no value) to the cookie.\r\n\r\nOn [older versions of chrome](https://bugs.chromium.org/p/chromium/issues/detail?id=635882), this results in the cookie being dropped entirely.\r\n\r\nThe draft specification for same-site makes it clear now that dropping the entire cookie is incorrect, but previously it [implied this was correct behavior](https://github.com/httpwg/http-extensions/pull/574), so I wouldn't be surprised if this issue existed elsewhere too.\r\n\r\nIf the current draft spec is implemented correctly, `SameSite` would be parsed as an unrecognised value, and would then result in the samesite attribute it being ignored entirely (that is to say, being treated the same as `http.SameSite(0)` where nothing is added to the `Set-Cookie` header).\r\n\r\nIt seems a bit silly to include an option in the http library to generate an invalid cookie attribute which the browser should just ignore.\r\n\r\n### Possible Solutions\r\n\r\nThe 2 solutions that make sense to me are the following:\r\n\r\n1. Do nothing. We can document this possible issue with `SameSiteDefaultMode` and recommend not using it at all.\r\n2. Have `SameSiteDefaultMode` be the same as `http.SameSite(0)`, where no `SameSite` attribute is included at all (which causes the browser to default to None or Lax, depending on version/browser).\r\n\r\nI think option 2 ends up most closely matching what people would expect `SameSiteDefaultMode` to do. Technically it's a backwards incompatible change, which is the only reason I think we may wish to go with option 1 instead.", "labels": ["ExpertNeeded", "NeedsInvestigation"], "number_of_comments": 4, "created_at": "2020-02-03 01:16:32", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558770603": {"author_username": "nicks", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36989, "title": "cmd/go/internal/vet: print line numbers appropriately on list errors", "body": "Fixes #36173\r\n\r\nFor reasons that are unclear to me, this commit:\r\nhttps://github.com/golang/go/commit/f1d5ce0185fe184c016016d55f1718778b799f6d\r\nintroduces a TestPackagesFor function that strips line numbers from error\r\nmessages. This commit introduces a new version of that function for 'go vet'\r\nthat always keeps the line numbers.\r\n", "labels": ["cla: yes"], "number_of_comments": 41, "created_at": "2020-02-02 22:44:19", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558763661": {"author_username": "jkassis", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36988, "title": "cmd/compile: compiler -L switch does not work", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n<pre>\r\n[I] xxxxx@Jeremys-MBP ~/C/ledgie> go version\r\ngo version go1.13.5 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nmacos 10.15.2\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n[I] jkassis@Jeremys-MBP ~/C/ledgie> go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/jkassis/Library/Caches/go-build\"\r\nGOENV=\"/Users/jkassis/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/jkassis/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/Cellar/go/1.13.5/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.13.5/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/Users/jkassis/Code/ledgie/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/mm/7l9_l1sn39n2kc_jpb8t0tnh0000gn/T/go-build372119512=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n<pre>\r\n[I] xxxxxx@Jeremys-MBP ~/C/ledgie> go build -gcflags=\"-L\"  dockie/main.go\r\n# github.com/jkassis/xxxxx.net/dockie/lib\r\ndockie/lib/schema.go:112:1: missing return at end of function\r\ndockie/lib/service.go:419:35: serviceDoc.V.String undefined (type *ServiceDocV has no field or method String)\r\n</pre>\r\n\r\n\r\n\r\n### What did you expect to see?\r\nfull paths in the errors list\r\n\r\n\r\n### What did you see instead?\r\npartial paths", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-02-02 21:48:27", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558756038": {"author_username": "geraldss", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36987, "title": "time: Time.Before() should reuse t.sec() and u.sec()", "body": "Looking at the source code for Time.After() and Time.Before(), Time.After() reuses t.sec() and u.sec(), whereas Time.Before() does not and often calls each method twice.\r\n\r\nhttps://golang.org/src/time/time.go", "labels": ["NeedsFix", "help wanted"], "number_of_comments": 2, "created_at": "2020-02-02 20:52:36", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558736423": {"author_username": "thepudds", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36985, "title": "go.dev: consider an 'api-documentation-license' file, or similar", "body": "https://pkg.go.dev/license-policy currently lists approximately 13 recognized open source licenses that pkg.go.dev currently detects and recognizes. If a repository has a license outside of those 13 licenses, the repository currently does not have its documentation displayed on pkg.go.dev, and might otherwise be at a disadvantage in terms of search and so on.\r\n\r\nIn the now-closed #36840, @eliasnaur offered a couple of different suggestions, including possibly a sentinel file such as something like `<reporoot>/.allow-sourceexplorers` as a way to indicate that a repository owner is granting permission to pkg.go.dev to display the API documentation.\r\n\r\nIANAL, but I could imagine a legal team not being satisfied with that as a clear enough indication of intent by the repository owner.\r\n\r\nPerhaps instead a variation could be a file called something like `api-documentation-license` or similar, with the contents of the file being the actual open source license that the repository owner is stating covers the API documentation. \r\n\r\nThis could enable someone to publish their code under a less common license that is not currently recognized by pkg.go.dev (such as the Unlicense), but pick a more common license that is recognized pkg.go.dev (such as MIT or BSD) to cover their API documentation so that pkg.go.dev could programmatically determine that it is allowed to index and display the package documentation.\r\n\r\nPerhaps the `api-documentation-license` file would just be the license itself, or perhaps it would be required to start with some type of canonical line, such as:\r\n\r\n```\r\nThe following license applies to the API documentation:\r\n\r\n<text of actual open source license for the API doc>\r\n```\r\n... or whatever verbiage might be acceptable to the legal team to make the intent and coverage of the license clear.\r\n\r\nCC @kortschak @rogpeppe", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 4, "created_at": "2020-02-02 18:29:52", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558712269": {"author_username": "mewmew", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36983, "title": "go.dev: provide insight into the criteria and selection process behind licenses approved by pkg.go.dev", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions, please email go-discovery-feedback@google.com.\r\n-->\r\n \r\n### What is the URL of the page with the issue?\r\n \r\nhttps://pkg.go.dev/github.com/llir/llvm/ir?tab=doc \r\n \r\n### What is your user agent?\r\n \r\n<!-- \r\nYou can find your user agent here:\r\nhttps://www.whatismybrowser.com/detect/what-is-my-user-agent\r\n-->\r\n \r\n Mozilla/5.0 (X11; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0\r\n \r\n### Screenshot\r\n \r\n<!--\r\nPlease paste a screenshot of the page.\r\n-->\r\n \r\n![screenshot_2020-02-02_16:24:57](https://user-images.githubusercontent.com/1414531/73610526-9bf50500-45d8-11ea-8a96-60a7cd04924a.png)\r\n \r\n### What did you do?\r\n \r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\n-->\r\n \r\n Try to navigate to the package documentation of [github.com/llir/llvm](https://github.com/llir/llvm) on `pkg.go.dev`.\r\n \r\n### What did you expect to see?\r\n \r\n Similar result to that of GoDoc.org. https://godoc.org/github.com/llir/llvm/ir\r\n \r\n### What did you see instead?\r\n\r\nNothing. `\u201cDoc\u201d not displayed due to license restrictions.`\r\n\r\n\r\n### Additional information\r\n\r\nNote, this issue is raised in light of the \"Next steps for pkg.go.dev\" article on the Go blog.\r\n\r\n> To minimize confusion about which site to use, later this year we are planning to redirect traffic from godoc.org to the corresponding page on pkg.go.dev. We need your help to ensure that pkg.go.dev addresses all of our users' needs. We encourage everyone to begin using pkg.go.dev today for all of their needs and provide feedback. \r\n\r\nPreventing users from browsing the documentation is definitely a regression. Thus redirecting from godoc.org to pkg.go.dev is not a valid solution, at least not for this project, until the issue with license detection has been resolved.", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 4, "created_at": "2020-02-02 15:27:15", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558706851": {"author_username": "icza", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36982, "title": "go.dev: serve status badge similar to godoc.org", "body": "### What did you do?\r\n\r\nIt would be nice to have a badge that can be used on other sites (e.g. github.com) that link to the documentation page of the module / package. \r\n\r\nFor example, using a URL like this:\r\n\r\nhttps://godoc.org/github.com/icza/bitio?status.svg \r\n \r\nServes an image, a badge which is often used on the package's repository to link to the documentation, like this one:\r\n\r\n[![GoDoc](https://godoc.org/github.com/icza/bitio?status.svg)](https://godoc.org/github.com/icza/bitio)\r\n\r\nA similar feature like\r\n\r\nhttps://pkg.go.dev/github.com/icza/bitio?status.svg\r\n \r\nWould be useful. Some configuration via URL parameters (like size, color etc) would also be cool.\r\n\r\n### What did you expect to see?\r\n \r\nTo have a badge image served similar to godoc.org's response. \r\n \r\n### What did you see instead?\r\n\r\nRequest is redirected to https://pkg.go.dev/github.com/icza/bitio?tab=doc and the HTML page is served.\r\n", "labels": ["FeatureRequest", "NeedsInvestigation", "go.dev"], "number_of_comments": 2, "created_at": "2020-02-02 14:48:07", "reactions": {"total_count": 25, "+1": 25, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558692642": {"author_username": "kortschak", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36981, "title": "runtime: async preemption support on ARM64 breaks ARM64 on QEMU", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\nThe change in 1b0b9809046c1862f8ea0240fe016e516c67676f breaks QEMU support for Go programs, resulting in a variety of crashes ranging from segmentation faults, illegal instructions and scheduler panics (holding locks). \r\n\r\nThis is partially recovered by the change in 73d20f8186a091c8d7e81b621136770981cf8e44 which prevents the crashes, but results in extremely poor performance; processes appear only able to use about 10-15% of a core compared to ~100% prior to 1b0b9809046c1862f8ea0240fe016e516c67676f.\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +1b0b980904 Thu Nov 7 19:18:12 2019 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nNo\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nNatively on amd64/linux, but qemu-user with `GOARCH=arm64`.\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"arm64\"\r\nGOBIN=\"/home/user/bin\"\r\nGOCACHE=\"/home/user/.cache/go-build\"\r\nGOENV=\"/home/user/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/user\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/user/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/user/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"0\"\r\nGOMOD=\"/dev/null\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build167327579=/tmp/go-build -gno-record-gcc-switches\"\r\n~ $ lsb_release -d\r\nDescription:\tUbuntu 18.04.3 LTS\r\n~ $ dpkg -l qemu-user qemu-system-common qemu-system-arm \r\nDesired=Unknown/Install/Remove/Purge/Hold\r\n| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend\r\n|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)\r\n||/ Name                          Version             Architecture        Description\r\n+++-=============================-===================-===================-===============================================================\r\nii  qemu-system-arm               1:2.11+dfsg-1ubuntu amd64               QEMU full system emulation binaries (arm)\r\nii  qemu-system-common            1:2.11+dfsg-1ubuntu amd64               QEMU full system emulation binaries (common files)\r\nii  qemu-user                     1:2.11+dfsg-1ubuntu amd64               QEMU user mode emulation binaries\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nIn a checkout of gonum.org/v1/gonum/lapack/gonum, run `GOARCH=arm64 go test -run Dgeev`\r\n\r\nI have tried to make a smaller reproducer, but have not managed yet.\r\n\r\n### What did you expect to see?\r\n\r\nOther expected package failures.\r\n\r\n\r\n### What did you see instead?\r\n\r\nA variety of crashes.", "labels": ["NeedsInvestigation", "help wanted"], "number_of_comments": 9, "created_at": "2020-02-02 12:54:35", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558691415": {"author_username": "A-UNDERSCORE-D", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36980, "title": "go.dev: add support for dark mode", "body": "### What is the URL of the page with the issue?\r\n All Pages (noticed explicitly on my first use, which was [os.ProcessState.Success](https://pkg.go.dev/os?tab=doc#ProcessState.Success))\r\n \r\n \r\n### What is your user agent?\r\n Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0\r\n \r\n### What did you expect to see?\r\n Support for my already configured system wide dark mode (via [CSS prefers-colour-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme))\r\n\r\nOr at the very least a toggle button somewhere to enable something less eye-searing for those of us working at night or in the dark\r\n \r\n \r\n### What did you see instead?\r\nI didnt. I was blinded.\r\n\r\nBut in all seriousness, a beautifully designed, if bright white docs page. Which instantly clashed with the rest of my system as it is configured to have a dark GTK theme, et al.\r\n\r\nOn the old godoc.org, I managed this though a stylus theme, but I'd much rather have first party support on pkg.go.dev.\r\n\r\n\r\n", "labels": ["FeatureRequest", "NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-02-02 12:44:05", "reactions": {"total_count": 7, "+1": 6, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558672743": {"author_username": "tiriplicamihai", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36979, "title": "os: document Pid field from Process", "body": "Explain what Pid field represents and that the value is not specified after waiting/releasing the process.\r\n\r\nFixes #36726\r\n\r\nThis PR will be imported into Gerrit with the title and first\r\ncomment (this text) used to generate the subject and body of\r\nthe Gerrit change.\r\n\r\n**Please ensure you adhere to every item in this list.**\r\n\r\nMore info can be found at https://github.com/golang/go/wiki/CommitMessage\r\n\r\n+ The PR title is formatted as follows: `net/http: frob the quux before blarfing`\r\n  + The package name goes before the colon\r\n  + The part after the colon uses the verb tense + phrase that completes the blank in,\r\n    \"This change modifies Go to ___________\"\r\n  + Lowercase verb after the colon\r\n  + No trailing period\r\n  + Keep the title as short as possible. ideally under 76 characters or shorter\r\n+ No Markdown\r\n+ The first PR comment (this one) is wrapped at 76 characters, unless it's\r\n  really needed (ASCII art, table, or long link)\r\n+ If there is a corresponding issue, add either `Fixes #1234` or `Updates #1234`\r\n  (the latter if this is not a complete fix) to this comment\r\n+ If referring to a repo other than `golang/go` you can use the\r\n  `owner/repo#issue_number` syntax: `Fixes golang/tools#1234`\r\n+ We do not use Signed-off-by lines in Go. Please don't add them.\r\n  Our Gerrit server & GitHub bots enforce CLA compliance instead.\r\n+ Delete these instructions once you have read and applied them\r\n", "labels": ["cla: yes"], "number_of_comments": 3, "created_at": "2020-02-02 10:00:25", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558669990": {"author_username": "Shukla-Ankur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36978, "title": "Go mod vendor fails to recognize go.mod changes", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.12.16 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nThe latest release gives another error-verifyinggo.mod: reading https://sum.golang.org/lookup/repo: 410 Gone\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/name/Library/Caches/go-build\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/name/Go\"\r\nGOPROXY=\"\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/f2/vy8173v12hl_yphqzsx2ldmc0000gp/T/go-build425746352=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\nCreated a private repo with a go.mod file\r\nUpdated the go.mod file to use a different version of a dependency\r\nRan ```go clean --modcache```\r\nran ```go clean -cache```\r\nran ```export GO111MODULE=on && go mod vendor```\r\n\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\nCode should build properly\r\n\r\n\r\n### What did you see instead?\r\ngo mod pulls the previous version of repo declared in go.mod file", "labels": ["WaitingForInfo"], "number_of_comments": 1, "created_at": "2020-02-02 09:35:27", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558659343": {"author_username": "Matts966", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36977, "title": "x/tools/go/analysis/passes/nilness: add -sound option", "body": "As of `ecb101e`, the `nilness` check is designed to be a complete static check, in other words, its diagnostics don't have false-positive cases.\r\n\r\nHowever, for the safety, we sometimes want a sound static check even with false positive issues. \r\n\r\nFor example, [facebook/infer](https://github.com/facebook/infer), checks the NPE with false-positive cases. The java code below is checked and causes `error: NULL_DEREFERENCE`.\r\n\r\n```java\r\nvoid mayCauseNPE(boolean option) {\r\n  if (option) {\r\n      Random rng = new Random();\r\n      Pointers.A a = Pointers.mayReturnNull(rng.nextInt());\r\n      // FIXME: should check for null before calling method()\r\n      a.method();\r\n  }\r\n}\r\nmayCauseNPE(false);\r\n```\r\n\r\nAccording to Rice's theorem, we can't get complete and sound diagnostics, so I think adding an option to switch between completeness and soundness is appropriate.\r\n\r\nThis requires at least 2 items below\r\n- checking functions, in which NPE can occur with nil arguments, and emitting diagnostics if they are called with nil arguments.\r\n- emitting diagnostics even with `unknown` (potentially nil) values", "labels": ["NeedsInvestigation", "Tools"], "number_of_comments": 11, "created_at": "2020-02-02 08:02:29", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558655677": {"author_username": "zikaeroh", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36976, "title": "dl/internal/version, dl/gotip: corrupted output on SIGQUIT", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +866920a Sat Feb 1 06:01:05 2020 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n1.13.7, no. Tip, yes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/jake/nobackup/gotip_home/cache\"\r\nGOENV=\"/home/jake/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/jake/nobackup/gotip_home/gopath\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/jake/sdk/gotip\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/jake/sdk/gotip/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/jake/testproj/badquit/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build408391790=/tmp/go-build -gno-record-gcc-switches\"\r\nGOROOT/bin/go version: go version devel +866920a Sat Feb 1 06:01:05 2020 +0000 linux/amd64\r\nGOROOT/bin/go tool compile -V: compile version devel +866920a Sat Feb 1 06:01:05 2020 +0000\r\nuname -sr: Linux 5.5.0-1-mainline\r\n/usr/lib/libc.so.6: GNU C Library (GNU libc) stable release version 2.30.\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRan code that blocked, like:\r\n\r\n```go\r\npackage main\r\n\r\nimport \"time\"\r\n\r\nfunc main() {\r\n\ttime.Sleep(time.Hour)\r\n}\r\n```\r\n\r\nThen, hit Ctrl+\\ to send SIGQUIT.\r\n\r\n\r\n### What did you expect to see?\r\n\r\n\"Good\" output with a back trace, register contents, etc. On 1.13.7, that's:\r\n\r\n```\r\n^\\SIGQUIT: quit\r\nPC=0x44f053 m=0 sigcode=128\r\n\r\ngoroutine 5 [syscall]:\r\nruntime.notetsleepg(0x4d4420, 0x34630b87115, 0x0)\r\n\t/usr/lib/go/src/runtime/lock_futex.go:227 +0x34 fp=0xc000034760 sp=0xc000034730 pc=0x409604\r\nruntime.timerproc(0x4d4400)\r\n\t/usr/lib/go/src/runtime/time.go:311 +0x2f1 fp=0xc0000347d8 sp=0xc000034760 pc=0x43edc1\r\nruntime.goexit()\r\n\t/usr/lib/go/src/runtime/asm_amd64.s:1357 +0x1 fp=0xc0000347e0 sp=0xc0000347d8 pc=0x44d151\r\ncreated by runtime.(*timersBucket).addtimerLocked\r\n\t/usr/lib/go/src/runtime/time.go:169 +0x10e\r\n\r\ngoroutine 1 [sleep]:\r\nruntime.goparkunlock(...)\r\n\t/usr/lib/go/src/runtime/proc.go:310\r\ntime.Sleep(0x34630b8a000)\r\n\t/usr/lib/go/src/runtime/time.go:105 +0x157\r\nmain.main()\r\n\t/home/jake/testproj/badquit/main.go:6 +0x30\r\n\r\nrax    0xfffffffffffffffc\r\nrbx    0x3b9a9b15\r\nrcx    0x44f053\r\nrdx    0x0\r\nrdi    0x4d4420\r\nrsi    0x80\r\nrbp    0xc0000346e8\r\nrsp    0xc0000346a0\r\nr8     0x0\r\nr9     0x0\r\nr10    0xc0000346d8\r\nr11    0x202\r\nr12    0xff\r\nr13    0x1ffffffffffffff\r\nr14    0x488494\r\nr15    0x39\r\nrip    0x44f053\r\nrflags 0x202\r\ncs     0x33\r\nfs     0x0\r\ngs     0x0\r\nexit status 2\r\n```\r\n\r\n### What did you see instead?\r\n\r\nThe output is broken very broken, as though it's being output twice simultaneously.\r\n\r\n```\r\n^\\SIGQUIT: quitSIGQUIT: quit\r\n\r\nPC=PC=0x456e600x489f38 m= m=00 sigcode= sigcode=128128\r\n\r\n\r\n\r\ngoroutine goroutine 01 [ [idlesyscall]:\r\n]:\r\nruntime.epollwait(0x3, 0x7ffeea76fe10, syscall.Syscall60x36ee7f00000080(, 0xf70x0, , 0x10x36ee7f, , 0xcce30x0, , 0xc000040c500x0, , 0x10000040x0, , 0x00x0, , 0x00x0, , ...0xc000040c90)\r\n, \t0x4948ec/home/jake/sdk/gotip/src/runtime/sys_linux_amd64.s, :0xc000098040705)\r\n +\t0x20/usr/lib/go/src/syscall/asm_linux_amd64.s\r\n:44runtime.netpoll +(0x50x34630b87429 fp=, 0xc000040c000xe0a18b77d01 sp=)\r\n0xc000040bf8\t pc=/home/jake/sdk/gotip/src/runtime/netpoll_epoll.go0x489f15:\r\n119 +os.(*Process).blockUntilWaitable0x92(\r\n0xc000092060, 0x33, 0xcc4316c500020300runtime.findrunnable, (0x30xc000022800)\r\n, 0x0\t)\r\n/usr/lib/go/src/os/wait_waitid.go\t:/home/jake/sdk/gotip/src/runtime/proc.go31:2323 + +0x72b0x98\r\n fp=0xc000040cf0runtime.schedule( sp=)\r\n0xc000040c00\t/home/jake/sdk/gotip/src/runtime/proc.go pc=:0x497d582520\r\nos.(*Process).wait +0x2fc(\r\n0xc000092060runtime.park_m, (0x4f3c200xc000000180, 0x4f3c28)\r\n, \t0x4f3c18/home/jake/sdk/gotip/src/runtime/proc.go)\r\n:2690\t +/usr/lib/go/src/os/exec_unix.go0x9d:\r\n22 +0x39 fp=runtime.mcall0xc000040d68( sp=0x00xc000040cf0)\r\n pc=\t/home/jake/sdk/gotip/src/runtime/asm_amd64.s:0x4952e9318\r\n +0x5bos.(*Process).Wait\r\n(...)\r\n\r\n\tgoroutine /usr/lib/go/src/os/exec.go1: [125sleep\r\n]:\r\nos/exec.(*Cmd).Wait(time.Sleep0xc0000a0000(, 0x34630b8a0000x0)\r\n, \t0x0/home/jake/sdk/gotip/src/runtime/time.go)\r\n:\t198/usr/lib/go/src/os/exec/exec.go +:0xba501\r\n +main.main0x60( fp=)\r\n0xc000040de0\t sp=/home/jake/testproj/badquit/main.go0xc000040d68: pc=60x4aa710 +\r\n0x30os/exec.(*Cmd).Run\r\n(\r\n0xc0000a0000rax    , 0xfffffffffffffffc0xc000089c00\r\n, rbx    0x340x36ee7f)\r\n\r\n\trcx    /usr/lib/go/src/os/exec/exec.go0x456e60:\r\n341rdx     +0x800x5c\r\n fp=rdi    0xc000040e080x3 sp=\r\n0xc000040de0rsi     pc=0x7ffeea76fe100x4a9bac\r\n\r\nrbp    0x7ffeea770410main.main\r\n(rsp    )\r\n0x7ffeea76fdc0\t\r\n/home/jake/go/pkg/mod/golang.org/dl@v0.0.0-20200128181350-716300cef114/gotip/main.gor8     :0x059\r\n +r9     0x5120x0 fp=\r\n0xc000040f60r10     sp=0x36ee7f0xc000040e08\r\n pc=r11    0x4ad7b20x246\r\n\r\nr12    runtime.main0x3\r\n(r13    )\r\n0x4dd640\t\r\n/usr/lib/go/src/runtime/proc.gor14    :0x48bba9203\r\n +r15    0x21e0x0 fp=\r\n0xc000040fe0rip     sp=0x456e600xc000040f60\r\n pc=rflags 0x42d87e0x246\r\n\r\nruntime.goexitcs     (0x33)\r\n\r\n\tfs     /usr/lib/go/src/runtime/asm_amd64.s0x0:\r\n1357gs      +0x00x1\r\n fp=0xc000040fe8 sp=0xc000040fe0 pc=0x457851\r\n\r\nrax    0xf7\r\nrbx    0xc000024500\r\nrcx    0x489f3a\r\nrdx    0xc000040c50\r\nrdi    0x1\r\nrsi    0xcce3\r\nrbp    0xc000040ce0\r\nrsp    0xc000040bf8\r\nr8     0x0\r\nr9     0x0\r\nr10    0x1000004\r\nr11    0x216\r\nr12    0xffffffffffffffff\r\nr13    0x3\r\nr14    0x2\r\nr15    0xaa\r\nrip    0x489f38\r\nrflags 0x216\r\ncs     0x33\r\nfs     0x0\r\ngs     0x0\r\nexit status 2\r\n```", "labels": ["NeedsInvestigation"], "number_of_comments": 15, "created_at": "2020-02-02 07:23:54", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558641967": {"author_username": "wadells", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36974, "title": "cmd/go: improve \"invalid pseudo-version: does not match version-control timestamp\" error message UX", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +866920a073 Sat Feb 1 06:01:05 2020 +0000 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, I found this in 1.13.5, and `devel +866920a073` is current as of a clone on 2020-02-01.\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/walt/Library/Caches/go-build\"\r\nGOENV=\"/Users/walt/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/walt/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/Users/walt/git/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/Users/walt/git/go/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/Users/walt/git/go/src/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/7y/j07kyx452vs7y90kkt0x27lm0000gn/T/go-build080166988=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI encountered a `go mod tidy` error in the wild (the cause of the error is irrelevant & fixed, the error message is what I want to focus on):\r\n\r\n<details><summary>Full Repro</summary><br>\r\n<pre>\r\n$ git clone https://github.com/gravitational/robotest\r\nCloning into 'robotest'...\r\nremote: Enumerating objects: 171, done.\r\nremote: Counting objects: 100% (171/171), done.\r\nremote: Compressing objects: 100% (109/109), done.\r\nremote: Total 4982 (delta 95), reused 103 (delta 58), pack-reused 4811\r\nReceiving objects: 100% (4982/4982), 1.02 MiB | 9.70 MiB/s, done.\r\nResolving deltas: 100% (3114/3114), done.\r\n$ cd robotest\r\n$ git checkout ced833702831\r\nNote: checking out 'ced833702831'.\r\n# snip 'detached HEAD' message\r\n</pre></details>\r\n<pre>\r\n$ go mod tidy\r\ngo: github.com/gravitational/trace@v0.0.0-20190626162700-a535a178675f: invalid pseudo-version: does not match version-control timestamp (2019-07-26T14:27:06Z)\r\n</pre>\r\n\r\n### What did you expect to see?\r\n\r\nIt would be nice if the error message date format matched the go.mod/go.sum date format.  This would allow for cut-and-paste-ability to fix the error.  Essentially, I believe the following two lines should use the same date format:\r\n\r\nhttps://github.com/golang/go/blob/1fb7d5472e8f46faaa034fe6e16ca66a1e7c766f/src/cmd/go/internal/modfetch/pseudo.go#L58\r\nhttps://github.com/golang/go/blob/1fb7d5472e8f46faaa034fe6e16ca66a1e7c766f/src/cmd/go/internal/modfetch/coderepo.go#L492\r\n\r\n### What did you see instead?\r\n\r\nI saw `2019-07-26T14:27:06Z` in the error message and did not realize that this datestamp was directly relatable to the corrupted `20190626162700` datestamp in the pseudo version.  I probably sank an hour or two tracking down the above lines and reinventing the following wheel:\r\n\r\n```\r\nTZ=UTC git show --date=format-local:%Y%m%d%k%M%S --format=%cd <SHA>\r\n```\r\n\r\nBefore I facepalmed and realized that the timestamp I wanted was in the error message all along, just formatted differently than what `go.mod` expected.", "labels": ["NeedsInvestigation", "modules"], "number_of_comments": 4, "created_at": "2020-02-02 04:43:06", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558621764": {"author_username": "jackc", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36973, "title": "proposal: net: non-blocking Read on Conn", "body": "I would like a way of efficiently reading any available data from a `net.Conn` without blocking.\r\n\r\nI'm the creator of the PostgreSQL database driver https://github.com/jackc/pgx. The PostgreSQL protocol is synchronous in almost all cases. The server typically does not send any unexpected messages. The overwhelming majority of network activity is simply sending a query and reading the response.\r\n\r\nHowever, on rare occasions the server will send an unsolicited message (e.g. server shutting down, server settings changed, listen / notify notifications, etc.). It would be very helpful to be able to check for a pending unread message before sending a query to the server.\r\n\r\nAs I understand it, the standard advice is to use a goroutine to read the `net.Conn` and pass received messages through a channel. (The other occasionally mentioned suggestion is to use `syscall.RawConn` and do non-blocking reads at a lower level, but I don't think that is possible when using a `*tls.Conn`). I built a proof of concept variation of the driver that used a goroutine and a buffered channel and it caused the overall runtime of a simple select to increase by 22% when connected to a server on the same host.\r\n\r\nIn addition to the unacceptable performance cost, it also greatly increases complexity to have to manage goroutines and channels. For example, the PostgreSQL copy protocol can be used to send large amounts of data to the server at once (potentially millions of rows). In theory, this could be done in a single `conn.Write(...)`. However, in rare occasions the server may send back data before the client has finished sending data. If both the client and the server send a large amount of data a deadlock will occur when the network buffers on either side fill up.\r\n\r\nI want to handle this with simple code like the following:\r\n\r\n```go\r\nfor buf, more := getNextChunk(); more {\r\n  conn.Write(buf)\r\n  // handle errors\r\n\r\n  conn.ReadNonBlocking(...)\r\n  // handle any messages the server sent us\r\n}\r\n```\r\n\r\nInstead, I have to use a couple goroutines and do concurrent reading and writing -- much more complicated than the idealized code above.\r\n\r\nOne of major advantages of Go is that I/O operations can be written in an easy to understand synchronous style instead of using callbacks, promises, or async -- the runtime handles it in the background. Even though Go's channels and goroutines make writing concurrent code easier it is still difficult and error prone. I don't want to do it unless I really have to. And the lack of a non-blocking read forces me to write concurrent code.", "labels": ["Proposal"], "number_of_comments": 5, "created_at": "2020-02-02 00:43:35", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558618956": {"author_username": "mattharrigan", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36972, "title": "proposal: Go 2: compiler chosen constants - make(const, <min>, <max>)", "body": "I propose adding compiler chosen constants. The use case is for constants that do not impact program correctness but do impact program performance. Some specific examples where this may be useful:\r\n\r\n- I recently watched a Gophercon [video ](https://youtu.be/oE_vm7KeV_E) which had two implementations for the same function, one using a linear search and another using a map. For \"small\" problems a linear search is often faster. The threshold which defines \"small\" can be hard to nail down, usually requiring quite a bit of manual benchmarking. Worse is that the number will likely change in future go releases or on different platforms. Explicitly telling the compiler that it can choose that threshold enables to compiler to do the hard work.\r\n- The size of a buffer is another item that may be arbitrary from a program correctness perspective but very important from a performance perspective.\r\n- The number of worker goroutines.\r\n- The initial size and growth rates of data structures\r\n\r\nI propose adding the capability to explicitly let the compiler choose the value of a constant. The programmer promises to ensure the program is correct regardless of the value. The compiler promises to choose the best value it can from a performance perspective. A trivial implementation could simply choose the midpoint. A much more complex implementation could estimate the cost of various values, perform actual benchmarking, or even produce code that determines the optimal value at runtime. The implementation could mature over time and the user would only notice improved performance.\r\n\r\nOne possible syntax is `make(const, <min>, <max>)`. For the first example above, it could be  `const linearSearchThreshold = make(const, 0, 100)`. I think that would be readily understood and consistent with go, but there are certainly variations possible.\r\n\r\nI believe this proposal is consistent with the go philosophy. The proposed feature is quite simple for a user of the language. It doesn't add any new keywords and may only take a sentence in the spec to explain. It also hides a significant amount of complexity from the user, somewhat like the garbage collector or the scheduler. It builds upon one of go's more interesting language features, const. Finally I believe it is orthogonal to the other language features.\r\n\r\nThank you for your time and consideration.\r\n", "labels": ["Go2", "LanguageChange", "Proposal"], "number_of_comments": 8, "created_at": "2020-02-02 00:11:16", "reactions": {"total_count": 4, "+1": 1, "-1": 3, "laugh": 0, "heart": 0, "hooray": 0}}, "558614667": {"author_username": "kortschak", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36971, "title": "cmd/compile: it is not possible to prevent FMA with complex values", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.6 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"arm64\"\r\nGOBIN=\"/home/user/bin\"\r\nGOCACHE=\"/home/user/.cache/go-build\"\r\nGOENV=\"/home/user/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/user\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/user/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/user/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"0\"\r\nGOMOD=\"/dev/null\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build515689865=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nExamine the assembly generated for the code at https://play.golang.org/p/JuTC-BPAIJN with `GOARCH=arm64`\r\n\r\n\r\n### What did you expect to see?\r\nNo FMA/FMS instructions emitted.\r\n\r\n\r\n### What did you see instead?\r\n```\r\n\t0x00ac 00172 (/home/user/c.go:19)\tPCDATA\tZR, $5\r\n\t0x00ac 00172 (/home/user/c.go:19)\tFMOVD\t8(R8), F4\r\n\t0x00b0 00176 (/home/user/c.go:19)\tFMSUBD\tF1, F3, F4, F3\r\n\t0x00b4 00180 (/home/user/c.go:19)\tSCVTFD\tR2, F5\r\n\t0x00b8 00184 (/home/user/c.go:19)\tFADDD\tF5, F3, F3\r\n\t0x00bc 00188 (/home/user/c.go:19)\tFMOVD\tF3, (R0)(R6)\r\n\t0x00c0 00192 (/home/user/c.go:19)\tFMULD\tF4, F0, F0\r\n\t0x00c4 00196 (/home/user/c.go:19)\tFMADDD\tF1, F0, F2, F0\r\n\t0x00c8 00200 (/home/user/c.go:19)\tFMOVD\tZR, F1\r\n\t0x00cc 00204 (/home/user/c.go:19)\tFADDD\tF0, F1, F0\r\n```\r\n\r\nNo amount of wrapping the operands in `complex128` prevents this AFAICS.", "labels": ["NeedsInvestigation"], "number_of_comments": 14, "created_at": "2020-02-01 23:27:14", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558599360": {"author_username": "sabey", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36970, "title": "cmd/vet: method Seek() should have signature Seek(int64, int)", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.6 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/jackson/.cache/go-build\"\r\nGOENV=\"/home/jackson/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/jackson/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build498302187=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n```\r\nfunc (self *File) Seek(\r\n\toffset int64,\r\n) (\r\n\tio.Reader,\r\n\terror,\r\n) {\r\n\treturn nil, nil\r\n}\r\n```\r\ngo vet\r\n\r\n\r\n\r\n### What did you expect to see?\r\nno error\r\n\r\nI do have the package \"io\" included, but I do also have a Read and Write method which go vet does not complain about\r\n\r\n\r\n### What did you see instead?\r\n`./file.go:286:19: method Seek(offset int64) (io.Reader, error) should have signature Seek(int64, int) (int64, error)`", "labels": ["NeedsInvestigation"], "number_of_comments": 6, "created_at": "2020-02-01 21:18:59", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558594061": {"author_username": "cespare", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36969, "title": "go.dev: search ranking ought to prioritize more recent major module versions", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions, please email go-discovery-feedback@google.com.\r\n-->\r\n \r\n### What is the URL of the page with the issue?\r\n \r\n https://pkg.go.dev/search\r\n \r\n### What is your user agent?\r\n \r\nN/A\r\n \r\n### Screenshot\r\n \r\nFor example, search for \"xxhash\":\r\n\r\nhttps://pkg.go.dev/search?q=xxhash\r\n\r\n![screen_20200201123259](https://user-images.githubusercontent.com/318501/73598582-0c275c00-44ef-11ea-8a4e-e42bc6406c63.png)\r\n \r\n### What did you do?\r\n \r\nSearched for \"xxhash\"\r\n\r\n### What did you expect to see?\r\n \r\nThe v2 module should be ranked above the old v1 module even if the v1 module has more importers or otherwise ranks higher according to the heuristics pkg.go.dev uses.\r\n\r\nEven better, IMO, the v1 wouldn't even show up as a separate search result. The module would appear once and if you visit the page you would see the v2 by default with a way to browse the older module versions.\r\n \r\n### What did you see instead?\r\n\r\nThe v1 module appears as the first search result, encouraging new users to use an old version of my module rather than the new one.", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-02-01 20:37:22", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558590504": {"author_username": "ainar-g", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36967, "title": "wiki: update the Modules page for Go 1.14", "body": "<p>\r\n<a href=\"https://github.com/golang/go/wiki/Modules\">The <i>Modules</i>\r\npage</a> currently only mentions Go 1.14 as the \u201cfinalisation\u201d release:\r\n</p>\r\n<blockquote>\r\n(\u2026)  Modules are an experimental opt-in feature in Go 1.11, with the\r\nplan of incorporating feedback and finalizing the feature for Go 1.14.\r\n(\u2026)\r\n</blockquote>\r\n<p>\r\nBut the page doesn't list the changes that were made to the\r\n<code>go</code> command in the <i>Recent Changes</i> section.  It\r\nprobably needs to be updated during the Go 1.14 release.\r\n</p>\r\n", "labels": ["Documentation", "NeedsInvestigation", "help wanted", "modules"], "number_of_comments": 2, "created_at": "2020-02-01 20:10:11", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558577358": {"author_username": "timmydo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36966, "title": "net/mail: skip empty entries in parseAddressList", "body": "RFC 5322 has a section 4.4 where it says that address-list could\r\nhave \"null\" members: \"That is, there could be two or more commas in\r\nsuch a list with nothing in between them, or commas at the beginning\r\nor end of the list.\" This change handles such a case so that mail\r\nclients using this method on actual email messages get a reasonable\r\nreturn value when they parse email.\r\n\r\nFixes #36959\r\n", "labels": ["cla: yes"], "number_of_comments": 17, "created_at": "2020-02-01 18:22:40", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558566047": {"author_username": "kirillx", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36964, "title": "cmd/compile: escape analysis on interface calls", "body": "### What version of Go are you using (`go version`)?\r\n1.13.1\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\non any OS / env\r\n\r\n### What did you do?\r\n`type myCtx struct {\r\n    data int\r\n}`\r\n\r\n`type interface if {\r\n   Call(ctx *myCtx)\r\n}`\r\n\r\n`ctx := myCtx{}`\r\n`i.Call(&ctx)   // i == interface of type 'if'`\r\n\r\n### What did you expect to see?\r\nctx allocated on stack (as Call() method was empty in my case).\r\n\r\n### What did you see instead?\r\nctx allocated on heap as escape analysis doesn't work through interface types. Compiler simply doesn't know the future of the pointer.\r\n\r\n### Suggestions\r\nAs interfaces are widely used in the language it seems quite important to be able to perform such optimisations.\r\nWhat if interface run-time type info had escape flag for the method. That would allow to generate code for both escaping interface calls and non-escaping ones.\r\n", "labels": ["NeedsInvestigation", "Performance"], "number_of_comments": 1, "created_at": "2020-02-01 16:53:16", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558502544": {"author_username": "zikaeroh", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36960, "title": "x/tools/gopls: creating a new file in a package causes import errors to show and disappear as the new file is edited", "body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n#### What did you do?\r\n\r\nIn my project (https://github.com/hortbot/hortbot), added a new file in the `bot` package, and typed `package bot`, then started to work in it.\r\n\r\n#### What did you expect to see?\r\n\r\nNo errors when I'm in a good state.\r\n\r\n#### What did you see instead?\r\n\r\nEvery time I edit the file, I can see the other files in the package flash red and back again. There are diagnostics being sent and then removed repeatedly on edit. Sometimes, I can edit the file, and they'll persist. Looking at the logs, it appears to be errors about imports.\r\n\r\nLogs: https://gist.github.com/zikaeroh/7a9674c79a34a35e3e8973ceffae5c3c\r\n\r\n#### Build info\r\n\r\n```\r\ngolang.org/x/tools/gopls master\r\n    golang.org/x/tools/gopls@v0.1.8-0.20200131211209-ecb101ed6550 h1:0NRGhttWS2Y5cK/h+uPZyIQewGG9mx0M3DRRkuMAjNU=\r\n    github.com/BurntSushi/toml@v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\r\n    github.com/sergi/go-diff@v1.0.0 h1:Kpca3qRNrduNnOQeazBd0ysaKrUJiIuISHxogkT9RPQ=\r\n    golang.org/x/mod@v0.1.1-0.20191105210325-c90efee705ee h1:WG0RUwxtNT4qqaXX3DPA8zHFNm/D9xaBpxzHt1WcA/E=\r\n    golang.org/x/sync@v0.0.0-20190423024810-112230192c58 h1:8gQV6CLnAEikrhgkHFbMAEhagSSnXWGV915qUMm9mrU=\r\n    golang.org/x/tools@v0.0.0-20200131211209-ecb101ed6550 h1:3Kc3/T5DQ/majKzDmb+0NzmbXFhKLaeDTp3KqVPV5Eo=\r\n    golang.org/x/xerrors@v0.0.0-20191011141410-1b5146add898 h1:/atklqdjdhuosWIl6AIbOeHJjicWYPqR9bpxqxYG2pA=\r\n    honnef.co/go/tools@v0.0.1-2019.2.3 h1:3JgtbtFHMiCmsznwGVTUWbgGov+pVqnlf1dEJTNAXeM=\r\n    mvdan.cc/xurls/v2@v2.1.0 h1:KaMb5GLhlcSX+e+qhbRJODnUUBvlw01jt4yrjFIHAuA=\r\n```\r\n\r\n#### Go info\r\n\r\n```\r\ngo version go1.13.7 linux/amd64\r\n\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/jake/.cache/go-build\"\r\nGOENV=\"/home/jake/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/jake/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/lib/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/lib/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/jake/zikaeroh/hortbot/hortbot/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build291942412=/tmp/go-build -gno-record-gcc-switches\"\r\n```\r\n", "labels": ["Tools", "gopls"], "number_of_comments": 3, "created_at": "2020-02-01 07:46:09", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558497441": {"author_username": "timmydo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36959, "title": "net/mail: parseAddressList doesn't allow commas with empty email address", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.5 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/timmy/.cache/go-build\"\r\nGOENV=\"/home/timmy/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/timmy/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build645469531=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nnet/mail/message.go parseAddressList doesn't allow commas with empty email address. I use an email client that uses this library and it fails to parse some emails. \r\n\r\nHere is an example from a mailing list:\r\n\r\n```\r\nCc: , emacs-devel@gnu.org\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nI think parseAddressList should filter out empty entries.\r\n\r\nRFC 5322 has a section about this. I think it would be nice if empty spaces between commas were passed over.\r\n\r\n```\r\n4.4.  Obsolete Addressing\r\n\r\n   There are four primary differences in addressing.  First, mailbox\r\n   addresses were allowed to have a route portion before the addr-spec\r\n   when enclosed in \"<\" and \">\".  The route is simply a comma-separated\r\n   list of domain names, each preceded by \"@\", and the list terminated\r\n   by a colon.  Second, CFWS were allowed between the period-separated\r\n   elements of local-part and domain (i.e., dot-atom was not used).  In\r\n   addition, local-part is allowed to contain quoted-string in addition\r\n   to just atom.  Third, mailbox-list and address-list were allowed to\r\n   have \"null\" members.  That is, there could be two or more commas in\r\n   such a list with nothing in between them, or commas at the beginning\r\n   or end of the list.  Finally, US-ASCII control characters and quoted-\r\n   pairs were allowed in domain literals and are added here.\r\n\r\n   obs-angle-addr  =   [CFWS] \"<\" obs-route addr-spec \">\" [CFWS]\r\n\r\n   obs-route       =   obs-domain-list \":\"\r\n\r\n   obs-domain-list =   *(CFWS / \",\") \"@\" domain\r\n                       *(\",\" [CFWS] [\"@\" domain])\r\n\r\n   obs-mbox-list   =   *([CFWS] \",\") mailbox *(\",\" [mailbox / CFWS])\r\n\r\n   obs-addr-list   =   *([CFWS] \",\") address *(\",\" [address / CFWS])\r\n```\r\n\r\n\r\n### What did you see instead?\r\n\r\n--- FAIL: TestAddressParsing (0.00s)\r\n    message_test.go:527: Failed parsing (single) \" , joe@where.test\": mail: no angle-addr\r\n", "labels": [], "number_of_comments": 4, "created_at": "2020-02-01 06:58:03", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558487556": {"author_username": "ianlancetaylor", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36958, "title": "x/build: riscv64 trybot is too slow", "body": "Right now on https://farmer.golang.org/try?commit=c2537a47, a trybot run for https://golang.org/cl/217305, every trybot completed hours ago, except for riscv64.  For that one I see at present\r\n\r\n```\r\nlinux-riscv64-unleashed rev c2537a47 (trybot set for Ib0a78ee); waiting_for_machine; (nil *buildlet.Client), 4h10m0s ago\r\n  2020-02-01T01:20:53Z checking_for_snapshot \r\n  2020-02-01T01:20:53Z finish_checking_for_snapshot after 0s\r\n  2020-02-01T01:20:53Z get_buildlet \r\n +14999.6s (now)\r\n```\r\n\r\nThis is too slow for a trybot.\r\n\r\nCC @dmitshur @toothrot @bradfitz ", "labels": ["Builders", "NeedsInvestigation", "arch-riscv"], "number_of_comments": 3, "created_at": "2020-02-01 05:34:36", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558428975": {"author_username": "seebs", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36955, "title": "proposal: Go 2: allow channel/map/type assertions in return (val, bool)", "body": "\r\n### What version of Go are you using (`go version`)?\r\n\r\n1.13\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nN/A\r\n\r\n### What did you do?\r\n\r\n```\r\nvar x map[string]int\r\nfunc foo(in string) (int, bool) {\r\n  v, ok := x[in]\r\n  return v, ok\r\n}\r\nfunc bar(in string) (int, bool) {\r\n  return x[in]\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nI don't know.\r\n\r\n### What did you see instead?\r\n\r\nSo, it seems to me that the special cases of channel receive, map lookup, and type assertion are unique in go in that they are *optionally* multivalued. But my intuition is that there are very few cases in go where you can write `x, y := expr; return x, y` but cannot write `return expr`, and I'm not sure there should be any. I don't think it's any *more* confusing to accept `return x[n]` both for a single return value of the map type, and for two where the second is a bool, than it is to have the existing map lookup syntax.", "labels": ["Go2", "LanguageChange", "Proposal", "Proposal-FinalCommentPeriod"], "number_of_comments": 10, "created_at": "2020-01-31 23:35:05", "reactions": {"total_count": 4, "+1": 0, "-1": 4, "laugh": 0, "heart": 0, "hooray": 0}}, "558401981": {"author_username": "qaisjp", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36954, "title": "go.dev: missing `.Header-menuItem--active` for About tab", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions, please email go-discovery-feedback@google.com.\r\n-->\r\n \r\n### What is the URL of the page with the issue?\r\n \r\n https://go.dev/about\r\n \r\n### What is your user agent?\r\n \r\n<!-- \r\nYou can find your user agent here:\r\nhttps://www.whatismybrowser.com/detect/what-is-my-user-agent\r\n-->\r\n \r\n Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36\r\n\r\n\r\n### What did you do?\r\n \r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\n-->\r\n \r\nClick the about page\r\n \r\n \r\n### What did you expect to see? (screenshot)\r\n \r\n \r\n![image](https://user-images.githubusercontent.com/923242/73578256-17d73c00-4477-11ea-81af-09ed38a87f73.png)\r\n\r\n \r\n### What did you see instead? (screenshot)\r\n\r\n![image](https://user-images.githubusercontent.com/923242/73578227-055d0280-4477-11ea-8012-ed84e2142402.png)\r\n\r\n\r\n", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-01-31 22:15:39", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558387384": {"author_username": "thejerf", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36952, "title": "go.dev: Default to sorting by imports/stars", "body": "As requested on https://blog.golang.org/pkg.go.dev-2020: I have found godoc.org to be the best way to search for _quality_ Go modules, significantly because it defaults to sorting by the number of imports (possibly informed by the number of stars).\r\n\r\nCompare: https://pkg.go.dev/search?q=smtp\r\n\r\nTo: https://godoc.org/?q=smtp\r\n\r\nObserve, for instance, that on godoc.org, Brad Fitz's smtpd server comes up early, whereas on pkg.go.dev the front page has several packages of much less importance, and smtpd shows up on page 17 after a lot of inner modules and minor forks and larger projects that just happen to have an \"smtp\" package. Prioritizing hits at the \"top level\" of the package is probably a good idea, too; github.com/blah/smtpd is much more likely to be what I'm looking for than github.com/blah/project/go/inner1/inner2/smtp.\r\n\r\nI also routinely suggest this to newcomers as a way of locating modules for Go.", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-01-31 21:41:22", "reactions": {"total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558381144": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36951, "title": "x/tools/gopls: orphaned files fallback fails in ad-hoc packages", "body": "Given the directory structure:\r\n\r\n```\r\na/\r\n\u2514\u2500\u2500 b\r\n    \u2514\u2500\u2500 main.go\r\n\r\n1 directory, 1 file\r\n```\r\n\r\nwhere `a` is outside of both GOPATH and a module, opening directory `a` will result in no diagnostics for `main.go`. The workspace load will fail because we will only load the top-level directory, but the orphaned file fallback should kick in so this is a bug.", "labels": ["Tools", "gopls"], "number_of_comments": 0, "created_at": "2020-01-31 21:26:24", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558364601": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36950, "title": "x/build/cmd/releasebot: build release binary in module mode", "body": "In the following method:\r\n\r\n```Go\r\nfunc (w *Work) buildReleaseBinary() {\r\n```\r\n\r\nThe [`golang.org/x/build/cmd/release`](https://pkg.go.dev/golang.org/x/build/cmd/release) binary is built explicitly in GOPATH mode, with a clean, deterministic GOPATH workspace.\r\n\r\n`releasebot` should be updated to build `release` binary in module mode.\r\n\r\nMaking the change may result in different versions of [its dependencies](https://pkg.go.dev/golang.org/x/build/cmd/release?tab=imports) being used:\r\n\r\n- cloud.google.com/go/storage\r\n- golang.org/x/sync/errgroup\r\n- google.golang.org/api/iterator\r\n\r\nWe should confirm that making this change won't influence a release negatively, and do the switch.\r\n\r\nBuilding the `release` binary should continue to be reproducible and unaffected by user's local environment. This can be done by overriding environment variables from environment with explicit ones, as it was done when building in GOPATH mode:\r\n\r\n```Go\r\nr := w.runner(w.Dir, \"GO111MODULE=off\", \"GOPATH=\"+gopath, \"GOBIN=\"+filepath.Join(gopath, \"bin\"))\r\nr.run(\"go\", \"get\", \"golang.org/x/build/cmd/release\")\r\n```", "labels": ["Builders", "NeedsFix", "help wanted", "modules"], "number_of_comments": 0, "created_at": "2020-01-31 20:47:25", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558361720": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36949, "title": "x/tools/gopls: VS Code breadcrumbs broken with methods ", "body": "See https://github.com/microsoft/vscode-go/issues/3021.", "labels": ["Tools", "gopls"], "number_of_comments": 1, "created_at": "2020-01-31 20:40:59", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558360469": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36948, "title": "x/build/cmd/releasebot: \"about to tag this commit, ok?\" prompt UX can be improved", "body": "In the following method:\r\n\r\n```Go\r\n// gitTagVersion tags the release candidate or release in Git.\r\nfunc (w *Work) gitTagVersion() {\r\n```\r\n\r\nIt asks the user:\r\n\r\n> About to tag the following commit as goX.Y.Z:\r\n> \r\n> [...]\r\n> \r\n> Ok? (y/n) \r\n\r\nI was used to pressing <kbd>Shift</kbd>+<kbd>Y</kbd> after using other apps like `gcloud components update`, which prompt:\r\n\r\n> Do you want to continue (Y/n)?  \r\n\r\nBut when I did, two things happened:\r\n\r\n1. `releasebot` interpreted upper \"Y\" as a negative response.\r\n2. `releasebot` \"stopped\" by panicking with an error message that wasn't very clear or helpful.\r\n\r\nExpand below for details:\r\n\r\n<details><br>\r\n\r\n```\r\n[...]\r\n2020/01/27 17:32:00 $ git rev-parse go1.13.7\r\nAbout to tag the following commit as go1.13.7:\r\n\r\ncommit 7d2473dc81c659fba3f3b83bc6e93ca5fe37a898\r\nAuthor: Dmitri Shuralyov <dmitshur@golang.org>\r\nDate:   Mon Jan 27 16:36:12 2020 -0500\r\n\r\n    [release-branch.go1.13-security] go1.13.7\r\n\r\n    Change-Id: I4e9b0a8eee1ea6a0854eab88a2daf77b21da549a\r\n    Reviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/649300\r\n    Reviewed-by: Katie Hockman <katiehockman@google.com>\r\n\r\ndiff --git a/VERSION b/VERSION\r\nindex a92889e5b6..ab1e52b611 100644\r\n--- a/VERSION\r\n+++ b/VERSION\r\n@@ -1 +1 @@\r\n-go1.13.6\r\n\\ No newline at end of file\r\n+go1.13.7\r\n\\ No newline at end of file\r\n\r\n\r\nOk? (y/n) Y\r\n2020/01/27 17:32:32 stopped\r\n2020/01/27 17:32:32\r\n\r\nPANIC: stopped\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack(0xc056a43960, 0x16033c0, 0xc058600030)\r\n\t/usr/local/go/src/runtime/debug/stack.go:24 +0x9d\r\nmain.(*Work).finally(0xc00fcdc0c0)\r\n\t/Users/dmitshur/go/pkg/mod/golang.org/x/build@v0.0.0-20200117212517-d3fb66653c7b/cmd/releasebot/main.go:237 +0x65\r\npanic(0x16033c0, 0xc058600030)\r\n\t/usr/local/go/src/runtime/panic.go:679 +0x1b2\r\nlog.(*Logger).Panic(0xc0528fb8b0, 0xc056a43b20, 0x1, 0x1)\r\n\t/usr/local/go/src/log/log.go:212 +0xaa\r\nmain.(*Work).gitTagVersion(0xc00fcdc0c0)\r\n\t/Users/dmitshur/go/pkg/mod/golang.org/x/build@v0.0.0-20200117212517-d3fb66653c7b/cmd/releasebot/git.go:92 +0x646\r\nmain.(*Work).doRelease(0xc00fcdc0c0)\r\n\t/Users/dmitshur/go/pkg/mod/golang.org/x/build@v0.0.0-20200117212517-d3fb66653c7b/cmd/releasebot/main.go:391 +0x5e0\r\nmain.main.func1(0xc03b80d3e0, 0x0, 0x0)\r\n\t/Users/dmitshur/go/pkg/mod/golang.org/x/build@v0.0.0-20200117212517-d3fb66653c7b/cmd/releasebot/main.go:114 +0x17b\r\ngolang.org/x/build/maintner.(*GitHubRepo).ForeachMilestone(0xc002200000, 0xc056a43f18, 0x173a1ac, 0x2)\r\n\t/Users/dmitshur/go/pkg/mod/golang.org/x/build@v0.0.0-20200117212517-d3fb66653c7b/maintner/github.go:139 +0x9c\r\nmain.main()\r\n\t/Users/dmitshur/go/pkg/mod/golang.org/x/build@v0.0.0-20200117212517-d3fb66653c7b/cmd/releasebot/main.go:101 +0x4c0\r\n\r\n## Latest build: go1\\.13\\.7\r\n\r\nsrc not started\r\nlinux\\-386 not started\r\nlinux\\-armv6l not started\r\nlinux\\-amd64 not started\r\nlinux\\-arm64 not started\r\nfreebsd\\-386 not started\r\nfreebsd\\-amd64 not started\r\nwindows\\-386 not started\r\nwindows\\-amd64 not started\r\ndarwin\\-amd64 not started\r\nlinux\\-s390x not started\r\nlinux\\-ppc64le not started\r\n\r\n## Log\r\n\r\n    2020/01/27 17:31:52 starting\r\n    2020/01/27 17:31:52 working in /Users/dmitshur/go-releasebot-work/go1.13.7\r\n    2020/01/27 17:31:52 $ git fetch origin master\r\n    2020/01/27 17:31:53 $ git fetch origin release-branch.go1.13-security\r\n    2020/01/27 17:31:55 $ git clone --reference /Users/dmitshur/go-releasebot-work/go1.13.7/gitmirror -b release-branch.go1.13-security sso://team/golang/go-private /Users/dmitshur/go-releasebot-work/go1.13.7/gitwork\r\n    2020/01/27 17:31:59 $ git codereview change relwork\r\n    2020/01/27 17:32:00 $ git config gc.auto 0\r\n    2020/01/27 17:32:00 $ git rev-parse go1.13.7\r\n    2020/01/27 17:32:32 stopped\r\n    2020/01/27 17:32:32\r\n\r\n    PANIC: stopped\r\n\r\n    goroutine 1 [running]:\r\n    runtime/debug.Stack(0xc056a43960, 0x16033c0, 0xc058600030)\r\n    \t/usr/local/go/src/runtime/debug/stack.go:24 +0x9d\r\n    main.(*Work).finally(0xc00fcdc0c0)\r\n    \t/Users/dmitshur/go/pkg/mod/golang.org/x/build@v0.0.0-20200117212517-d3fb66653c7b/cmd/releasebot/main.go:237 +0x65\r\n    panic(0x16033c0, 0xc058600030)\r\n    \t/usr/local/go/src/runtime/panic.go:679 +0x1b2\r\n    log.(*Logger).Panic(0xc0528fb8b0, 0xc056a43b20, 0x1, 0x1)\r\n    \t/usr/local/go/src/log/log.go:212 +0xaa\r\n    main.(*Work).gitTagVersion(0xc00fcdc0c0)\r\n    \t/Users/dmitshur/go/pkg/mod/golang.org/x/build@v0.0.0-20200117212517-d3fb66653c7b/cmd/releasebot/git.go:92 +0x646\r\n    main.(*Work).doRelease(0xc00fcdc0c0)\r\n    \t/Users/dmitshur/go/pkg/mod/golang.org/x/build@v0.0.0-20200117212517-d3fb66653c7b/cmd/releasebot/main.go:391 +0x5e0\r\n    main.main.func1(0xc03b80d3e0, 0x0, 0x0)\r\n    \t/Users/dmitshur/go/pkg/mod/golang.org/x/build@v0.0.0-20200117212517-d3fb66653c7b/cmd/releasebot/main.go:114 +0x17b\r\n    golang.org/x/build/maintner.(*GitHubRepo).ForeachMilestone(0xc002200000, 0xc056a43f18, 0x173a1ac, 0x2)\r\n    \t/Users/dmitshur/go/pkg/mod/golang.org/x/build@v0.0.0-20200117212517-d3fb66653c7b/maintner/github.go:139 +0x9c\r\n    main.main()\r\n    \t/Users/dmitshur/go/pkg/mod/golang.org/x/build@v0.0.0-20200117212517-d3fb66653c7b/cmd/releasebot/main.go:101 +0x4c0\r\n\r\n\r\n~ $\r\n```\r\n\r\n</details>\r\n\r\nI suggest two changes to make things better for future releases:\r\n\r\n1. Make `releasebot` ask for and accept upper case \"Y\" in addition to lower case \"y\".\r\n\r\n2. Make the panic error message more descriptive than just \"stopped\", so it's faster to realize that `releasebot` is exiting because it received a negative answer. Additionally, exit with `log.Fatalf` rather than printing a panic stack trace.\r\n\r\nFor comparison, this is `gcloud components update` response to a negative answer:\r\n\r\n```\r\n[...]\r\nDo you want to continue (Y/n)?  no\r\n\r\n~ $ \r\n```", "labels": ["Builders", "NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-01-31 20:38:02", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558352096": {"author_username": "nwidger", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36946, "title": "x/net/http2: SetKeepAlivesEnabled(false) closes all HTTP/2 connections older than 5 seconds", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version 1.13.7\r\ngo version go1.13.7 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/niels/.cache/go-build\"\r\nGOENV=\"/home/niels/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/niels/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/niels/sdk/go1.13.7\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/niels/sdk/go1.13.7/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build412221026=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nHere is a play.golang.org link for a program which reproduces the issue:\r\n\r\nhttps://play.golang.org/p/7mPbWhl7QeA\r\n\r\nit may be necessary to save it to a `main.go` file and run it manually with\r\n\r\n```\r\n$ go run main.go\r\n```\r\n\r\nHere is an example output from running the program:\r\n\r\n```\r\n2020/01/31 15:04:28 server: listening on 127.0.0.1:8443\r\n2020/01/31 15:04:30 client: request 1: sent\r\n2020/01/31 15:04:30 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46770: state new\r\n2020/01/31 15:04:30 http2 connstate: 127.0.0.1:8443 -> 127.0.0.1:46770: state active\r\n2020/01/31 15:04:30 http2 connstate: 127.0.0.1:8443 -> 127.0.0.1:46770: state idle\r\n2020/01/31 15:04:30 http2 connstate: 127.0.0.1:8443 -> 127.0.0.1:46770: state active\r\n2020/01/31 15:04:33 http2 connstate: 127.0.0.1:8443 -> 127.0.0.1:46770: state idle\r\n2020/01/31 15:04:33 client: request 1: response: 200: received request 1 over http2\r\n2020/01/31 15:04:33 client: request 2: sent\r\n2020/01/31 15:04:33 http2 connstate: 127.0.0.1:8443 -> 127.0.0.1:46770: state active\r\n2020/01/31 15:04:36 http2 connstate: 127.0.0.1:8443 -> 127.0.0.1:46770: state idle\r\n2020/01/31 15:04:36 client: request 2: response: 200: received request 2 over http2\r\n2020/01/31 15:04:36 client: request 3: sent\r\n2020/01/31 15:04:36 http2 connstate: 127.0.0.1:8443 -> 127.0.0.1:46770: state active\r\n2020/01/31 15:04:39 http2 connstate: 127.0.0.1:8443 -> 127.0.0.1:46770: state idle\r\n2020/01/31 15:04:39 client: request 3: response: 200: received request 3 over http2\r\n2020/01/31 15:04:39 client: request 4: sent\r\n2020/01/31 15:04:39 http2 connstate: 127.0.0.1:8443 -> 127.0.0.1:46770: state active\r\n2020/01/31 15:04:39 ========== disabling keep alives ==========\r\n2020/01/31 15:04:39 http2 connstate: 127.0.0.1:8443 -> 127.0.0.1:46770: state idle\r\n2020/01/31 15:04:39 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46770: state closed\r\n2020/01/31 15:04:39 Get https://127.0.0.1:8443/: unexpected EOF\r\nexit status 1\r\n```\r\n\r\nThe program starts up an HTTPS server and has a client send it requests in a loop.  Importantly, both the client and server are configured to use HTTP/2 over TLS and the client reuses a single TCP connection for each request.  The handler for the HTTPS server blocks for 3 seconds and then sends back its response.  On the fourth request, once we can be sure that the client connection has been open for at least 5 seconds, `SetKeepAlivesEnabled(false)` is called on the server within the handler of the request, before the response has been written out.\r\n\r\n### What did you expect to see?\r\n\r\nAfter the call to `SetKeepAlivesEnabled`, I expected the requests sent by the client to continue working as normal.  The documentation for `SetKeepAlivesEnabled` claims only to disable HTTP keep-alives, however by looking at the source code one can see it also apparently calls a method called `closeIdleConns`.  However, because we are calling `SetKeepAlivesEnabled` within the handler of a request that has not yet been responded to yet, clearly this connection is not idle.  The documentation for `StateIdle` is defined to be:\r\n\r\n```\r\n    // StateIdle represents a connection that has finished\r\n    // handling a request and is in the keep-alive state, waiting\r\n    // for a new request. Connections transition from StateIdle\r\n    // to either StateActive or StateClosed.\r\n```\r\n\r\n### What did you see instead?\r\n\r\nThe connection is closed by `SetKeepAlivesEnabled` via `closeIdleConns` and the client request fails, coming back with an `unexpected EOF` error.  I believe this is ultimately due to the fact that the HTTP/2 code keeps its own connection state bookkeeping which is not shared with the HTTP/1 server.  Using the `http.Server.ConnState` hook and some sneaky use of the `runtime` package, the logs in the example output above show that, according to the HTTP/1 server, the connection never transitions out of the `StateNew` state while the HTTP/2 code transitions it between `StateActive` and `StateIdle` with each new request on the connection.\r\n\r\nAdd to that this heuristic within `closeIdleConns`:\r\n\r\n```go\r\n\t\t// Issue 22682: treat StateNew connections as if\r\n\t\t// they're idle if we haven't read the first request's\r\n\t\t// header in over 5 seconds.\r\n\t\tif st == StateNew && unixSec < time.Now().Unix()-5 {\r\n\t\t\tst = StateIdle\r\n\t\t}\r\n```\r\n\r\nand you get the outcome that any HTTP/2 connection that has been open for longer than 5 seconds will be closed by a call to `SetKeepAlivesEnabled(false)`.  This heuristic was apparently introduced by #22682.\r\n\r\nYou can run the example program with both the client and the server configured to use HTTP/1 by passing `-http=false`:\r\n\r\n```\r\n$ go run main.go -http2=false\r\n```\r\n\r\nwhich shows that the client requests continue working after the call to `SetKeepAlivesEnabled(false)`.  Here is an example output running with HTTP/1:\r\n\r\n```\r\n2020/01/31 15:10:23 server: listening on 127.0.0.1:8443\r\n2020/01/31 15:10:25 client: request 1: sent\r\n2020/01/31 15:10:25 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46950: state new\r\n2020/01/31 15:10:25 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46950: state active\r\n2020/01/31 15:10:28 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46950: state idle\r\n2020/01/31 15:10:28 client: request 1: response: 200: received request 1 over http1\r\n2020/01/31 15:10:28 client: request 2: sent\r\n2020/01/31 15:10:28 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46950: state active\r\n2020/01/31 15:10:31 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46950: state idle\r\n2020/01/31 15:10:31 client: request 2: response: 200: received request 2 over http1\r\n2020/01/31 15:10:31 client: request 3: sent\r\n2020/01/31 15:10:31 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46950: state active\r\n2020/01/31 15:10:34 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46950: state idle\r\n2020/01/31 15:10:34 client: request 3: response: 200: received request 3 over http1\r\n2020/01/31 15:10:34 client: request 4: sent\r\n2020/01/31 15:10:34 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46950: state active\r\n2020/01/31 15:10:34 ========== disabling keep alives ==========\r\n2020/01/31 15:10:34 ==========  disabled keep alives ==========\r\n2020/01/31 15:10:37 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46950: state closed\r\n2020/01/31 15:10:37 client: request 4: response: 200: received request 4 over http1\r\n2020/01/31 15:10:37 client: request 5: sent\r\n2020/01/31 15:10:37 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46960: state new\r\n2020/01/31 15:10:37 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46960: state active\r\n2020/01/31 15:10:40 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46960: state closed\r\n2020/01/31 15:10:40 client: request 5: response: 200: received request 5 over http1\r\n2020/01/31 15:10:40 client: request 6: sent\r\n2020/01/31 15:10:40 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46962: state new\r\n2020/01/31 15:10:40 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46962: state active\r\n2020/01/31 15:10:43 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46962: state closed\r\n2020/01/31 15:10:43 client: request 6: response: 200: received request 6 over http1\r\n2020/01/31 15:10:43 client: request 7: sent\r\n2020/01/31 15:10:43 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46966: state new\r\n2020/01/31 15:10:43 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46966: state active\r\n2020/01/31 15:10:46 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46966: state closed\r\n2020/01/31 15:10:46 client: request 7: response: 200: received request 7 over http1\r\n2020/01/31 15:10:46 client: request 8: sent\r\n2020/01/31 15:10:46 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46970: state new\r\n2020/01/31 15:10:46 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46970: state active\r\n2020/01/31 15:10:49 http1 connstate: 127.0.0.1:8443 -> 127.0.0.1:46970: state closed\r\n2020/01/31 15:10:49 client: request 8: response: 200: received request 8 over http1\r\n```\r\n\r\nPlease let me know if I can provide any additional information about the issue.\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 7, "created_at": "2020-01-31 20:19:58", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558331173": {"author_username": "rolandshoemaker", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36945, "title": "crypto/x509: add RFC 5280/X509v2 compliant CRL generation function", "body": "The existing Certificate.CreateCRL method generates non-conformant CRLs and\r\nas such cannot be used for implementations that require standards\r\ncompliance. This change implements a new top level method, CreateCRL, which\r\ngenerates compliant CRLs, and offers an extensible API if any\r\nextensions/fields need to be supported in the future.\r\n\r\nFixes #35428", "labels": ["cla: yes"], "number_of_comments": 13, "created_at": "2020-01-31 19:36:35", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558323330": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36944, "title": "x/website, x/blog: rewrite relative links as absolute when embedding a blog post", "body": "Most blog posts use absolute links when pointing to other blog posts or pages on blog.golang.org, but there are some that use relative links, and blog post authors may pick one or the other. When reading blog posts at https://blog.golang.org, both work.\r\n\r\nRelative links become broken when embedded directly on the golang.org website, because they start being relative to golang.org rather than the intended blog.golang.org domain.\r\n\r\nSee #36930 where this happened.\r\n\r\nEither the website should rewrite relative links so they are not broken, or if that is too disruptive, then a test should be added that would catch when blog post authors use relative links.", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-01-31 19:20:02", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558320672": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36943, "title": "x/tools/gopls: reduce memory usage", "body": "This is a general tracking issue for memory usage in `gopls`. We need to collect data and set goals for usage for a given project size. We also need to work towards reducing the memory usage when staticcheck is enabled (though that may be a separate issue).\r\n\r\n#### If you have a specific problem with `gopls` using too much memory on your machine, please create a new issue so that we can investigate it separately.  \r\n\r\nPlease include your VS Code settings and heap profiles with your issue. These can be collected by adding the following settings to your VS Code `settings.json`:\r\n\r\n```json\r\n\"go.languageServerFlags\": [\r\n    \"-rpc.trace\",\r\n    \"serve\",\r\n    \"--debug=localhost:6060\"\r\n]\r\n```\r\n\r\nand running `go tool pprof -http :8080 http://localhost:6060/debug/pprof/heap`. For other editors, see details [here](https://github.com/golang/tools/blob/master/gopls/doc/troubleshooting.md#other-editors).", "labels": ["Performance", "Tools", "gopls"], "number_of_comments": 9, "created_at": "2020-01-31 19:14:21", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558318033": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36942, "title": "x/tools/gopls: reduce CPU usage", "body": "`gopls` hogs the user's CPU when they are typing quickly, as it starts type-checking on every keystroke. We should debounce requests or otherwise reduce the frequency of type-checking as a user is editing their file.", "labels": ["Performance", "Tools", "gopls"], "number_of_comments": 5, "created_at": "2020-01-31 19:08:28", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558315669": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36940, "title": "go.dev: support searching for internal packages", "body": "For example: https://pkg.go.dev/search?q=internal%2Flsp should return results including https://pkg.go.dev/golang.org/x/tools/internal/lsp?tab=doc.", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 2, "created_at": "2020-01-31 19:03:16", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558307368": {"author_username": "jonjohnsonjr", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36938, "title": "encoding/json: fix broken link to json.org", "body": "This updates the link to a newer image.", "labels": ["cla: yes"], "number_of_comments": 7, "created_at": "2020-01-31 18:46:26", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558240986": {"author_username": "ucirello", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36935, "title": "go.dev: the website doesn't prevent viewport resize", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions, please email go-discovery-feedback@google.com.\r\n-->\r\n \r\n### What is the URL of the page with the issue?\r\n\r\nhttps://pkg.go.dev/crypto/tls?tab=doc \r\n \r\n \r\n### What is your user agent?\r\n \r\nMozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.136 Mobile Safari/537.36 \r\n \r\n \r\n### Screenshot\r\nCheck the screenshots below\r\n\r\n \r\n \r\n \r\n### What did you do?\r\n \r\nOpened the page from a link sent by someone else.\r\n \r\n \r\n \r\n### What did you expect to see?\r\n \r\nThe perfect filled space that we currently have for godoc.org\r\n![image](https://user-images.githubusercontent.com/138827/73557040-61873e80-4405-11ea-9f2c-ed91f520e08e.png)\r\n\r\n \r\n \r\n### What did you see instead?\r\n![image](https://user-images.githubusercontent.com/138827/73557008-53392280-4405-11ea-81cf-48eed4606fc8.png)\r\n\r\n\r\n\r\n", "labels": ["go.dev"], "number_of_comments": 0, "created_at": "2020-01-31 16:41:43", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558240142": {"author_username": "icholy", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36934, "title": "go.dev: rename \"pkg\" subdomain to \"doc\"", "body": "### What is the URL of the page with the issue?\r\n \r\n https://pkg.go.dev/\r\n\r\n### Problems\r\n \r\n* Having the first character be \"p\" makes typing the url difficult.\r\n* It's inconsistent with previous documentation tools `godoc.org`, `go doc`, `godoc`.\r\n\r\n### Alternative\r\n\r\nhttps://doc.go.dev/\r\n", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 3, "created_at": "2020-01-31 16:39:57", "reactions": {"total_count": 23, "+1": 15, "-1": 6, "laugh": 1, "heart": 0, "hooray": 0}}, "558223650": {"author_username": "firelizzard18", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36931, "title": "go.dev: some packages on godoc.org are not accessible on pkg.go.dev", "body": "In response to [Next steps for pkg.go.dev](https://blog.golang.org/pkg.go.dev-2020):\r\n>## Redirecting godoc.org requests to pkg.go.dev\r\n>To minimize confusion about which site to use, later this year we are planning to redirect traffic from godoc.org to the corresponding page on pkg.go.dev. We need your help to ensure that pkg.go.dev addresses all of our users needs.\r\n\r\nSome packages that are documented on godoc.org are not accessible on pkg.go.dev. For example, `github.com/go-stomp/stomp` has documentation on [godoc.org](https://godoc.org/github.com/go-stomp/stomp) but [pkg.go.dev](https://pkg.go.dev/github.com/go-stomp/stomp?tab=overview) shows \"displayed due to license restrictions.\"\r\n\r\nI understand the reasoning behind pkg.go.dev's license restrictions, but as long as they are in place, godoc.org meets a need that pkg.go.dev does not.", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 3, "created_at": "2020-01-31 16:11:08", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558204417": {"author_username": "ucirello", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36929, "title": "go.dev: bookmarklet to navigate from repository to doc doesn't work", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions, please email go-discovery-feedback@google.com.\r\n-->\r\n \r\n### What is the URL of the page with the issue?\r\nhttps://github.com/golang/tools\r\n \r\n \r\n### What is your user agent?\r\n \r\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36\r\n \r\n \r\n### Screenshot\r\n \r\n<!--\r\nPlease paste a screenshot of the page.\r\n-->\r\n![image](https://user-images.githubusercontent.com/138827/73552102-790df980-43fc-11ea-83cc-d7edc1934fc6.png)\r\n\r\n \r\n \r\n \r\n### What did you do?\r\n \r\n1. Browse to https://github.com/golang/tools\r\n1. replace the bookmarklet base url from `godoc.org` to `pkg.go.dev`\r\n1. invoke bookmarklet\r\n \r\n \r\n### What did you expect to see?\r\nhttps://pkg.go.dev/github.com/golang/tools\r\n(which is the equivalent of https://godoc.org/github.com/golang/tools)\r\n \r\n \r\n### What did you see instead?\r\nThe home page with the URL pre-filled in.\r\n\r\n\r\n", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-01-31 15:38:44", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "558139463": {"author_username": "palmamartin", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36928, "title": "x/text/language: possible error in the handler example of the package documentation", "body": "On line [36](https://github.com/golang/text/blob/master/language/doc.go#L36) of the documentation the cookie value is passed using `lang.String()` to `language.MatchStrings` . I assume it should be `lang.Value` instead.\r\n\r\nCurrent documentation:\r\n```go\r\nlang, _ := r.Cookie(\"lang\")\r\n...\r\ntag, _ := language.MatchStrings(matcher, lang.String(), accept)\r\n```\r\nProposed fix:\r\n```go\r\nlang, _ := r.Cookie(\"lang\")\r\n...\r\ntag, _ := language.MatchStrings(matcher, lang.Value, accept)\r\n```\r\n\r\nIf my proposed solution is right I can provide CL to fix the documentation.", "labels": ["Documentation", "NeedsInvestigation"], "number_of_comments": 2, "created_at": "2020-01-31 13:42:23", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557962738": {"author_username": "codenoid", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36921, "title": "net/http/cookiejar: add a disk backed persistent CookieJar", "body": "hi mr, sorry for this silly issue, but can we have this feature in Go ?, i think as a battery-included language, we should have this feature mr.\r\n\r\nnb : Python has this feature by the way, https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.FileCookieJar", "labels": ["NeedsInvestigation", "help wanted"], "number_of_comments": 4, "created_at": "2020-01-31 07:30:36", "reactions": {"total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557921970": {"author_username": "jcrowgey", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36920, "title": "cmd/vendor: create modules.txt even for unused deps", "body": "`go mod vendor`  should create vendor/modules.txt even when the only deps\r\nin go.mod are unused.\r\n\r\nFixes: #36580 \r\n", "labels": ["cla: yes"], "number_of_comments": 26, "created_at": "2020-01-31 05:25:32", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557909367": {"author_username": "nhooyr", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36919, "title": "compress/flate: Allow resetting writer with new dictionary", "body": "As of Go 1.14, compress/flate's Writer only allows resetting the write side with the same dictionary.\r\n\r\nIn contrast, the Reader can be reset with a new dictionary.\r\n\r\nI need this to efficiently implement context takeover compression for WebSockets.\r\n\r\nSee https://tools.ietf.org/html/rfc7692#section-7.1.1\r\n\r\ncc @klauspost ", "labels": ["NeedsDecision", "Performance"], "number_of_comments": 11, "created_at": "2020-01-31 04:41:05", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557886362": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36918, "title": "x/tools/gopls: determine how frequently to reload packages with missing dependencies", "body": "Currently, when a user's package has a dependency that we can't resolve, we try to reload the package on every key stroke. We take care not to re-check it unless the metadata has changed, but it's still expensive to call `packages.Load` on every keystroke.\r\n\r\nI wonder if we might be able to somehow make use of the `goimports` scanning logic in `gopls` to do this in a better way. It's possible that we can't do better in GOPATH mode (or in another build system), but I'd think we might be able to do something better in module mode. \r\n\r\n@heschik: Is this a reasonable idea, or should we just stick with the current approach?", "labels": ["Tools", "gopls"], "number_of_comments": 1, "created_at": "2020-01-31 03:13:56", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557846959": {"author_username": "eric-s-raymond", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36915, "title": "runtime: allow map hashes with different tradeoffs", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\ngo version go1.13.4 linux/amd64\r\nesr@snark:~/WWW/reposurgeon$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/esr/.cache/go-build\"\r\nGOENV=\"/home/esr/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/esr/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/lib/go-1.13\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/lib/go-1.13/pkg/tool/linux_amd64\"\r\nGCCGO=\"/usr/bin/gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/esr/WWW/reposurgeon/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build890210982=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nWrote a complicated data transformation using maps heavily.  Observed that after I did enough optimization, map hashing costs actually competed with GC as a performance bottleneck.\r\n\r\nThis is where the standard bug template stops being useful.  The problem I see is that the choice of aeshash512 is more expensive than is right for my application, and I can't fix that.\r\n\r\nI'm not arguing with the choice to optimize for cryptographic hardness over performance by default; given Golang's intended role as a language for network servers this was sensible. But my application - reposurgeon - doesn't need that hardening, and is paying a significant performance cost for it.\r\n\r\nTherefore, this RFE: Offer a runtime switch that allows plugging in a weaker but faster hash.\r\n\r\n \r\n", "labels": ["NeedsInvestigation", "Performance"], "number_of_comments": 10, "created_at": "2020-01-31 00:55:04", "reactions": {"total_count": 1, "+1": 0, "-1": 1, "laugh": 0, "heart": 0, "hooray": 0}}, "557801280": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36911, "title": "x/tools/gopls: support language features for text/template, html/template", "body": "See discussion on https://github.com/microsoft/vscode-go/issues/228.", "labels": ["FeatureRequest", "Tools", "gopls"], "number_of_comments": 0, "created_at": "2020-01-30 22:43:25", "reactions": {"total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557755765": {"author_username": "kirillx", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36910, "title": "encoding/base64: improve performance up to 40% total", "body": "Improve base64 encoding/decoding performance by:\r\n1. removing not needed allocations on []byte<->string conversions\r\n2. by suppressing compiler boundary checks on decode.", "labels": ["cla: yes"], "number_of_comments": 4, "created_at": "2020-01-30 21:12:17", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557745993": {"author_username": "awelc", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36909, "title": "x/tools/go/packages: Load function throws \"argument list too long\" error", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.4 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGOARCH=\"amd64\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\n</pre></details>\r\n\r\n### What is the problem?\r\n\r\nI am trying to analyze a large application using Go's static analysis support. I am using the [\"packages\"](https://godoc.org/golang.org/x/tools/go/packages) package to load all application packages using the [Load](https://godoc.org/golang.org/x/tools/go/packages#Load) function.  Unfortunately the application is really big and the list of patterns that the Load function takes the second parameter is really long. This causes a problem on Mac OS as in this case it leads to the \"argument list too long\" error popping up after the Load function is called. The reason for it is that internally, the Load function executes \"go list\" command passing it the list of patterns as arguments, which leads to exceeding the limit established by Mac OS (which, as far as I can tell, cannot be changed).\r\n\r\nThe usual workaround for this problem is to split the argument list and apply a given function incrementally to each list fragment - in this case it would mean calling the Load function multiple times with a different subset of the patterns list at each invocation. This, however, does not quite work, as it messes up the SSA representation that I need to generate afterwards using [AllPackages](https://godoc.org/golang.org/x/tools/go/ssa/ssautil#AllPackages) function from the [\"ssautil\"](https://godoc.org/golang.org/x/tools/go/ssa/ssautil) package. The AllPackages function constructs a [program](https://godoc.org/golang.org/x/tools/go/ssa#Program) that contains a [\"file set\"](https://godoc.org/go/token#FileSet) containing all files constituting the program. As far as I can tell, the only way to access this file set during analysis is via the program itself. And this is the gist of the problem, incremental application of the Load function creates a \"file set\" per increment, and the resulting program during SSA construction will assign only one to the program, making the remaining ones inaccessible during analysis.\r\n\r\nWhat would be great is to have an API-level solution that would allow incremental loading of packages.\r\n", "labels": ["NeedsFix", "Tools", "help wanted"], "number_of_comments": 2, "created_at": "2020-01-30 20:51:50", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557720958": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36905, "title": "all: update standard-library dependencies at the start and end of each code freeze", "body": "The `x` dependencies vendored into the standard library (via `src/go.mod` and `src/cmd/go.mod`) should be updated for each code freeze, so that we can apply any needed fixes to those dependencies without _also_ pulling in unnecessary changes or requiring significant backporting work (see, for example, #36851).\r\n\r\nThis task, like #11811, #12042, and the API audit (#36167, #32813), should occur regularly in each development cycle. Probably we should update the dependencies at the beginning of each code freeze, and again when we reopen the tree at the end of each code freeze.\r\n\r\nCC @golang/osp-team ", "labels": ["NeedsFix", "release-blocker"], "number_of_comments": 3, "created_at": "2020-01-30 20:02:59", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557711155": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36904, "title": "x/tools/gopls: support case insensitive file systems", "body": "`gopls` doesn't support case-insensitive file systems. VS Code always sends lower-case drive letters, but if a user sets their GOPATH to `C://bob/go`, `go list` will return upper-case drive letters. At that point, `gopls` will think it did not get metadata for the given file, and it will not work correctly.", "labels": ["Tools", "gopls"], "number_of_comments": 2, "created_at": "2020-01-30 19:46:28", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557707768": {"author_username": "husio", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36903, "title": "os: error testing functions respect Unwrapper interface", "body": "Go 1.13 introduced an optional support for the Unwrap method. This\r\nchange to the os package updates that package error testing functions to\r\nconsider Unwrap method of the tested error.", "labels": ["cla: yes"], "number_of_comments": 5, "created_at": "2020-01-30 19:40:03", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557700600": {"author_username": "CyrusNajmabadi", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36902, "title": "cmd/go: 'go get' appears to have no way to specify a branch in it that contains a `/`", "body": "Extracting this bug out of the doc conversation that happened here https://github.com/golang/go/issues/30851\r\n\r\nCurrently `go get` claims to be able to allow you to get a module hosted at a location with a given branch name.  i.e. `go get github.com/pulumi/pulumi@some_branch`.  However, there seems to be no way to make this work if the branch has a `/` in it.  i.e. neither `go get github.com/pulumi/pulumi@cyrusn/somefix` nor `go get github.com/pulumi/pulumi@features/2.0` work.\r\n\r\nThis effectively makes `go get` and modules non-viable for projects that use a very common and *legal* naming strategy for branches. Note that both `git` and `github` are fine with this sort of naming, and it's encouraged in many repos (as it helps keep the list of branches from getting very cluttered).\r\n\r\n`go get` should not arbitrarily restrict the set of branch names it accepts.  \r\n\r\nWorkarounds:\r\nYou can write `go get ...@deadbeef`. however this only gives you a point-in-time version of the module.  There does not seem to be a way to get all the functionality normaly present with a branch-link if the branch contains a `/`.", "labels": ["NeedsInvestigation", "WaitingForInfo", "modules"], "number_of_comments": 3, "created_at": "2020-01-30 19:25:20", "reactions": {"total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557674651": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36899, "title": "x/tools/gopls: defining the workspace root", "body": "`gopls` supports both module and GOPATH modes. However, we need to define a scope in which language features like references, rename, and implementation should operate. The following is subject to, and will likely, change.\r\n\r\nFor now, we have the following cases:\r\n\r\n### Module mode\r\n\r\n#### Supported\r\n- Open workspace at the module root (directory containing the `go.mod` file). The scope is the entire module.\r\n- Open a subdirectory of a module. The scope is the subdirectory that has been opened.\r\n\r\n#### Unsupported\r\n- Open a directory that contains a module in a subdirectory. `gopls` will not work in this case.\r\n\r\n### GOPATH mode\r\n\r\n#### Supported\r\n- Open a directory inside of your GOPATH. The scope is the open directory.\r\n\r\n#### At your own risk\r\n- Open your entire GOPATH. The workspace scope will be your entire `GOPATH`. Note that this will cause `gopls` to load your entire GOPATH. If your GOPATH is large, this will take a long time and cause `gopls` to be very slow.\r\n\r\nTo work around this case, you can create a new GOPATH that contains only the packages you want to work on.\r\n\r\n#### Unsupported\r\n- Open a directory containing your GOPATH. Similar to the case above, this will cause `gopls` to treat your entire GOPATH as the workspace scope. It will be very slow to start because it will try to find all of the Go files in the directory you have opened. It will then load all of the files it has found.\r\n\r\n---\r\n\r\nWe are working on addressing all of these cases and improving the behavior of `gopls` in the unsupported cases. All of these cases will be supported once `gopls` reaches `v1.0.0`. \r\n\r\nWe understand it may be inconvenient to change your typical workflow to accommodate frequent changes in `gopls`. In this case, it may be easier to stick with a version of `gopls` that works for you (`gopls/v0.2.2`, for instance), or if you are using GOPATH, `gopls` may not be the best tool to use until it reaches `v1.0.0`. \r\n\r\nIf you have additional use cases that are not mentioned above, please comment below.\r\n", "labels": ["Tools", "gopls"], "number_of_comments": 2, "created_at": "2020-01-30 18:31:50", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557666233": {"author_username": "mvdan", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36898, "title": "x/website: have endpoint to query for the latest bugfix version", "body": "### Background\r\n\r\nhttps://github.com/golang/go/issues/34864 covers documenting the endpoint better. Right now, it's documented at https://godoc.org/golang.org/x/website/internal/dl. Listing the versions is very useful, so that endpoint is great.\r\n\r\nHowever, there is one common operation that's not covered by the endpoint: showing the latest Go patch release for a major version like 1.12 or 1.13. This is useful to quickly download and install such a latest version, or to use it for a line like `docker run golang:$(<query> 1.13.x) ...`, and so on.\r\n\r\nCI systems like Travis or GitHub Actions allow you to specify `1.13.x` as a Go version in their configs. Internally, they query `/dl?mode=json`, and figure out what the latest version is. That's fine, because that software is pretty complex anyway, so a bit of JSON parsing is not terrible.\r\n\r\nHowever, this gets harder when one is writing shell script one-liners, or portable scripts in general. There's just no way to do it in POSIX Shell or even Bash, let alone shells for other systems.\r\n\r\n`/VERSION?m=text` almost satisfies this purpose, but it only shows the latest single release (not 1.12.x, 1.11.x, etc), and it sometimes [lags behind](https://github.com/golang/go/issues/36886) even days after a newer release has gone out.\r\n\r\n### Proposed solution\r\n\r\nGiven that `/VERSION` is a static file and not an endpoint, I'm going to suggest that we extend the existing `/dl` endpoint instead. But this choice can be changed.\r\n\r\nWe don't want the result to be JSON, for the reasons laid out before. So the first step is adding `?mode=text` alongside `?mode=json`. Similar to `/VERSION?m=text`, it simply prints one version name per line, and nothing else. This is already useful by itself; one could figure out the absolute latest version via `curl .../dl?mode=text | sed 1q`, for example.\r\n\r\nTo support querying for the latest bugfix version for a particular \"major\" release like 1.12, we'd add another parameter `latest`: `/dl?mode=text&latest=1.12.x`. Given a string `${version}.x`, it returns the latest bugfix release for that version. The version must be in the format `${number}.{number}`, and the suffix `.x` must be present, to avoid ambiguity with 1.12 (actually 1.12.0).\r\n\r\nQueries like `/dl?mode=json&latest=1.12.x` should also work, doing what you'd imagine. Instead of returning one line with just the version name, you'd get a JSON element with the structured data for the release in question.\r\n\r\n/cc @dmitshur @myitcv @andybons ", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-01-30 18:15:00", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557655704": {"author_username": "josharian", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36897, "title": "cmd/compile: possible latent codegen issue on amd64 removing zero extensions", "body": "I'm not sure whether it is possible to trigger this bug right now, but I think there may be an issue lurking.\r\n\r\nConsider code like:\r\n\r\n```go\r\nfunc f(x uint32) uint64 {\r\n\treturn uint64(x & 0xFFFFFFFF)\r\n}\r\n```\r\n\r\nThe outmost op is `ZeroExt32to64`, which gets lowered to `MOVLQZX`. The innermost op ends up being `(ANDLconst [0xFFFFFFFF] x)`.\r\n\r\nThen this rule triggers: `(MOVLQZX x) && zeroUpper32Bits(x,3) -> x`. `ANDLconst` is among the ops listed as zeroing the upper 32 bits of a register, so we eliminate the zero extension.\r\n\r\nThen this rule triggers: `(ANDLconst [c] x) && int32(c)==-1 -> x`, eliminating the `ANDLconst`.\r\n\r\nThis leaves us with just `x`, but without any zero extension, which could leave junk in the top half of the register.\r\n\r\nAs it stands, this doesn't happen in this function, because the And32 is eliminated during generic optimization. But there are ways to sneak an `& -1` past generic optimization, e.g. with a constant shift, which is how I discovered this issue. We are also saved in this case by using a MOVL to load the value from an arg. But we could be using a computed value instead. So I haven't convinced myself that this couldn't actually cause bad code generation right now for just the right input.\r\n\r\nThere are two possible diagnoses/fixes:\r\n\r\n* zeroUpper32Bits assumes that the inner op actually gets executed, which is wrong, in which case we need to pare back the list of accepted ops, probably to only loads, which I think cannot be eliminated at that point (?), since dse occurs earlier\r\n* the ANDLconst rule is unsound because eliminating it eliminates the side-effects of zeroing the top half of the register\r\n\r\nI'm strongly inclined to the first diagnosis and fix. Thoughts?\r\n\r\ncc @randall77 @cherrymui \r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 3, "created_at": "2020-01-30 17:52:41", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557643696": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36896, "title": "x/tools/gopls: references limited to workspace root", "body": "If you open a subdirectory of a module, we will only load packages below that subdirectory, so the results of find references/rename/implementation will be only local to that workspace root, i.e. the subdirectory.", "labels": ["Tools", "gopls"], "number_of_comments": 0, "created_at": "2020-01-30 17:27:47", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557581522": {"author_username": "ridersofrohan", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36894, "title": "x/tools/go/expect: add better marker support for // indirect in go.mod files", "body": "Currently in `go/expect` when a user wants to add a marker for `go.mod` files, we have a special case if they are trying to mark `// indirect`:\r\n\r\n```\r\n//@mark(IndirectMarker, \"// indirect\")\r\nrequire golang.org/x/tools v0.0.0-20191219192050-56b0b28a00f7 // indirect\r\n```\r\n\r\nThis is a little confusing and is the only case where the marker has to be on the line above. As a result, there should be a better way to do this that is more intuitive that does not require having a special case just for this.\r\n\r\nThis issue is an extension of #36091 \r\n\r\n/cc @stamblerre @ianthehat ", "labels": ["NeedsInvestigation", "Tools"], "number_of_comments": 0, "created_at": "2020-01-30 15:47:29", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557411401": {"author_username": "kamstrup", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36893, "title": "cmd/go: panic when building github.com/DataDog/zstd with buildmode=shared", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/kamstrup/.cache/go-build\"\r\nGOENV=\"/home/kamstrup/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/kamstrup/.watchly-dev/gopath\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/kamstrup/.watchly-dev/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/kamstrup/.watchly-dev/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/kamstrup/Axiom/eventdb/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build747900966=/tmp/go-build -gno-record-gcc-switches\"\r\nGOROOT/bin/go version: go version go1.12.8 linux/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.12.8\r\nuname -sr: Linux 4.15.0-1066-oem\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 18.04 LTS (beaver-three-eyed-raven X92)\r\nRelease:\t18.04\r\nCodename:\tbionic\r\n/lib/x86_64-linux-gnu/libc.so.6: GNU C Library (Ubuntu GLIBC 2.27-3ubuntu1) stable release version 2.27.\r\ngdb --version: GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```\r\n$ go build -buildmode=shared -linkshared github.com/DataDog/zstd\r\npanic: runtime error: slice bounds out of range [:-2]\r\n\r\ngoroutine 1 [running]:\r\ncmd/go/internal/load.(*Package).load(0xc0000d0900, 0xc00017d910, 0xc000098a80, 0x0, 0x0)\r\n\t/usr/local/go/src/cmd/go/internal/load/pkg.go:1491 +0x36db\r\ncmd/go/internal/load.loadImport(0xc000374e50, 0x7ffc2dc96267, 0x17, 0xc000024124, 0x1c, 0x0, 0xc00017d910, 0x0, 0x0, 0x0, ...)\r\n\t/usr/local/go/src/cmd/go/internal/load/pkg.go:511 +0xdf2\r\ncmd/go/internal/load.PackagesAndErrors(0xc0000c6040, 0x1, 0x1, 0x0, 0x0, 0x0)\r\n\t/usr/local/go/src/cmd/go/internal/load/pkg.go:1982 +0x398\r\ncmd/go/internal/load.PackagesForBuild(0xc0000c6040, 0x1, 0x1, 0xa3a510, 0x2, 0x1)\r\n\t/usr/local/go/src/cmd/go/internal/load/pkg.go:2028 +0x5d\r\ncmd/go/internal/work.runBuild(0xea3280, 0xc0000c6040, 0x1, 0x1)\r\n\t/usr/local/go/src/cmd/go/internal/work/build.go:316 +0x88\r\nmain.main()\r\n\t/usr/local/go/src/cmd/go/main.go:189 +0x57f\r\n```\r\n\r\nI have `github.com/DataDog/zstd v1.4.4` in my `go.mod`\r\n\r\n### What did you expect to see?\r\nNot a crash :-) If I build my program with a plain old `go build XYZ` command everything works well.\r\n\r\n", "labels": ["NeedsInvestigation", "WaitingForInfo"], "number_of_comments": 5, "created_at": "2020-01-30 10:47:55", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557395671": {"author_username": "empijei", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36892, "title": "x/website/cmd/golangorg: Add Content Security Policy", "body": "CSP is an important protection against some of the higher risk web vulnerabilities and the official Go website doesn't currently adopt it.\r\n\r\nMoreover CSP is a internal requirement for any website hosted on *.google.eTLD and the Go website is currently also hosted on golang.google.cn.\r\n\r\nI can take care of fixing this or finding someone that can work on it if the proposal is accepted.\r\n\r\n/cc @dmitshur @andybons", "labels": ["NeedsFix"], "number_of_comments": 1, "created_at": "2020-01-30 10:20:30", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557356610": {"author_username": "kirillx", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36891, "title": "bytes: LastIndexByte is significantly slower than IndexByte", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.1 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nBoth Linux/MacOS\r\n\r\n### What did you do?\r\n\r\nI was using multipart.NewReader() to process multi-part responses from Cloud REST API.\r\nIt turned out that ~1/3 of profile is spent in mime/multipart/multipart.go :: scanUntilBoundary() -> bytes.LastIndexByte().\r\n\r\nAfter looking into it, it is no wonder as bytes.LastIndexByte() is not using any optimisations and compiled into simple loop iterating over bytes, no REP SCASB instruction is used on Intel (nor SSE).\r\n\r\n### What did you expect to see?\r\n\r\nbytes.LastIndexByte() to use SSE or at least REP SCASB optimised code.\r\n\r\n### What did you see instead?\r\n\r\nsimple byte to byte loop in asm code.\r\n", "labels": ["NeedsDecision", "Performance"], "number_of_comments": 1, "created_at": "2020-01-30 09:10:29", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557331999": {"author_username": "jfcg", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36890, "title": "proposal: Go 2: permit converting a string constant to a byte array type", "body": "byte slices and strings are convertable to each other:\r\n```\r\nvar bs = []byte(\"\u015fevk\u0131\")\r\nfmt.Println(len(bs), string(bs))\r\n```\r\nI propose to extend this by allowing to convert:\r\n- string constants to byte arrays:\r\n```\r\nvar ba = [...]byte(\"\u015fevk\u0131\")\r\n```\r\n- byte arrays to strings\r\n```\r\nvar ba = [...]byte{20, 40, 60}\r\nvar s = string(ba)\r\n```\r\nAlso:\r\n```\r\n// should not compile\r\nvar ba = [6]byte(\"\u015fevk\u0131\")\r\n\r\n// ok\r\nvar ba = [7]byte(\"\u015fevk\u0131\")\r\n\r\n// pad with zeros\r\nvar ba = [8]byte(\"\u015fevk\u0131\")\r\n```\r\n\r\nI believe this is backward-compatible with Go 1. What do you think?", "labels": ["Go2", "LanguageChange", "Proposal"], "number_of_comments": 21, "created_at": "2020-01-30 08:15:09", "reactions": {"total_count": 12, "+1": 10, "-1": 0, "laugh": 0, "heart": 1, "hooray": 0}}, "557300448": {"author_username": "josharian", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36889, "title": "cmd/compile: prove misses obvious facts about constants", "body": "I noticed that left shifts by a constant are not being marked as bounded by prove. Prove consults ft.limits, but ft.limits doesn't contain limits for constants. Something similar happens for some other ops with easy limits.\r\n\r\nThis is pretty straightforward to fix: Write a wrapper around ft.limits accesses that generates limits in cases like these.\r\n\r\nI have a prototype CL of this, and it mostly helps. But before it can be mailed, I need to investigate and fix a few more minor regressions from it. (The compiler is quite sensitive to the order in which optimizations occur.)\r\n\r\nAnd before doing that, I wanted to check in about whether this was even the right kind of fix here.\r\n\r\ncc @zdjones @rasky \r\n", "labels": ["NeedsInvestigation", "Performance"], "number_of_comments": 2, "created_at": "2020-01-30 06:52:34", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557274911": {"author_username": "duffiye", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36888, "title": "cmd/go: unclear error message when applying a 'replace' directive with an absolute path and explicit version", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo1.13\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/duffiye/Library/Caches/go-build\"\r\nGOENV=\"/Users/duffiye/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/duffiye/code/golang\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://goproxy.cn,direct\"\r\nGOROOT=\"/usr/local/opt/go/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/opt/go/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/Users/duffiye/code/erp/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/mh/k6gqtvlj1s1fkz6brhkp6j2r0000gn/T/go-build412083276=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\ngo mod edit -replace=github.com/apache/rocketmq-client-go@v0.0.0=/Users/duffiye/code/rocketmq-client-go@latest\r\n\r\nmalformed module path \"/Users/duffiye/code/rocketmq-client-go\": empty path element\r\n\r\n\r\n\r\n### What did you expect to see?\r\nreplace  pkg github.com/apache/rocketmq-client-go\r\n\r\n### What did you see instead?\r\n", "labels": ["NeedsInvestigation", "WaitingForInfo", "modules"], "number_of_comments": 1, "created_at": "2020-01-30 05:27:47", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557269378": {"author_username": "gsbhasin123", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36887, "title": "proposal: sort: add InvertSlice", "body": "Golang should have an InvertSlice() function in some module (preferably `sort`), which essentially reverses all slice elements. This would allow some neat features like string reversal.\r\n\r\nThis is easy to implement and will not break code. Please consider the proposal.", "labels": ["Proposal"], "number_of_comments": 54, "created_at": "2020-01-30 05:07:11", "reactions": {"total_count": 2, "+1": 1, "-1": 1, "laugh": 0, "heart": 0, "hooray": 0}}, "557226145": {"author_username": "atishpatel", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36884, "title": "proposal: Go 2: explicit nil and pointer param", "body": "# Summary\r\nAt compile time, there should be a way to specify you can't pass nil into the function call but it's still a pointer. \r\n\r\nPointers are awesome and there are many reason to use a pointer such as not having to copy a param, being able to mutate a param, etc. But, using pointer is makes you prone to nil pointers, and people who use your functions often try to pass nil and you have to handle this. I genuinely think there is potential here for a way to improve the developer experience by providing compile time errors for invalid nil pointers. \r\n\r\nSide note: One of the main reasons I love Golang is because it's an opinionated statically typed language that provides a great developer experience. I get lint warnings if i don't add proper comments and that is wonderful.\r\n\r\n# Current options - landmine runtime error\r\nCheck all params for nil and panic or return error.\r\n\r\n```go\r\nfunc example(param1 *Type1, param2 *Type2) (*Result, error) {\r\n  if (param1 == nil) {\r\n  // or perhaps better to panic so a developer isn't caught by a runtime error in prod\r\n   return nil, fmt.Errorf(\"Param1 cannot be nil\")\r\n }\r\n  if (param2 == nil) {\r\n  // or perhaps better to panic so a developer isn't caught by a runtime error in prod\r\n   return nil, fmt.Errorf(\"Param2 cannot be nil\")\r\n }\r\n\r\n// actual function logic\r\n} \r\n````\r\n# Goal\r\n```go\r\nfunc foo(a <- chan int) *Type1{\r\n    if <-a < 0 {\r\n        return nil\r\n    }\r\n    return newType1(a)\r\n}\r\n\r\nfunc example(a #Type1) {\r\n    ...\r\n}\r\n\r\ngo func(){\r\n    // read from network\r\n    ch <- fromNetwork()\r\n}\r\n// Compile error: cannot use  untype nil as type *Type1 in argument to example\r\nexample(foo(ch)) \r\n\r\nv  := foo(ch)\r\nif v != nil {\r\n  // compiles successfully\r\n  example(v)\r\n}\r\n\r\nvar newVar *Type1\r\n// Compile error: cannot use newVar (untype nil) as type *Type1 in argument to example\r\nexample(newVar)\r\n\r\nnewVar = &Type1{}\r\n// compiles successfully\r\nexample(newVar)\r\n\r\n\r\nfunc call(t *Type1) {\r\n if t == nil {\r\n   return\r\n }\r\n  // compiles successfully\r\n  example(t)\r\n}\r\n```\r\n\r\n# Proposal 1 - non-nil pointer character - backward compatible \r\nIntroduce a character that implies a non-nil-able pointer. In this example, the character is `#`.\r\n```go\r\nfunc example(param1 *Type1, param2 #Type2) (*Result, error) {\r\n```\r\nIn this case, `param1` could be nil but `param2` would give a compile time error if someone passed in nil.\r\n\r\nI'm not an expert at the language so perhaps someone else can tell me if there is a better way than this.\r\n\r\n# Alternative Proposal 2 - Not Nil Union Type - backward compatible \r\nThis is more elegant but it could break people's code on library updates. For example, if you are relying on a library that updated to use this, your code would give compile time errors saying you can't use nil here. But, perhaps it is good because if the developer updates the library and you get compile time errors, you shouldn't have been passing nil into the function anyway and it saved you from a runtime error. \ud83e\udd37\u200d\u2642\r\n\r\n```go\r\nfunc example(param1 *Type1 , param2 *Type2 | !nil) (*Result, error) {\r\n```\r\nIn this case, `param1` could be nil but `param2` would give a compile time error if someone passed in nil.\r\n\r\n\r\n--- \r\n# Template\r\n\r\n- Would you consider yourself a novice, intermediate, or experienced Go programmer?\r\n  - intermediate\r\n- What other languages do you have experience with?\r\n  - C++, Typescript, HTML, CSS, Python, SQL\r\n- Would this change make Go easier or harder to learn, and why?\r\n  - A little harder because the would need to learn `#` is a non nil pointer.\r\n  - Little easier because they could write more safe code.\r\n- Has this idea, or one like it, been proposed before?\r\n  - An ultimate solution to change fundamentally how nils work in Golang has been suggested, but I didn't see anything that was limited in scope and would provide much value such as this proposal.\r\n- If so, how does this proposal differ?\r\n  - This change is limited in scope and focuses on keeping Go 1 compact while delivering of a better developer experience.\r\n- Who does this proposal help, and why?\r\n  - Developers. It moves runtime issues to compile time saving time and forcing them to handle nils better.\r\n- Is this change backward compatible?\r\n  - Yes\r\n- Breaking the (Go 1 compatibility guarantee)[https://golang.org/doc/go1compat] is a large cost and requires a large benefit.\r\n  - Does not break Go 1 compatibility / compat\r\n- Show example code before and after the change.\r\n  - Shown above. \r\n- What is the cost of this proposal? (Every language change has a cost).\r\n  - Compiler would need to understand if a variable can be nil or not based on if a nil check as been done beforehand.\r\n- How many tools (such as vet, gopls, gofmt, goimports, etc.) would be affected?\r\n   - My understanding of these tools are limited. From my understanding as long as the underlying AST parser is updated to support the character, it shouldn't be major impact for many tools. But, there would need to be changes to how the compiler works.\r\n- What is the compile time cost?\r\n  - I don't know. Though this will increase compile time as a trade off to prevent compile time errors.\r\n- What is the run time cost?\r\n  - none\r\n- Can you describe a possible implementation?\r\n  - Described above.\r\n- Do you have a prototype? (This is not required.)\r\n  - I do not.\r\n- How would the language spec change?\r\n  - `#` would mean a pointer type that is not nil\r\n- Orthogonality: how does this change interact or overlap with existing features?\r\n- Is the goal of this change a performance improvement?\r\n  - No\r\n- If so, what quantifiable improvement should we expect?\r\n- How would we measure it?\r\n- Does this affect error handling?\r\n  - No\r\n- If so, how does this differ from previous error handling proposals?\r\n- Is this about generics?\r\n  - No\r\n- If so, how does this differ from the the current design draft and the previous generics proposals?\r\n\r\n--- \r\n\r\nAt the core of this is a better developer experience by giving compile time error instead of runtime errors.\r\n", "labels": ["Go2", "LanguageChange", "Proposal", "Proposal-FinalCommentPeriod"], "number_of_comments": 15, "created_at": "2020-01-30 02:13:21", "reactions": {"total_count": 22, "+1": 5, "-1": 17, "laugh": 0, "heart": 0, "hooray": 0}}, "557178569": {"author_username": "rittneje", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36882, "title": "x/all: document release branches", "body": "See #36842 for background. I asked this question on that thread, but didn't get an answer. If the release branches in x/crypto are not intended for public consumption, they simply should not exist. This is especially confusing because this repo (golang/go) _does_ use release branches for their standard purpose. If clients are really just supposed to use latest master regardless of their actual Go version, that should be stated clearly in the README. Also, I don't understand why changes are getting merged to release branches instead of just master.\r\n\r\nNote: We do not use go mod because we have found it to be incredibly cumbersome. Instead, we use git submodules. So not having a proper release branch to track is rather annoying.", "labels": ["Documentation", "NeedsFix"], "number_of_comments": 3, "created_at": "2020-01-29 23:28:27", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557177243": {"author_username": "jsha", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36881, "title": "encoding/asn1: accepts non-minimal OID encoding", "body": "<pre>\r\ngo version go1.13.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/jsha/.cache/go-build\"\r\nGOENV=\"/home/jsha/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/jsha/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/jsha/go1.13\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/jsha/go1.13/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build221529794=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nPassed an invalidly-encoded OID to `asn1.Unmarshal`\r\n\r\n### What did you expect to see?\r\n\r\nParse error.\r\n\r\n### What did you see instead?\r\n\r\nSuccessful parse.\r\n\r\nHere's an example program demonstrating the problem, along with a reference to the ASN.1 spec:\r\n\r\nhttps://play.golang.org/p/ETqZ6Kxz16G\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"encoding/asn1\"\r\n\t\"encoding/hex\"\r\n\t\"fmt\"\r\n\t\"log\"\r\n)\r\n\r\nfunc main() {\r\n\tvar o asn1.ObjectIdentifier\r\n\t// Correct encoding; each component of the ObjectIdentifier is encoded\r\n\t// minimally.\r\n\ts, err := hex.DecodeString(\"06092a864886f70d01010b\")\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\t_, err = asn1.Unmarshal(s, &o)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tfmt.Println(o)\r\n\t// Incorrect encoding; the 0x80 byte encodes a zero prefix in base 128, which\r\n\t// violate's X.690's requirement to minimally-encode OIDs (which applies\r\n\t// to both BER and DER). Ref: X.690 2015, \u00a78.19.2 \"The subidentifier shall be\r\n\t// encoded in the fewest possible octets, that is, the leading octet of the\r\n\t// subidentifier shall not have the value [0x80]\"\r\n\ts, err = hex.DecodeString(\"060a2a80864886f70d01010b\")\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\t_, err = asn1.Unmarshal(s, &o)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tfmt.Println(o)\r\n}\r\n```", "labels": ["NeedsFix", "early-in-cycle"], "number_of_comments": 4, "created_at": "2020-01-29 23:24:20", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557168799": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36880, "title": "x/tools/gopls: add log verbosity levels", "body": "We should:\r\n\r\n- Support multiple log verbosity levels instead of relying on the `verboseOutput` setting.\r\n- Figure out how to include useful `go list` results instead of overwhelming the logs.\r\n- Enable some logging by default, instead of requiring the `-rpc.trace` flag.\r\n- Add `log.Warning` in addition to `log.Error`.", "labels": ["Tools", "gopls"], "number_of_comments": 0, "created_at": "2020-01-29 23:01:07", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557167196": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36879, "title": "x/tools/gopls: add regression testing", "body": "We've been using the `govim` tests for regression testing, which creates unnecessary load on @myitcv in filing and reproducing issues. It also places too much reliance on one specific editor client. We should develop our own regression tests that use a fake client.\r\n\r\n/cc @findleyr ", "labels": ["Testing", "Tools", "gopls"], "number_of_comments": 7, "created_at": "2020-01-29 22:57:05", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557160772": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36878, "title": "doc: write Go 1.14 release notes", "body": "Tracking bug for writing the Go 1.14 Release Notes.\r\n\r\nThe latest state on tip can be viewed at https://tip.golang.org/doc/go1.14.\r\n\r\nPreviously #17929, #15810, #5929, etc.", "labels": ["Documentation", "NeedsFix", "help wanted", "release-blocker"], "number_of_comments": 43, "created_at": "2020-01-29 22:41:20", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557118569": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36876, "title": "cmd/go: vendored dependencies lack language version annotations", "body": "In writing #36875, I realized that we will have a bit of a problem with vendored dependencies if and when we start making incompatible changes to the language.\r\n\r\nSpecifically, the `vendor` directory is a flattened package tree, and it does not include `go.mod` files unless the vendored _package_ dependencies happen to include a package at the root of the vendored module. Many modules (such as `golang.org/x/tools`) don't even have an importable package at the root, let alone one that someone would _want_ to import.\r\n\r\nUnfortunately, the `go.mod` files are currently the only place where we record the language version to use for those dependencies. (I don't know what language version we end up using for `-mod=vendor` builds today, but I don't see how it could possibly be the correct one in general.)\r\n\r\nI can think of two possible fixes:\r\n\r\n1. Extend the `## ` annotation comments that we added for #33848 so that, for any module that provides one or more packages, we annotate the `go` version (if any) found in the dependency's original `go.mod` file. (Fortunately, we intentionally designed that part of the format to tolerate the addition of new annotations.)\r\n   For example:\r\n   ```\r\n   # golang.org/x/text v0.3.3\r\n   ## explicit, go 1.14\r\n   golang.org/x/text/number\r\n   ```\r\n\r\n2. Explicitly copy in the `go.mod` files for each module that provides one or more packages, even if there is no corresponding package in that part of the `vendor` tree.\r\n\r\nI have a slight preference for approach (1) but don't feel strongly about it.\r\n\r\n(CC @ianlancetaylor @griesemer @jayconrod @matloob @mvdan)", "labels": ["NeedsFix", "modules", "release-blocker"], "number_of_comments": 8, "created_at": "2020-01-29 21:12:59", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557110054": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36875, "title": "proposal: cmd/go: refine the default language version based on context", "body": "### Background\r\n\r\nIn https://groups.google.com/g/golang-dev/c/j3d8zuauJoY/m/gPOgpq_5DgAJ, @griesemer noted (emphasis mine):\r\n\r\n> Not everybody has switched to modules yet. We do know from surveys that the vast majority has (we estimate some 70-80%), but it is not the default mechanism. And **even if everybody was using modules, introducing these changes would require .mod files to be adjusted to avoid breakages.**\r\n\r\nI agree with that assessment. However, I think there is a better default we could use in order to move forward with less churn: rather than having the Go language version used for dependencies track the maximum version supported by the Go toolchain (as it has in the past), we should have it default to a version that is likely to be compatible with existing code that was written for use in `GOPATH` mode.\r\n\r\n### Proposal\r\n\r\nI propose that `cmd/go` should:\r\n\r\n* If in module mode and the main module lacks an explicit language version, set it to the maximum supported language version (as `cmd/go` already does today).\r\n\r\n* When compiling a package from a list of `.go` source files specified on the command line:\r\n   * If in module mode and the working directory is inside of a module, use **the main module's language version.**\r\n   * If in module mode but not inside of a module, use **the maximum supported language version.**\r\n   * If in `GOPATH` mode, use **the maximum supported language version.**\r\n\r\n* When compiling a package, either as a direct argument to the `go` command or loaded as a dependency of some other package:\r\n   * If in module mode and the module containing the package has a `go.mod` file with a `go` directive, use **the version indicated by that module's `go.mod` file.**\r\n   * If in module mode and the module containing the package does not specify an explicit language version (perhaps because it lacks a `go.mod` file), use **Go 1.14** (or another version that has not removed support for any features introduced up to that point).\r\n   * If in `GOPATH` mode, use **the maximum supported language version.**\r\n\r\nNote that in all cases users can explicitly override the default by passing `-gcflags=-lang=\u2026` either as an explicit argument or via `GOFLAGS`.\r\n\r\n### Rationale\r\n\r\nDefaulting to Go 1.14 for packages outside of the main module in module mode maintains compatibility for packages written prior to the introduction of modules, even when they are loaded in module mode.\r\n\r\nDefaulting to the maximum supported language version for file lists in module mode encourages users of standalone \u201cscript\u201d files to either keep them up to date with language changes, or explicitly record the intended version in a corresponding `go.mod` file.\r\n\r\nDefaulting to the maximum supported language version in `GOPATH` mode avoids the need to (imprecisely) scan the `GOPATH` tree (including `vendor` directories) looking for `go.mod` files, and seems the most likely to maintain compatibility for users \u201cworking at head\u201d (which is generally what `GOPATH` assumes regardless). It is also consistent with the general non-reproducibility of `GOPATH` mode: if users want a reproducible build, they are encouraged to switch to module mode, and even if they do not they still have the option to set `-gcflags=-lang=\u2026` explicitly or vendor in older versions of their dependencies.\r\n\r\nSee also #30791.\r\n\r\n(CC @ianlancetaylor @matloob @jayconrod @dmitshur)", "labels": ["Proposal", "Proposal-Hold", "modules"], "number_of_comments": 4, "created_at": "2020-01-29 20:55:15", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557021542": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36869, "title": "x/tools/go/analysis: migrate golint to use go/analysis", "body": "This is a key missing piece in the `gopls` analysis suite, and it has come up repeatedly as an issue for editor clients (see https://github.com/microsoft/vscode-go/issues/2517 for a recent example). Creating a tracking issue here since `golint` has its own issue tracker and its own issue for this (https://github.com/golang/lint/issues/463).\r\n\r\nSomething worth considering is whether this means that `golint` will be moved into `x/tools` or if it should remain its separate repository.\r\n\r\n/cc @matloob ", "labels": ["FeatureRequest", "Tools", "gopls"], "number_of_comments": 2, "created_at": "2020-01-29 17:52:38", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557021156": {"author_username": "crawshaw", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36868, "title": "cmd/go: support POSIX jobserver", "body": "The automatic parallelism in `cmd/go` is wonderful when the command is used interactively. However, it interacts poorly when another build system is driving `cmd/go`. The driving build system cannot safely start multiple Go builds without overloading the system, and it cannot detect when a Go build is doing very little work so it should start other work.\r\n\r\nGNU make has an elegant solution for this, the \"jobserver.\" It is much simpler than the name suggests:\r\n\r\n> On POSIX systems the jobserver is implemented as a simple UNIX pipe. The pipe will be pre-loaded with one single-character token for each available job. To obtain an extra slot you must read a single character from the jobserver pipe; to release a slot you must write a single character back into the jobserver pipe.\r\n\r\nhttps://www.gnu.org/software/make/manual/html_node/POSIX-Jobserver.html\r\n\r\nI would like to propose that `cmd/go` parses the environment variable `MAKEFLAGS` for `--jobserver-auth=R,W`, and if it finds valid FDs `R` and `W` then it uses tokens from the pipe to control its parallelism. This will make `cmd/go` play nicely with GNU make and other build systems that use the jobserver, like redo.", "labels": ["FeatureRequest", "NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-01-29 17:51:53", "reactions": {"total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556852564": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36865, "title": "go.dev: examples missing playground links", "body": "### What is the URL of the page with the issue?\r\n\r\nhttps://pkg.go.dev/regexp?tab=doc#example-MatchString\r\n\r\n### What is your user agent?\r\n\r\n<pre>\r\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.66 Safari/537.36\r\n</pre>\r\n\r\n### Screenshot\r\n\r\n<img width=\"1022\" alt=\"Screen Shot 2020-01-29 at 13 09 25\" src=\"https://user-images.githubusercontent.com/3374574/73359422-b3f71c80-4298-11ea-9e77-dbfb86a4051d.png\">\r\n\r\n### What did you do?\r\n\r\nVisited the link above to view the example.\r\n\r\n### What did you expect to see?\r\n\r\nExpected to see a link that takes me to the example in the Go Playground, like godoc.org\r\n\r\n<img width=\"726\" alt=\"Screen Shot 2020-01-29 at 13 09 44\" src=\"https://user-images.githubusercontent.com/3374574/73359457-cb360a00-4298-11ea-9dbd-d87331fac409.png\">\r\n\r\n### What did you see instead?\r\n\r\nNo link. \r\n\r\n", "labels": ["FeatureRequest", "NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-01-29 13:11:21", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556710177": {"author_username": "mibes", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36859, "title": "proposal: Go 1.15 to be a \"Go Green\" release", "body": "With thanks to @griesemer for laying out the proposals for Go 1.15 in his recent blog post.\r\n\r\nSince \"...we concluded that it is better to hold off with major changes this time...\", maybe we can use this release to put the focus on any optimisations and changes that would help our worldwide community to reduce their carbon (CO2) footprint:\r\n\r\n- Using less memory, means less VirtualMachines are needed.\r\n- Using less CPU cycles, means less power and cooling are needed.\r\n- Smaller binaries use less disk space, which means fewer storage is needed.\r\n\r\nA so called \"Go Green\" release.\r\n\r\nThese changes are likely part of an ongoing effort to improve Go one version to the next. \r\n\r\nThe proposal for 1.15 is to prioritise some of these issues over others, and to highlight the improvements made in this area. Maybe put some nice marketing around it, to increase the awareness of Go in the wider development community.\r\n", "labels": ["Proposal"], "number_of_comments": 4, "created_at": "2020-01-29 08:29:25", "reactions": {"total_count": 14, "+1": 0, "-1": 8, "laugh": 3, "heart": 1, "hooray": 0}}, "556634964": {"author_username": "josharian", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36858, "title": "cmd/compile: confusing error message for 'a == x && b = y'", "body": "```go\r\npackage p\r\n\r\nfunc f(a, b string) {\r\n\tif a == \"a\" && b = \"b\" {\r\n\t}\r\n}\r\n```\r\n\r\n```\r\n$ go tool compile x.go\r\nx.go:4:25: syntax error: assignment a == \"a\" && b = \"b\" used as value\r\n```\r\n\r\nThe conjunction isn't an assignment; the second conjunct is.", "labels": ["NeedsFix"], "number_of_comments": 12, "created_at": "2020-01-29 04:52:24", "reactions": {"total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556589384": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36857, "title": "x/tools/go/packages: handle multiple test variants and packages in overlays", "body": "The overlay code is pretty broken for test variants. This needs to be investigated and fixed.", "labels": ["NeedsInvestigation", "Tools"], "number_of_comments": 0, "created_at": "2020-01-29 01:44:50", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556586529": {"author_username": "losh11", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36856, "title": "x/mobile: enable building frameworks for Catalyst", "body": "As of macOS 10.15, users can build iPad apps to run on macOS using Catalyst. However if you build a framework using gomobile, even though the framework has support for `x86_64`, Xcode will display an error. \r\n\r\nTo fix this, all you need to do is target clang for the macOS sdk & add a cflag with `-target x86_64-apple-ios13.0-macabi`. Fully tested example below.\r\n\r\nGomobile should support specifying a target `catalyst`. In `x/mobile/cmd/gomobile/env.go`, add a new case `\"catalyst\"` for function `envInit` which looks like this:\r\n\r\n```golang\r\ncase \"catalyst\":\r\n    clang, cflags, err = envClang('macosx')\r\n    cflags += \" -target x86_64-apple-ios13.0-macabi\"\r\n```", "labels": ["NeedsInvestigation", "help wanted", "mobile"], "number_of_comments": 2, "created_at": "2020-01-29 01:33:45", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556585849": {"author_username": "carnott-snap", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36855, "title": "proposal: Go 2: initialise funcs with custom type names", "body": "> Would you consider yourself a novice, intermediate, or experienced Go programmer?\r\n\r\nIntermediate to experienced.\r\n\r\n> What other languages do you have experience with?\r\n\r\n- Java/Kotlin\r\n- Rust\r\n- JavaScript/TypeScript\r\n- Python\r\n- Haskell\r\n\r\n> Would this change make Go easier or harder to learn, and why?\r\n\r\nThis change adds a new way to construct functions, so implicitly it will increase the total knowledge require to understand _all_ of Go. It is a feature that can be obscured from beginners, and benefit intermediate to experienced users.\r\n\r\n> Has this idea, or one like it, been proposed before?\r\n\r\nThere are no github issues for this exact proposal.\r\n\r\n#21670 and #25860 only seeks to solve the _implement an interface_ example below.  #21670 only targets single method interfaces, while not adding any language changes, where #25860 seeks to solve this for all interfaces, with a new (somewhat complex) syntax.\r\n\r\n> Who does this proposal help, and why?\r\n\r\nThis helps developers that create anonymous functions that implement defined types.\r\n\r\n> Is this change backward compatible?\r\n\r\nYes, the func types currently cannot take a body.\r\n\r\n> Show example code before and after the change.\r\n\r\n```go\r\n// before\r\nhttp.Handle(\"\", http.HandleFunc(func(ResponseWriter, *Request) {})) // or http.HandleFunc(\"\", func(ResponseWriter, *Request) {})\r\nerr = filepath.Walk(\"/\", func(path string, info os.FileInfo, err error) error { return nil })\r\n\r\n// type function func(one, two string) string\r\n// func (f function) default() string { return s(\"one\", \"two\") } \r\n_ = function(func(from, to string) string {return from+to}).default()\r\n```\r\n```go\r\n// after\r\nhttp.Handle(\"\", http.HandlerFunc{}) // implement an interface\r\nerr = filepath.Walk(\"/\", filepath.WalkFunc{ return nil }) // simpler initialisation\r\n_ = function{return from+to}.default() // direct method set access\r\n```\r\n\r\n> What is the cost of this proposal? (Every language change has a cost).\r\n\r\nThis change will add new syntax, thus complexity. This is most clear in the use of the default `func` parameter names, `function{return from+to}`, however, this feels very similar to the existing unkeyed struct literal syntax: `type structure struct { u uint }; _ = structure{5}`. This will also require some changes to existing symbols, like `type HandlerFunc func(r ResponseWriter, r *Request)`.\r\n\r\n> How many tools (such as vet, gopls, gofmt, goimports, etc.) would be affected?\r\n\r\nAs the syntax of the language is extended, in a compatible manner, all these tools would need minor updates.\r\n\r\n> What is the compile time cost?\r\n\r\nWhile this will add complexity to the compiler, it is pure syntax sugar, so it should not be too expensive.\r\n\r\n> What is the run time cost?\r\n\r\nShould be negligible, as this is syntax sugar.\r\n\r\n> Can you describe a possible implementation?\r\n\r\nI am not familiar enough with the internals of the compiler to make a concrete suggestion, but high level:\r\n- if you see a given `Type` that is of type `func` followed by a body: `Type{ /* ...*/ }`\r\n- convert into this AST: `Type(func(/* ... */) (/* ... */) { /* ... */ })`\r\n\r\n> Do you have a prototype?\r\n\r\nNo\r\n\r\n> How would the language spec change?\r\n\r\nThe [declarations section](https://golang.org/ref/spec#Declarations_and_scope), not totally sure where, would need to call-out that `Type { Expression ( ; Expression ) }` is valid.\r\n\r\n> Orthogonality: how does this change interact or overlap with existing features?\r\n\r\nThis change will extend the way that functions can be initialised. It should not break any existing features, but can simplify some existing code.\r\n\r\n> Is the goal of this change a performance improvement?\r\n\r\nNo.\r\n\r\n> Does this affect error handling?\r\n\r\nNo.\r\n\r\n> Is this about generics?\r\n\r\nNo.", "labels": ["Go2", "LanguageChange", "Proposal", "Proposal-FinalCommentPeriod"], "number_of_comments": 9, "created_at": "2020-01-29 01:30:58", "reactions": {"total_count": 7, "+1": 1, "-1": 6, "laugh": 0, "heart": 0, "hooray": 0}}, "556549020": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36854, "title": "x/tools/gopls: retry workspace initialization as needed", "body": "We currently try loading a user's workspace with `./...` on `gopls` start, and if that fails, we mark it as an error and don't try again. We are able to reclaim some workspace packages, but we don't retry the full workspace load. We should determine a strategy for handling this.", "labels": ["NeedsDecision", "Tools", "gopls"], "number_of_comments": 0, "created_at": "2020-01-28 23:24:05", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556498473": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36852, "title": "x/build: add check to trybot to catch src/go.mod and src/vendor divergence", "body": "We should make it so that trybots catch and report when the src/go.mod and src/vendor directories are not in sync, to prevent them from going out of sync without anyone noticing.\r\n\r\nSee #36851 for more context.\r\n\r\n/cc @golang/osp-team", "labels": ["Builders", "FeatureRequest", "NeedsInvestigation", "Testing"], "number_of_comments": 0, "created_at": "2020-01-28 22:03:02", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556430617": {"author_username": "icza", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36850, "title": "cmd/compile: error line number reported is incorrect if it appears after line 0xFFFFF", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.7 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/icza/.cache/go-build\"\r\nGOENV=\"/home/icza/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"xxx\"\r\nGONOSUMDB=\"xxx\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/icza/gows\"\r\nGOPRIVATE=\"xxx\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build104015454=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nCreate a valid `.go` source file that has more than `1048574` lines (`0xFFFFF`). And add some \"garbage\" to the end of it to make it invalid, to make compilation fail. Attempting to build it (`go build big.go`) or run it (`go run big.go`) the go tool detects the error and displays an error message where the line number is capped at `1048574` improperly, e.g.:\r\n\r\n    ./big.go:1048574:2: syntax error: unexpected invalid after top level declaration\r\n\r\nHere's a simple Go app that creates a `big.go` file that has approximately twice as many rows (it has a raw string literal that has 2*0xFFFFF empty lines):\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"bytes\"\r\n\t\"io/ioutil\"\r\n\t\"strings\"\r\n)\r\n\r\nfunc main() {\r\n\tsrc := &bytes.Buffer{}\r\n\tsrc.WriteString(`package main\r\nfunc main() { println(len(s)) }\r\nconst s=`)\r\n\tsrc.WriteString(\"`\")\r\n\tsrc.WriteString(strings.Repeat(\"\\n\", 2*0xFFFFF))\r\n\tsrc.WriteString(\"`\")\r\n\r\n\t// This is the garbage to make compilation fail:\r\n\tsrc.WriteString(\"invalid\")\r\n\r\n\tif err := ioutil.WriteFile(\"big.go\", src.Bytes(), 0666); err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n```\r\n\r\nIf we decrease the generated number of lines, e.g.:\r\n\r\n\tsrc.WriteString(strings.Repeat(\"\\n\", 10_000))\r\n\r\nWe get the proper line number (`10003`):\r\n\r\n    ./big.go:10003:2: syntax error: unexpected invalid after top level declaration\r\n\r\n### What did you expect to see?\r\n\r\nI expected the proper line number to be printed where the error is detected (`2*0xFFFFFF+3 = 2097153`):\r\n\r\n    ./big.go:2097153:2: syntax error: unexpected invalid after top level declaration\r\n\r\n\r\n### What did you see instead?\r\n\r\nThe displayed error line number is improperly capped at `1048574`:\r\n\r\n    ./big.go:1048574:2: syntax error: unexpected invalid after top level declaration\r\n\r\n\r\n**Note:** This issue was reported on StackOverflow: https://stackoverflow.com/questions/59951140/go-compiler-error-line-number-is-incorrect", "labels": ["NeedsInvestigation"], "number_of_comments": 3, "created_at": "2020-01-28 19:50:45", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556424125": {"author_username": "llimllib", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36849, "title": "x/tools/cmd/godoc: godoc should have a version flag", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/Users/llimllib/go/bin\"\r\nGOCACHE=\"/Users/llimllib/Library/Caches/go-build\"\r\nGOENV=\"/Users/llimllib/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/llimllib/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org\"\r\nGOROOT=\"/usr/local/Cellar/go/1.13/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.13/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/Users/llimllib/mct/backend/master/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/r4/mc760j7j6xjdgr5p5hxk_xrw0000gq/T/go-build055316358=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n`godoc -version`\r\n\r\n### What did you expect to see?\r\n\r\nA version number\r\n\r\n### What did you see instead?\r\n\r\n```console\r\n$ godoc -version\r\nflag provided but not defined: -version\r\n```\r\n\r\nThe godoc team suggests upgrading to the latest version to get module support: https://groups.google.com/forum/#!msg/golang-nuts/adEisyiOlwo/Q_5jL9ZKAwAJ\r\n\r\nBut there's no way to tell what version of godoc you are using, making it difficult to know if you have properly upgraded (especially since there are no documents on upgrading godoc (!))", "labels": ["FeatureRequest", "NeedsInvestigation", "Tools"], "number_of_comments": 0, "created_at": "2020-01-28 19:39:16", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556386059": {"author_username": "gyuho", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36848, "title": "net/http: Dial I/O Timeout even when request context is not canceled", "body": "Seems related to https://github.com/golang/go/commit/869e576517f825aecdc8730b0d22f8d6b59bd749 (c.f. https://github.com/kubernetes-sigs/aws-encryption-provider/issues/61).\r\n\r\nMaybe this is an expected behavior... Is it possible to see dial timeouts even when the request context has not been canceled? I am using https://golang.org/pkg/net/http/#RoundTripper with dial timeout 30 seconds and request context is 300\u00b5s. If this is possible, can you help understand why this happens?\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n\r\ngo version go1.13.6 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/leegyuho/Library/Caches/go-build\"\r\nGOENV=\"/Users/leegyuho/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"*\"\r\nGONOSUMDB=\"*\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/leegyuho/go\"\r\nGOPRIVATE=\"*\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/y_/_dn293xd5kn7xlg6jvp7jpmxs99pm9/T/go-build128444364=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"fmt\"\r\n\t\"net/http\"\r\n\t\"net/http/httptest\"\r\n\t\"strings\"\r\n\t\"time\"\r\n)\r\n\r\nfunc main() {\r\n\t// this happens about 50% of the time, so try it a few times.\r\n\tfor i := 0; i < 10; i++ {\r\n\t\tfmt.Println(\"trying\", i)\r\n\t\ttry()\r\n\t}\r\n}\r\n\r\nfunc try() {\r\n\tmux := http.NewServeMux()\r\n\tmux.HandleFunc(\"/test\", func(w http.ResponseWriter, req *http.Request) {\r\n\t\tswitch req.Method {\r\n\t\tcase \"GET\":\r\n\t\t\tfmt.Fprint(w, `test`)\r\n\t\tdefault:\r\n\t\t\thttp.Error(w, \"Method Not Allowed\", 405)\r\n\t\t}\r\n\t})\r\n\r\n\tts := httptest.NewServer(mux)\r\n\tdefer ts.Close()\r\n\r\n\tu := ts.URL + \"/test\"\r\n\r\n        // default dial timeout is 30-second\r\n        // https://golang.org/pkg/net/http/#RoundTripper\r\n\tcli := http.DefaultClient\r\n\r\n\ttimeout := 300 * time.Microsecond\r\n\treqs := 20\r\n\terrc := make(chan error, reqs)\r\n\tfor i := 0; i < reqs; i++ {\r\n\t\tgo func() {\r\n\t\t\tctx, cancel := context.WithTimeout(context.TODO(), timeout)\r\n\t\t\tdefer cancel()\r\n\r\n\t\t\treq, err := http.NewRequest(http.MethodGet, u, nil)\r\n\t\t\tif err != nil {\r\n\t\t\t\terrc <- err\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\t_, err = cli.Do(req.WithContext(ctx))\r\n\t\t\tif err != nil {\r\n\t\t\t\t// can be: ctx.Err() == nil && err == \"i/o timeout\"\r\n\t\t\t\t// Q. but how is that possible?\r\n\t\t\t\tfmt.Println(\"Do failed with\", err, \"/ context error:\", ctx.Err())\r\n\t\t\t}\r\n\t\t\terrc <- err\r\n\t\t}()\r\n\t}\r\n\r\n\t// \"context deadline exceeded\" for requests after timeout\r\n\texp := `context deadline`\r\n\tfor i := 0; i < reqs; i++ {\r\n\t\terr := <-errc\r\n\t\tif err == nil {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tfmt.Println(\"error:\", err)\r\n\t\tif !strings.Contains(err.Error(), exp) {\r\n\t\t\tpanic(fmt.Sprintf(\"#%d: expected %q, got %v\", i, exp, err))\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nNo panic.\r\n\r\n### What did you see instead?\r\n\r\n```\r\ntrying 0\r\nDo failed with Get http://127.0.0.1:54098/test: dial tcp 127.0.0.1:54098: i/o timeout / context error: <nil>\r\nerror: Get http://127.0.0.1:54098/test: dial tcp 127.0.0.1:54098: i/o timeout\r\nDo failed with Get http://127.0.0.1:54098/test: dial tcp 127.0.0.1:54098: i/o timeout / context error: <nil>\r\nDo failed with Get http://127.0.0.1:54098/test: dial tcp 127.0.0.1:54098: i/o timeout / context error: <nil>\r\nDo failed with Get http://127.0.0.1:54098/test: dial tcp 127.0.0.1:54098: i/o timeout / context error: <nil>\r\nDo failed with Get http://127.0.0.1:54098/test: dial tcp 127.0.0.1:54098: i/o timeout / context error: <nil>\r\nDo failed with Get http://127.0.0.1:54098/test: dial tcp 127.0.0.1:54098: i/o timeout / context error: <nil>\r\nDo failed with Get http://127.0.0.1:54098/test: dial tcp 127.0.0.1:54098: i/o timeout / context error: <nil>\r\nDo failed with Get http://127.0.0.1:54098/test: dial tcp 127.0.0.1:54098: i/o timeout / context error: <nil>\r\nDo failed with Get http://127.0.0.1:54098/test: dial tcp 127.0.0.1:54098: i/o timeout / context error: <nil>\r\nDo failed with Get http://127.0.0.1:54098/test: context deadline exceeded / context error: context deadline exceeded\r\nDo failed with Get http://127.0.0.1:54098/test: context deadline exceeded / context error: context deadline exceeded\r\nDo failed with Get http://127.0.0.1:54098/test: context deadline exceeded / context error: context deadline exceeded\r\nDo failed with Get http://127.0.0.1:54098/test: dial tcp 127.0.0.1:54098: i/o timeout / context error: <nil>\r\npanic: #0: expected \"context deadline\", got Get http://127.0.0.1:54098/test: dial tcp 127.0.0.1:54098: i/o timeout\r\n```\r\n\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 13, "created_at": "2020-01-28 18:22:38", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556378872": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36847, "title": "x/tools/gopls: detect pseudoversions in `gopls version`", "body": "We originally started tagging releases on master, which means that `gopls@master` reports its version as a pseudoversion starting with v0.1.8 (the last tag on master). This is misleading for users, at it makes its seem that `master` is behind `latest`. We should instead detect the pseudoversion and output something else when the user is at master.", "labels": ["Tools", "gopls"], "number_of_comments": 2, "created_at": "2020-01-28 18:07:50", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556370314": {"author_username": "gopherbot", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36846, "title": "cmd/link: system linker warnings on OSX 1.14 when using cgo [1.13 backport]", "body": "@cagedmantis requested issue #36025 to be considered for backport to the next 1.13 minor release.\n\n> @gopherbot please open a backport for 1.12 and 1.13 since the linker warnings are appearing in both versions.\n", "labels": ["CherryPickCandidate"], "number_of_comments": 4, "created_at": "2020-01-28 17:50:35", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556370306": {"author_username": "gopherbot", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36845, "title": "cmd/link: system linker warnings on OSX 1.14 when using cgo [1.12 backport]", "body": "@cagedmantis requested issue #36025 to be considered for backport to the next 1.12 minor release.\n\n> @gopherbot please open a backport for 1.12 and 1.13 since the linker warnings are appearing in both versions.\n", "labels": ["CherryPickCandidate"], "number_of_comments": 1, "created_at": "2020-01-28 17:50:34", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556354062": {"author_username": "cagedmantis", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36841, "title": "x/build: add Amazon EC2 ARM instances for builders", "body": "As @bradfitz noted, we should explore adding ephemeral AWS ARM instances for both 32-bit and 64-bit ARM builds.\r\n\r\n@toothrot @dmitshur ", "labels": ["Builders", "NeedsInvestigation"], "number_of_comments": 3, "created_at": "2020-01-28 17:18:43", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556275791": {"author_username": "tehmoon", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36831, "title": "net/http: bad host for WriteProxy for HTTP schemes", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes, code path did not change\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/moon/.cache/go-build\"\r\nGOENV=\"/home/moon/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/moon/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/lib/go-1.13\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/lib/go-1.13/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build174047944=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nWhile writing to proxy using either `http.ProxyURL(` or `http.ProxyFromEnvironment`. If the `request.URL.Scheme` is `http`, the `request.RequestURI`'s host will be from ``request.Host and not from `request.URL.Host`.\r\n\r\n### What did you expect to see?\r\nUsing the following request:\r\n```\r\nPOST /gen_204?atyp=csi&ei=xxx&s=jsa&jsi=s,t.0,et.focus,n.iDPoPb,cn.1&zx=xxxHTTP/1.1\r\nHost: blah\r\n\r\n\r\n```\r\n\r\nI expect to see: \r\n```\r\nPOST http://google.com/gen_204?atyp=csi&ei=_UMjXuLAHvLL5gKQ872YBw&s=jsa&jsi=s,t.0,et.focus,n.iDPoPb,cn.1&zx=1579369468594 HTTP/1.1\r\nHost: blah\r\n\r\n```\r\nwhen I force request.URL.Host to \"google.com\" and request.URL.Scheme to \"http\"\r\n\r\n### What did you see instead?\r\n\r\nInstead this is what's going on:\r\n\r\n```\r\nPOST http://blah/gen_204?atyp=csi&ei=_UMjXuLAHvLL5gKQ872YBw&s=jsa&jsi=s,t.0,et.focus,n.iDPoPb,cn.1&zx=1579369468594 HTTP/1.1\r\nHost: blah\r\n\r\n```\r\n\r\n### Comments\r\n\r\nThe offending path is here: https://github.com/golang/go/blob/master/src/net/http/request.go#L560 where as you can see, the `r.Host` is used first.\r\nI think it would make more sense to have the same behavior as the request in the doc: https://golang.org/pkg/net/http/#Request\r\n```\r\n    // For client requests, the URL's Host specifies the server to\r\n    // connect to, while the Request's Host field optionally\r\n    // specifies the Host header value to send in the HTTP\r\n    // request.\r\n    URL *url.URL\r\n```\r\n\r\nWhich is what the proxy is going to do in direct mode. Use the URI first, then the header if not present.", "labels": ["NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-01-28 15:14:03", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556274738": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36830, "title": "cmd/compile: floating-point broken on android-arm-corellium builder", "body": "```\r\n--- FAIL: TestFloat32 (0.11s)\r\n    rand_test.go:360: Float32() should be in range [0,1). ct: 2274285 f: 0.27337575\r\nFAIL\r\nFAIL\tmath/rand\t0.548s\r\n```\r\n\r\nSeems to have started after Jan. 19.\r\n\r\nHave there been recent changes in this builder image or configuration? Otherwise, the only major changes over that interval have been @4a6f656c's RISC-V changes.\r\n\r\nCC @cagedmantis @dmitshur @toothrot @zenly\r\n\r\n[2020-01-28T02:40:44-a858d15/android-arm-corellium](https://build.golang.org/log/3857c5db54a61d32ab48dae06f1e5cf2699a1427)\r\n[2020-01-28T02:39:28-d8e0526/android-arm-corellium](https://build.golang.org/log/812b43dfced317fbfcdb6ec73e98ce80ab7bb733)\r\n[2020-01-27T23:23:00-22f09ce/android-arm-corellium](https://build.golang.org/log/ca60519eb3db20eadcae4e303f39a35d457a35a7)\r\n[2020-01-27T20:45:39-74d366f/android-arm-corellium](https://build.golang.org/log/d61050b56f9c4d0f06f2fbdb96c1dc911ea20a8c)\r\n[2020-01-27T14:34:16-4615b39/android-arm-corellium](https://build.golang.org/log/ebdb8db43691e2165e3326d031d2d31da44eded4)\r\n[2020-01-25T16:34:18-73d2137/android-arm-corellium](https://build.golang.org/log/a3ef854c1c098f6688b8a2b88e6aeb0af223bd4f)\r\n[2020-01-24T19:19:16-e35876e/android-arm-corellium](https://build.golang.org/log/06ee4911ca7d6152ba172b4b3869307be8abd62d)\r\n[2020-01-24T17:36:44-1f9f88b/android-arm-corellium](https://build.golang.org/log/0d190c152a9a9d194f47c6646a67f7cfca7363d8)\r\n[2020-01-23T23:07:10-8d7be1e/android-arm-corellium](https://build.golang.org/log/56897dcb955762d66d7573f83751fe581e3e89de)\r\n[2020-01-23T21:01:12-ace25f8/android-arm-corellium](https://build.golang.org/log/bcdceb7751a52fb06dd1a623c3fd41ff8c6010d4)\r\n[2020-01-23T20:44:44-8453844/android-arm-corellium](https://build.golang.org/log/536c6146617201a2973a026997446b1de7a6fc52)\r\n[2020-01-23T19:11:41-39ea3d0/android-arm-corellium](https://build.golang.org/log/adbe1d8b7fafacc52c7b5add9124d21310f15ba9)\r\n[2020-01-23T16:52:00-64378c2/android-arm-corellium](https://build.golang.org/log/7b96da4fa0b90e4cea55667c399c0162b236605d)\r\n[2020-01-23T07:39:53-9f07cdd/android-arm-corellium](https://build.golang.org/log/6e5962e4fc98c10ca94a06e36638ebd864541a86)\r\n[2020-01-22T18:10:42-895b7c8/android-arm-corellium](https://build.golang.org/log/d27ae1e1a2daaca39e5221aded58422c518a5d17)\r\n[2020-01-22T15:24:05-6718cb6/android-arm-corellium](https://build.golang.org/log/e36005b2277f67873a451894795ab5cfc9ad1580)\r\n", "labels": ["Builders", "OS-Android", "WaitingForInfo"], "number_of_comments": 14, "created_at": "2020-01-28 15:12:33", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556141644": {"author_username": "tuxillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36826, "title": "os: do not use procfs for os.Executable in dragonfly", "body": "  procfs(5) is not always mounted in DragonFly BSD, for example during\r\n  the binary package build with synth. os.Executable() consumers\r\n  will then fail, we've spotted this when trying to build tinygo:\r\n\r\n    [...]\r\n\r\n    copying source files\r\n    ./build/tinygo build-builtins -target=armv6m-none-eabi [...]\r\n    panic: could not get executable path: readlink /proc/curproc/file:\r\n    no such file or directory\r\n\r\n    [...]\r\n\r\n  Use KERN_PROC_PATHNAME as FreeBSD does.\r\n", "labels": ["cla: yes"], "number_of_comments": 10, "created_at": "2020-01-28 11:17:04", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555981860": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36825, "title": "x/talks: 2 sets of deploy instructions", "body": "I've recently realized that, due to a series of unfortunate events spanning 2014-2020, we have accidentally ended up with 2 sets of deploy instructions for [talks.golang.org](https://talks.golang.org):\r\n\r\n1. [golang.org/x/build/cmd/tip README](https://github.com/golang/build/blob/c373c47710ad8ce94647ed9cfb258414ad995467/cmd/tip/README#L1-L18)\r\n2. [golang.org/x/talks README](https://github.com/golang/talks/blob/083066ceb3152d883ec6a8ee67e00fd88330fc0c/README#L7-L14)\r\n\r\nWe should pick one as canonical (likely the one in `x/build/cmd/tip`, because it has an auto-deploy feature), and update READMEs in both places to avoid any future confusion.\r\n\r\nMaking this issue quickly so I don't forget; will add more history/background later.", "labels": ["NeedsFix"], "number_of_comments": 0, "created_at": "2020-01-28 04:50:26", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555977954": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36824, "title": "x/tools/gopls: import organization fails on a single-line file", "body": "Some examples:\r\n\r\n```go\r\npackage x; func hello() { fmt.Print(\"\"); }\r\n```\r\n\r\nProduces:\r\n\r\n```go\r\npackage x\r\n\r\nimport \"fmt\"\r\n```\r\n---\r\n```go\r\npackage x; func hello() {       }\r\n```\r\n\r\nProduces:\r\n\r\n```go\r\npackage x\r\n```\r\n\r\n/cc @heschik \r\n\r\n", "labels": ["Tools", "gopls"], "number_of_comments": 0, "created_at": "2020-01-28 04:35:19", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555955488": {"author_username": "jamiesonbecker", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36822, "title": "net: should expand IP address 1.1 to 1.0.0.1", "body": "## `nameserver 1.1` in `/etc/resolv.conf` not parsed\r\n\r\n### What did you do?\r\ngo get github.com/kevinburke/twilio-go\r\n\r\n### What did you see instead?\r\n```\r\ngo get github.com/kevinburke/twilio-go: module github.com/kevinburke/twilio-go:\r\nGet https://proxy.golang.org/github.com/kevinburke/twilio-go/@v/list:\r\ndial tcp: lookup proxy.golang.org on [::1]:53: dial tcp [::1]:53:\r\nconnect: connection refused\r\n```\r\n\r\n### Workaround\r\n\r\nChange 1.1 to 1.0.0.1 or 1.1.1.1 in `/etc/resolv.conf`\r\n\r\n```\r\n# /etc/resolv.conf\r\nnameserver 1.1\r\n```\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 9, "created_at": "2020-01-28 03:02:46", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555928830": {"author_username": "chabbimilind", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36821, "title": "proposal: runtime/pprof cpuprofiles lack precision and accuracy; need PMU-based profiles", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.4 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes; tested on `go version devel +74d366f484 Mon Jan 27 20:45:39 2020 +0000 linux/amd64`\r\n \r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/xxx/.cache/go-build\"\r\nGOENV=\"/home/xxx/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/xxx/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/xxx/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/xxx/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build696469159=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThe following experiments demonstrate that pprof CPU profiles lack accuracy (closeness to the ground truth) and precision (repeatability across different runs). The tests are highly predictive in nature and involve little runtime overheads (allocation, GC, system call, etc.). They are carefully designed so that we can compare pprof CPU profiles against our expectations. The evaluation shows a wide difference from expectation. One should not confuse this to be a runtime issue; the issue is with the use of OS timers used for sampling; OS timers are coarse-grained and have a high skid. In a proposal/design document that will follow, I will propose a design to extend CPU profiling by sampling CPU Performance Monitoring Unit (PMU) aka hardware performance counters. PMU event-based sampling is a mature technology available on almost all modern CPUs. PMU as a sampling agent offers many benefits (in no particular priority order):\r\n* Enhance sampling granularity from 100s of milli-second to 100s of microseconds.\r\n* Avoid precision and accuracy problems of OS timers.\r\n* Enable collecting rich hardware profiles such as cache misses, branch misses, inter-socket cacheline transfers, to name a new, which help root cause performance problems more easily.\r\n\r\nThere are two test cases `goroutine.go` and `serial.go` in this issue.\r\n\r\n## test 1 (parallel)\r\nDownload the first test case, `goroutine.go` program, from https://github.com/chabbimilind/GoPprofDemo/blob/master/goroutine.go\r\nIt has ten exactly the same goroutines: `f1-f10` and I use pprof to collect the CPU profiles. \r\nRun the following command several times and notice that each time, pprof reports a different amount of time spent in each of the ten routines.\r\n\r\n`go run goroutine.go &&  go tool pprof -top goroutine_prof`\r\n\r\n\r\n## test 2 (serial)\r\n\r\nDownload the second test case, `serial.go` go program, from https://github.com/chabbimilind/GoPprofDemo/blob/master/serial.go:\r\nIt has ten functions (`A_expect_1_82` - `J_expect_18_18`).  The function `A_expect_1_82` is expected to consume 1.82% of the total execution time and `J_expect_18_18` is expected to consume 18.18% of the execution time, and so on. The code is serial and there is complete data dependence between each function and each iteration of the loop in the functions to avoid any hardware-level optimizations. \r\nRun the following command several times.\r\n`go run serial.go &&  go tool pprof -top serial_prof`\r\n\r\n\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\n\r\nFor `goroutine.go`, each function (`f1-10`) should be attributed with exactly (or almost exactly) 10% of the execution time on each run. \r\n\r\nFor `serial.go` the time attribution should roughly follow the distribution shown below in each run.\r\n\r\n```\r\nFUNCTION NAME\t\t\tEXPECTED RELATIVE TIME\r\n\r\nA_expect_1_82\t\t\t1.82%\r\nB_expect_3_64\t\t\t3.64%\r\nC_expect_5_46\t\t\t5.46%\r\nD_expect_7_27\t\t\t7.27%\r\nE_expect_9_09\t\t\t9.09%\r\nF_expect_10_91\t\t\t10.91%\r\nG_expect_12_73\t\t\t12.73%\r\nH_expect_14_546\t\t\t14.546%\r\nI_expect_16_36\t\t\t16.36%\r\nJ_expect_18_18\t\t\t18.18%\r\n```\r\n\r\n\r\n### What did you see instead?\r\n\r\n#### test 1 (parallel)\r\nRun 1,  2, and 3, shown below, respectively show the `pprof -top` output of `goroutine.go`.\r\nYou will notice in a single run (say Run 1), `f1-f10` have a wide variance in the time attributed to them; the expectation is that each of them gets 10% execution time. There is up to `6x` difference in time attributed to the function with the highest amount if attribution (`main.f7`, `4210ms`, in `Run 1`) vs. the function with the lowest a amount of attribution (`main.f9`, `700ms`, in `Run 1`). This shows a poor accuracy (deviation from the ground truth) of pprof timer-based profiles.\r\n\r\nFurthermore, the time attributed to a function widely varies from run to run. Notice how the top-10 ordering changes. In `Run 1`, `main.f7` is shown to run for `4210ms`, whereas in `Run 2` it is shown to run for only `520ms`. The expectation is that the measurements remain the same from run to run. This shows a poor precision (unpredictability of measurement) of pprof timer-based profiles.\r\n\r\n#### goroutine.go/Run 1:\r\n```\r\nFile: goroutine\r\nType: cpu\r\nTime: Jan 27, 2020 at 3:45pm (PST)\r\nDuration: 6.70s, Total samples = 18060ms (269.37%)\r\nShowing nodes accounting for 18060ms, 100% of 18060ms total\r\n      flat  flat%   sum%        cum   cum%\r\n    4210ms 23.31% 23.31%     4210ms 23.31%  main.f7\r\n    2610ms 14.45% 37.76%     2610ms 14.45%  main.f2\r\n    2010ms 11.13% 48.89%     2010ms 11.13%  main.f6\r\n    1810ms 10.02% 58.91%     1810ms 10.02%  main.f10\r\n    1780ms  9.86% 68.77%     1780ms  9.86%  main.f3\r\n    1410ms  7.81% 76.58%     1410ms  7.81%  main.f1\r\n    1310ms  7.25% 83.83%     1310ms  7.25%  main.f4\r\n    1110ms  6.15% 89.98%     1110ms  6.15%  main.f5\r\n    1110ms  6.15% 96.12%     1110ms  6.15%  main.f8\r\n     700ms  3.88%   100%      700ms  3.88%  main.f9\r\n```\r\n\r\n#### goroutine.go/Run 2:\r\n```\r\nFile: goroutine\r\nType: cpu\r\nTime: Jan 27, 2020 at 3:45pm (PST)\r\nDuration: 6.71s, Total samples = 17400ms (259.39%)\r\nShowing nodes accounting for 17400ms, 100% of 17400ms total\r\n      flat  flat%   sum%        cum   cum%\r\n    3250ms 18.68% 18.68%     3250ms 18.68%  main.f2\r\n    2180ms 12.53% 31.21%     2180ms 12.53%  main.f9\r\n    2100ms 12.07% 43.28%     2100ms 12.07%  main.f1\r\n    1770ms 10.17% 53.45%     1770ms 10.17%  main.f6\r\n    1700ms  9.77% 63.22%     1700ms  9.77%  main.f5\r\n    1550ms  8.91% 72.13%     1550ms  8.91%  main.f4\r\n    1500ms  8.62% 80.75%     1500ms  8.62%  main.f8\r\n    1440ms  8.28% 89.02%     1440ms  8.28%  main.f3\r\n    1390ms  7.99% 97.01%     1390ms  7.99%  main.f10\r\n     520ms  2.99%   100%      520ms  2.99%  main.f7\r\n```\r\n\r\n\r\n#### goroutine.go/Run 3:\r\n```\r\nFile: goroutine\r\nType: cpu\r\nTime: Jan 27, 2020 at 3:48pm (PST)\r\nDuration: 6.71s, Total samples = 17.73s (264.31%)\r\nShowing nodes accounting for 17.73s, 100% of 17.73s total\r\n      flat  flat%   sum%        cum   cum%\r\n     3.74s 21.09% 21.09%      3.74s 21.09%  main.f7\r\n     2.08s 11.73% 32.83%      2.08s 11.73%  main.f9\r\n     2.05s 11.56% 44.39%      2.05s 11.56%  main.f2\r\n     1.85s 10.43% 54.82%      1.85s 10.43%  main.f10\r\n     1.78s 10.04% 64.86%      1.78s 10.04%  main.f1\r\n     1.43s  8.07% 72.93%      1.43s  8.07%  main.f3\r\n     1.42s  8.01% 80.94%      1.42s  8.01%  main.f8\r\n     1.18s  6.66% 87.59%      1.18s  6.66%  main.f6\r\n     1.17s  6.60% 94.19%      1.17s  6.60%  main.f5\r\n     1.03s  5.81%   100%      1.03s  5.81%  main.f4\r\n```\r\n\r\n#### test 2 (serial)\r\nThe output for `go run serial.go &&  go tool pprof -top serial_prof` for three runs is shown below.\r\nComparing the flat% (or cum%) against the expected percentage for each function shows a large difference. For example, `main.H_expect_14_546`, which is expected to have 14.546% execution time, is attributed 25% of the execution time in Run 1. Furthermore, run to run, there is a lack of precision, for example, `main.I_expect_16_36` is attributed 6.25% (20ms) execution time in Run 1, whereas it is attributed 21.88% (70ms)  execution time in Run 2.\r\n\r\n\r\n#### serial.go/Run 1:\r\n```\r\nFile: serial\r\nType: cpu\r\nTime: Jan 27, 2020 at 1:42pm (PST)\r\nDuration: 501.51ms, Total samples = 320ms (63.81%)\r\nShowing nodes accounting for 320ms, 100% of 320ms total\r\n      flat  flat%   sum%        cum   cum%\r\n      80ms 25.00% 25.00%       80ms 25.00%  main.H_expect_14_546\r\n      80ms 25.00% 50.00%       80ms 25.00%  main.J_expect_18_18\r\n      60ms 18.75% 68.75%       60ms 18.75%  main.G_expect_12_73\r\n      20ms  6.25% 75.00%       20ms  6.25%  main.B_expect_3_64\r\n      20ms  6.25% 81.25%       20ms  6.25%  main.D_expect_7_27\r\n      20ms  6.25% 87.50%       20ms  6.25%  main.F_expect_10_91\r\n      20ms  6.25% 93.75%       20ms  6.25%  main.I_expect_16_36\r\n      10ms  3.12% 96.88%       10ms  3.12%  main.A_expect_1_82\r\n      10ms  3.12%   100%       10ms  3.12%  main.C_expect_5_46\r\n         0     0%   100%      320ms   100%  main.main\r\n         0     0%   100%      320ms   100%  runtime.main\r\n```\r\n#### serial.go/Run 2:\r\n```\r\nFile: serial\r\nType: cpu\r\nTime: Jan 27, 2020 at 1:44pm (PST)\r\nDuration: 501.31ms, Total samples = 320ms (63.83%)\r\nShowing nodes accounting for 320ms, 100% of 320ms total\r\n      flat  flat%   sum%        cum   cum%\r\n      70ms 21.88% 21.88%       70ms 21.88%  main.I_expect_16_36\r\n      50ms 15.62% 37.50%       50ms 15.62%  main.J_expect_18_18\r\n      40ms 12.50% 50.00%       40ms 12.50%  main.E_expect_9_09\r\n      40ms 12.50% 62.50%       40ms 12.50%  main.F_expect_10_91\r\n      40ms 12.50% 75.00%       40ms 12.50%  main.H_expect_14_546\r\n      30ms  9.38% 84.38%       30ms  9.38%  main.D_expect_7_27\r\n      20ms  6.25% 90.62%       20ms  6.25%  main.B_expect_3_64\r\n      20ms  6.25% 96.88%       20ms  6.25%  main.G_expect_12_73\r\n      10ms  3.12%   100%       10ms  3.12%  main.C_expect_5_46\r\n         0     0%   100%      320ms   100%  main.main\r\n         0     0%   100%      320ms   100%  runtime.main\r\n```\r\n#### serial.go/Run 3:\r\n```\r\nFile: serial\r\nType: cpu\r\nTime: Jan 27, 2020 at 1:45pm (PST)\r\nDuration: 501.39ms, Total samples = 310ms (61.83%)\r\nShowing nodes accounting for 310ms, 100% of 310ms total\r\n      flat  flat%   sum%        cum   cum%\r\n     110ms 35.48% 35.48%      110ms 35.48%  main.J_expect_18_18\r\n      70ms 22.58% 58.06%       70ms 22.58%  main.G_expect_12_73\r\n      60ms 19.35% 77.42%       60ms 19.35%  main.F_expect_10_91\r\n      30ms  9.68% 87.10%       30ms  9.68%  main.I_expect_16_36\r\n      20ms  6.45% 93.55%       20ms  6.45%  main.H_expect_14_546\r\n      10ms  3.23% 96.77%       10ms  3.23%  main.B_expect_3_64\r\n      10ms  3.23%   100%       10ms  3.23%  main.C_expect_5_46\r\n         0     0%   100%      310ms   100%  main.main\r\n         0     0%   100%      310ms   100%  runtime.main\r\n```\r\n\r\n### Improved results with PMU-based profiling.\r\n\r\nIn a prototype PMU-based profiling implementation, below are the pprof profiles for CPU cycles hardware performance counter for the same `goroutine.go` program. Notice that each functions gets the same (or almost the same) CPU cycles attribution within a single run and across runs.\r\n\r\n#### goroutine.go/Run 1:\r\n```\r\nFile: goroutine\r\nType: cycles\r\nTime: Jan 27, 2020 at 4:49pm (PST)\r\nShowing nodes accounting for 234000000000, 100% of 234000000000 total\r\n      flat  flat%   sum%        cum   cum%\r\n23400000000 10.00% 10.00% 23400000000 10.00%  main.f1\r\n23400000000 10.00% 20.00% 23400000000 10.00%  main.f10\r\n23400000000 10.00% 30.00% 23400000000 10.00%  main.f2\r\n23400000000 10.00% 40.00% 23400000000 10.00%  main.f3\r\n23400000000 10.00% 50.00% 23400000000 10.00%  main.f4\r\n23400000000 10.00% 60.00% 23400000000 10.00%  main.f5\r\n23400000000 10.00% 70.00% 23400000000 10.00%  main.f6\r\n23400000000 10.00% 80.00% 23400000000 10.00%  main.f7\r\n23400000000 10.00% 90.00% 23400000000 10.00%  main.f8\r\n23400000000 10.00%   100% 23400000000 10.00%  main.f9\r\n```\r\n\r\n#### goroutine.go/Run 2:\r\n```\r\nFile: goroutine\r\nType: cycles\r\nTime: Jan 27, 2020 at 4:51pm (PST)\r\nShowing nodes accounting for 234000000000, 100% of 234000000000 total\r\n      flat  flat%   sum%        cum   cum%\r\n23800000000 10.17% 10.17% 23800000000 10.17%  main.f1\r\n23500000000 10.04% 20.21% 23500000000 10.04%  main.f7\r\n23500000000 10.04% 30.26% 23500000000 10.04%  main.f9\r\n23400000000 10.00% 40.26% 23400000000 10.00%  main.f10\r\n23400000000 10.00% 50.26% 23400000000 10.00%  main.f2\r\n23400000000 10.00% 60.26% 23400000000 10.00%  main.f4\r\n23400000000 10.00% 70.26% 23400000000 10.00%  main.f6\r\n23400000000 10.00% 80.26% 23400000000 10.00%  main.f8\r\n23300000000  9.96% 90.21% 23300000000  9.96%  main.f3\r\n22900000000  9.79%   100% 22900000000  9.79%  main.f5\r\n```\r\n\r\nBelow are the pprof profiles for CPU cycles hardware performance counter for the same `serial.go` program. Notice that each function gets close to expected CPU cycles attribution within a single run and across runs.\r\n\r\n#### serial.go/Run 1:\r\n```\r\nFile: serial\r\nType: cycles\r\nTime: Jan 27, 2020 at 4:54pm (PST)\r\nShowing nodes accounting for 1105000000, 100% of 1105000000 total\r\n      flat  flat%   sum%        cum   cum%\r\n 200000000 18.10% 18.10%  200000000 18.10%  main.J_expect_18_18\r\n 183000000 16.56% 34.66%  183000000 16.56%  main.I_expect_16_36\r\n 165000000 14.93% 49.59%  165000000 14.93%  main.H_expect_14_546\r\n 137000000 12.40% 61.99%  137000000 12.40%  main.G_expect_12_73\r\n 120000000 10.86% 72.85%  120000000 10.86%  main.F_expect_10_91\r\n 100000000  9.05% 81.90%  100000000  9.05%  main.E_expect_9_09\r\n  82000000  7.42% 89.32%   82000000  7.42%  main.D_expect_7_27\r\n  63000000  5.70% 95.02%   63000000  5.70%  main.C_expect_5_46\r\n  37000000  3.35% 98.37%   37000000  3.35%  main.B_expect_3_64\r\n  18000000  1.63%   100%   18000000  1.63%  main.A_expect_1_82\r\n         0     0%   100% 1105000000   100%  main.main\r\n         0     0%   100% 1105000000   100%  runtime.main\r\n```\r\n\r\n#### serial.go/Run 2:\r\n```\r\nFile: serial\r\nType: cycles\r\nTime: Jan 27, 2020 at 4:54pm (PST)\r\nShowing nodes accounting for 1105000000, 100% of 1105000000 total\r\n      flat  flat%   sum%        cum   cum%\r\n 200000000 18.10% 18.10%  200000000 18.10%  main.J_expect_18_18\r\n 183000000 16.56% 34.66%  183000000 16.56%  main.I_expect_16_36\r\n 159000000 14.39% 49.05%  159000000 14.39%  main.H_expect_14_546\r\n 142000000 12.85% 61.90%  142000000 12.85%  main.G_expect_12_73\r\n 119000000 10.77% 72.67%  119000000 10.77%  main.F_expect_10_91\r\n 100000000  9.05% 81.72%  100000000  9.05%  main.E_expect_9_09\r\n  82000000  7.42% 89.14%   82000000  7.42%  main.D_expect_7_27\r\n  61000000  5.52% 94.66%   61000000  5.52%  main.C_expect_5_46\r\n  40000000  3.62% 98.28%   40000000  3.62%  main.B_expect_3_64\r\n  18000000  1.63% 99.91%   18000000  1.63%  main.A_expect_1_82\r\n   1000000  0.09%   100% 1105000000   100%  main.main\r\n         0     0%   100% 1105000000   100%  runtime.main\r\n```\r\n\r\n### Dependence on the number of cores and length of test execution:\r\n\r\nThe results of `goroutine.go` test depend on the number of CPU cores available. On a multi-core CPU, if you set `GOMAXPROCS=1`, `goroutine.go` will not show a huge variation, since each goroutine runs for several seconds. However, if you set  `GOMAXPROCS` to a larger value, say 4, you will notice a significant measurement attribution problem. One reason for this problem is that the itimer samples on Linux are not guaranteed to be delivered to the thread whose timer expired. \r\n\r\nThe results of `serial.go` can change based on the time of execution of each function. By passing the `-m=<int>` to the program, you can make the program run for longer or shorter. By making it run longer, the profiles can be made more accurate, but when a function runs for less than 100ms, the accuracy is often low. ", "labels": ["Proposal"], "number_of_comments": 9, "created_at": "2020-01-28 01:17:45", "reactions": {"total_count": 19, "+1": 16, "-1": 0, "laugh": 0, "heart": 3, "hooray": 0}}, "555907453": {"author_username": "zerkms", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36819, "title": "net/http: graceful shutdown race condition", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n**Update**: I have found a super trivial way to reproduce it, see the step at the very bottom\r\n\r\nPreamble: I think it's relevant to https://github.com/golang/go/issues/23829\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go _version_\r\ngo version go1.13.6 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/ivan/.cache/go-build\"\r\nGOENV=\"/home/ivan/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/srv/work/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/ivan/.local/share/umake/go/go-lang\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/ivan/.local/share/umake/go/go-lang/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build903857222=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"fmt\"\r\n\t\"net/http\"\r\n\t\"os\"\r\n\t\"os/signal\"\r\n\t\"syscall\"\r\n)\r\n\r\nfunc main() {\r\n\tsig := make(chan os.Signal, 1)\r\n\tsignal.Notify(sig, syscall.SIGTERM, os.Interrupt)\r\n\r\n\tmux := http.NewServeMux()\r\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {})\r\n\r\n\tsrv := &http.Server{\r\n\t\tAddr:    \":8080\",\r\n\t\tHandler: mux,\r\n\t}\r\n\r\n\tgo func() {\r\n\t\tfmt.Println(srv.ListenAndServe())\r\n\t}()\r\n\r\n\t<-sig\r\n\tfmt.Println(srv.Shutdown(context.Background()))\r\n}\r\n```\r\n\r\nWith the following code it's possible to get a case when the _new_ connection in accepted, then closed within milliseconds, which makes the shutdown not graceful\r\n\r\n\r\n### What did you expect to see?\r\nA graceful shutdown\r\n\r\n\r\n### What did you see instead?\r\n![Screenshot from 2020-01-28 11-29-15](https://user-images.githubusercontent.com/302295/73224371-29e28180-41ce-11ea-9478-f8a0063f98a5.png)\r\n\r\n![Screenshot from 2020-01-28 13-04-16](https://user-images.githubusercontent.com/302295/73224546-b2f9b880-41ce-11ea-8209-a03b0e1e2692.png)\r\n\r\nHow to reproduce:\r\n\r\nJust `ab -t 20 -c 5 -A foo:foo http://localhost:8080/` is enough to capture the case. The former is much more rare, the latter is quite frequent.\r\n\r\nWhat you can see on screenshots: the connection is accepted, then as per https://go-review.googlesource.com/c/go/+/121419/ it should be treated as \"new\" (but it's not due to race), and is closed.\r\nIn first case the client had chance to send a request.\r\nIn second - it was closed even before that.\r\n\r\nIn both cases it happens with the `Connection reset by peer` on the client side, which should never be the case with non-keepalived connections and graceful termination.\r\n\r\nBoth pcap files are available at: https://www.dropbox.com/s/2co7wkucfey90zz/bug.tgz?dl=0\r\n\r\nMy assumption on why it's the race and how it happens:\r\n\r\n1. the connection is accepted with `rw, e := l.Accept()` successfully\r\n2. A moment later a shutdown request is made\r\n3. Before the `c.setState(c.rwc, StateNew)` statement is reached the server completes shutdown\r\n4. Because the connection is not tracked - `http.Server` is not aware of it\r\n5. The process quits, network sockets are closed by kernel\r\n\r\n**UPDATE**:\r\n\r\nIt can be easier reproducible by adding `time.Sleep(3 * time.Second)` right before `c := srv.newConn(rw)`\r\n\r\nSteps:\r\n\r\n1. Patch the `http/server.go` with `time.Sleep(3 * time.Second)` before `c := srv.newConn(rw)`\r\n2. Start the app\r\n3. Make a request\r\n4. Send ctrl-c\r\n\r\nExpected: the request should complete\r\nActual:\r\n\r\n```\r\n\u279c curl -v --user foo:foo http://localhost:8080\r\n* Rebuilt URL to: http://localhost:8080/\r\n*   Trying 127.0.0.1...\r\n* TCP_NODELAY set\r\n* Connected to localhost (127.0.0.1) port 8080 (#0)\r\n* Server auth using Basic with user 'foo'\r\n> GET / HTTP/1.1\r\n> Host: localhost:8080\r\n> Authorization: Basic Zm9vOmZvbw==\r\n> User-Agent: curl/7.58.0\r\n> Accept: */*\r\n> \r\n* Recv failure: Connection reset by peer\r\n* stopped the pause stream!\r\n* Closing connection 0\r\ncurl: (56) Recv failure: Connection reset by peer\r\n```\r\n\r\nAnd a corresponding pcap: https://www.dropbox.com/s/5vsvwoow4ydcs3f/with-timeout.tgz?dl=0\r\n\r\nAnd a corresponding wireshark screenshot:\r\n\r\n![Screenshot from 2020-01-28 14-02-22](https://user-images.githubusercontent.com/302295/73226992-dfb1ce00-41d6-11ea-961f-f752ad1da55f.png)\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-01-28 00:05:00", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555904048": {"author_username": "rgooch", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36818, "title": "x/crypto/acme/autocert: add hooks for transaction locks", "body": "The `Manager.createCert` method has a lock around the ACME transaction so that multiple goroutines can safely call this method concurrently. This does not protect against multiple processes (possibly on different machines) doing this concurrently.\r\n\r\nIf transaction hooks were added, then a caller could provide a custom `Cache` which uses remote storage, allowing multiple servers to safely request certificate generation/renewal and share the certificates.\r\n\r\nIf this approach is acceptable, I can start work on a PR.", "labels": ["NeedsDecision"], "number_of_comments": 0, "created_at": "2020-01-27 23:54:17", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555882930": {"author_username": "mvdan", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36817, "title": "io: use syscalls like copy_file_range in Copy when possible", "body": "@stapelberg just [made me aware](https://twitter.com/zekjur/status/1221901014225297408) of the [copy_file_range](https://manpages.debian.org/unstable/manpages-dev/copy_file_range.2.en.html) syscall. Quoting the summary:\r\n\r\n> The copy_file_range() system call performs an in-kernel copy between two file descriptors without the additional cost of transferring data from the kernel to user space and then back into the kernel. It copies up to len bytes of data from the source file descriptor fd_in to the target file descriptor fd_out, overwriting any data that exists within the requested range of the target file.\r\n\r\nIt's also already supported by the sys repo: https://godoc.org/golang.org/x/sys/unix#CopyFileRange\r\n\r\nWhen calling `Copy`, given that the conditions below are met:\r\n\r\n* `runtime.GOOS == \"linux\"`\r\n* Linux is version 4.5 or newer (when it was added)\r\n* The source and destination are `*os.File`\r\n\r\nThen, the syscall would be used to make a faster copy. I presume that we could do something similar on other platforms in the future, if they have similar syscalls.\r\n\r\nI think `CopyN` and `CopyBuffer` could also be included here, but they are left out initially for the sake of simplicity. For example, `CopyBuffer` could simply ignore the buffer argument when taking the syscall shortcut, as no user space memory is required.\r\n\r\nThere is only one tricky detail here, to my mind:\r\n\r\n> If src implements the WriterTo interface, the copy is implemented by calling src.WriteTo(dst). Otherwise, if dst implements the ReaderFrom interface, the copy is implemented by calling dst.ReadFrom(src). \r\n\r\nTo not break semantics and backwards compatibility, if either of those methods exists, the syscall shortcut can't be taken. One would rely on the method having a similar syscall shortcut, if needed. Luckily, it seems like `os.File` implements neither method, so we're in the clear.", "labels": ["NeedsDecision", "Performance"], "number_of_comments": 5, "created_at": "2020-01-27 22:55:39", "reactions": {"total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555874614": {"author_username": "pjebs", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36815, "title": "strconv: Add ParseCompex function", "body": "This change modifies Go to include a ParseComplex function in the strconv package.\r\nIt addresses: #36771\r\n\r\n", "labels": ["cla: yes"], "number_of_comments": 3, "created_at": "2020-01-27 22:34:24", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555863074": {"author_username": "mvdan", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36814, "title": "go.dev: support searching by modules", "body": "The current search functionality works on packages alone. That's fine, and useful - but quite limited in the module world.\r\n\r\nFor example, when I visit https://pkg.go.dev/search?q=sh, I'd expect to see https://pkg.go.dev/mod/mvdan.cc/sh/v3. Particularly since the query string is an exact match with the basename of the module path.\r\n\r\nHowever, because it happens to not be a Go package, it doesn't show up at all as neither a module nor a package. A few sub-packages show up later, but they are scattered, and aren't nearly as useful.\r\n\r\nI see two ways this could be addressed:\r\n\r\n1) Make the search work for both packages and modues, allowing to trim it down with selectors like `is:module`. Think like GitHub search, where you can search for both issues and PRs at once, but then trim it down via `is:issue`.\r\n2) Keep the search as it is now, but also add a \"module search\" page.\r\n\r\nI think 1 is far better, since most people will just use the default search page, leaving out many of their potentially useful results hidden away.", "labels": ["FeatureRequest", "NeedsInvestigation", "go.dev"], "number_of_comments": 2, "created_at": "2020-01-27 22:08:22", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555835887": {"author_username": "jayconrod", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36812, "title": "cmd/go: list and download may read go.mod unnecessarily", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14beta1 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/jayconrod/Library/Caches/go-build\"\r\nGOENV=\"/Users/jayconrod/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/jayconrod/Code/repro/gopath\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/opt/go/installed\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/opt/go/installed/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/Users/jayconrod/Code/test/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/rq/x0692kqj6ml8cvrhcqh5bswc008xj1/T/go-build200463196=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRun `go list -m` or `go mod download` in a directory with a malformed `go.mod` file. The commands are run with arguments that should not require information about the main module or the build list, so it shouldn't actually be necessary to read `go.mod`.\r\n\r\n```\r\ngo list -m -versions golang.org/x/mod\r\ngo mod download golang.org/x/mod@v0.2.0\r\n-- go.mod --\r\n\u0295\u25d4\u03d6\u25d4\u0294\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nBoth commands should succeed.\r\n\r\n### What did you see instead?\r\n\r\nBoth commands fail with an error like the one below:\r\n\r\n```\r\ngo: errors parsing go.mod:\r\n/Users/jayconrod/Code/test/go.mod:1: unknown directive: \u0295\u25d4\u03d6\u25d4\u0294\r\n```\r\n", "labels": ["NeedsFix", "modules"], "number_of_comments": 0, "created_at": "2020-01-27 21:12:56", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555799290": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36811, "title": "go.dev: support viewing a package @master", "body": "### What is the URL of the page with the issue?\r\n\r\nhttps://pkg.go.dev/github.com/moby/moby/client?tab=doc\r\n\r\n### What is your user agent?\r\n\r\n<pre>\r\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.66 Safari/537.36\r\n</pre>\r\n\r\n### Screenshot\r\n\r\n<img width=\"830\" alt=\"Screen Shot 2020-01-27 at 19 52 45\" src=\"https://user-images.githubusercontent.com/3374574/73208596-a463c080-413e-11ea-901f-3cba3c7a87c1.png\">\r\n\r\n### What did you do?\r\n\r\nVisited the aforementioned link.\r\n\r\n### What did you expect to see?\r\n\r\nThe current docs for `github.com/moby/moby/client`, like on godoc:\r\n\r\nhttps://godoc.org/github.com/docker/docker/client\r\n\r\n(notice https://github.com/docker/docker redirects to https://github.com/moby/moby)\r\n\r\n### What did you see instead?\r\n\r\nPer the screenshot, at the time of writing, docs for v1.13.1, which was tagged on Feb 8, 2017.\r\n\r\nThe godoc version is looking at `~master` at any given moment in time.\r\n\r\nThe current advice from the project maintainers is to use `master` of this package/module:\r\n\r\n* https://github.com/moby/moby/issues/40185#issuecomment-568483750\r\n* https://github.com/moby/moby/issues/40235\r\n\r\nHence only godoc.org works as a means of viewing \"current\" docs for `github.com/moby/moby/client`. \r\n\r\n\r\n\r\n", "labels": ["FeatureRequest", "NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-01-27 19:59:26", "reactions": {"total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555782378": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36810, "title": "go.dev: add site version details to the bottom of pkg.go.dev pages", "body": "### What is the URL of the page with the issue?\r\n\r\nhttps://pkg.go.dev/testing?tab=doc\r\n\r\n### What is your user agent?\r\n\r\n<pre>\r\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.66 Safari/537.36\r\n</pre>\r\n\r\n### Screenshot\r\n\r\n<img width=\"865\" alt=\"Screen Shot 2020-01-27 at 19 23 56\" src=\"https://user-images.githubusercontent.com/3374574/73206313-9744d280-413a-11ea-8e21-0f2fa38199a0.png\">\r\n\r\n### What did you do?\r\n\r\nVisited the aforementioned link.\r\n\r\n### What did you expect to see?\r\n\r\nA site version identifier at the bottom of the page.\r\n\r\n### What did you see instead?\r\n\r\nNothing. \r\n\r\nAdding a site version identifier will, I think, help with the reporting of issues and communication of when fixes/features land.\r\n", "labels": ["FeatureRequest", "NeedsInvestigation", "go.dev"], "number_of_comments": 2, "created_at": "2020-01-27 19:25:29", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555778701": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36808, "title": "go.dev: add ability to link to package doc subheadings", "body": "### What is the URL of the page with the issue?\r\n\r\nhttps://pkg.go.dev/testing?tab=doc\r\n\r\n### What is your user agent?\r\n\r\n<pre>\r\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.66 Safari/537.36\r\n</pre>\r\n\r\n### Screenshot\r\n\r\n<img width=\"967\" alt=\"Screen Shot 2020-01-27 at 19 12 01\" src=\"https://user-images.githubusercontent.com/3374574/73205552-1b965600-4139-11ea-88a2-9c5a37b8cd1f.png\">\r\n\r\n### What did you do?\r\n\r\nTried to link to the \"Benchmarks\" subsection of the `testing` package docs.\r\n\r\n### What did you expect to see?\r\n\r\nEach subheading to be a link such that hovering over it (the heading) a `\u00b6` symbol should appear, like on godoc:\r\n\r\n<img width=\"891\" alt=\"Screen Shot 2020-01-27 at 19 12 17\" src=\"https://user-images.githubusercontent.com/3374574/73205714-7def5680-4139-11ea-8664-2068967e8dac.png\">\r\n\r\nClicking that link should then change to the address bar URL to include the fragment. For example on godoc, for the \"Benchmarks\" subsection we end up with the URL:\r\n\r\nhttps://godoc.org/testing#hdr-Benchmarks\r\n\r\n### What did you see instead?\r\n\r\nNo ability to link to subsections of package documentation. ", "labels": ["FeatureRequest", "NeedsInvestigation", "go.dev"], "number_of_comments": 2, "created_at": "2020-01-27 19:18:11", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555774954": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36807, "title": "go.dev: add a 'y' keyboard shortcut to canonicalise URL with version", "body": "### What is the URL of the page with the issue?\r\n\r\nhttps://pkg.go.dev/github.com/govim/govim/cmd/govim/config?tab=doc\r\n\r\n### What is your user agent?\r\n\r\n<pre>\r\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.66 Safari/537.36\r\n</pre>\r\n\r\n### Screenshot\r\n\r\n<img width=\"818\" alt=\"Screen Shot 2020-01-27 at 19 07 01\" src=\"https://user-images.githubusercontent.com/3374574/73205104-3916f000-4138-11ea-8308-9a0cc191ef94.png\">\r\n\r\n### What did you do?\r\n\r\nNavigated to said page.\r\n\r\n### What did you expect to see?\r\n\r\nOn GitHub, the `y` keyboard shortcut allows the viewer to canonicalise the URL for the version of a file you are viewing:\r\n\r\n<img width=\"872\" alt=\"Screen Shot 2020-01-27 at 19 08 31\" src=\"https://user-images.githubusercontent.com/3374574/73205194-71b6c980-4138-11ea-8883-c970447ac406.png\">\r\n\r\nFor example, at the time of writing, hitting `y` whilst on:\r\n\r\nhttps://github.com/govim/govim/blob/master/cmd/govim/config/config.go\r\n\r\nupdates the address bar URL to be:\r\n\r\nhttps://github.com/govim/govim/blob/013f992e25f23cbc4a778d1eb472e719d276de32/cmd/govim/config/config.go\r\n\r\nI think a similar option should be offered on pkg.go.dev. For example, at the time of writing, hitting `y` whilst on:\r\n\r\nhttps://pkg.go.dev/github.com/govim/govim/cmd/govim/config?tab=doc\r\n\r\nwould update the address bar URL to be:\r\n\r\nhttps://pkg.go.dev/github.com/govim/govim@v0.0.27/cmd/govim/config?tab=doc\r\n\r\n### What did you see instead?\r\n\r\nNo option to do this.\r\n", "labels": ["FeatureRequest", "NeedsInvestigation", "go.dev"], "number_of_comments": 0, "created_at": "2020-01-27 19:11:03", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555772015": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36806, "title": "go.dev: partial search doesn't return (any) matches which are \"close\" or latest", "body": "### What is the URL of the page with the issue?\r\n\r\n* https://pkg.go.dev/search?q=goproxytes\r\n* https://pkg.go.dev/search?q=sh\r\n\r\n### What is your user agent?\r\n\r\n<pre>\r\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.66 Safari/537.36\r\n</pre>\r\n\r\n### Screenshot\r\n\r\nFor https://pkg.go.dev/search?q=goproxytes:\r\n\r\n<img width=\"735\" alt=\"Screen Shot 2020-01-27 at 18 59 27\" src=\"https://user-images.githubusercontent.com/3374574/73204610-2a7c0900-4137-11ea-803a-da081fd17bdc.png\">\r\n\r\nFor https://pkg.go.dev/search?q=sh:\r\n\r\n<img width=\"786\" alt=\"Screen Shot 2020-01-27 at 19 00 04\" src=\"https://user-images.githubusercontent.com/3374574/73204667-41226000-4137-11ea-9567-dcb7a2be1f7f.png\">\r\n\r\n\r\n### What did you do?\r\n\r\nVisited either of the search results pages above.\r\n\r\n### What did you expect to see?\r\n\r\nFor https://pkg.go.dev/search?q=goproxytes I would expect to see https://pkg.go.dev/github.com/rogpeppe/go-internal/goproxytest?tab=doc in the results.\r\n\r\nFor https://pkg.go.dev/search?q=sh I would expect to see:\r\n\r\n* https://pkg.go.dev/mvdan.cc/sh/v3/syntax?tab=doc fairly near the top of results\r\n* the modules `mvdan.cc/sh`, `mvdan.cc/sh/v2` and `mvdan.cc/sh/v3` listed as module search results, along with packages that are \"close\" matches\r\n\r\n### What did you see instead?\r\n\r\nFor https://pkg.go.dev/search?q=goproxytes, zero results.\r\n\r\nFor https://pkg.go.dev/search?q=sh a number of results which I would consider \"further away\" than https://pkg.go.dev/mvdan.cc/sh/v3/syntax?tab=doc\r\n\r\nFYI @mvdan ", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 3, "created_at": "2020-01-27 19:05:17", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555767549": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36805, "title": "go.dev: keyboard shortcut '/' should focus the search box", "body": "### What is the URL of the page with the issue?\r\n\r\nhttps://pkg.go.dev/github.com/govim/govim?tab=doc\r\n\r\n### What is your user agent?\r\n\r\n<pre>\r\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.66 Safari/537.36\r\n</pre>\r\n\r\n### Screenshot\r\n\r\n<img width=\"902\" alt=\"Screen Shot 2020-01-27 at 18 55 20\" src=\"https://user-images.githubusercontent.com/3374574/73204314-a7f34980-4136-11ea-8129-d8345d116f7f.png\">\r\n\r\n### What did you do?\r\n\r\nTried to focus the search input box using `/`\r\n\r\n### What did you expect to see?\r\n\r\nFocus shifting to the search box\r\n\r\n### What did you see instead?\r\n\r\nNothing happened.\r\n\r\nThis was a useful feature of godoc, e.g. try that keyboard shortcut on https://godoc.org/github.com/govim/govim\r\n\r\n<img width=\"703\" alt=\"Screen Shot 2020-01-27 at 18 55 45\" src=\"https://user-images.githubusercontent.com/3374574/73204403-c9eccc00-4136-11ea-878f-519de1822e58.png\">\r\n\r\n\r\n\r\n", "labels": ["FeatureRequest", "NeedsInvestigation", "go.dev"], "number_of_comments": 0, "created_at": "2020-01-27 18:57:02", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555707707": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36801, "title": "x/review/git-codereview: skip tests that require \"gofmt\" binary when it's not available", "body": "https://build.golang.org/log/36fc6a856500bd206f0f994b1565fb6badbe7034\r\n```\r\naix-ppc64 at 6fbdfe48041c883a9f6d8c981a7205b7c327862a building review at f51a73253c4da005cfdf18a036e11185c04c8ce3\r\n\u2026\r\n--- FAIL: TestGofmt (0.55s)\r\n    gofmt_test.go:46: git-codereview gofmt -l\r\n    util_test.go:323: died\r\n        stdout:\r\n        stderr:\r\n        git-codereview: invoking gofmt: exec: \"gofmt\": executable file not found in $PATH\r\n\u2026\r\n```\r\n\r\nI'm not sure whether this should be resolved by adding `gofmt` to the builder's `PATH`, by updating the `git-codereview` tool to invoke `go fmt` instead, by updating the test to install that tool if not present, or by updating the test to skip those cases if the `gofmt` binary is not found.\r\n\r\nThis is technically a release-blocker via #11811, but seems pretty minor.\r\n(CC @dmitshur @cagedmantis @toothrot @trex58)", "labels": ["NeedsFix", "Testing"], "number_of_comments": 3, "created_at": "2020-01-27 17:01:21", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555610110": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36797, "title": "net/http: occasional TestTransportDiscardsUnneededConns flakes with \"connection reset by peer\" on netbsd-amd64-8_0 builder", "body": "[2020-01-24T19:37:58-67539f6/netbsd-amd64-8_0](https://build.golang.org/log/ce78850f5f71d9a4bc95ce2a1176ceae22cf2f19)\r\n[2019-10-21T17:23:42-06ac262/netbsd-amd64-8_0](https://build.golang.org/log/d5ed033a8836b7b2092614adf9f75cd58da8e825)\r\n[2019-08-29T15:21:31-35ac194/netbsd-amd64-8_0](https://build.golang.org/log/b8c53d181d0d460fe6f0aa3d97bbeb5667b507cd)\r\n[2019-05-22T04:43:25-648c7b5/netbsd-amd64-8_0](https://build.golang.org/log/9fe964d7e92a62db8143f4729efb1f96e1dd8f82)\r\n\r\n```\r\n--- FAIL: TestTransportDiscardsUnneededConns (0.04s)\r\n    clientserver_test.go:1012: Get: Get \"https://127.0.0.1:56151\": dial tcp 127.0.0.1:56151: connect: connection reset by peer\r\nFAIL\r\nFAIL\tnet/http\t9.694s\r\n```\r\n\r\nNote that this test is also flaky (with a somewhat different failure mode) on macOS \u2014 see #33585.\r\n\r\nCC @bradfitz @bsiegert @toothrot @dmitshur @cagedmantis ", "labels": ["Builders", "NeedsInvestigation", "OS-NetBSD"], "number_of_comments": 0, "created_at": "2020-01-27 14:26:50", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555607133": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36796, "title": "net: TestReadTimeoutMustNotReturn failure on darwin-amd64-race builder", "body": "[2020-01-24T19:37:58-67539f6/darwin-amd64-race](https://build.golang.org/log/3a2fb33a4a5a9a01edc22be08cbb42f317abf67d)\r\n\r\n```\r\n--- FAIL: TestReadTimeoutMustNotReturn (0.33s)\r\n    timeout_test.go:389: set tcp 127.0.0.1:49974: use of closed network connection\r\n    timeout_test.go:392: set tcp 127.0.0.1:49974: use of closed network connection\r\n    timeout_test.go:395: set tcp 127.0.0.1:49974: use of closed network connection\r\nFAIL\r\nFAIL\tnet\t16.643s\r\n```\r\n\r\nSee previously #14986.\r\n\r\nCC @ianlancetaylor @mikioh @bradfitz ", "labels": ["NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-01-27 14:22:18", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555552387": {"author_username": "rogpeppe", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36794, "title": "runtime/race: race detector sometimes misses race on []byte copy", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +6dbcc8b865 Thu Jan 9 15:38:00 2020 +0000 linux/amd64\r\n</pre>\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"auto\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/rog/.cache/go-build\"\r\nGOENV=\"/home/rog/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"github.com/heetch\"\r\nGONOSUMDB=\"github.com/heetch\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/rog/src/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/rog/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/rog/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/tmp/m/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build752416385=/tmp/go-build -gno-record-gcc-switches\"\r\n/pre></details>\r\n\r\n### What did you do?\r\n\r\nWhen this test code runs under the race detector, I don't see a race detected, even though there is a race. When I add a sleep (set `bogus` to true), the race detector does find the race.\r\n\r\nhttps://play.golang.org/p/ECoOELB1fC1\r\n\r\n```\r\npackage test\r\n\r\nimport (\r\n\t\"sync\"\r\n\t\"testing\"\r\n\t\"time\"\r\n)\r\n\r\nconst bogus = false\r\n\r\nfunc corrupt(data []byte) {\r\n\tcopy(data, data[2:])\r\n}\r\n\r\nvar saved string\r\n\r\nfunc TestFoo(t *testing.T) {\r\n\tdata := []byte(\"hello there\")\r\n\tvar wg sync.WaitGroup\r\n\twg.Add(1)\r\n\tgo func() {\r\n\t\tsaved = string(data)\r\n\t\twg.Done()\r\n\t}()\r\n\tif bogus {\r\n\t\ttime.Sleep(time.Millisecond)\r\n\t}\r\n\tcorrupt(data)\r\n\twg.Wait()\r\n\tt.Logf(\"saved %q; data %q\", saved, data)\r\n}\r\n```\r\n", "labels": ["NeedsFix"], "number_of_comments": 5, "created_at": "2020-01-27 12:49:22", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555527387": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36793, "title": "cmd/go: go list -m reports command-line-arguments when called outside a module", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14beta1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/home/manlio/.local/bin\"\r\nGOCACHE=\"/home/manlio/.cache/go-build\"\r\nGOENV=\"/home/manlio/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"github.com/perillo\"\r\nGONOSUMDB=\"github.com/perillo\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/manlio/.local/lib/go:/home/manlio/src/go\"\r\nGOPRIVATE=\"github.com/perillo\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/manlio/sdk/go1.14beta1\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/manlio/sdk/go1.14beta1/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/dev/null\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build475655411=/tmp/go-build -gno-record-gcc-switches\"\r\nGOROOT/bin/go version: go version go1.14beta1 linux/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.14beta1\r\nuname -sr: Linux 5.4.15-arch1-1\r\n/usr/lib/libc.so.6: GNU C Library (GNU libc) stable release version 2.30.\r\ngdb --version: GNU gdb (GDB) 8.3.1\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nIn a directory with no reachable `go.mod`:\r\n\r\n```\r\ngo list -m -json\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n`go list` should report an error, since there is no module.\r\n\r\n### What did you see instead?\r\n\r\n```\r\n{\r\n\t\"Path\": \"command-line-arguments\",\r\n\t\"Main\": true\r\n}\r\n```\r\n\r\nThis really feels wrong for me.", "labels": ["NeedsInvestigation", "modules"], "number_of_comments": 3, "created_at": "2020-01-27 11:57:21", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555451518": {"author_username": "mvdan", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36791, "title": "go.dev: modules with no package at the root directory are shown awkwardly", "body": "For example, say I want to share a module with friends. Coming from godoc.org, and being used to `go list -m`, I simply do: https://pkg.go.dev/mvdan.cc/sh/v3\r\n\r\nHowever, that page looks wrong. It simply lists the subdirectories, not showing much else that's useful besides the version and license.\r\n\r\nPerhaps I have to click into the \"overview\" tab? That seems to work, as it shows me the README at least. But other useful tabs like `Versions` are greyed out. What gives?\r\n\r\nIt turns out what I actually want is https://pkg.go.dev/mod/mvdan.cc/sh/v3. Funnily enough, that page looks almost exactly the same as the previous overview tab, but with a different set of tabs.\r\n\r\nI find this pretty confusing. As a module author, which one should I be sharing with others? I think I clearly want the last URL for the module view, but I presume many Go users will go through the same three-step dance to get to the information we want, just like I did.\r\n\r\nI think the root of the problem here is that we're not giving module information enough priority. I see two ways we could address this; they could both be done at the same time.\r\n\r\n1) If a path is a module and *not* a Go package, we should directly show the module information, e.g. via a redirect\r\n2) If a path is *both* a module and a Go package, we should make that extremely clear, and not just via the small `Module:` text tucked away between the title and the bar with tabs.\r\n\r\nIn my particular case, 1 would be important so that people find what's useful right away, even if they try the \"wrong\" URL. If they really do want the package subdirectories, they can always use https://pkg.go.dev/mvdan.cc/sh/v3?tab=subdirectories.\r\n\r\nNumber 2 would make the site far less confusing in my eyes. The discovery site seems to give preference to packages over modules, which I assume is to be expected given `godoc.org`, and how `go list` requires the `-m` flag to be switched to modules. However, I think a path being the root of a module is very important information we should make extremely obvious to someone skimming the page.", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 1, "created_at": "2020-01-27 09:28:45", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555382351": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36789, "title": "x/tools/gopls: inconsistent behaviour with GOFLAGS=-mod=readonly set", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +73d213708e Sat Jan 25 16:34:18 2020 +0000 linux/amd64\r\n$ go list -m golang.org/x/tools\r\ngolang.org/x/tools v0.0.0-20200124220429-8fe064f891f2\r\n$ go list -m golang.org/x/tools/gopls\r\ngolang.org/x/tools/gopls v0.1.8-0.20200124220429-8fe064f891f2\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/myitcv/.cache/go-build\"\r\nGOENV=\"/home/myitcv/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/myitcv/gostuff\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/myitcv/gos\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/myitcv/gos/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/myitcv/gostuff/src/github.com/myitcv/govim/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build912581415=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nWe have a `govim` test that verifies the setting of the `\"env\"` value `GOFLAG=-mod=readonly`. It is based on the following setup:\r\n\r\n```\r\n-- go.mod --\r\nmodule mod.com\r\n\r\ngo 1.13\r\n-- main.go --\r\npackage main\r\n\r\nimport \"example.com/blah\"\r\n\r\nfunc main() {\r\n\tprintln(blah.Name)\r\n}\r\n```\r\n\r\n(`example.com/blah` is a valid module and is accessible).\r\n\r\nWe initially verify that we have the following diagnostic:\r\n\r\n```\r\nPublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\r\n    URI:         \"file:///tmp/go-test-script844433945/script-config_set_env_goflags_mod_readonly/main.go\",\r\n    Version:     1,\r\n    Diagnostics: {\r\n        {\r\n            Range: protocol.Range{\r\n                Start: protocol.Position{Line:2, Character:7},\r\n                End:   protocol.Position{Line:2, Character:25},\r\n            },\r\n            Severity:           1,\r\n            Code:               nil,\r\n            Source:             \"compiler\",\r\n            Message:            \"could not import example.com/blah (no package for import example.com/blah)\",\r\n            Tags:               nil,\r\n            RelatedInformation: nil,\r\n        },\r\n    },If applicable, copy/paste the text or add screenshots to help explain your problem.\r\n\r\n}\r\n```\r\n\r\nHowever we often (~50% of the time, which is actually 100% of the time on CI, I can't reproduce locally) do not receive this diagnostic.\r\n\r\nThe following errors are logged by `gopls`:\r\n\r\n```\r\nParams: {\"type\":1,\"message\":\"2020/01/26 21:52:32 diagnose: no workspace packages: go [-e -json -compiled=true -test=true -export=false -deps=true -find=false -- ./... builtin]: exit status 1: build mod.com: cannot load example.com/blah: import lookup disabled by -mod=readonly\\n\\n\\tdirectory = 0xa932b0\"}\r\n```\r\n\r\nWhat's interesting is that when this test passes we do not see this or any errors logged by `gopls`.\r\n\r\nGiven I can't repro this locally it suggests there's an element of timing involved. \r\n\r\n### What did you expect to see?\r\n\r\nConsistently receiving an initial diagnostic from `gopls` for `main.go`\r\n\r\n### What did you see instead?\r\n\r\nAs above.\r\n\r\n* `gopls` log for failing test: [fail.log](https://github.com/golang/go/files/4115797/fail.log)\r\n* `gopls` log for passing test: [pass.log](https://github.com/golang/go/files/4115798/pass.log)\r\n\r\nMarking as `v1.0.0` because this isn't critical for `v0.3.0` to my mind.\r\n\r\n---\r\n\r\ncc @stamblerre\r\n\r\nFYI @leitzler\r\n", "labels": ["NeedsInvestigation", "Tools", "gopls"], "number_of_comments": 1, "created_at": "2020-01-27 06:32:20", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555355753": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36787, "title": "x/tools/gopls: support code lenses", "body": "We should support the [`textDocument/codeLens`](https://microsoft.github.io/language-server-protocol/specifications/specification-3-15/#textDocument_codeLens) request type.\r\nThe VS Code Go extension has a number of code lenses we could add as a starting point.\r\nSee https://github.com/microsoft/vscode-go/issues/3003.", "labels": ["FeatureRequest", "Tools", "gopls"], "number_of_comments": 1, "created_at": "2020-01-27 04:56:27", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555281645": {"author_username": "rhcarvalho", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36785, "title": "go.dev: API for pkg.go.dev", "body": "Prior to [pkg.go.dev](https://pkg.go.dev), [godoc.org](https://godoc.org) has had a JSON API that can be used to, among other things, discover importers of a given package.\r\n\r\nExample: https://api.godoc.org/importers/golang.org/x/net/html\r\n\r\nGiven that [pkg.go.dev](https://pkg.go.dev) does a much better job at tracking importers thanks to Go Modules and the Module Proxy, it would be nice if the community could get access to a public API similar to that of [godoc.org](https://godoc.org).", "labels": ["FeatureRequest", "NeedsInvestigation", "WaitingForInfo", "go.dev"], "number_of_comments": 2, "created_at": "2020-01-26 20:16:21", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555264875": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36784, "title": "cmd/go: documentation of `go build` -o flag is misleading", "body": "The documentation of `go build` says:\r\n\r\n```\r\nThe -o flag forces build to write the resulting executable or object\r\nto the named output file or directory, instead of the default behavior described\r\nin the last two paragraphs. If the named output is a directory that exists,\r\nthen any resulting executables will be written to that directory.\r\n```\r\n\r\nHowever an object is generated only if the `-o` flag specifies a file.\r\n\r\nTo make things more confusing, when I have a *non main* package in the project root and a *main* package in a sub-directory, `go build -o file ./...` reports:\r\n\r\n```\r\ngo build: cannot write multiple packages to non-directory file\r\n```", "labels": ["Documentation", "WaitingForInfo"], "number_of_comments": 9, "created_at": "2020-01-26 18:05:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555256742": {"author_username": "HowJMay", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36783, "title": "x/website: Fix wrong variable name", "body": "fixes #36779\r\n", "labels": ["cla: yes"], "number_of_comments": 3, "created_at": "2020-01-26 16:58:30", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555242678": {"author_username": "TennyZhuang", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36780, "title": "cmd/compile: output cost while inlining function with `Debug['m'] > 1`", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/data/1/zty/.cache/go-build\"\r\nGOENV=\"/data/1/zty/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/data/1/zty/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://goproxy.cn,direct\"\r\nGOROOT=\"/usr/lib/golang\"\r\nGOSUMDB=\"off\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/lib/golang/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/data/1/zty/rclone/contrib/tidb/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build691466518=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n`go build -gcflags=-m=2 .`\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nIf a function can not be inline, the error message will output the cost:\r\n\r\n```\r\n\"%v: cannot inline %v: function too complex: cost %d exceeds budget %d\\n\"\r\n```\r\n\r\nBut if a function is inlinable, only\r\n\r\n```\r\n%v: can inline %#v as: %#v { %#v }\\n\"\r\n```\r\n\r\nis output without cost. The behavior is not very consistent, and the cost info is also useful to user who try to optimize his code.\r\n\r\n### What did you expect to see?\r\n\r\n\r\n```\r\n%v: can inline %#v with cost %d as: %#v { %#v }\\n\"\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n%v: can inline %#v as: %#v { %#v }\\n\"\r\n```", "labels": ["NeedsInvestigation"], "number_of_comments": 3, "created_at": "2020-01-26 15:16:34", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555240023": {"author_username": "atc0005", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36779, "title": "x/website: Potential reference to wrong variable name \"TitleValidator\"", "body": "While reading this article:\r\n\r\nhttps://golang.org/doc/articles/wiki/\r\n\r\nI got to the point where the author is explaining how the `makeHandler` function uses the regex created earlier to validate the `title` provided by the user.\r\n\r\n> The closure extracts the title from the request path, and validates it with the `TitleValidator` regexp.\r\n\r\nThe actual variable name is `validPath`. From the way the explanation is written, it seems that the text should instead be:\r\n\r\n> The closure extracts the title from the request path, and validates it with the `validPath` regexp.\r\n\r\n---\r\n\r\nMany thanks for writing this article. I learned a lot and plan to reference it often as I continue to learn more about Go and writing web apps.", "labels": ["Documentation", "NeedsFix", "help wanted"], "number_of_comments": 5, "created_at": "2020-01-26 14:59:13", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555218485": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36775, "title": "cmd/go: document that `go mod init` can guess the module path when inside GOPATH", "body": "`go mod help init` says:\r\n\r\n```\r\nIf possible, init will guess the module path from import comments\r\n(see 'go help importpath') or from version control configuration.\r\n```\r\n\r\nHowever when calling `go mod init` (on an empty project) inside `$GOPATH`, the module path is correctly guessed.\r\n\r\nOn the other hand, when `go mod init` is called outside `$GOPATH`, it reports an error:\r\n\r\n```\r\ngo: cannot determine module path for source directory /tmp/go/test (outside GOPATH, module path must be specified)\r\n```\r\n\r\nThis is not documented.", "labels": ["Documentation", "NeedsFix"], "number_of_comments": 3, "created_at": "2020-01-26 12:01:02", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555217174": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36774, "title": "cmd/go: go mod init accepts malformed module paths", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14beta1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\ngo1.14beta1 is the latest release\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/home/manlio/.local/bin\"\r\nGOCACHE=\"/home/manlio/.cache/go-build\"\r\nGOENV=\"/home/manlio/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"github.com/perillo\"\r\nGONOSUMDB=\"github.com/perillo\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/manlio/.local/lib/go:/home/manlio/src/go\"\r\nGOPRIVATE=\"github.com/perillo\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/manlio/sdk/go1.14beta1\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/manlio/sdk/go1.14beta1/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/manlio/src/go/src/mperillo/bar/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build515447885=/tmp/go-build -gno-record-gcc-switches\"\r\nGOROOT/bin/go version: go version go1.14beta1 linux/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.14beta1\r\nuname -sr: Linux 5.4.13-arch1-1\r\n/usr/lib/libc.so.6: GNU C Library (GNU libc) stable release version 2.30.\r\ngdb --version: GNU gdb (GDB) 8.3.1\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```\r\ngo mod init mperillo/test\r\n```\r\n\r\n### What did you expect to see?\r\n\r\n```\r\ngo: malformed module path \"mperillo/test\": missing dot in first path element\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\ngo: creating new go.mod: module mperillo/test\r\n```\r\n\r\nThe problem is that `go build` will report an error if another module add as requirement `mperillo/test`.\r\n\r\nIn this case, is there a reason to allow `go mod init` to accept such module path?", "labels": ["Documentation", "NeedsFix"], "number_of_comments": 6, "created_at": "2020-01-26 11:48:53", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555159326": {"author_username": "pjebs", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36771, "title": "proposal: strconv: add ParseComplex", "body": "strconv.ParseComplex(s string, bitSize int) (complexType, error)", "labels": ["Proposal"], "number_of_comments": 6, "created_at": "2020-01-26 00:35:36", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555153282": {"author_username": "urandom", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36770, "title": "x/tools/gopls: no references are found due to `go list -deps` error", "body": "This error occurs when querying for references on a type with gopls@8fe064f8\r\n\r\n<pre>\r\n[Trace - 00:19:52.525 AM] Sending request 'textDocument/references - (15)'.\r\nParams: {\"textDocument\":{\"uri\":\"file:///some/package/file.go\"},\"position\":{\"line\":59,\"character\":26},\"context\":{\"includeDeclaration\":true}}\r\n\r\n\r\n[Error - 00:19:52.525 AM] Received #15 go [-e -json -compiled=true -test=true -export=false -deps=true -find=false -- ./... builtin]: exit status 2: # pkg-config --cflags  -- vips vips vips vips\r\nPackage vips was not found in the pkg-config search path.\r\nPerhaps you should add the directory containing `vips.pc'\r\nto the PKG_CONFIG_PATH environment variable\r\nPackage 'vips', required by 'virtual:world', not found\r\nPackage 'vips', required by 'virtual:world', not found\r\nPackage 'vips', required by 'virtual:world', not found\r\nPackage 'vips', required by 'virtual:world', not found\r\npkg-config: exit status 1\r\n\r\n\r\n\r\n[Trace - 00:20:03.050 AM] Sending request 'shutdown - (16)'.\r\nParams: {}\r\n\r\n\r\n[Trace - 00:20:03.051 AM] Received response 'shutdown - (16)' in 0ms.\r\nResult: {}\r\n\r\n\r\n[Trace - 00:20:03.051 AM] Sending notification 'exit'.\r\nParams: null\r\n\r\n\r\n\r\n</pre>\r\n\r\nAs a result of this, no references are being displayed. Whereas the preferred solution would be to ignore the problematic dependency and search for references in the valid ones. It is also possible that other commands fail because of the same error as well.\r\n", "labels": ["Tools", "gopls"], "number_of_comments": 27, "created_at": "2020-01-25 23:29:52", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555126692": {"author_username": "Zyxon123", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36768, "title": "cmd/go: compiles really slowly even for a hello world program", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.6 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n- windows 10 64 bit version 1809\r\n- intel i5-8265U\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\lidic\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\lidic\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\lidic\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=c:\\go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=c:\\go\\pkg\\tool\\windows_amd64\r\nset GCCGO=gccgo\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\Go\\src\\go.mod\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\lidic\\AppData\\Local\\Temp\\go-build756524190=/tmp/go-build -gno-record-gcc-switches\r\nGOROOT/bin/go version: go version go1.13.6 windows/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.13.6\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nHi,\r\n\r\nI followed the steps [here](https://golang.org/doc/install) after I installed Go. However, running `go run hello.go` takes around 10 - 20 seconds for it to output \u201chello, world\u201d. Same thing with `go build`. I\u2019ve also tried reinstalling and excluding my Go folder and Go temp folder from windows defender (the only antivirus I use). I've even disabled real time protection. How do I fix this? Any help is appreciated.\r\n\r\nThanks!\r\n\r\n### What did you expect to see?\r\n\r\nI expect a hello world program to be compiled within seconds, other users are able to do so.\r\n\r\n### What did you see instead?\r\n\r\nTakes 10-20 seconds to compile instead. \r\n\r\n```\r\nPS C:\\Go\\src\\hello> Measure-Command {go run hello.go}\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 15\r\nMilliseconds      : 582\r\nTicks             : 155821163\r\nTotalDays         : 0.000180348568287037\r\nTotalHours        : 0.00432836563888889\r\nTotalMinutes      : 0.259701938333333\r\nTotalSeconds      : 15.5821163\r\nTotalMilliseconds : 15582.1163\r\n```\r\n\r\n### go run -x output\r\n\r\n```\r\nC:\\Go\\src\\hello>go run -x hello.go\r\nWORK=C:\\Users\\lidic\\AppData\\Local\\Temp\\go-build803697114\r\nmkdir -p $WORK\\b001\\\r\ncat >$WORK\\b001\\importcfg.link << 'EOF' # internal\r\npackagefile command-line-arguments=C:\\Users\\lidic\\AppData\\Local\\go-build\\a8\\a8c4809a5f80405952f1e99a0a10c35826595987039565f2c4eed84d206e5060-d\r\npackagefile fmt=c:\\go\\pkg\\windows_amd64\\fmt.a\r\npackagefile runtime=c:\\go\\pkg\\windows_amd64\\runtime.a\r\npackagefile errors=c:\\go\\pkg\\windows_amd64\\errors.a\r\npackagefile internal/fmtsort=c:\\go\\pkg\\windows_amd64\\internal\\fmtsort.a\r\npackagefile io=c:\\go\\pkg\\windows_amd64\\io.a\r\npackagefile math=c:\\go\\pkg\\windows_amd64\\math.a\r\npackagefile os=c:\\go\\pkg\\windows_amd64\\os.a\r\npackagefile reflect=c:\\go\\pkg\\windows_amd64\\reflect.a\r\npackagefile strconv=c:\\go\\pkg\\windows_amd64\\strconv.a\r\npackagefile sync=c:\\go\\pkg\\windows_amd64\\sync.a\r\npackagefile unicode/utf8=c:\\go\\pkg\\windows_amd64\\unicode\\utf8.a\r\npackagefile internal/bytealg=c:\\go\\pkg\\windows_amd64\\internal\\bytealg.a\r\npackagefile internal/cpu=c:\\go\\pkg\\windows_amd64\\internal\\cpu.a\r\npackagefile runtime/internal/atomic=c:\\go\\pkg\\windows_amd64\\runtime\\internal\\atomic.a\r\npackagefile runtime/internal/math=c:\\go\\pkg\\windows_amd64\\runtime\\internal\\math.a\r\npackagefile runtime/internal/sys=c:\\go\\pkg\\windows_amd64\\runtime\\internal\\sys.a\r\npackagefile internal/reflectlite=c:\\go\\pkg\\windows_amd64\\internal\\reflectlite.a\r\npackagefile sort=c:\\go\\pkg\\windows_amd64\\sort.a\r\npackagefile sync/atomic=c:\\go\\pkg\\windows_amd64\\sync\\atomic.a\r\npackagefile math/bits=c:\\go\\pkg\\windows_amd64\\math\\bits.a\r\npackagefile internal/oserror=c:\\go\\pkg\\windows_amd64\\internal\\oserror.a\r\npackagefile internal/poll=c:\\go\\pkg\\windows_amd64\\internal\\poll.a\r\npackagefile internal/syscall/windows=c:\\go\\pkg\\windows_amd64\\internal\\syscall\\windows.a\r\npackagefile internal/testlog=c:\\go\\pkg\\windows_amd64\\internal\\testlog.a\r\npackagefile syscall=c:\\go\\pkg\\windows_amd64\\syscall.a\r\npackagefile time=c:\\go\\pkg\\windows_amd64\\time.a\r\npackagefile unicode/utf16=c:\\go\\pkg\\windows_amd64\\unicode\\utf16.a\r\npackagefile unicode=c:\\go\\pkg\\windows_amd64\\unicode.a\r\npackagefile internal/race=c:\\go\\pkg\\windows_amd64\\internal\\race.a\r\npackagefile internal/syscall/windows/sysdll=c:\\go\\pkg\\windows_amd64\\internal\\syscall\\windows\\sysdll.a\r\npackagefile internal/syscall/windows/registry=c:\\go\\pkg\\windows_amd64\\internal\\syscall\\windows\\registry.a\r\nEOF\r\nmkdir -p $WORK\\b001\\exe\\\r\ncd .\r\n\"c:\\\\go\\\\pkg\\\\tool\\\\windows_amd64\\\\link.exe\" -o \"C:\\\\Users\\\\lidic\\\\AppData\\\\Local\\\\Temp\\\\go-build803697114\\\\b001\\\\exe\\\\hello.exe\" -importcfg \"C:\\\\Users\\\\lidic\\\\AppData\\\\Local\\\\Temp\\\\go-build803697114\\\\b001\\\\importcfg.link\" -s -w -buildmode=exe -buildid=boKU76zxCBTD9TQHu-ws/-9UkAzfu17Kq0_a_DtT8/N9PQnONczWnG7Jk1PdaH/boKU76zxCBTD9TQHu-ws -extld=gcc \"C:\\\\Users\\\\lidic\\\\AppData\\\\Local\\\\go-build\\\\a8\\\\a8c4809a5f80405952f1e99a0a10c35826595987039565f2c4eed84d206e5060-d\"\r\n$WORK\\b001\\exe\\hello.exe\r\nhello, world\r\n```", "labels": ["NeedsInvestigation", "OS-Windows"], "number_of_comments": 22, "created_at": "2020-01-25 19:24:37", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555104831": {"author_username": "4a6f656c", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36765, "title": "cmd/compile: implement atomic intrinsics for riscv64", "body": "Go on riscv64 does not currently support atomic intrinsics, rather all atomics are functions. This should be implemented.", "labels": ["NeedsInvestigation", "arch-riscv"], "number_of_comments": 2, "created_at": "2020-01-25 16:27:43", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555091323": {"author_username": "dotaheor", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36764, "title": "gccgo: crash on loop alias reference", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ gccgo --version\r\ngccgo (Ubuntu 8.3.0-6) 8.3.0\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nTrue\r\n\r\n### What did you do?\r\n\r\n```\r\ntype A = *struct {\r\n\tA\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nFails to compile for `invalid recursive type alias`.\r\n\r\n### What did you see instead?\r\n\r\nCrashes.", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-01-25 14:25:44", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555086063": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36762, "title": "cmd/go: go list starts the Package.Error.Err field with a newline", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.6 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.  I can reproduce it with go1.14beta1\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"on\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"/home/manlio/.local/bin\"\r\nGOCACHE=\"/home/manlio/.cache/go-build\"\r\nGOENV=\"/home/manlio/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"github.com/perillo\"\r\nGONOSUMDB=\"github.com/perillo\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/manlio/.local/lib/go:/home/manlio/src/go\"\r\nGOPRIVATE=\"github.com/perillo\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/lib/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/lib/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/code/git/github.com/golang/go/src/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build700153789=/tmp/go-build -gno-record-gcc-switches\"\r\nGOROOT/bin/go version: go version go1.13.6 linux/amd64\r\nGOROOT/bin/go tool compile -V: compile version go1.13.6\r\nuname -sr: Linux 5.4.13-arch1-1\r\n/usr/lib/libc.so.6: GNU C Library (GNU libc) stable release version 2.30.\r\ngdb --version: GNU gdb (GDB) 8.3.1\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```\r\ngo1.14beta1 list -e -json /tmp/empty.go\r\n```\r\nWhere empty.go is an empty file.\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n{\r\n\t\"Dir\": \"/tmp\",\r\n\t\"ImportPath\": \"command-line-arguments\",\r\n\t\"Match\": [\r\n\t\t\"/tmp/empty.go\"\r\n\t],\r\n\t\"Incomplete\": true,\r\n\t\"Error\": {\r\n\t\t\"ImportStack\": [\r\n\t\t\t\"main\"\r\n\t\t],\r\n\t\t\"Pos\": \"\",\r\n\t\t\"Err\": \"/tmp/empty.go:1:1: expected 'package', found 'EOF'\"\r\n\t}\r\n}\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n{\r\n\t\"Dir\": \"/tmp\",\r\n\t\"ImportPath\": \"command-line-arguments\",\r\n\t\"Match\": [\r\n\t\t\"/tmp/empty.go\"\r\n\t],\r\n\t\"Incomplete\": true,\r\n\t\"Error\": {\r\n\t\t\"ImportStack\": [\r\n\t\t\t\"main\"\r\n\t\t],\r\n\t\t\"Pos\": \"\",\r\n\t\t\"Err\": \"\\n/tmp/empty.go:1:1: expected 'package', found 'EOF'\"\r\n\t}\r\n}\r\n```\r\n\r\nThere is a '\\n' at the begin of the Err string.", "labels": ["NeedsFix"], "number_of_comments": 5, "created_at": "2020-01-25 13:33:31", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555086027": {"author_username": "bigmikes", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36761, "title": "crypto/ed25519: doc of Sign should warn not to prehash messages", "body": "Typically, digital signature schemas require the user to first hash the payload and then sign it. Correct me if I am wrong, but this should be true for RSA, DSA and ECDSA. \r\n\r\nIf my understanding is right, ED25519 seems to be different: it already hashes the message in a way that the collision resistant property is guaranteed even when it becomes feasible to find a collision for SHA512. Thus, prehashing the input messages basically nullifies this collision resistant property of ED25519 itself. In fact, if a possible attacker can efficiently find a collision for the prehashed message, they would be able to carry out a forgery attack.\r\n\r\nAlso, according to [RFC8032 section 8.7](https://tools.ietf.org/html/rfc8032#section-8.7) , it would be better to mention to avoid signing large messages.\r\n\r\n/cc @FiloSottile @katiehockman", "labels": ["Documentation", "NeedsFix", "help wanted"], "number_of_comments": 1, "created_at": "2020-01-25 13:33:13", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555071305": {"author_username": "iamnp", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36760, "title": "archive/zip: FileHeader struct lacks Unicode Path Extra Field (0x7075)", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version go1.13.6 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\npanin\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\npanin\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\GoProjects\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=C:\\Go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_amd64\r\nset GCCGO=gccgo\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\npanin\\AppData\\Local\\Temp\\go-build726899154=/tmp/go-build -gno-record-gcc-switches\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nTried to read ZIP file with unicode filename using archive/zip package\r\n\r\n### What did you expect to see?\r\n\r\nFileHeader struct field to store Unicode Path Extra Field as described in 4.6.9 of https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT\r\n\r\n### What did you see instead?\r\n\r\nNo way to retrieve Unicode Path Extra Field except for manually parsing it from FileHeader.Extra field\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-01-25 10:53:38", "reactions": {"total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "heart": 1, "hooray": 0}}, "555064603": {"author_username": "rayvbr", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36759, "title": "net/http: http.Client.Do() sometimes throws INTERNAL_ERROR when using high number of parallel HTTP/2 requests (regression between 1.12 and 1.13.4)", "body": "### What version of Go are you using (`go version`)?\r\n\r\n```\r\ngo version go1.13.4 darwin/amd64\r\n```\r\n\r\n(also reproduced with 1.13.6)\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```\r\nGO111MODULE=\"off\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/Cellar/go/1.13.4/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.13.4/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/k7/jx2bs5q170z4lvdzbsdt426r0000gn/T/go-build634112063=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n```\r\n\r\n### What did you do?\r\n\r\nCreate several http.Clients, and call a high number of simultaneous multipart byterange requests on each of them. Make sure the server supports HTTP/2. \r\n\r\n### What did you expect to see?\r\n\r\nNo errors being thrown. Which is the case on Go 1.12\r\n\r\n### What did you see instead?\r\n\r\nOn Go 1.13.4 and 1.13.6, http.Do() sometimes returns an error of the form `stream error: stream ID 523; INTERNAL_ERROR`. It does seem to happen more often when there is some network congestion, but I've also observed it on very good networks. Typically, I'd say it happens once every 200 requests or so. \r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 3, "created_at": "2020-01-25 09:33:49", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554974823": {"author_username": "josharian", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36756, "title": "x/build: get more coverage with the ssacheck builder", "body": "The ssacheck builder currently builds only amd64, and with a fixed random seed.\r\n\r\nWe should improve on both dimensions.\r\n\r\n* CL 216418 lets us provide a random seed. We could generate the random seed and print it to stdout before using it, so that any failure will be reproducible from the log.\r\n* We should either run on all architectures, or pick one at random each time from `go tool dist list` (and log it, for reproducibility).\r\n\r\nI suspect that doing both of these things is pretty easy, and it'd get us extra test coverage, so it'd be nice to do soon. This would have caught both https://github.com/golang/go/issues/36723 and https://github.com/golang/go/issues/36755.\r\n\r\ncc @cherrymui @randall77 @dmitshur @bradfitz ", "labels": ["Builders", "NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-01-24 22:00:34", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554973018": {"author_username": "josharian", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36755, "title": "cmd/compile: arm64 ssa check compilation failure", "body": "Reproduce:\r\n\r\n* Patch in CL 216418\r\n* `GOOS=linux GOARCH=arm64 go build -gcflags=-d=ssa/check/seed=21431 cmd/internal/obj/s390x`\r\n\r\nResult:\r\n\r\n```\r\n# cmd/internal/obj/s390x\r\ncmd/internal/obj/s390x/asmz.go:2709:7: internal compiler error: '(*ctxtz).asmout': bad int32 AuxInt value for v8033\r\n\r\ngoroutine 1 [running]:\r\nruntime/debug.Stack(0x1c3bda0, 0xc0000ac008, 0x0)\r\n\t/Users/josh/go/tip/src/runtime/debug/stack.go:24 +0x9d\r\ncmd/compile/internal/gc.Fatalf(0xc000d211a0, 0x23, 0xc0007132a0, 0x2, 0x2)\r\n\t/Users/josh/go/tip/src/cmd/compile/internal/gc/subr.go:193 +0x291\r\ncmd/compile/internal/gc.(*ssafn).Fatalf(0xc0004005a0, 0xa9507100000005, 0x1a874ef, 0x1d, 0xc00081d620, 0x1, 0x1)\r\n\t/Users/josh/go/tip/src/cmd/compile/internal/gc/ssa.go:6820 +0x1b0\r\ncmd/compile/internal/ssa.(*Func).Fatalf(...)\r\n\t/Users/josh/go/tip/src/cmd/compile/internal/ssa/func.go:625\r\ncmd/compile/internal/ssa.checkFunc(0xc002281600)\r\n\t/Users/josh/go/tip/src/cmd/compile/internal/ssa/check.go:141 +0x1ece\r\ncmd/compile/internal/ssa.Compile(0xc002281600)\r\n\t/Users/josh/go/tip/src/cmd/compile/internal/ssa/compile.go:135 +0xa60\r\ncmd/compile/internal/gc.buildssa(0xc0000ffe40, 0x0, 0x0)\r\n\t/Users/josh/go/tip/src/cmd/compile/internal/gc/ssa.go:444 +0xcd8\r\ncmd/compile/internal/gc.compileSSA(0xc0000ffe40, 0x0)\r\n\t/Users/josh/go/tip/src/cmd/compile/internal/gc/pgen.go:298 +0x5d\r\ncmd/compile/internal/gc.compile(0xc0000ffe40)\r\n\t/Users/josh/go/tip/src/cmd/compile/internal/gc/pgen.go:277 +0x33b\r\ncmd/compile/internal/gc.funccompile(0xc0000ffe40)\r\n\t/Users/josh/go/tip/src/cmd/compile/internal/gc/pgen.go:222 +0xc1\r\ncmd/compile/internal/gc.Main(0x1a9b3b8)\r\n\t/Users/josh/go/tip/src/cmd/compile/internal/gc/main.go:714 +0x3299\r\nmain.main()\r\n\t/Users/josh/go/tip/src/cmd/compile/main.go:52 +0xac\r\n```\r\n\r\ncc @cherrymui \r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 3, "created_at": "2020-01-24 21:55:49", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554928110": {"author_username": "myitcv", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36750, "title": "x/tools/gopls: misleading diagnostic for badly formed func literal", "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version devel +8e0be05ec7 Sun Jan 19 14:04:09 2020 +0000 linux/amd64\r\n$ go list -m golang.org/x/tools\r\ngolang.org/x/tools v0.0.0-20200121200311-d456b1cd8c86\r\n$ go list -m golang.org/x/tools/gopls\r\ngolang.org/x/tools/gopls v0.1.8-0.20200121200311-d456b1cd8c86\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/myitcv/.cache/go-build\"\r\nGOENV=\"/home/myitcv/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/myitcv/gostuff\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/home/myitcv/gos\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/myitcv/gos/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/myitcv/.vim/plugged/govim/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build878422207=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nThe diagnostic for the following file is misleading:\r\n\r\n```\r\npackage main\r\n\r\nfunc main() {\r\n\t_ = func(format string, args ...interface) error {\r\n\t\treturn nil\r\n\t}\r\n}\r\n```\r\n\r\nWe get:\r\n\r\n```\r\nPublishDiagnostics callback: &protocol.PublishDiagnosticsParams{\r\n    URI:         \"file:///home/myitcv/gostuff/src/github.com/myitcv/playground/main.go\",\r\n    Version:     36,\r\n    Diagnostics: {\r\n        {\r\n            Range: protocol.Range{\r\n                Start: protocol.Position{Line:3, Character:5},\r\n                End:   protocol.Position{Line:3, Character:5},\r\n            },\r\n            Severity:           1,\r\n            Code:               nil,\r\n            Source:             \"syntax\",\r\n            Message:            \"expected expression\",\r\n            Tags:               nil,\r\n            RelatedInformation: nil,\r\n        },\r\n    },\r\n}\r\n```\r\n\r\nContrast what we get from the compiler:\r\n\r\n```\r\n./main.go:4:43: syntax error: unexpected ), expecting {\r\n./main.go:5:3: syntax error: unexpected return, expecting comma or )\r\n./main.go:7:1: syntax error: non-declaration statement outside function body\r\n```\r\n\r\n\r\n### What did you expect to see?\r\n\r\nA better diagnostic. \r\n\r\n### What did you see instead?\r\n\r\nPer above\r\n\r\nMarking as `gopls/v1.0.0` because this isn't critical for `v0.3.0`.\r\n\r\n---\r\n\r\ncc @stamblerre\r\n\r\nFYI @leitzler\r\n", "labels": ["NeedsInvestigation", "Tools", "gopls"], "number_of_comments": 1, "created_at": "2020-01-24 20:04:08", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554911257": {"author_username": "marwan-at-work", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36747, "title": "go.dev: open source pkg.go.dev", "body": "Hi there, \r\nI know this topic must have come up a lot but I haven't found an open issue for it. \r\n\r\nWill pkg.go.dev ever be open sourced? \r\n\r\nIt would be incredibly useful for companies running a documentation server internally especially if pkg.go.dev spoke the GOPROXY download protocol and a company had an internal GOPROXY as well. \r\n\r\nThanks!", "labels": ["NeedsInvestigation", "go.dev"], "number_of_comments": 6, "created_at": "2020-01-24 19:24:47", "reactions": {"total_count": 15, "+1": 14, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554879362": {"author_username": "stamblerre", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36745, "title": "x/tools/gopls: handle replace directives", "body": "We watch all of the files in the module root for changes on-disk, and we also use changes to the current module as a heuristic for when it's necessary to rescan for imports. We should also track replace directives and watch file changes in replace targets. ", "labels": ["Tools", "gopls"], "number_of_comments": 0, "created_at": "2020-01-24 18:09:02", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554820444": {"author_username": "toothrot", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36742, "title": "x/tools: various test failures in TryBot run", "body": "### What version of Go are you using (`go version`)?\r\n\r\nhttps://golang.org/cl/216158\r\n\r\n<pre>\r\n$ go tip\r\n\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nDoesn't seem to reproduce consistently, possibly flaky tests\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nRan trybots: https://storage.googleapis.com/go-build-log/2c418b7c/linux-amd64_209916fd.log\r\n\r\n### What did you expect to see?\r\n\r\nSuccess\r\n\r\n### What did you see instead?\r\n\r\n```\r\n2020/01/24 15:23:15 no dep handle: no metadata for nosuchpkg\r\n\tpackage = nosuchpkg\r\n2020/01/24 15:23:15 no dep handle: no metadata for golang.org/x/tools/internal/lsp/protocol\r\n\tpackage = golang.org/x/tools/internal/lsp/protocol\r\n2020/01/24 15:23:15 no dep handle: no metadata for golang.org/x/xerrors\r\n\tpackage = golang.org/x/xerrors\r\n2020/01/24 15:23:20 no dep handle: no metadata for nosuchpkg\r\n\tpackage = nosuchpkg\r\n2020/01/24 15:23:20 no dep handle: no metadata for golang.org/x/tools/internal/lsp/protocol\r\n\tpackage = golang.org/x/tools/internal/lsp/protocol\r\n2020/01/24 15:23:20 no dep handle: no metadata for golang.org/x/xerrors\r\n\tpackage = golang.org/x/xerrors\r\n--- FAIL: TestModfileSuggestedFixes (0.48s)\r\n    --- FAIL: TestModfileSuggestedFixes/indirect (0.35s)\r\n        lsp_test.go:977: err: exit status 2: stderr: flag provided but not defined: -modfile\r\n            usage: go mod tidy [-v]\r\n            Run 'go help mod tidy' for details.\r\n            \r\n    --- FAIL: TestModfileSuggestedFixes/unused (0.14s)\r\n        lsp_test.go:977: err: exit status 2: stderr: flag provided but not defined: -modfile\r\n            usage: go mod tidy [-v]\r\n            Run 'go help mod tidy' for details.\r\nFAIL\r\nFAIL\tgolang.org/x/tools/internal/lsp\t9.074s\r\n```\r\n\r\n```\r\n--- FAIL: TestDiagnostics (1.71s)\r\n    --- FAIL: TestDiagnostics/indirect (0.40s)\r\n        mod_test.go:155: err: exit status 2: stderr: flag provided but not defined: -modfile\r\n            usage: go mod tidy [-v]\r\n            Run 'go help mod tidy' for details.\r\n            \r\n    --- FAIL: TestDiagnostics/unused (0.29s)\r\n        mod_test.go:155: err: exit status 2: stderr: flag provided but not defined: -modfile\r\n            usage: go mod tidy [-v]\r\n            Run 'go help mod tidy' for details.\r\n            \r\n    --- FAIL: TestDiagnostics/invalidrequire (0.42s)\r\n        mod_test.go:155: err: exit status 2: stderr: flag provided but not defined: -modfile\r\n            usage: go mod tidy [-v]\r\n            Run 'go help mod tidy' for details.\r\n            \r\n    --- FAIL: TestDiagnostics/invalidgo (0.36s)\r\n        mod_test.go:155: err: exit status 2: stderr: flag provided but not defined: -modfile\r\n            usage: go mod tidy [-v]\r\n            Run 'go help mod tidy' for details.\r\n            \r\n    --- FAIL: TestDiagnostics/unknowndirective (0.23s)\r\n        mod_test.go:155: err: exit status 2: stderr: flag provided but not defined: -modfile\r\n            usage: go mod tidy [-v]\r\n            Run 'go help mod tidy' for details.\r\n            \r\nFAIL\r\nFAIL\tgolang.org/x/tools/internal/lsp/mod\t1.996s\r\n```\r\n\r\n```\r\n--- FAIL: TestInvalidFilesInOverlay (7.21s)\r\n    --- FAIL: TestInvalidFilesInOverlay/GOPATH (2.88s)\r\n        --- FAIL: TestInvalidFilesInOverlay/GOPATH/test_variant (2.80s)\r\n            packages114_test.go:71: 0. d.D: got unknown, want \"GET_test\"\r\n        --- FAIL: TestInvalidFilesInOverlay/GOPATH/second_file (0.07s)\r\n            packages114_test.go:71: 1. d.D: got unknown, want \"GET_util\"\r\n    --- FAIL: TestInvalidFilesInOverlay/Modules (4.33s)\r\n        --- FAIL: TestInvalidFilesInOverlay/Modules/test_variant (4.13s)\r\n            packages114_test.go:71: 0. d.D: got unknown, want \"GET_test\"\r\n        --- FAIL: TestInvalidFilesInOverlay/Modules/second_file (0.18s)\r\n            packages114_test.go:71: 1. d.D: got unknown, want \"GET_util\"\r\nFAIL\r\nFAIL\tgolang.org/x/tools/go/packages\t67.514s\r\n```\r\n\r\nAre these flaky?\r\n\r\n/cc @stamblerre ", "labels": ["NeedsInvestigation", "Tools"], "number_of_comments": 0, "created_at": "2020-01-24 16:04:29", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554818698": {"author_username": "Rossiar", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36741, "title": "cmd/go: test Documentation: Package List Parallelisation ", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/ross/.cache/go-build\"\r\nGOENV=\"/home/ross/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/ross/go\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build910819809=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\nran `go help test` which displays the [go test documentation](https://golang.org/pkg/cmd/go/internal/test/)\r\n\r\n### What did you expect to see?\r\n\r\nWhile running `go test ./...` in a project with many subpackages, I noticed that integration tests in each subpackage were failing (randomly) when accessing a shared resource (such as a database).\r\n\r\nBut if I ran the same code with `go test ./... -p 1` I see that my packages run in sequential order and the failures do not occur. I am happy with this outcome and I understand why parallelization is the default when running in this mode, but I feel that this behaviour could be explicitly highlighted in the documentation to avoid confusion.\r\n\r\nRight now the existing documentation comes close to covering this, but does not:\r\n```\r\nThe second, called package list mode, occurs when go test is invoked\r\nwith explicit package arguments (for example 'go test math', 'go\r\ntest ./...', and even 'go test .'). In this mode, go test compiles\r\nand tests each of the packages listed on the command line. If a\r\npackage test passes, go test prints only the final 'ok' summary\r\nline. If a package test fails, go test prints the full test output.\r\nIf invoked with the -bench or -v flag, go test prints the full\r\noutput even for passing package tests, in order to display the\r\nrequested benchmark results or verbose logging. After the package\r\ntests for all of the listed packages finish, and their output is\r\nprinted, go test prints a final 'FAIL' status if any package test\r\nhas failed.\r\n```\r\n\r\n### What did you see instead?\r\n\r\nThe documentation doesn't cover the topic that I want to understand.\r\n\r\nLet me know if an example project is necessary to illustrate this concept better, or if I can provide any further detail in writing. I didn't want to post an issue straight away for this, but the issues channel in golang slack that I checked hasn't seen any activity since last year, which indicates that it's not very well used.", "labels": ["Documentation", "NeedsInvestigation"], "number_of_comments": 2, "created_at": "2020-01-24 16:01:09", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554796058": {"author_username": "4a6f656c", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36739, "title": "cmd/link: implement external linking for riscv64", "body": "There is currently no support for external linking on riscv64 - this is a tracking bug for adding support.", "labels": ["NeedsFix", "arch-riscv"], "number_of_comments": 3, "created_at": "2020-01-24 15:20:32", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554794472": {"author_username": "4a6f656c", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36738, "title": "cmd/objdump: implement disassembler for riscv64", "body": "There is currently no disassembler support for riscv64 - this is a tracking bug for addressing this.", "labels": ["NeedsFix", "arch-riscv"], "number_of_comments": 1, "created_at": "2020-01-24 15:17:37", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554775586": {"author_username": "divjotarora", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36736, "title": "proposal: crypto/tls: Provide access to stapled OCSP response in VerifyPeerCertificate callback", "body": "I'd like to do OCSP verification using the `VerifyPeerCertificate` field of `tls.Config`. My understanding is that it is not possible to access the stapled OCSP response from the peer in this callback. This is because the stapled response is available on the connection itself through the `OCSPResposne` method on `tls.Conn` or through the `ConnectionState` type. Unless there is a way to access it in the callback, the OCSP verification will have to be done after the handshake has been completed, which isn't ideal because the peer logs will show that the connection was successfully established.\r\n\r\nIs there a way to currently access the stapled responses in the verification callback that I've missed? If not, is this possible given how the TLS handshake code is currently written?", "labels": ["Proposal", "Proposal-Crypto", "Unfortunate"], "number_of_comments": 6, "created_at": "2020-01-24 14:43:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554762490": {"author_username": "majewsky", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36734, "title": "net/http: support status code 102 (Processing) in ResponseWriter", "body": "HTTP status code 102 (Processing) is defined by [RFC 2518, section 10.1](https://tools.ietf.org/html/rfc2518#section-10.1):\r\n\r\n> This status code SHOULD only be sent when the server has a reasonable expectation that the request will take significant time to complete. [...] The server MUST send a final response after the request has been completed.\r\n\r\nAs of now (Go 1.13.6), there is no way to actually send a 102 response because ResponseWriter.WriteHeader() can only be called once. Any successive calls are rejected ([here](https://github.com/golang/go/blob/8d7be1e3c9a98191f8c900087025c5e78b73d962/src/net/http/server.go#L1121-L1125)).\r\n\r\nSince the ResponseWriter interface cannot be extended without breaking backwards compatibility, a new interface should be added (and implemented by the existing ResponseWriter implementations) that exposes a function for sending an interim response with status 102.", "labels": ["NeedsInvestigation"], "number_of_comments": 2, "created_at": "2020-01-24 14:19:46", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554727246": {"author_username": "HowJMay", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36732, "title": "bytes_test: Fix flaky test TestGrow", "body": "fixes #36695\r\n", "labels": ["cla: yes"], "number_of_comments": 19, "created_at": "2020-01-24 13:10:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554689018": {"author_username": "rohankeskar19", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36731, "title": "x/mobile/cmd/gomobile : Can't generate library for android for the following go package https://github.com/ethereum/go-ethereum/whisper/whisperv6", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.6 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n```\r\n$ go env\r\nset GO111MODULE=\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCACHE=C:\\Users\\rohan\\AppData\\Local\\go-build\r\nset GOENV=C:\\Users\\rohan\\AppData\\Roaming\\go\\env\r\nset GOEXE=.exe\r\nset GOFLAGS=\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GONOPROXY=\r\nset GONOSUMDB=\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\rohan\\go\r\nset GOPRIVATE=\r\nset GOPROXY=https://proxy.golang.org,direct\r\nset GOROOT=c:\\go\r\nset GOSUMDB=sum.golang.org\r\nset GOTMPDIR=\r\nset GOTOOLDIR=c:\\go\\pkg\\tool\\windows_amd64\r\nset GCCGO=gccgo\r\nset AR=ar\r\nset CC=gcc\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset GOMOD=C:\\BE Project\\go-ethereum-master\\go.mod\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\nset PKG_CONFIG=pkg-config\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\rohan\\AppData\\Local\\Temp\\go-build766559602=/tmp/go-build -gno-record-gcc-switches\r\n```\r\n</pre></details>\r\n\r\n### What did you do?\r\n```\r\ngomobile bind -v -target android github.com/ethereum/go-ethereum/whisper/whisperv6\r\n```\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\nI want to generate android library from the go library\r\n\r\n\r\n### What did you see instead?\r\n```\r\nwrite C:\\Users\\rohan\\AppData\\Local\\Temp\\gomobile-work-644583759\\src\\go.mod\r\ngo: downloading golang.org/x/mobile v0.0.0-20200123024942-82c397c4c527\r\ngo: extracting golang.org/x/mobile v0.0.0-20200123024942-82c397c4c527\r\ngo: downloading golang.org/x/sync v0.0.0-20190423024810-112230192c58\r\ngo: downloading github.com/syndtr/goleveldb v1.0.1-0.20190923125748-758128399b1d\r\ngo: downloading golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550\r\ngo: downloading github.com/golang/snappy v0.0.1\r\ngo: downloading github.com/rs/cors v0.0.0-20160617231935-a62a804a8a00\r\ngo: downloading github.com/huin/goupnp v0.0.0-20161224104101-679507af18f3\r\ngo: extracting golang.org/x/sync v0.0.0-20190423024810-112230192c58\r\ngo: extracting github.com/syndtr/goleveldb v1.0.1-0.20190923125748-758128399b1d\r\ngo: extracting github.com/rs/cors v0.0.0-20160617231935-a62a804a8a00\r\ngo: extracting github.com/golang/snappy v0.0.1\r\ngo: downloading github.com/go-stack/stack v1.8.0\r\ngo: downloading github.com/aristanetworks/goarista v0.0.0-20170210015632-ea17b1a17847\r\ngo: downloading github.com/rs/xhandler v0.0.0-20160618193221-ed27b6fd6521\r\ngo: downloading golang.org/x/net v0.0.0-20190628185345-da137c7871d7\r\ngo: downloading github.com/elastic/gosigar v0.8.1-0.20180330100440-37f05ff46ffa\r\ngo: extracting github.com/go-stack/stack v1.8.0\r\ngo: extracting github.com/huin/goupnp v0.0.0-20161224104101-679507af18f3\r\ngo: downloading github.com/gorilla/websocket v1.4.1-0.20190629185528-ae1634f6a989\r\ngo: downloading github.com/deckarep/golang-set v0.0.0-20180603214616-504e848d77ea\r\ngo: downloading github.com/jackpal/go-nat-pmp v1.0.2-0.20160603034137-1fa385a6f458\r\ngo: extracting github.com/rs/xhandler v0.0.0-20160618193221-ed27b6fd6521\r\ngo: extracting github.com/elastic/gosigar v0.8.1-0.20180330100440-37f05ff46ffa\r\ngo: downloading golang.org/x/sys v0.0.0-20190712062909-fae7ac547cb7\r\ngo: extracting github.com/jackpal/go-nat-pmp v1.0.2-0.20160603034137-1fa385a6f458\r\ngo: extracting github.com/deckarep/golang-set v0.0.0-20180603214616-504e848d77ea\r\ngo: extracting github.com/gorilla/websocket v1.4.1-0.20190629185528-ae1634f6a989\r\ngo: extracting golang.org/x/net v0.0.0-20190628185345-da137c7871d7\r\ngo: downloading golang.org/x/text v0.3.2\r\ngo: extracting github.com/aristanetworks/goarista v0.0.0-20170210015632-ea17b1a17847\r\ngo: extracting golang.org/x/sys v0.0.0-20190712062909-fae7ac547cb7\r\ngo: extracting golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550\r\ngo: extracting golang.org/x/text v0.3.2\r\ngo: finding golang.org/x/mobile v0.0.0-20200123024942-82c397c4c527\r\ngo: finding github.com/deckarep/golang-set v0.0.0-20180603214616-504e848d77ea\r\ngo: finding github.com/syndtr/goleveldb v1.0.1-0.20190923125748-758128399b1d\r\ngo: finding golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550\r\ngo: finding golang.org/x/sync v0.0.0-20190423024810-112230192c58\r\ngo: finding github.com/go-stack/stack v1.8.0\r\ngo: finding github.com/aristanetworks/goarista v0.0.0-20170210015632-ea17b1a17847\r\ngo: finding github.com/gorilla/websocket v1.4.1-0.20190629185528-ae1634f6a989\r\ngo: finding github.com/rs/cors v0.0.0-20160617231935-a62a804a8a00\r\ngo: finding github.com/elastic/gosigar v0.8.1-0.20180330100440-37f05ff46ffa\r\ngo: finding github.com/golang/snappy v0.0.1\r\ngo: finding github.com/huin/goupnp v0.0.0-20161224104101-679507af18f3\r\ngo: finding github.com/jackpal/go-nat-pmp v1.0.2-0.20160603034137-1fa385a6f458\r\ngo: finding github.com/rs/xhandler v0.0.0-20160618193221-ed27b6fd6521\r\ngo: finding golang.org/x/net v0.0.0-20190628185345-da137c7871d7\r\ngo: finding golang.org/x/sys v0.0.0-20190712062909-fae7ac547cb7\r\ngo: finding golang.org/x/text v0.3.2\r\ngolang.org/x/net/html/atom\r\ngolang.org/x/text/encoding/internal/identifier\r\ngolang.org/x/text/internal/utf8internal\r\ngolang.org/x/sync/syncmap\r\ngolang.org/x/text/internal/tag\r\nruntime/cgo\r\ngithub.com/syndtr/goleveldb/leveldb/comparer\r\ngolang.org/x/crypto/sha3\r\ngithub.com/aristanetworks/goarista/monotime\r\ngolang.org/x/sys/unix\r\ngithub.com/deckarep/golang-set\r\ngithub.com/go-stack/stack\r\ngithub.com/syndtr/goleveldb/leveldb/util\r\ngithub.com/syndtr/goleveldb/leveldb/storage\r\ngithub.com/ethereum/go-ethereum/common\r\ngithub.com/syndtr/goleveldb/leveldb/cache\r\ngithub.com/golang/snappy\r\ngithub.com/ethereum/go-ethereum/common/mclock\r\ngithub.com/syndtr/goleveldb/leveldb/errors\r\ngithub.com/syndtr/goleveldb/leveldb/filter\r\ngithub.com/elastic/gosigar\r\ngithub.com/huin/goupnp/scpd\r\ngolang.org/x/net/html\r\ngithub.com/ethereum/go-ethereum/event\r\ngithub.com/syndtr/goleveldb/leveldb/iterator\r\ngithub.com/syndtr/goleveldb/leveldb/journal\r\ngithub.com/syndtr/goleveldb/leveldb/opt\r\ngolang.org/x/text/transform\r\ngolang.org/x/text/internal/language\r\ngolang.org/x/net/context\r\ngithub.com/syndtr/goleveldb/leveldb/memdb\r\ngolang.org/x/crypto/pbkdf2\r\ngithub.com/syndtr/goleveldb/leveldb/table\r\ngolang.org/x/text/encoding\r\ngolang.org/x/text/runes\r\ngolang.org/x/text/encoding/internal\r\ngolang.org/x/text/internal/language/compact\r\ngithub.com/syndtr/goleveldb/leveldb\r\ngolang.org/x/text/encoding/charmap\r\ngolang.org/x/text/encoding/japanese\r\ngolang.org/x/text/encoding/traditionalchinese\r\ngolang.org/x/text/encoding/korean\r\ngolang.org/x/text/encoding/simplifiedchinese\r\ngolang.org/x/text/encoding/unicode\r\ngolang.org/x/text/language\r\ngolang.org/x/text/encoding/htmlindex\r\ngolang.org/x/net/html/charset\r\ngolang.org/x/mobile/internal/mobileinit\r\ngithub.com/ethereum/go-ethereum/crypto/secp256k1\r\nnet\r\n```\r\n```\r\n# golang.org/x/mobile/internal/mobileinit\r\n\r\nC:\\Users\\rohan\\AppData\\Local\\Android\\Sdk\\ndk-bundle\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin/../lib/gcc/arm-linux-androideabi/4.9.x/../../../../arm-linux-androideabi/bin\\ld: fatal error: $WORK\\b191\\_cgo_.o: open: Invalid argument\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n\r\n# net\r\n\r\nC:\\Users\\rohan\\AppData\\Local\\Android\\Sdk\\ndk-bundle\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin/../lib/gcc/arm-linux-androideabi/4.9.x/../../../../arm-linux-androideabi/bin\\ld: fatal error: $WORK\\b078\\_cgo_.o: open: Invalid argument\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n\r\n# github.com/ethereum/go-ethereum/crypto/secp256k1\r\n\r\nC:\\Users\\rohan\\AppData\\Local\\Android\\Sdk\\ndk-bundle\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin/../lib/gcc/arm-linux-androideabi/4.9.x/../../../../arm-linux-androideabi/bin\\ld: fatal error: $WORK\\b069\\_cgo_.o: open: Invalid argument\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\ngo: failed to remove work dir: CreateFile C:\\Users\\rohan\\AppData\\Local\\Temp\\go-build488709430\\b086\\symabis: Access is denied.\r\ngomobile: go build -v -buildmode=c-shared -o=C:\\Users\\rohan\\AppData\\Local\\Temp\\gomobile-work-644583759\\android\\src\\main\\jniLibs\\armeabi-v7a\\libgojni.so ./gobind failed: exit status 2\r\n```", "labels": ["NeedsInvestigation", "mobile"], "number_of_comments": 16, "created_at": "2020-01-24 11:41:51", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554663722": {"author_username": "SataQiu", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36727, "title": "cmd/dist: ensure that cmd/internal/objabi/zbootstrap.go is cleaned properly", "body": "\r\nFixes: #36660", "labels": ["cla: yes"], "number_of_comments": 5, "created_at": "2020-01-24 10:44:32", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554631774": {"author_username": "perillo", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36726, "title": "os: document the Process.Pid field", "body": "As discussed in https://groups.google.com/forum/#!topic/golang-nuts/ievQGPz1R7k, https://golang.org/cl/4029053 dropped the documentation for the `Pid` field.\r\n\r\nI also propose to extend the documentation with something like:\r\n```\r\nThe value of Pid after the process has been waited/released is not specified.\r\n```\r\nThe reason is that on *UNIX* systems, `Release` set `Pid` to -1, but not on *Windows*.\r\nThis means that a program can not check if `Pid` == -1 to determine if the process has been released.\r\n\r\nThe alternative is to change the *Windows* implementation.", "labels": ["Documentation", "NeedsFix", "help wanted"], "number_of_comments": 3, "created_at": "2020-01-24 09:37:46", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554498807": {"author_username": "mdempsky", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36719, "title": "cmd/link: trailing padding after \"Go\" in ELF note name", "body": "https://www.sco.com/developers/gabi/latest/ch5.pheader.html#note_section says [emphasis added]:\r\n\r\n> namesz and name  \r\n> The first namesz bytes in name contain a null-terminated character representation of the entry's owner or originator. There is no formal mechanism for avoiding name conflicts. By convention, vendors use their own name, such as XYZ Computer Company, as the identifier. If no name is present, namesz contains 0. Padding is present, if necessary, to ensure 8 or 4-byte alignment for the descriptor (depending on whether the file is a 64-bit or 32-bit object). **Such padding is not included in namesz.**\r\n\r\nIt looks like we get this right for the \"NetBSD\" tag, where we include a single nul-terminator character within the name (as measured by namesz), but then include an extra padding zero-byte for alignment.\r\n\r\nHowever, for the \"Go\" tag, we include an extra nul-terminator within the name itself. The second nul-terminator should actually be padding.\r\n\r\nPointed out by Mark Kettenis from OpenBSD.\r\n\r\n/cc @4a6f656c ", "labels": ["NeedsFix"], "number_of_comments": 3, "created_at": "2020-01-24 01:23:44", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554480462": {"author_username": "PaulForgey", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36718, "title": "net: cannot resolve SRV records from Samba's DNS server", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/ubuntu/.cache/go-build\"\r\nGOENV=\"/home/ubuntu/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/ubuntu/mesa/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/src/go1.13.3/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/src/go1.13.3/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build085179277=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n<pre>\r\npackage main\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"fmt\"\r\n\t\"net\"\r\n)\r\n\r\nfunc main() {\r\n\tcname, addrs, err := net.DefaultResolver.LookupSRV(context.Background(), \"kerberos\", \"udp\", \"mydc.example.com\")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tfmt.Printf(\"cname=%s\\n\", cname)\r\n\tfor _, a := range addrs {\r\n\t\tfmt.Printf(\"target=%s:\\n\", a.Target)\r\n\t}\r\n}\r\n</pre>\r\n\r\nSamba (at least 4.3.11-Ubuntu), compresses the Target fields of the SRV records. While this is against clarifying RFCs and there is much discussion of this in the patch enforcing this, it breaks resolver behavior at least against Samba and possibly other embedded servers.\r\n\r\nIMO, this makes the resolver _less_ robust. If the rationale is to defend against ignorant DNS proxies, I would argue the client is not the layer to make this decision.\r\n\r\n### What did you expect to see?\r\nsuccessful resolution\r\n\r\n### What did you see instead?\r\nerror \"cannot unmarshal DNS message\"\r\n", "labels": ["NeedsDecision"], "number_of_comments": 10, "created_at": "2020-01-24 00:14:54", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554401270": {"author_username": "GrigoriyMikhalkin", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36715, "title": "cmd/go: validate module path in mod why", "body": "Fixes: #36658", "labels": ["cla: yes"], "number_of_comments": 1, "created_at": "2020-01-23 20:54:11", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554386395": {"author_username": "josharian", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36713, "title": "net/http: wrap more errors?", "body": "While trying to understand some net/http errors, I found that many net/http errors don't wrap their underlying errors yet (run `grep -R \"fmt.Errorf.*%v\" net/http` to see some).\r\n\r\n@bradfitz are you open to making the default be to wrap errors in net/http? That is, can someone do a somewhat indiscriminate pass through net/http, wrapping errors everywhere they see an opportunity to do so?\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-01-23 20:23:14", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554183541": {"author_username": "4a6f656c", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36711, "title": "runtime: add async preemption support to the riscv port", "body": "The Go riscv64 port does not currently support async preemption - this should be added.", "labels": ["NeedsInvestigation", "arch-riscv"], "number_of_comments": 1, "created_at": "2020-01-23 14:14:34", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554128084": {"author_username": "emersion", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36710, "title": "net/mail: add helpers for msg-id", "body": "[RFC 5322 section 3.6.4](https://tools.ietf.org/html/rfc5322#section-3.6.4) defines message identification fields which require parsing (e.g. they can contain CFWS). `net/mail` already provides helpers for `Date` and address lists. Would some helpers for `Message-ID` and message identifier lists be a welcome addition?\r\n\r\nRef https://github.com/emersion/go-message/pull/70", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-01-23 12:30:28", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553956537": {"author_username": "dmitshur", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36707, "title": "x/blog: auto-deploy latest master version", "body": "Currently, when a blog post is being published to [blog.golang.org](https://blog.golang.org), it needs to go through code review in Gerrit, get +2ed, and then submitted to the master branch. Afterwards, someone on the @golang/osp-team needs to manually redeploy the blog.\r\n\r\nEven though the process to deploy the blog has been [simplified](https://github.com/golang/blog#deploying), it's still manual effort and a context switch. It requires more coordination.\r\n\r\nI propose we automate this process so that the latest `master` commit of x/blog repo is always published to blog.golang.org. That will mean to publish a new blog post, one needs only to submit the Gerrit change. Fixing up typos can also be done by fixing the `master` branch, and not require additional redeploys.\r\n\r\nThis can be implemented by reusing the [`golang.org/x/build/cmd/tip`](https://pkg.go.dev/golang.org/x/build/cmd/tip) server that does automatic deploys for [tip.golang.org](https://tip.golang.org) and [talks.golang.org](https://talks.golang.org).\r\n\r\nThoughts?", "labels": ["NeedsDecision"], "number_of_comments": 1, "created_at": "2020-01-23 06:06:31", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553911898": {"author_username": "davidzech", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36705, "title": "CGO Unsetenv does not work on macOS 10.15.2", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13.4 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n Yes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/zech/Library/Caches/go-build\"\r\nGOENV=\"/Users/zech/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGONOPROXY=\"<redacted>\"\r\nGONOSUMDB=\"<redacted>\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/zech/gocode\"\r\nGOPRIVATE=\"<redacted>\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/Users/zech/.gvm/gos/go1.13.4\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/Users/zech/.gvm/gos/go1.13.4/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/vc/ws9fc9l10jnb_fg364m5y3340000gn/T/go-build778170232=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\n```go\r\npackage main\r\n\r\n// #include <stdlib.h>\r\n// #include <unistd.h>\r\nimport \"C\"\r\n\r\nimport \"fmt\"\r\nimport \"os\"\r\n\r\nfunc main() {\r\n\tos.Setenv(\"FOO\", \"bar\")\r\n\tos.Unsetenv(\"FOO\")\r\n\ts := C.GoString(C.getenv(C.CString(\"FOO\")))\r\n\tfmt.Printf(\"Native GO unsetenv \\\"%s\\\"\\n\", s)\r\n\r\n\t// native behavior\r\n\tC.unsetenv(C.CString(\"FOO\"))\r\n\ts = C.GoString(C.getenv(C.CString(\"FOO\")))\r\n\tfmt.Printf(\"CGO unsetenv \\\"%s\\\"\\n\", s)\r\n}\r\n\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nPrint out empty string in both `C.getenv` calls\r\n\r\n### What did you see instead?\r\n\r\nI see \"bar\" as a result of the first `C.getenv` call\r\n\r\n```\r\nNative GO unsetenv \"bar\"\r\nCGO unsetenv \"\"\r\n```\r\n\r\n\r\nIt looks like the argument to `unsetenv` is corrupted when called from `os.Unsetenv`\r\n\r\nTake a look at the argument dump from breaking on `getenv()` originating from `os.Unsetenv` and `C.unsetenv`\r\n\r\n<img width=\"562\" alt=\"Messages Image(1310911872)\" src=\"https://user-images.githubusercontent.com/1009039/72953453-f2955000-3d49-11ea-922f-ba76164d5eea.png\">\r\n", "labels": [], "number_of_comments": 7, "created_at": "2020-01-23 03:05:19", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553904917": {"author_username": "kevinburkemeter", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36703, "title": "net: document potential values for the \"Op\" in net.OpError", "body": "The current documentation reads:\r\n\r\n```go\r\n// OpError is the error type usually returned by functions in the \r\n// net package. It describes the operation, network type, and address of an error.\r\n\r\ntype OpError struct {\r\n    // Op is the operation which caused the error, such as\r\n    // \"read\" or \"write\".\r\n    Op string\r\n```\r\n\r\nAs far as I am aware the only way to determine which \"Op\"'s exist is by grepping the source code of the `net` package.\r\n\r\nIn particular I am interested in determining whether an error with an `Op` value of `\"dial\"` could have ever been returned after a client sent bytes of a request to a remote HTTP server.", "labels": ["Documentation", "NeedsInvestigation"], "number_of_comments": 3, "created_at": "2020-01-23 02:34:41", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553886620": {"author_username": "Kyle-Gagner", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36702, "title": "proposal: Go needs a comparable collection type", "body": "I propose that Go needs a comparable collection type. A primary use case for the type would be for use as a map key. As an example of an algorithm which would benefit from this feature, consider [powerset construction](https://en.wikipedia.org/wiki/Powerset_construction). In a powerset construction, it is necessary to maintain not just sets of states, but sets of sets of states. Maps are the natural choice to implement sets in Go, but since maps themselves are not comparable, a set of sets may not be implemented as a map with map keys. In fact, Go has no suitable collection type to use as a map key as slices also lack comparability. Users must fall back on a workaround such as implementing their own outer set or map type, implementing their own inner collection, stringifying the inner collection, etc. Filling this gap in Go's functionality would enable developers to much more easily solve certain kinds of problems.\r\n\r\nIn addition to the basic proposal, here are my thoughts about one way it could be implemented. My first observation is that comparability of the proposed collection type strongly implies that it should be immutable as well. In Go, comparable types typically use copy or move semantics to avoid problems with comparisons on mutating values (i.e. keys in a map do not mutate because the key is a copy). However, copy semantics are inappropriate (expensive) for collections, so immutability is the natural solution to this problem. Go's string values are currently the sole example of a type for which the compiler enforces immutability, rather than using copy or move semantics (the string header structure is copied, but the underlying data is not). The conclusion I reach is that Go could have something like Python's immutable tuples. Unlike Python, Go has a concept of both dynamic type and static type, which should also be considered. The individual elements in a tuple could share a single static type, like a slice, or have different static types like a Tuple<T1, T2, ...> in C#. Since the former seems to fit better with Go's existing type system (map, slice), I suggest a tuple type very much like an immutable slice, ideally with conversion methods between the tuples and slices.\r\n    ", "labels": ["Go2", "LanguageChange", "Proposal", "Proposal-Hold"], "number_of_comments": 15, "created_at": "2020-01-23 01:18:31", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553752253": {"author_username": "josharian", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36700, "title": "net/http: permanently broken connection with error \"read: connection reset by peer\" when response body is not closed", "body": "### What version of Go are you using (`go version`)?\r\n\r\nGo 1.14 beta 1\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nNot sure; I can't compile my program with 1.13.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/josh/Library/Caches/go-build\"\r\nGOENV=\"/Users/josh/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOINSECURE=\"\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/josh\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/Users/josh/go/1.14\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/Users/josh/go/1.14/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/Users/josh/x/skiff/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/1t/n61cbvls5bl293bbb0zyypqw0000gn/T/go-build473522411=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nMade a series of http requests from a Go client to a Go server. The requests were vanilla HTTP requests, using `http.Get`.\r\n\r\nI lost connectivity at some point. When I regained connectivity, all subsequent http requests failed with error `read: connection reset by peer`. I waited quite a long time, and it never recovered.\r\n\r\nIt has happened a couple of times, but doesn't reproduce reliably (which is unsurprising, since me closing my laptop lid is not exactly a precision affair).\r\n\r\nThis looks very similar to #34978, although I don't know when exactly the connectivity failed.\r\n\r\nTentatively marking as Go 1.14.\r\n\r\ncc @bradfitz @fraenkel @tombergan \r\n", "labels": ["Documentation", "NeedsInvestigation"], "number_of_comments": 16, "created_at": "2020-01-22 19:41:04", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553614403": {"author_username": "laboger", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36698, "title": "libgo: hang in syscall test TestExecPtrace on ppc64le starting sometime in Go 1.13, continuing in Go 1.14beta1", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14beta1 gccgo (GCC) 10.0.1 20200122 (experimental) linux/ppc64le\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nStarted in Go 1.13, continues in Go 1.14beta1\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nlinux/ppc64le\r\n</pre></details>\r\n\r\n### What did you do?\r\nRunning the libgo tests on ppc64le\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\nNo failures\r\n\r\n\r\n### What did you see instead?\r\nHang in the syscall test TestExecPtrace which does not happen on golang. This was reported in https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92567", "labels": ["NeedsInvestigation"], "number_of_comments": 1, "created_at": "2020-01-22 15:25:36", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553594695": {"author_username": "laboger", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36697, "title": "libgo: SEGV in runtime test TestChan on ppc64le", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14beta1 gccgo (GCC) 10.0.1 20200122 (experimental) linux/ppc64le\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nThis started happening in Go 1.13 and was reported in https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92564. Continues to happen in Go 1.14beta1\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nlinux/ppc64le\r\n</pre></details>\r\n\r\n### What did you do?\r\nRun the libgo tests\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\nNo failures\r\n\r\n\r\n### What did you see instead?\r\n=== RUN   TestChan\r\nfatal error: unexpected signal during runtime execution\r\n[signal SIGSEGV: segmentation violation code=0x2 addr=0x7214a61c0000 pc=0x1008eb24]\r\n\r\nMore details, stacks, and gdb information can be found in https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92564\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 0, "created_at": "2020-01-22 14:55:46", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553589741": {"author_username": "laboger", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36696, "title": "libgo: regression in runtime test TestCallersNilPointerPanic on ppc64le with Go 1.14beta1 update", "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.14beta1 gccgo (GCC) 10.0.1 20200122 (experimental) linux/ppc64le\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nlinux/ppc64le\r\n</pre></details>\r\n\r\n### What did you do?\r\nrun the libgo tests\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\n\r\n\r\n### What did you expect to see?\r\nPassing tests\r\n\r\n\r\n### What did you see instead?\r\n=== RUN   TestCallersNilPointerPanic\r\n    TestCallersNilPointerPanic: callers_test.go:82: wanted [runtime.Callers runtime_test.TestCallersNilPointerPanic..func1 runtime.gopanic runtime.panicmem runtime.sigpanic runtime_test.TestCallersNilPointerPanic], got [runtime.Callers runtime_test.TestCallersNilPointerPanic..func1 runtime.gopanic runtime.panicmem runtime_test.TestCallersNilPointerPanic testing.tRunner]\r\n--- FAIL: TestCallersNilPointerPanic (0.00s)\r\n", "labels": ["NeedsInvestigation"], "number_of_comments": 4, "created_at": "2020-01-22 14:47:49", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553586657": {"author_username": "bcmills", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36695, "title": "bytes: TestGrow is flaky", "body": "[2020-01-19T20:36:10-df2999e/android-arm-corellium](https://build.golang.org/log/cf93614cc6aa6a6990f0d2966dfc320313dbd08e)\r\n\r\nSee previously #24647. The fix for that issue (in [CL 104235](https://golang.org/cl/104235)) only seems to have been applied to the `strings` package, not `bytes` \u2014 it probably just needs to be ported over.\r\n\r\n(CC @dmitshur @toothrot @cagedmantis)", "labels": ["NeedsFix", "Testing", "help wanted"], "number_of_comments": 6, "created_at": "2020-01-22 14:43:42", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553479956": {"author_username": "ncruces", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36692, "title": "html/template: remove RawGit link from docs", "body": "RawGit will soon shut down soon, according to the author:\r\nhttps://rawgit.com/\r\n\r\nThis replaces the documentation link with raw.githack.com.", "labels": ["cla: yes"], "number_of_comments": 2, "created_at": "2020-01-22 11:29:19", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553372667": {"author_username": "lovettchris", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36691, "title": "build: bootstrap build of go fails on windows amd64", "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.4 windows/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\ntrying to use the go bootstrap version 1.4 (as per https://golang.org/doc/install/source) to build the latest go sources.  But it fails.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nset GOARCH=amd64\r\nset GOBIN=\r\nset GOCHAR=6\r\nset GOEXE=.exe\r\nset GOHOSTARCH=amd64\r\nset GOHOSTOS=windows\r\nset GOOS=windows\r\nset GOPATH=\r\nset GORACE=\r\nset GOROOT=c:\\go\r\nset GOTOOLDIR=c:\\go\\pkg\\tool\\windows_amd64\r\nset CC=gcc\r\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nDownloaded and unpacked go1.4.windows-amd64.zip to c:\\go\r\nset GOROOT_BOOTSTRAP=c:\\go\r\nset GOROOT_FINAL=d:\\go\r\ncloned the latest github.com/golang/go\r\ncd src\r\nall.bat\r\n\r\n\r\n### What did you expect to see?\r\n\r\nSuccessful build of the new version of go.\r\n\r\n### What did you see instead?\r\n\r\n\r\nd:\\git\\golang\\go\\src>all.bat\r\nBuilding Go cmd/dist using c:\\go\r\nBuilding Go toolchain1 using c:\\go.\r\nBuilding Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.\r\nBuilding Go toolchain2 using go_bootstrap and Go toolchain1.\r\nBuilding Go toolchain3 using go_bootstrap and Go toolchain2.\r\nBuilding packages and commands for windows/amd64.\r\n// runtime/cgo\r\ngcc_libinit_windows.c: In function 'x_cgo_sys_thread_create':\r\ngcc_libinit_windows.c:57:12: error: implicit declaration of function '_beginthread'; did you mean 'OpenThread'? [-Werror=implicit-function-declaration]\r\n  thandle = _beginthread(func, 0, arg);\r\n            ^~~~~~~~~~~~\r\n            OpenThread\r\ncc1: all warnings being treated as errors\r\ngo: failed to remove work dir: GetFileInformationByHandle C:\\Users\\Chris\\AppData\\Local\\Temp\\go-build549624342\\NUL: Incorrect function.\r\ngo tool dist: FAILED: d:\\git\\golang\\go\\pkg\\tool\\windows_amd64\\go_bootstrap install -gcflags=all= -ldflags=all= std cmd: exit status 2\r\nThe system cannot find the batch label specified - fail\r\ngo: failed to remove work dir: GetFileInformationByHandle C:\\Users\\Chris\\AppData\\Local\\Temp\\go-build900619142\\NUL: Incorrect function.", "labels": ["NeedsInvestigation", "OS-Windows", "WaitingForInfo"], "number_of_comments": 7, "created_at": "2020-01-22 08:03:20", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553248555": {"author_username": "gopherbot", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36689, "title": "go/types: data race in representableConst in Go 1.13 and earlier [1.13 backport]", "body": "@matloob requested issue #36687 to be considered for backport to the next 1.13 minor release.\n\n> @gopherbot backport please 1.12 1.13\n", "labels": ["CherryPickCandidate"], "number_of_comments": 2, "created_at": "2020-01-22 01:13:45", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553248546": {"author_username": "gopherbot", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36688, "title": "go/types: data race in representableConst in Go 1.13 and earlier [1.12 backport]", "body": "@matloob requested issue #36687 to be considered for backport to the next 1.12 minor release.\n\n> @gopherbot backport please 1.12 1.13\n", "labels": ["CherryPickCandidate"], "number_of_comments": 2, "created_at": "2020-01-22 01:13:44", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553247955": {"author_username": "matloob", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36687, "title": "go/types: data race in representableConst in Go 1.13 and earlier", "body": "The race in go/packages reported in #31749 was fixed at tip, but is still an issue for Go 1.13 and earlier, and is showing up in the go/packages race failure reported in #36605.\r\n\r\nThat race is caused by a race in go/types which in turn is caused by `go/constant.Float64Val()` calling `Rat.Float64` in math/big, which has a race reported in #34919 , and subsequently fixed in tip.\r\n\r\nFixing this race in go/types on Go 1.13 and earlier requires backporting [CL 201205](https://golang.org/cl/201205) to those releases. (Alternatively, we could fix the race by adding a workaround in go/constant or go/types, but that would be more work). I'm not sure if fixing this is worth a backport but we might as well have the discussion. If we decide not to go with the backport, we'll have to accept a race in go/packages and disable some of its tests in race mode in Go 1.13 and earlier.", "labels": ["NeedsInvestigation"], "number_of_comments": 6, "created_at": "2020-01-22 01:12:18", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553221760": {"author_username": "dr2chase", "repository_url": "https://api.github.com/repos/golang/go", "issue_number": 36685, "title": "cmd/cover: (html output) UI accessibility issues, unfriendly to screen reader", "body": "\r\n### What version of Go are you using (`go version`)?\r\n\r\ngo 1.13, go 1.14\r\n\r\nRecently on golang-nuts, \"Is it possible to get code coverage information in a way that does not assume you can see color?\"\r\n\r\nhttps://groups.google.com/g/golang-nuts/c/DY4O9UXMr9M?pli=1\r\n\r\nIn this case, \"see color\" refers to a screen reader for a totally blind person.\r\n\r\nThis is a bug, not an enhancement, because accessibility is important.\r\nIt does need someone who knows something about UI accessibility to look at it.", "labels": ["ExpertNeeded", "NeedsInvestigation", "help wanted"], "number_of_comments": 9, "created_at": "2020-01-21 23:57:36", "reactions": {"total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}}