{"568186885": {"author_username": "sokra", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10420, "title": "add OverridablesPlugin", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nAdds an `OverridablesPlugin` which allows to mark modules as overridable. These modules must only be used in on demand loaded chunks. An `__webpack_override__` API allows to replace these modules.\r\n\r\nThe `OverridablesPlugin` constructor takes a description of overridable modules and their global name for overriding.\r\n\r\nThe following argument types are allowed:\r\n\r\n* Object\r\n  * key is the override name\r\n  * value is a request pointing to a module\r\n  * when value is not an string it's treated as nested description and the listed argument types are handled in the same way, but with `key` plus `/` as prefix\r\n* Array\r\n  * Items are requests pointing to modules\r\n  * override name is automatically determined by removing all `[^\\w]+/` from the start of the request.\r\n  * Examples: \"./some/module\" -> \"some/module\", \"../../other\" -> \"other\", \"~/module\" -> \"module\", \"package\" -> \"package\"\r\n\r\nTODOs:\r\n\r\n* [ ] error when used in entry chunk\r\n* [ ] test for same instance when required multiple times from different chunks (and fix it)\r\n* [ ] expose `__webpack_override__` only when OverridablesPlugin is used\r\n* [ ] expose `OverridablesPlugin` from API\r\n* [ ] Does it make sense to have `OverridablesPlugin` below a container folder?\r\n* [ ] Add resolving dependencies to compilation\r\n* [ ] Should getChunkModulesIterableBySourceType be sorted in general?\r\n* [ ] Test persistent caching\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nfeature\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nyes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nOverridablesPlugin is not yet exposed and should not yet be documentated\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-ok", "PR: tests-needed", "PR: unreviewed"], "number_of_comments": 2, "created_at": "2020-02-20 10:07:23", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568131108": {"author_username": "kangert666", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10418, "title": "Hello, I have a problem that can't be solved. The details are as follows:", "body": "<!-- Bug reports and Feature requests must use other templates, or will be closed -->\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nHello, I have a problem that can't be solved. The details are as follows:\r\nhttps://github.com/microsoft/node-pty/issues/380", "labels": [], "number_of_comments": 1, "created_at": "2020-02-20 08:26:56", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "568059544": {"author_username": "fastest963", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10417, "title": "Optionally skip including chunk loading code", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nCurrently, the entry file includes a bunch of chunk loading code (creating a script tag, waiting for the script to load, etc) weighing in at ~800 bytes after minification but it's not always necessary. When it's not necessary, it shouldn't be included.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nIn our case we are serving all of the chunks that are necessary in a single bundle file and we don't want webpack to dynamically load any others. Each of these chunks are concatenated together and so the `webpackJsonP` array has all of the necessary chunks for running the script.\r\n\r\n**How should this be implemented in your opinion?**\r\nI think that we could make a new output option `onDemandLoading` accept a `false` value which would indicate that you don't want to allow any on-demand loading of chunks. Alternatively, if we're opposed to adding another option, we could make `jsonpScriptType` accept a `false` (or `'none'`) value which would indicate you don't want to use script tags to load the chunks.\r\n\r\nIn the `lib/web/JsonpTemplatePlugin.js` we would check the output option and if we shouldn't include the `jsonpScript.tap` line that includes the script loading.\r\n\r\n**Are you willing to work on this yourself?**\r\nYes\r\n", "labels": [], "number_of_comments": 0, "created_at": "2020-02-20 05:24:31", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567801905": {"author_username": "dependabot-preview[bot]", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10416, "title": "chore(deps-dev): bump @types/node from 12.12.27 to 12.12.28", "body": "Bumps [@types/node](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/HEAD/types/node) from 12.12.27 to 12.12.28.\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/commits/HEAD/types/node\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=@types/node&package-manager=npm_and_yarn&previous-version=12.12.27&new-version=12.12.28)](https://dependabot.com/compatibility-score/?dependency-name=@types/node&package-manager=npm_and_yarn&previous-version=12.12.27&new-version=12.12.28)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "labels": ["PR: CI-ok", "PR: unreviewed", "dependencies"], "number_of_comments": 3, "created_at": "2020-02-19 19:43:59", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567723443": {"author_username": "dependabot-preview[bot]", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10415, "title": "chore(deps): bump loader-utils from 1.2.3 to 1.4.0", "body": "Bumps [loader-utils](https://github.com/webpack/loader-utils) from 1.2.3 to 1.4.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/loader-utils/releases\">loader-utils's releases</a>.</em></p>\n<blockquote>\n<h2>v1.4.0</h2>\n<p><a name=\"1.4.0\"></a></p>\n<h1><a href=\"https://github.com/webpack/loader-utils/compare/v1.3.0...v1.4.0\">1.4.0</a> (2020-02-19)</h1>\n<h3>Features</h3>\n<ul>\n<li>the <code>resourceQuery</code> is passed to the <code>interpolateName</code> method (<a href=\"https://github-redirect.dependabot.com/webpack/loader-utils/issues/163\">#163</a>) (<a href=\"https://github.com/webpack/loader-utils/commit/cd0e428\">cd0e428</a>)</li>\n</ul>\n<h2>v1.3.0</h2>\n<p><a name=\"1.3.0\"></a></p>\n<h1><a href=\"https://github.com/webpack/loader-utils/compare/v1.2.3...v1.3.0\">1.3.0</a> (2020-02-19)</h1>\n<h3>Features</h3>\n<ul>\n<li>support the <code>[query]</code> template for the <code>interpolatedName</code> method (<a href=\"https://github-redirect.dependabot.com/webpack/loader-utils/issues/162\">#162</a>) (<a href=\"https://github.com/webpack/loader-utils/commit/469eeba\">469eeba</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/loader-utils/blob/master/CHANGELOG.md\">loader-utils's changelog</a>.</em></p>\n<blockquote>\n<h1><a href=\"https://github.com/webpack/loader-utils/compare/v1.3.0...v1.4.0\">1.4.0</a> (2020-02-19)</h1>\n<h3>Features</h3>\n<ul>\n<li>the <code>resourceQuery</code> is passed to the <code>interpolateName</code> method (<a href=\"https://github-redirect.dependabot.com/webpack/loader-utils/issues/163\">#163</a>) (<a href=\"https://github.com/webpack/loader-utils/commit/cd0e428\">cd0e428</a>)</li>\n</ul>\n<p><a name=\"1.3.0\"></a></p>\n<h1><a href=\"https://github.com/webpack/loader-utils/compare/v1.2.3...v1.3.0\">1.3.0</a> (2020-02-19)</h1>\n<h3>Features</h3>\n<ul>\n<li>support the <code>[query]</code> template for the <code>interpolatedName</code> method (<a href=\"https://github-redirect.dependabot.com/webpack/loader-utils/issues/162\">#162</a>) (<a href=\"https://github.com/webpack/loader-utils/commit/469eeba\">469eeba</a>)</li>\n</ul>\n<p><a name=\"1.2.3\"></a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/d95b8b53f0ad547133b47ac8226f735c479f76de\"><code>d95b8b5</code></a> chore(release): 1.4.0</li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/cd0e4284a0aa090f8776c4eb1045d4b1080e7161\"><code>cd0e428</code></a> feat: the <code>resourceQuery</code> is passed to the <code>interpolateName</code> method (<a href=\"https://github-redirect.dependabot.com/webpack/loader-utils/issues/163\">#163</a>)</li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/06d36cf3a619cab20b08608204cb7ea9bddaceab\"><code>06d36cf</code></a> chore(release): 1.3.0</li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/469eeba9095b879a3a988cde23d2035e454da9c2\"><code>469eeba</code></a> feat: support the <code>[query]</code> template for the <code>interpolatedName</code> method (<a href=\"https://github-redirect.dependabot.com/webpack/loader-utils/issues/162\">#162</a>)</li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/909c99d3f85da40478b9f02338d4113332819cfd\"><code>909c99d</code></a> chore: funding.yml config and CI fix (<a href=\"https://github-redirect.dependabot.com/webpack/loader-utils/issues/159\">#159</a>)</li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/b5b74f010cace25ca70a652ebef078f6b1cfaddb\"><code>b5b74f0</code></a> Set up CI with Azure Pipelines</li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/7970c48763bf14b767450c61a9f1e098095a684b\"><code>7970c48</code></a> docs: small grammar change (<a href=\"https://github-redirect.dependabot.com/webpack/loader-utils/issues/144\">#144</a>)</li>\n<li>See full diff in <a href=\"https://github.com/webpack/loader-utils/compare/v1.2.3...v1.4.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=loader-utils&package-manager=npm_and_yarn&previous-version=1.2.3&new-version=1.4.0)](https://dependabot.com/compatibility-score/?dependency-name=loader-utils&package-manager=npm_and_yarn&previous-version=1.2.3&new-version=1.4.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "labels": ["PR: CI-ok", "PR: unreviewed", "dependencies"], "number_of_comments": 3, "created_at": "2020-02-19 17:36:37", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "567317492": {"author_username": "jamesgeorge007", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10411, "title": "chore(APIPlugin): Minor typographical fix", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\ntypo fix.\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nNope\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNope\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nN/A\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 2, "created_at": "2020-02-19 05:00:37", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566897362": {"author_username": "SystemParadox", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10409, "title": "concatenateModules breaks circular dependency", "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nMy app works fine normally, but setting `optimization: { concatenateModules: true }` causes it to break the resolution order of the circular dependency.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nConsider the following example:\r\n\r\n```\r\n// lib/a.js\r\nimport cts from './cts';\r\nexport default cts.connectData(function () {});\r\n\r\n// lib/b.js\r\nimport cts from './cts';\r\nexport function b() {\r\n    setImmediate();\r\n}\r\n\r\n// lib/c.js\r\nimport cts from './cts';\r\nimport a from './a';\r\nexport function c() {}\r\n\r\n// lib/cts.js\r\nimport * as cts from './cts';\r\nexport { cts as default };\r\nexport function connectData() {}\r\nexport { b } from './b';\r\nexport { c } from './c';\r\n\r\n// lib/main.js\r\nimport cts from './cts';\r\nimport a from './a';\r\n```\r\n\r\nWith `concatenateModules: true`, running the bundle (created from `lib/main.js`) results in `TypeError: Cannot read property 'connectData' of undefined`. Something has gone wrong with the concatenation, causing the cts default export to not be defined early enough.\r\n\r\nI have reduced the example above to the bare minimum. Changing almost anything will cause it to work even with `concatenateModules`. It seems to be related to the concatenation bailout which is caused by the reference to setInterval.\r\n\r\n**What is the expected behavior?**\r\n\r\n`concatenateModules` should not cause working apps to break. Perhaps this is a particularly pathological example, but it's a bit concerning when it works in development and setting `mode: 'production'` causes it to break.\r\n\r\nIt took me a very long time to reduce this to a sensible example - hopefully this is useful!\r\n\r\nOn a side note, is there any better way to ensure that the default export gets set to the module namespace before processing any of the other imports/exports? It feels very fragile, and despite being such a common use case the spec appears to be lacking here.\r\n\r\n**Other relevant information:**\r\nwebpack version: 4.41.6\r\nNode.js version: 10.15.2\r\nOperating System: Linux\r\nAdditional tools: None", "labels": ["bug"], "number_of_comments": 1, "created_at": "2020-02-18 13:35:54", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "566299347": {"author_username": "vankop", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10400, "title": "persistent cache relative paths", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nright now cache writes absolute paths\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nif all paths will be relative to cache folder it will allow to share cache\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nDid not investigate this, yet\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nYes\r\n", "labels": [], "number_of_comments": 4, "created_at": "2020-02-17 13:28:43", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565933691": {"author_username": "ernestostifano", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10392, "title": "Using compilation.rebuildModule() on compiler.hooks.emit strange behaviour", "body": "<!-- Bug reports and Feature requests must use other templates, or will be closed -->\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nHi everyone!\r\n\r\nI just wanted to check if the following is a normal behaviour or something else.\r\n\r\nWhile writing a plugin, I've tapped into `compiler.hooks.emit` and managed to collect an object with information about emitted assets (essentially paths and sizes).\r\n\r\nThen my intention was to load that object into an existing module.\r\n\r\nI\u2019ve managed to get the target module by looping through `compilation.modules` and to modify a specific loader option to create a reference to my collected object (to be inserted).\r\n\r\nFinally I've tried to call `compilation.rebuildModule()`. Loader is successfully called, no errors, no warnings and I think the module is successfully rebuilt including the new data, but final asset (the chunk containing the module) is not updated.\r\n\r\nI've read almost every file of Webpack's source code and it is still not clear for me how to correctly trigger a module rebuild. Is it even possible? Could be a feature request? Am I too late in the compilation process to do what I wanted?\r\n\r\nI've temporarily solved this by storing the collected data in a json file and then starting again a new compilation that will load it, but it is obviously not an elegant solution.\r\n\r\nI'm already working on some documentation improvements to contribute, based on what I've learned studying Webpack and I would not mind to add some information about this issue if resolved.\r\n\r\nThank you very much for your help.", "labels": [], "number_of_comments": 3, "created_at": "2020-02-16 16:46:29", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "565932562": {"author_username": "jeffin143", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10391, "title": "WIP : Lib(Asset) : Code refactor - Destructing object ", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nrefactoring\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nNA\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nNone\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 7, "created_at": "2020-02-16 16:38:37", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564938518": {"author_username": "mcclure", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10384, "title": "Error messages from loaders misreported when extra <> characters present", "body": "I am encountering a problem with Webpack with the Typescript ts-loader (I have also seen an identical bug with Webpack and awesome-typescript-loader). I [first filed this bug with ts-loader](https://github.com/TypeStrong/ts-loader/issues/1039#issuecomment-585354424). They told me it was a Webpack bug (citing its presence in multiple Webpack loaders) and closed my bug.\r\n\r\nIf this is not a Webpack bug, then I would like to request you help me figure out what to say to convince ts-loader that this is their bug that should be fixed at their end. I am an end user and do not know how Webpack loaders work.\r\n\r\n# Bug report\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n[Check out this minimal example repo](https://github.com/mcclure/ts-hello-bug/commit/ad8f8cfbc4e7afcc0626fb6f98d723c59cded7ed). Run `npm install` and `npx webpack`. The example uses version 4.41.6 of Webpack with ts-loader (and copy-webpack-plugin).\r\n\r\n**What is the current behavior?**\r\n\r\nUpon running `npx webpack` with this example, the following confusing and misleading error occurs:\r\n\r\n```\r\n[./src/index.tsx] 294 bytes {main} [built] [failed] [11 errors]\r\n\r\nERROR in ./src/index.tsx 18:1\r\nModule parse failed: Unexpected token (18:1)\r\nFile was processed with these loaders:\r\n * ./node_modules/ts-loader/index.js\r\nYou may need an additional loader to handle the result of these loaders.\r\n| console.log(\"9\");\r\n| console.log(\"10\");\r\n>  > , label;\r\n| string;\r\n| {\r\n\r\nERROR in /Users/mcc/work/g/temp/ts-hello-bug/src/index.tsx\r\n./src/index.tsx\r\n[tsl] ERROR in /Users/mcc/work/g/temp/ts-hello-bug/src/index.tsx(25,58)\r\n      TS1005: ';' expected.\r\n```\r\n\r\n9 more errors follow after these.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe **second** error shown in the error spew is correct. However the **first** error is fallacious, marks a line which is completely correct, misformats the code sample (it claims the error was on line 18 but prints a \\> pointing at line 22; both lines 18 and 22 are correct) and is generally nonsensical. The expected behavior would be to show only the real error (line 25) and not the phantom error(s) on line 18 or 22.\r\n\r\nExplanation: The example contains this line in \"index.tsx\" on line 25:\r\n\r\n    function UsersBox(props: {list: State<OrderedSet<string>>>, label:string}) {\r\n\r\nThis is an invalid line of TypeScript. TypeScript uses \\<angle brackets\\> to denote parameterized types in generics, for example, a `Set<number>` is a Set of numbers. The \\<brackets\\> in this example are unbalanced, there is one \\> too many.\r\n\r\nYou can tell that the phantom error is being inserted by **either** WebPack or ts-loader because normal TypeScript does not flag the line 18/22 bug. If you run `tsc` in the example repo the only errors you will see are\r\n\r\n```\r\nsrc/index.tsx(25,58): error TS1005: ';' expected.\r\nsrc/index.tsx(25,59): error TS1109: Expression expected.\r\nsrc/index.tsx(25,73): error TS1005: ',' expected.\r\n```\r\n\r\nThe reason I consider the phantom error a significant problem is that usually in compiler errors, the first error in a group is the most significant. Coders effectively become trained to assume the first-reported error is \"real\" and further ones could be the result of a parser being lead off track by the first error. A user encountering this misreported-error bug (this happened to me) could lose a significant amount of time due\u00a0to not realizing which error is the real one (the second out of eleven, but **not** the others). Furthermore the error is easy to encounter because \\<\\> is common in TypeScript.\r\n\r\n**Other relevant information:**\r\n\r\nVery many other simple typos involving stray \\<angle brackets\\> cause similar misreported errors to occur with Webpack+ts-loader. For example, if I remove index.tsx line 25 from the example repo and put this in instead:\r\n\r\n```\r\nreturn <div className=\"ErrorBox\">\r\n    <div className=\"Header\">Errors</div>\r\n    <div className=\"List\">{errorFragment}<div>\r\n  </div>\r\n```\r\n\r\n(The `<div>`s here are unbalanced; the second to last `<div>` should be a `</div>`). Similar to the `>>` bug, this code reports a nonsensical error about seven or eight lines before the place where the error actually occurred.", "labels": [], "number_of_comments": 3, "created_at": "2020-02-13 20:42:02", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564796438": {"author_username": "bengourley", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10381, "title": "Invalid webpack:///webpack/bootstrap mapping/content in source maps", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWebpack outputs a source map that includes the following mapping:\r\n\r\n| Bundle line | Bundle column | Source file | Source line | Source column |\r\n|---|---|---|---|---|\r\n| 1 | 933 | `webpack:///webpack/bootstrap` | 83 | 54 |\r\n\r\nThe data included in the source map's `sourcesContent` array has this for `webpack:///webpack/bootstrap`, which is clearly already minified:\r\n\r\n```\r\n \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n \\t\\t}\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// create a fake namespace object\\n \\t// mode & 1: value is a module id, require it\\n \\t// mode & 2: merge all properties of value into the ns\\n \\t// mode & 4: return value when already ns object\\n \\t// mode & 8|1: behave like require\\n \\t__webpack_require__.t = function(value, mode) {\\n \\t\\tif(mode & 1) value = __webpack_require__(value);\\n \\t\\tif(mode & 8) return value;\\n \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n \\t\\tvar ns = Object.create(null);\\n \\t\\t__webpack_require__.r(ns);\\n \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n \\t\\treturn ns;\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"http://localhost:5000/\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 0);\\n\r\n```\r\n\r\nThis means that if you try to retrieve the code at line 83, column 54, you get nothing (since that source only has a single line).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nThe webpack config used to generate this bundle and map is as follows:\r\n\r\n**webpack.config.js**\r\n```js\r\nconst webpack = require('webpack')\r\nconst path = require('path')\r\nmodule.exports = {\r\n  mode: 'production',\r\n  devtool: 'source-map',\r\n  output: {\r\n    path: path.resolve(__dirname, 'dist'),\r\n    publicPath: 'http://localhost:5000/'\r\n  },\r\n}\r\n```\r\n\r\n**source/index.js**\r\n```\r\ntry {\r\n  throw new Error('hi')\r\n} catch (e) {\r\n  console.log(e.stack)\r\n}\r\n```\r\n\r\nIf you load this script in a browser you get something like the following stack trace:\r\n\r\n```\r\n@http://localhost:5000/dist/main.js:1:959\r\nr@http://localhost:5000/dist/main.js:1:110\r\n@http://localhost:5000/dist/main.js:1:924\r\n@http://localhost:5000/dist/main.js:1:933\r\n```\r\n\r\nUsing mozilla's source map tool you can verify whether the source maps are valid for each line of this stack trace:\r\n\r\n```\r\nnpm i source-map\r\n```\r\n\r\n```sh\r\nnode -e \"var sourceMap=require('source-map');new sourceMap.SourceMapConsumer(fs.readFileSync('dist/main.js.map','utf8')).then((sm) => {console.log(sm.originalPositionFor({ line: 1, column: 933 })) })\"\r\n```\r\n\r\nOutput:\r\n```js\r\n{ source: null, line: null, column: null, name: null }\r\n```\r\n\r\nThe other frames map fine, e.g:\r\n```sh\r\nnode -e \"var sourceMap=require('source-map');new sourceMap.SourceMapConsumer(fs.readFileSync('dist/main.js.map','utf8')).then((sm) => {console.log(sm.originalPositionFor({ line: 1, column: 110 })) })\"\r\n```\r\n\r\n```js\r\n{\r\n  source: 'webpack:///webpack/bootstrap',\r\n  line: 19,\r\n  column: 21,\r\n  name: 'call'\r\n}\r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nI would expect either:\r\n- the source for `webpack:///webpack/bootstrap` not to be minified in the source map\r\nor\r\n- the mappings should point to the correct place in the already minified `webpack:///webpack/bootstrap`\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\nThis is important for Bugsnag because we tell our users if their source maps are invalid and we can't retrieve the source it should map to:\r\n\r\n![image](https://user-images.githubusercontent.com/609579/74454763-480dda00-4e7c-11ea-8908-b01bc368d986.png)\r\n\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.6\r\nNode.js version: 12.4.0\r\nOperating System: OSX\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 3, "created_at": "2020-02-13 16:18:39", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "564106238": {"author_username": "valentin9", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10376, "title": "examples \u2013 removed old link to non-existing i18n page", "body": "This pull request removes a broken link about a plugin that was already archived and the page was deleted. (Issue #10367)\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nbugfix\r\n\r\n**Did you add tests for your changes?**\r\n\r\nno, because no logic was changed\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nnothing", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 3, "created_at": "2020-02-12 16:13:09", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "563894314": {"author_username": "edeustace", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10375, "title": "When a Yarn 2 installation uses virtual packages, the DllPlugin/DllReferencePlugin doesn't refer to the linked library.", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\nWhen a Yarn 2 installation uses [virtual packages][lexicon], the DllPlugin/DllReferencePlugin don't pull in the linked library. This is because the [virtual package][lexicon] paths are unique even though the refer to the same package.\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nSee this [repo][repo] for a demonstration. It contains 2 webpack builds: `dll-lib` and `lib-user`. \r\n* `dll-lib` bundles `react-dom` and creates a `library-manifest.json` using the `DllPlugin`.\r\n* `lib-user` references `library-manifest.json` using `DllReferencePlugin`.\r\n\r\n**What is the current behavior?**\r\n`react-dom` is bundled into `lib-user/dist/index.js`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n[https://github.com/ahum/webpack-dll-yarn-two-virtual-paths-demo][repo]\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nThe bundle in `lib-user` makes a reference to `react-dom` in it's bundle by using `library-manifest.json` in `dll-lib`.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.0.0-beta.13\r\nNode.js version: 11.10.0\r\nOperating System: Pop_OS! 19.10\r\nAdditional tools: \r\n* yarn@2.0.0-rc.29\r\n\r\n[repo]: https://github.com/ahum/webpack-dll-yarn-two-virtual-paths-demo\r\n\r\n[ia]: https://yarnpkg.com/advanced/architecture#install-architecture\r\n[lexicon]: https://yarnpkg.com/advanced/lexicon#virtual-package\r\n\r\n", "labels": [], "number_of_comments": 0, "created_at": "2020-02-12 10:18:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562720046": {"author_username": "berickson1", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10367, "title": "[Docs] i18n example is missing", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nThe localization example listed in https://github.com/webpack/webpack/tree/master/examples#i18n and at https://webpack.js.org/plugins/i18n-webpack-plugin/ is missing\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nN/A\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nEither the example should be restored or the links should be removed\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\n", "labels": [], "number_of_comments": 2, "created_at": "2020-02-10 17:40:26", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562344192": {"author_username": "xiaogdgenuine", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10364, "title": "Feature - Export the manifest object from runtime chunk", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nIf the project generates a single runtime chunk file by option\r\n`\r\noptimization: {\r\n  runtimeChunk: 'single'\r\n}\r\n` \r\nPls expose the manifest content in that runtime chunk, I believe there is a function call jsonpScriptSrc contain such content, if u pass chunkId in, u will get the **public path** of that chunk as return value:\r\n\r\n![image](https://user-images.githubusercontent.com/51731239/74124091-15f64100-4c0c-11ea-8b39-bc9da2095731.png)\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nI'm developing a plugin([webpack-prefetcher](https://www.npmjs.com/package/webpack-prefetcher)) to help people do better **prefetch/preload** in webpack\r\n\r\nThis plugin requires a manifest file to be downloaded before it can prefetch/preload anything, now I can get the manifest file by the [WebpackManifestPlugin](https://github.com/danethurber/webpack-manifest-plugin)\r\n\r\nBut if runtime chunk already has manifest data, the use of this manifest plugin is quite unnecessary in my opinion.\r\n\r\n**How should this be implemented in your opinion?**\r\nModify the runtime chunk file's template, expose the `jsonpScriptSrc` function.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes! but need some guidance...\r\n\r\n", "labels": [], "number_of_comments": 4, "created_at": "2020-02-10 06:02:59", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562185204": {"author_username": "maksimr", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10362, "title": "fix: Rule with issuer is not applied when importing via require.context #9309 fix", "body": "Currently ContextModule.nameForCondition returns null. Because ContextModule just inherits the default behavior of Module.nameForCondition. This leads to the situation that rules with defined `issuer` would not apply to such type of Module. \r\n\r\nTo fix this problem I rewrite the behavior of nameForConditition for ContextModule and return a value of `issuers.nameForCondition`. But `issuer` is **deprecated** in Module so I would be glad if someone suggests a better way\r\n\r\n#9309 fix", "labels": ["PR: CI-not-ok", "PR: unreviewed"], "number_of_comments": 3, "created_at": "2020-02-09 14:30:53", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562171821": {"author_username": "giladsegal", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10361, "title": "Add async-webworker target", "body": "As asked at #10320 and following the discussion in #6472, this PR introduces a new target called `async-webworker` for webpack 5.\r\nDynamic import statements in web workers are transpiled by default into importScripts statements. Those statements are synchronous and yield bad performance. The aforementioned target transpiles dynamic imports into fetch followed by dynamic code evaluation. Using this technique the chunks can be downloaded asynchronously.\r\n\r\nAdditional changes that has been made to support this feature:\r\n* `self[\"webpackChunk\"]` was changed to an object that maps chunk IDs to their corrosponding execution completion callback\r\n* `installedChunks` stores chunk loading state: \r\n  * `1` for loaded chunks\r\n  * `Promise` for a chunk that is already loading (can be reused for different requests)\r\n* Chunks invoke `self[\"webpackChunk\"][chunk.id]` instead of `self[\"webpackChunk\"]`\r\n\r\nNot yet implemented:\r\n* Timeout handling - what should happen if fetch takes more than X seconds\r\n\r\nWhat kind of change does this PR introduce?\r\nNew feature\r\n\r\nDid you add tests for your changes?\r\nI will add tests once we agree on the implementation details\r\n\r\nDoes this PR introduce a breaking change?\r\nNo\r\n\r\nWhat needs to be documented once your changes are merged?\r\nTargets table\r\n\r\n", "labels": ["PR: CI-ok", "PR: tests-needed", "PR: unreviewed"], "number_of_comments": 6, "created_at": "2020-02-09 12:50:13", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "562109028": {"author_username": "laverdet", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10355, "title": "JSON shaking should warn on bailout", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nWhen you import a JSON-only module Webpack will shake it out only to the used properties. This works super well, but it bails out silently when an unknown key is encountered. This can create hard to track down issues where package size increases in size without a clear cause.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nI've created a short gist that demonstrates the problem clearly:\r\nhttps://gist.github.com/laverdet/c2da343e36669721f4541298348c347e\r\n\r\nFirst run `npm install` obviously to pick up webpack. Then run `npx webpack` and examine `dist/main.js` to see: `console.log(\"main\")` somewhere in the source. Webpack successfully pulled that from `config.js` and put it right into the log. The unused property in `config.js` has also been entirely omitted from the source (good).\r\n\r\nNow uncomment line 3 of `main.js` and run `npx webpack` again. Now the source will be something like `var r={title:\"main\",aaaaaaaaaaaaaaaaaaaa:\"bbbbbbbbbbbb\"};console.log(r.title),console.log(r.undef)`. The property names of config.js now make it into the final source in addition to the unused properties.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nI would expect some kind of warning here to let me know the JSON module routine has bailed out.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.5\r\nNode.js version: 13.x\r\nOperating System: *", "labels": [], "number_of_comments": 1, "created_at": "2020-02-09 02:14:44", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "561414753": {"author_username": "ScriptedAlchemy", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10352, "title": "Merge Proposal: Module federation and code sharing between bundles. Many builds act as one", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\nThis is a proposal to merge my existing work into the Webpack core. The base concept is federated application orchestration at runtime. What I hope will provide a new era for how we build apps at scale. \r\n\r\n## Feature request\r\n@sokra as requested, I've opened a new issue for us to discuss planning and implementation. \r\n\r\nThis is the evolution of my original issue: https://github.com/webpack/webpack/issues/8524\r\nI want to share resources between separate bundles at runtime. Similar to DLL plugin but without needing to provide build context, and I want to do this at runtime in the browser. Not at build time. Thus enabling tech like micro-frontends to be efficient, easy to manage, and most importantly - erase page reloads between separate apps\r\n\r\nFor context, I've already implemented this feature request with great success. I feel this would have a major impact on frontend applications. I am proposing to refactor/rewrite my project and introduce it into the Webpack core. https://github.com/ScriptedAlchemy/webpack-external-import\r\n\r\n**What is the expected behavior?**\r\n`import('website-one/MegaNav')` \r\n`require.interleaved('website-one/MegaNav')`\r\n\r\n- I expect to be able to require modules or chunks from other Webpack bundles hosted elsewhere. \r\n- I don't want to manage externals and worry about synchronizing them across systems\r\n- I don't want a single point of failure, like a commons chunk\r\n- I want to load code from another build, like dynamic imports and code-splitting\r\n- I want multiple builds to look and feel like a monolith in the client\r\n- I am able to deploy frontend apps independently and expect Webpack to orchestrate at runtime\r\n- I don't want to use gimmicks like SingleSPA, browser events, service workers - I want to use Webpack as the host container for foreign chunks and modules, not load other app entry points, but rather load other apps *chunks*\r\n- If desired, an entire company should be able to federate code across every UI, from user-facing to backend. Effectively turning a multi build, multi team, multi mono-repo company into one SPA in the browser. Removing the need for page reloads or downloading additional code and bundles containing mostly the same node modules\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nThis would offer a major shift in frontend architecture. \r\nApps are getting larger and code-splitting on its own is not as effective with things such as micro-frontend technology. \r\n\r\nAll current solutions on the market are substandard - working around the problem instead of addressing it. Application interleaving at runtime enables many new avenues for engineering. \r\n\r\nHeres some: \r\n- Applications can be self-healing, in the event there is a network failure - one could query other interleaved apps and load their copy of the missing dependency. This would solve deploy issues where pages break for a moment as the new code replaced old \r\n- Code can be distributed and managed by the team maintaining it, with options for evergreen code. Navigation, Pages, Routers - could be managed and deployed by the team who owns it - others would not have to redeploy their applications to get updates\r\n- Smaller bundles - interleaved apps wouldn't download chunks if Webpack already has the modules required by the interleaved app or fragment. \r\n- Easy and feasible micro-frontends - the tech right now involves some serious management and time to build supporting infrastructure\r\n- Shareable configs - interleave FE configurations without the need to rebundle or expose multiple configs.\r\n- Avoid long & slow builds due to the size of the monorepo. This would enable smaller builds and faster deploys with less coordination across teams \r\n- Introduction of \"micro-service functions\" modeling something similar to what backend engineers get to enjoy. \r\n- Better AB testing and marketing tooling. Right now AB tests are managed via a tag manager, plastering vanilla JS onto the dom which is usually not optimized, pollifilled, or compatible with how much javascript apps are written today. Markering teams and AB teams would write native components without having to get in the way of team delivery. \r\n- Better analytics - Tag managers and analytics engineers could write system native modules that could be woven into codebases. Most depend on some plugin or just reading the DOM. Interleaving would open a new world of slick integration.\r\n- third party modules - vendors could take advantage of this tech and offer managed modules instead of inefficient scripts - they'd still be secure but would have a new way of implementation. Iframes could be avoided in some cases\r\n- no global pollution of the window, globals can be accessed via the Webpack runtime\r\n- as more apps are interleaved, they too can supply their modules to another interleaved app, resulting in less and less code needing to be downloaded as more and more modules are added to webpack\r\n\r\nThe use cases are limitless, I've only begun to imagine possibilities. \r\n\r\nWebpack is more than capable of doing this without needing any big changes to the core. Both 4 and 5 already have what I need. \r\n\r\n**How should this be implemented in your opinion?**\r\nSeeing as I've already done it. I have a clear picture of how to implement it. However, it can be improved with some guidance. I hold little opinion over the solution, as long as it offers a similar outcome. \r\n\r\n1.  Add an additional require extension which can support interleaving. I'm currently using a slightly modified version of `requireEnsure` which already works very well with Webpacks chunk and module loading / caching. when requiring an interleaved module - users would specify a pattern like <namespace>/<module.id> - Because my current solution is based on requireEnsure, it's pretty robust and not hacky. To handle CSS I've also taken the code template from mini-css to support side-effect loading. \r\n2. Output an unhashed JS file that can be embedded onto other apps. This file would contain a small mapping of `chunk.id` to the cache busted file name. \r\n3. Hashed module ids based on contents + package.json version of dependency + usedExports to support tree-shaken code. Hashing needs to be effective at avoiding collisions as well as to support tree-shaken code. Hashing enables effective code sharing and prevents overwriting existing modules. Ideally, if there's an option to update module id after optimization - it would likely improve the reliability of hashing. However, I have not encountered any problems. Open to alternative solutions. This hashing mechanism I am using is used by amazon who built a CLI to orchestrate code sharing across the company. \r\n4. A slight addition to the chunk template to include some registration data or another function similar to webpackJsonp.push which registers chunks and provides some metadata to Webpack\r\nHeres what it would include:\r\n- compilation hash: to detect if this chunk is being loaded by the build that created it, if so, no additional processing is needed\r\n- an array of additional `chunk.id`'s required by the current chunk\r\n- a list of module ids which allow Webpack to determine if it has all modules required by the chunk about to be interleaved. Webpack would use a lazy find to search modules for the first instance of a missing module.id. At which point Webpack would load the extra chunk needed to fulfill any missing modules it does not already have\r\n5. an interface similar to externals, where a developer can specify what files/modules they intend to make available for interleaving. During the build, Webpack would not hash these module.ids, but instead, make the id be whatever the key is. Allowing humans to call the module by a predictable name. All dependencies of a module and all modules, in general, would be hashed - ensuring that nested dependencies can be tree shaken and will only use existing modules in Webpack if they are an exact match. \r\n6. Some automatic chunk splitting which would ensure interleaved files are placed into their own cache group. I also recommend chunking vendor bundles and any loader JS code out of the main chunk in order to avoid interleaving the entry point because of something like css-loader getting grouped into the main chunk. In order to prevent downloading a massive 200kb chunk, I am suggesting that there be some default limit for maxSize set on cache groups. Something along the lines of enabling aggressive code-splitting by default if interleaving is enabled. The goal is a happy medium between not downloading dozens of chunks and not downloading a massive chunk for one or two modules the host build cannot supply. \r\n\r\n```\r\n  \"interleave\": {\r\n    \"TitleComponent\": \"src/components/Title/index.js\",\r\n    \"SomeExternalModule\": \"src/components/hello-world/index.js\"\r\n  }\r\n```\r\n```\r\n  plugins: [\r\n    new WebpackExternalImport({\r\n      manifestName: \"website-one\"\r\n    })\r\n  ];\r\n```\r\n\r\nWhich would be used in consumer apps like this:\r\n`require.interleaved('website-one/TitleComponeent')`\r\n\r\nFor better understanding, I suggest reading the links below. Please note that I am aware of many of the less elegant parts of the codebase and eager to improve the implementation to meet internal standards of Webpack (perf, bundle size, implementation strategy, better hooks to use)\r\n\r\n- https://github.com/ScriptedAlchemy/webpack-external-import\r\n- https://github.com/ScriptedAlchemy/webpack-external-import/blob/master/src/webpack/interleaveFn.js\r\n- https://github.com/ScriptedAlchemy/webpack-external-import/blob/master/src/webpack/chunkSplitting.js\r\n- https://github.com/ScriptedAlchemy/webpack-external-import/blob/master/src/webpack/optimizeChunk.js\r\n\r\n**Are you willing to work on this yourself?**\r\nyes - I have been contributing to Webpack since v1 and have a deep understanding of its API. \r\nI'd like to be the one to bring this feature to the wider JS community as well as to Webpack. I've built multiple large scale MFEs, some consisting of over 100 MFE's at one company. I am very familiar with the challenges and alternative methods to chunk federation/interleaving - all of them are terrible. \r\n\r\nWhile this solution might not be for everyone, it will have major value to massive corporations consisting of hundreds of teams of FE stacks. I am also able to test implementation updates against my own userbase - providing additional assurance to Webpack. I used the same approach when merging `extract-css-chunks` with `mini-css` (bringing HMR to mini-css)\r\n\r\n**Current results** \r\nI've been using this system for AB tests, Next.js apps, and config sharing at scale. \r\nIn a simple comparison. Interleaving three separate React apps produced only 320kb of code transferred (1.2mb uncompressed) compared to 4mb using traditional solutions available on the market. \r\n\r\n**Extra considerations**\r\n- Whitelisting instructions that would enable developers to tell Webpack to use the \"host build's\" version of a dependency. Cases like React where I can't have two on the page - I want to offer the option to have a chunk use the version already installed, even if its a patch version different. \r\n- Hashing bloats builds: I'm looking for an alternative solution to hashing to give the community options, however, the savings of code sharing drastically outweigh any overhead in my opinion. 4mb to 1.2mb speaks for itself.\r\n- Chunk manifests are inside the chunk - this could be in one single file to produce a single manifest, however, I like the idea of code splitting chunk needs into the chunk themselves. This would make the actual manifest file very small as all it looks up is chunk names to URL paths. Seeing as the manifest is either cache busted with Date.now or 304 cache control - I wanted to keep it lean in the event developers don't want to deal with cache headers and just cache bust the 2kb file on each page load. This would introduce one extra loading wave, as once the chunk is downloaded, it would specify what it needs, triggering Webpack to then download any additional files in one call. Download chunk->download any chunks containing modules Webpack host build cannot provide. Nested chunks would not create more loading waves as the chunk metadata contains a thorough map of what it needs in totality \r\n\r\n**SSR**\r\nThis wouldn't work with SSR - however, I am server-side rendering interleaved code. Either with ESI or flushing out the various interleaved parts of an app - then performing an ASYNC request to the interleaved fragments origin server which could expose a rendering API.  In the world of micro-frontends, they all are capable of SSR so adding a rendering endpoint is trivial. Utilities could be made for flushing out interleaved chunks that need to be SSR'd by their origin server. Other tactics I have used \"eventual consistency\", developers npm install the interleaved code and use it to render a somewhat up to date version, keeping the client-side code evergreen. This tactic requires more management, but as an alternative to rendering APIs\r\n\r\n", "labels": [], "number_of_comments": 27, "created_at": "2020-02-07 04:32:40", "reactions": {"total_count": 30, "+1": 9, "-1": 0, "laugh": 0, "heart": 7, "hooray": 8}}, "561203003": {"author_username": "jquense", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10350, "title": "Allow pitch phase to efficiently rewrite the current loader chain", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nThis is maybe just a question as it may already be possible. I'm working on a loader that that inserts itself into an configured chain via `pitch()`\r\n\r\n```js\r\nexport function pitch() {\r\n  const cssIdx = this.loaders.findIndex(l => l.path.includes('css-loader/'));\r\n  const cssLoader = this.loaders[cssIdx];\r\n\r\n  const loaders = [...this.loaders];\r\n\r\n  const [me] = loaders.splice(this.loaderIndex, 1);\r\n\r\n  loaders.splice(cssIdx + 1, 0, me);\r\n  const prefix = loaders.map(x => x.request).join('!');\r\n\r\n  return `module.exports = require(\"-!${prefix}!${this.resourcePath}\");`;\r\n}\r\n```\r\n\r\nThe *problem* is tho i need to add some options to css-loader here, but cannot b/c they aren't serializable, and the query string here is an ident. There doesn't seem to be any way of adding a new ident mapping either at this point.\r\n\r\nMy other approach was alter the loaders array, but the problem with this is it can create duplicate modules, when another loader does something like [css-loader does](https://github.com/webpack-contrib/css-loader/blob/master/src/utils.js#L186-L201) If you have \r\n`my-loader!foo.css` you can different modules that compile to the same thing if css-loader ses a dependency on foo.css it'll get required as `css-loader!my-loader!foo.css`\r\n\r\n**What is the expected behavior?**\r\n\r\nI'd like to be able to rewrite a loader chain in the pitch phase \r\n - change options without mutating a configured rule's options object \r\n - not create duplicate modules, which seems to happen based on the initial request, not the request after `pitch` is complete\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nReally unsure\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": [], "number_of_comments": 6, "created_at": "2020-02-06 18:51:43", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560686231": {"author_username": "syuilo", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10347, "title": "Webpack5: mod is not defined", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nBuilding a project in **production mode** using webpack5 results in a `mod is not defined` error at runtime.\r\n\r\nIf you build with development mode, no errors will occur at runtime.  In webpack4 this error does not occur when building in production mode.\r\n\r\nAlso, when building with webpack4, there are no deprecation warnings.\r\n\r\nSo I think this is a bug in webpack5.\r\n\r\n![AAA1139D-F2EF-486C-81CF-DF810A18F7A5](https://user-images.githubusercontent.com/4439005/73892003-021fa780-48b9-11ea-9c4d-6fcc498fa60e.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nI haven't created a minimal reproducible repository yet, but here is the actual my project config.\r\n\r\nhttps://github.com/syuilo/misskey/blob/develop/webpack.config.ts\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nNo runtime error\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.0.0-beta.13\r\nNode.js version: 13.7.0\r\nOperating System: Windows10\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 1, "created_at": "2020-02-05 23:17:43", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "560385046": {"author_username": "Huuums", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10346, "title": "Treeshaking: Named export of objects includes whole file into the bundle instead of only used exports. (with sideEffects: false in package.json)", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nCreating a bunch of objects in a single file while directly exporting them from there with named exports will cause the whole file to be included in the bundle instead of treeshaking the unused exports. \r\n\r\nUsing a barreling approach where every object gets created and exported from its own file will treeshake correctly.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nThis repo let's you reproduce this behavior.\r\nhttps://github.com/Huuums/repro-webpack-treeshaking-object-issue\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nOnly include used exports into the bundle when defining multiple exports in a single file.\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version: 4.41.5\r\nNode.js version: 13.6\r\nOperating System: Mac OS (Catalina) and Windows behaved the same.\r\nAdditional tools: Create React App\r\n\r\n`mode: 'production'` is set (Create react apps build script).", "labels": [], "number_of_comments": 2, "created_at": "2020-02-05 13:50:43", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "559260173": {"author_username": "lannonbr", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10337, "title": "Issue creating a UMD module that uses dynamic import", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nI'm trying to generate a UMD module that uses the `import()` syntax. That said, with the current version of Webpack, `import()` is converted into using `document.createElement('script')` which causes issues where `document` is not defined.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nHere's a reproduction of this issue: https://github.com/lannonbr/webpack-umd-dyn-import\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nHoping to eventually have a way so if you do a dynamic import in a UMD module, it will work in both Node and the browser seamlessly.\r\n\r\n(For further context, this eventually will be wanted so if I use [wasm-pack-plugin](https://github.com/wasm-tool/wasm-pack-plugin), I can dynamically import the WASM bootstrapping code. With that case, as WASM has to be dynamically imported, I cannot transpile `import()` with something like Babel.)\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version: 4.41.5\r\nNode.js version: 12.14.1\r\nOperating System: MacOS\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 0, "created_at": "2020-02-03 18:38:02", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "557434939": {"author_username": "giladsegal", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10320, "title": "introduce async-webworker target", "body": "Following the discussion in #6472, this PR introduces a new `target` called `async-webworker`.\r\nDynamic import statements in web workers are transpiled by default into importScripts statements. Those statements are synchronous and yield bad performance. The aforementioned target transpiles dynamic imports into `fetch` followed by dynamic code evaluation. Using this technique the chunks can be downloaded asynchronously.\r\n\r\nIf you think I'm in the right direction I will also contribute this code to webpack 5\r\n\r\n**What kind of change does this PR introduce?**\r\nNew feature\r\n\r\n**Did you add tests for your changes?**\r\nI will add tests once we agree on the implementation details\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n[Targets table](https://webpack.js.org/configuration/target/)\r\n", "labels": ["PR: CI-ok", "PR: unreviewed", "PR: webpack-4"], "number_of_comments": 8, "created_at": "2020-01-30 11:33:47", "reactions": {"total_count": 4, "+1": 0, "-1": 0, "laugh": 0, "heart": 4, "hooray": 0}}, "556913116": {"author_username": "aircloud", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10310, "title": "Support for loading two or more identical webassembly modules from one wasm file?", "body": "(already asked a question on gitter and was told that I can raise an issue)\r\n\r\n### problem\r\n\r\nI was recently using webpack to load the webassembly module, but I found that the current mechanism does not seem to allow me to load two or more identical webassembly modules\r\n\r\nMy webassembly is generated using the rust toolchain, so it will also generate a js file at the same time, so I dynamically load the generated js file.\r\n\r\nMy appeal is that I can import multiple instances that do not affect each other through multiple `import()`. A simple demo is as follow:\r\n\r\n```\r\nconst js = import (/ * webpackChunkName: \"view_sketch_wasm\" * / \"../pkg/hello_wasm.js\");\r\njs.then (js => {\r\n  js.add_index ();\r\n  js.add_index ();\r\n  let id = js.get_index ();\r\n  console.log ('id:', id);\r\n  let id2 = js.get_index ();\r\n  console.log ('id:', id2);\r\n  const js2 = import (/ * webpackChunkName: \"view_wasm_2\" * / \"../pkg/hello_wasm.js\"); // hello_wasm2 also not useful\r\n  js2.then (js => {\r\n    js.add_index ();\r\n    js.add_index ();\r\n    let id = js.get_index ();\r\n    console.log ('js2 id:', id);\r\n    let id2 = js.get_index ();\r\n    console.log ('js2 id:', id2);\r\n  });\r\n});\r\n\r\n```\r\n\r\n**I hope that js and js2 will not affect each other. They use two WebAssembly instances, each with its own memory.**\r\nBut in fact they used the same WebAssembly instance (even though I copied hello_wasm.js and changed its name).\r\nI also looked at the generated code, mainly because the cache was used when wasm was loaded:\r\n \r\n\r\n```\r\nwasmModules.forEach (function (wasmModuleId) {\r\n/ ****** / var installedWasmModuleData = installedWasmModules [wasmModuleId];\r\n/ ****** /\r\n/ ****** / // a Promise means \"currently loading\" or \"already loaded\".\r\n/ ****** / if (installedWasmModuleData)\r\n/ ****** / promises.push (installedWasmModuleData);\r\n/ ****** / else {\r\n/ ****** / var importObject = wasmImportObjects [wasmModuleId] ();\r\n/ ****** / var req = fetch (__ webpack_require __. p + \"\" + {\"2\": \"795c98e4258ee4a1e670\"} [wasmModuleId] + \".module.wasm\");\r\n/ ****** / var promise;\r\n/ ****** / if (importObject instanceof Promise && typeof WebAssembly.compileStreaming === 'function') {\r\n/ ****** / promise = Promise.all ([WebAssembly.compileStreaming (req), importObject]). then (function (items) {\r\n/ ****** / return WebAssembly.instantiate (items [0], items [1]);\r\n/ ****** /});\r\n/ ****** /} else if (typeof WebAssembly.instantiateStreaming === 'function') {\r\n/ ****** / promise = WebAssembly.instantiateStreaming (req, importObject);\r\n/ ****** /} else {\r\n/ ****** / var bytesPromise = req.then (function (x) {return x.arrayBuffer ();});\r\n/ ****** / promise = bytesPromise.then (function (bytes) {\r\n/ ****** / return WebAssembly.instantiate (bytes, importObject);\r\n/ ****** /});\r\n/ ****** /}\r\n/ ****** / promises.push (installedWasmModules [wasmModuleId] = promise.then (function (res) {\r\n/ ****** / return __webpack_require __. w [wasmModuleId] = (res.instance \r\n res) .exports;\r\n/ ****** /}));\r\n/ ****** /}\r\n```\r\n\r\nIn addition, even if I modify this part of the code, the mechanism of `webpack_require` will have a cache, which prevents me from using two separate instances.\r\n\r\nConsidering that the loading mechanism here is complicated, and I should not modify the compiled code of webpack. I don't know how to do yet.\r\n\r\nI also prepared a demo source code: [https://github.com/aircloud/hello-wasm2][1]\r\n\r\n### summary\r\n\r\nIn summary, my appeal is that I can have multiple instances of webassembly for a wasm file. How can I do this with the current mechanism of webpack?\r\n\r\nThank you!\r\n\r\n\r\n  [1]: https://github.com/aircloud/hello-wasm2", "labels": [], "number_of_comments": 5, "created_at": "2020-01-29 14:51:38", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556846222": {"author_username": "mrodal", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10309, "title": "Dynamic import with variable + externals config not working", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nI'm trying to use a dynamic import that uses a variable, and at the same time leave all these modules as external libraries, so I'm doing this:\r\n\r\n```import(`library/${module}.js`);```\r\n\r\nAnd my Webpack externals config is:\r\n\r\n`externals : /library\\/.*\\.js/`\r\n\r\nAnd right now, its not leaving those modules as external and its bundling them\r\n\r\nIf I do ```import(`library/specificModule.js`);``` it works even with the same regex on the externals config.\r\n\r\nLooks like the externals config doesn't apply for the import() with variables, because I also tried using a function as the externals config and setting up a brakpoint inside it, and it doesn't hit for those files.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nTake any library and import its modules with something like ```import(`library/${module}.js`);```\r\nAdd the regex to the externals webpack config\r\nRun build\r\nThe modules are bundled\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nI think it should leave all those modules as external modules when using the variable on the import\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.23.1\r\nNode.js version: 10.11.0\r\nOperating System: Windows 10\r\nAdditional tools: -\r\nReopened close issue https://github.com/webpack/webpack/issues/8377\r\n", "labels": [], "number_of_comments": 4, "created_at": "2020-01-29 12:59:17", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "556254082": {"author_username": "smelukov", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10306, "title": "Fix verbosed and detailed stats", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nbugfix\r\nrelated to https://github.com/webpack/webpack-cli/pull/1191\r\n\r\n**Did you add tests for your changes?**\r\n\r\nnope\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nnope\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nnope", "labels": ["PR: CI-ok", "PR: reviewed-approved", "PR: webpack-4"], "number_of_comments": 2, "created_at": "2020-01-28 14:40:28", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "555369765": {"author_username": "drew-gross", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10302, "title": "Passing a loader as a function rather than a string", "body": "## Feature request\r\n\r\nCurrently, you specify a loader as a string that resolves to a module whose default export is a loader. This is an uncommon interface, and there are very few APIs where strings that represent the names of modules are passed around. Especially now that node supports ES6 modules, I propose adding the ability to `import` (or `require`) a loader directly in the webpack config, or even implement the loader directly in the webpack config.\r\n\r\n**What is the expected behavior?**\r\n\r\nThese 4 ways of supplying a loader should be supported:\r\n\r\n```js\r\nconst loader1 = require('loader1');\r\nimport loader2 from 'loader2');\r\nloader3 = a => a.replace('s1', 's2');\r\n\r\nmodule.exports = env => {\r\n    return {\r\n        entry: { /* ... */ },\r\n        output: { /* ... */ },\r\n        module: {\r\n            rules: [\r\n                {\r\n                    exclude: /node_modules/,\r\n                    test: /\\.ext1$/,\r\n                    use: loader1,\r\n                },\r\n                {\r\n                    exclude: /node_modules/,\r\n                    test: /\\.ext2$/,\r\n                    use: loader2,\r\n                },\r\n                {\r\n                    exclude: /node_modules/,\r\n                    test: /\\.ext3$/,\r\n                    use: loader3,\r\n                },\r\n                {\r\n                    exclude: /node_modules/,\r\n                    test: /\\.ext-inline$/,\r\n                    use: a => a.replace('s3', 's4'),\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            extensions: ['.ext1', '.ext2', '.ext3'],\r\n        },\r\n    };\r\n};\r\n```\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nMy main motivation was that I was attempting to bundle a library using webpack, where the library I was trying to bundle was a webpack loader. I ran into issues attempting to bundle a library with a default export (as webpack requires it's loaders to have for the strings-as-modules-names API) and after thinking about it for awhile, this seemed like the best solution. Making it possible to bundle libraries with default exports would also work, of course.\r\n\r\nThis would also have the advantage of pushing the error earlier when the module can't be loaded for any reason, as it would error when the webpack config is evaluated, before any actual webpack code gets ahold of it.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nWhen the `use` key of a rule is not a `string`, it may be a `function`. If it is, it is treated as though it were already loaded module. No parts of how the module is validate change, the semantics of the module API and requirements for a module to be a valid webpack loader do not change.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": [], "number_of_comments": 3, "created_at": "2020-01-27 05:51:40", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "554006485": {"author_username": "tommyZZM", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10292, "title": "Enable/Disable plugin for specific entry.", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nEnable/Disable plugin for specific entry.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nI want to disable webpack.HotModuleReplacementPlugin for some specific entries\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nAs described\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nNot yet.\r\n", "labels": [], "number_of_comments": 1, "created_at": "2020-01-23 08:19:40", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "553068449": {"author_username": "rostaryms", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10289, "title": "TypeError: Cannot read property 'properties' of undefined", "body": "Hi,\r\n\r\nI'm following along a video tutorial and I'm trying to type 'npm run dev' into the command prompt. However I'm getting the error below. Anyone know what's going on?\r\n\r\n![JS_Error](https://user-images.githubusercontent.com/56840832/72834398-bdf49c00-3c56-11ea-9a9f-67f4e29300dd.png)\r\n", "labels": [], "number_of_comments": 1, "created_at": "2020-01-21 19:03:07", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "552800953": {"author_username": "pmqa", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10285, "title": "JavaScript module stops working after adding a splitChunk param", "body": "# Bug report\r\n\r\n**What is the expected behavior?**\r\n\r\nWhat I am trying to achieve with Webpack is compiling SCSS (in a specific folder) in a single file (dist/css/style.css) with individual sourcemaps (e.g., component.scss:44) and outputting individual JS modules (eg, dist/js/module-a.js, dist/js/module-b.js). \r\n\r\n**What is the current behavior?**\r\n\r\nMy folder structure:\r\n\r\n````\r\nassets\r\n\u2502\r\n\u2514\u2500\u2500\u2500js\r\n\u2502   \u2502\r\n\u2502   \u2514\u2500\u2500\u2500contact\r\n\u2502       \u2502   contact-frontend.js\r\n\u2502   \r\n\u2514\u2500\u2500\u2500sass\r\n    \u2502   header.scss\r\n    \u2502   footer.scss\r\n````\r\n\r\nCurrently the SCSS sourcemaps for individual files work great but some JS modules stopped working because I had to add this code for **all styles to be compiled into one file (dist/css/style.css) because without it wasn't working properly**: \r\n\r\n````\r\n  optimization: {\r\n    splitChunks: {\r\n      cacheGroups: {\r\n        styles: {\r\n          name: 'all',\r\n          test: /\\.scss$/,\r\n          chunks: 'all'\r\n        },\r\n      },\r\n    },\r\n  },\r\n````\r\n\r\nBut this code made some of my JS modules stop working. \r\n\r\nMore specifically, what happened was that **this changed the way (some not all) modules are loaded and now the code inside those modules is not being run on the page**. Now, instead of using __webpack__require they are loaded with webpackJsonpCallback and deferred(?) and for some reason the code is not being run in the browser. \r\n\r\nIf I remove the above code all the JS modules work but the styles don't compile into one file.\r\n\r\nThis is all my Webpack code:\r\n\r\n````\r\n// const HtmlWebPackPlugin = require(\"html-webpack-plugin\")\r\nconst path = require('path')\r\nconst Dotenv = require('dotenv-webpack')\r\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\r\n\r\n// Configure status logs while build.\r\nconst statsConfig = {\r\n  colors: true,\r\n  hash: true,\r\n  timings: true,\r\n  assets: true,\r\n  chunks: true,\r\n  chunkModules: true,\r\n  modules: true,\r\n  children: true,\r\n}\r\n\r\nmodule.exports = {\r\n  optimization: {\r\n    splitChunks: {\r\n      cacheGroups: {\r\n        styles: {\r\n          name: 'all',\r\n          test: /\\.scss$/,\r\n          chunks: 'all'\r\n        },\r\n      },\r\n    },\r\n  },\r\n  // entry: [path.join(process.cwd(), './assets/js/app.js'), path.join(process.cwd(), './assets/sass/style.scss')],\r\n  entry: {\r\n    scripts: path.join(process.cwd(), './assets/js/app.js'),\r\n    css: path.join(process.cwd(), './assets/sass/style.scss'),\r\n    'contact/contact-page': path.join(process.cwd(), './assets/js/contact/contact-page/index.js'),\r\n    'donations/donation-page': path.join(process.cwd(), './assets/js/donations/donation-page/index.js'),\r\n    'volunteer/volunteer-page': path.join(process.cwd(), './assets/js/volunteer/volunteer-page/index.js'),\r\n    'donations/donation-backend': path.join(process.cwd(), './assets/js/donations/donation-backend/index.js')\r\n  },\r\n  output: {\r\n    path: path.join(process.cwd(), 'dist'),\r\n    filename: 'js/[name].js'\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.js$/,\r\n        exclude: /node_modules/,\r\n        use: {\r\n          loader: 'babel-loader',\r\n          options: {\r\n            presets: ['@babel/preset-env', '@babel/preset-react'],\r\n            plugins: ['@babel/plugin-proposal-class-properties']\r\n          }\r\n        },\r\n      },\r\n      {\r\n        test: /\\.jsx$/,\r\n        exclude: /node_modules/,\r\n        use: {\r\n          loader: 'babel-loader',\r\n          options: {\r\n            presets: ['@babel/preset-env', '@babel/preset-react'],\r\n            plugins: ['@babel/plugin-proposal-class-properties']\r\n          }\r\n        },\r\n      },\r\n      {\r\n        test: /\\.scss$/,\r\n          use: [\r\n            MiniCssExtractPlugin.loader,\r\n            {\r\n                loader: 'css-loader',\r\n                options: {\r\n                    sourceMap: true\r\n                }\r\n            },\r\n            {\r\n                loader: 'sass-loader',\r\n                options: {\r\n                    sourceMap: true\r\n                }\r\n            }\r\n          ]\r\n      },\r\n      {\r\n        test: /.(png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$/,\r\n        use: 'url-loader',\r\n      },\r\n    ],\r\n  },\r\n  devtool: \"source-map\",\r\n  plugins: [\r\n    // new Dotenv({\r\n    //   path: path.resolve(process.cwd(), `config/${process.env.NODE_ENV}.env`),\r\n    // }),\r\n    new MiniCssExtractPlugin({ filename: 'css/style.css' })\r\n    //if you want to pass in options, you can do so:\r\n    //new ExtractTextPlugin({\r\n    //  filename: 'style.css'\r\n    //})\r\n  ],\r\n  stats: statsConfig,\r\n}\r\n````\r\n\r\n**Other relevant information:**\r\nwebpack version:   4.34.0\r\nNode.js version:  10.15.3\r\nOperating System: macOS\r\n", "labels": [], "number_of_comments": 1, "created_at": "2020-01-21 10:56:22", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "552416781": {"author_username": "jamesgeorge007", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10284, "title": "chore(NormalModule.js): Added JSDoc compliant method signatures", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nMeta update.\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nNope\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNope\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nNothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->", "labels": ["PR: CI-ok", "PR: review-outdated"], "number_of_comments": 3, "created_at": "2020-01-20 17:00:09", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "552019740": {"author_username": "exogen", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10281, "title": "Unreachable imports correctly removed by Terser are still in output bundle", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n(FYI I tried searching for an existing issue but only found vaguely similar things, not this exact bug.)\r\n\r\nWhen there is a static conditional containing a `require()` statement, Terser successfully removes it, and webpack does not include the module in its output (this is a good thing!):\r\n\r\n```js\r\n// normally this would happen due to DefinePlugin substitution, for example\r\nif (false) {\r\n  defaultAgent = require('https').Agent;\r\n}\r\n```\r\n\r\n**However, if there is slight indirection** in the code which still results in it being removed, like so:\r\n\r\n```js\r\nfunction getDefaultAgent() {\r\n  return require('https').Agent;\r\n}\r\n\r\nconst agent = false ? undefined : getDefaultAgent();\r\n```\r\n\r\nThen `https` (and its dependencies) *will* be included in the output bundle, even though Terser correctly removes the entire function and thus the `require` reference. This is confirmed by looking at the output: the assignment becomes simply `agent = void 0`, the function is entirely removed, and nothing references the `https` module \u2013\u00a0it is only defined and never required. There is no more `require` reference at all in the output. Yet, webpack includes the module anyway.\r\n\r\nI noticed this because it ends up pulling in several other dependencies like `stream-http`, `readable-stream`, `buffer`, etc.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nHere's a repro using a Next.js webpack setup, although I've confirmed that the same thing happens with vanilla webpack@4, and webpack@5 beta.\r\n\r\nhttps://github.com/exogen/test-next-terser-dce\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nI always thought that webpack's dependency analysis ran after Terser/Uglify's dead code elimination and that's why `if (false) { require(...) }` works correctly.\r\n\r\nBut evidently, that's not the case. I can't think of any other reason the module would be removed successfully for `if (false)` but not when a function containing a `require()` is removed. Does webpack handle the `if (false)` branches itself before Terser runs? Are there multiple DCE passes? It seems like in the final output, webpack should recognize that a module is now completely unreachable. (This should also have nothing to do with `sideEffects`, as the module is not even imported or referenced in the final output, so it's safe to remove no matter what.)\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.5, 5.0.0-beta.12\r\nNode.js version: v10.13.0\r\nOperating System: macOS\r\n", "labels": [], "number_of_comments": 2, "created_at": "2020-01-20 01:17:43", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "551835785": {"author_username": "onzag", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10278, "title": "Splitchunks and shared code between worker files using umd creates forever hanging code", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nIf you have two entries, one for your worker and another one for your main file, where code is shared between those two, and if you use split chunks so that shared code is split in a different file, the worker hangs undefinetely because simply the common file cannot be loaded, and there is no way for it to be loaded.\r\n\r\nUsing import() is not a good alternative as you lose the type definitions; which means you are forced to create some null-loader for the type definitions or some custom definition file (which is really not good at all).\r\n\r\nAlso you need a hack to even make it work https://stackoverflow.com/a/59743427/1199740 which is not optimal.\r\n\r\nNot to add it depends on Promises, and code in common, usually includes the promises polyfill, since you are within a worker that shouldn't be an issue, but still, not optimal.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nCreate a project with two entries.\r\n\r\nLoad a second entry as a worker.\r\n\r\nIt will hang forever.\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n1. You should be able to use of importScripts if you are inside a worker; you should specify if an entry should use importScripts to fullfill its imports.\r\n\r\nOR\r\n\r\n2. You should be able to inject the code required for initialization, self.importScripts(\"/dist/build.common.js\") just the same that you would do by adding it in the DOM; eg by using an injection file instead that would be bundled but won't hang, that file would execute importScripts just as in the normal DOM available version you would create a <script> with the commons file.\r\n\r\nAND\r\n\r\nYou shouldn't depend on the DOM for dynamic imports, if importScripts is available it should be used instead.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.4\r\nNode.js version: 12.14.0\r\nOperating System: Ubuntu\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 2, "created_at": "2020-01-18 22:44:51", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "551767874": {"author_username": "VirtumartOz", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10277, "title": "Hot reload not working for samba shared folder", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nI have a win10 and a freebsd as a dev servers, i use win10 to edit code, it mounts the project root folder from freebsd12 via samba. I have to use freebsd because it performs much better for php + postgresql application, but i'm not suitable to edit php / vue files under freebsd terminal. I really can't leave win10 as daily use and editing code.  and kde or gnome are really not good enough. \r\nNow when i change some vue code in win10 editor and save, i see the change is reflected in freebsd server, and npm noticed there is change, i see it recompiled , but the page in my browser is not reflected of the change.\r\nin chrome dev console, i see the \"keep-alive\" __webpack_hmr/client request has the output too, but it only has meaningful output for the first change made by win10, further files changes on win10 are not reflected in browser anymore, it has meaningless output for further changes like this: \r\n{\"h\":\"28ac7a547ebf20ba2bb3\",\"c\":{}}\r\n\r\nIf i hadn't made changes via win10 editor after npm server started, every single change made by vi editor under freebsd are reflected in npm and browser.  But after i change the file in win10, then it only works for the first time change, further change dont work anymore, it dont work even if i go back to freebsd change the file there(npm failed to notice the change made by vi editor) . Refresh the page doesnt help. \r\n\r\nOnly restart npm helps\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\ncreate a nuxt app in freebsd , and install the samba server, configure the app root directory to be able for win10 to connect to . \r\nstart npm in freebsd.\r\nchange the files in win10 after mounting the samba directory.  \r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nevery change to samba-mounted file made via win10 editor should be reflected in browser without page refresh, not producing meaningless ajax content by HMR\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.31.0\r\nNode.js version: 6.12.1\r\nOperating System: win10 + freebsd12\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 3, "created_at": "2020-01-18 13:14:25", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "550702760": {"author_username": "Sihan-Tan", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10268, "title": "HMR always triggers", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nHMR always triggers an update when my plugin create file although i ignored those\r\n![\u5fae\u4fe1\u56fe\u7247_20200116180333](https://user-images.githubusercontent.com/34876408/72515360-bade6200-388a-11ea-8957-2f487e14d54f.png)\r\n\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n1, clone  https://github.com/Sihan-Tan/vue-template.git\r\n2, npm install\r\n3, npm run dev\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nHMR not triggers an update when my plugin create file\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.5\r\nNode.js version: 10.16.0\r\nOperating System: win10\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 1, "created_at": "2020-01-16 10:08:05", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "550639777": {"author_username": "AvailCat", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10265, "title": "eval sourcemap with package ships with standalone sourcemap emit a lot of warning in browser", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nBundle codes with eval sourcemap, but reference to a package that ships with standalone sourcemap will not convert standalone sourcemap to eval sourcemap, this will emit a lot of warning in browser console.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n1. Import a package that ships with standalone sourcemap\r\n2. Set `devtool: 'eval'` in webpack.config.js\r\n3. Start with dev server\r\n4. Check browser console\r\n\r\n![image](https://user-images.githubusercontent.com/19658647/72504001-f0c61b00-3877-11ea-8b23-192ebc6cce55.png)\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nStandalone sourcemap in package should be converted to eval sourcemap or truncated\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.39.3 (Not able to tryout latest due typescript types issue)\r\nNode.js version: 12.13.0\r\nOperating System: Ubuntu 18.04.3\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 1, "created_at": "2020-01-16 08:03:33", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "550337234": {"author_username": "webpack-bot", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10261, "title": "Backport to webpack 4: use correct string or number form of chunk id in HMR", "body": "https://github.com/webpack/webpack/pull/10256 needs to be backported to webpack 4.\n\nSend a PR.\n\ncc @sokra", "labels": [], "number_of_comments": 0, "created_at": "2020-01-15 17:49:04", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "549663683": {"author_username": "OliverJAsh", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10253, "title": "`\"sideEffects\": false` not working", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n```jsonc\r\n// package.json\r\n{\r\n  \"sideEffects\": false,\r\n  \"dependencies\": {\r\n    \"webpack\": \"^4.39.2\",\r\n    \"webpack-cli\": \"^3.3.7\"\r\n  }\r\n}\r\n```\r\n\r\n```ts\r\n// index.js (entry)\r\nimport { identity } from \"./test\";\r\nconsole.log(identity);\r\n```\r\n\r\n```ts\r\n// test.js\r\nexport const identity = x => x;\r\n\r\nconst myFunction = I => {\r\n  const r = {};\r\n  if (typeof I.map === \"function\") {\r\n    r.map = () => {};\r\n  }\r\n  return r;\r\n};\r\n\r\nconst result = myFunction({});\r\n```\r\n\r\n```js\r\n// webpack.config.js\r\nconst config = {\r\n  mode: \"production\",\r\n  entry: './src/index.js',\r\n  output: {\r\n    path: './target',\r\n    filename: 'index.js'\r\n  }\r\n};\r\n\r\nmodule.exports = config;\r\n```\r\n\r\nNow run `webpack`.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen I run `webpack`, I expect the `myFunction` call and body to removed (because I have specified `\"sideEffects\": false`), however they are not. Excerpt below:\r\n\r\n```js\r\n})([\r\n  function(e, t, n) {\r\n    \"use strict\";\r\n    n.r(t);\r\n    (e => {\r\n      const t = {};\r\n      \"function\" == typeof e.map && (t.map = () => {});\r\n    })({});\r\n    console.log(e => e);\r\n  }\r\n]);\r\n```\r\n\r\nFor context, I originally discovered this whilst trying to import from an npm module: `import { max } from 'fp-ts/es6/Ord';`.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.39.2\r\nNode.js version: 12.8.1\r\nOperating System: N/A\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 16, "created_at": "2020-01-14 16:02:28", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "549496526": {"author_username": "danielsetreus", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10250, "title": "Allow renaming / configure path of webpack-progress", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nWhen running wepack - allow for dev to set path to the \"webpack-progress\" file.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nIn our release and build servers we run webpack (`webpack --mode production --progress`) for many different projects. The issue is that all projects are built using their own user (for security reasons). When webpack runs with user foo a file `/tmp/webpack-progress` is created, ownd by foo. When the next project us built by user bar - that user has no permissions for the file and the build  failes with \"Error: EACCES: permission denied, open '/tmp/webpack-progress'\"\r\n\r\nWithout knowing exactly what this file does, and Google has not been of much help, there seems to be a need for allowing us to set the file path / name of wepback-progress. Alternatively the file name could be appended with something project specific.\r\n\r\n**How should this be implemented in your opinion?**\r\nSome configurable flag\r\n\r\n**Are you willing to work on this yourself?**\r\nsadly no :( \r\n", "labels": [], "number_of_comments": 1, "created_at": "2020-01-14 11:12:04", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "549457926": {"author_username": "vankop", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10249, "title": "DefinePlugin with Persistent cache", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nIf value provided by DefinePlugin changed when using Persistent cache output will not change.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nhttps://github.com/vankop/webpack5-cache-bug\r\n\r\nRun `npm run build:dev` than `npm run build:debug` content won't change\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nWebpack must respect changing values in DefinePlugin (maybe track depended modules and invalidate them)\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.0.0-beta.11\r\nNode.js version:  10\r\nOperating System:  OSX\r\nAdditional tools: \r\n", "labels": [], "number_of_comments": 7, "created_at": "2020-01-14 10:04:24", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "549338671": {"author_username": "superchangme", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10246, "title": "about splitChunk with dynamic import .", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\ni use webpack4 with vue projects.I want split my dynamic import vue file and their dependencies  (use normal import syntax\uff09into a chunk.\r\ncode is here\r\n```javascript\r\nsplitChunks: {\r\ncacheGroups: {\r\n'vendor-async': {\r\n          chunks: 'all',\r\n          name: 'vendor-async',\r\n          test(module,chunks){\r\n            var libs = [path.join(__dirname, '..', 'src/components'),path.join(__dirname, '..', 'src/views/components'),path.join(__dirname, '..', 'src/vendor')]\r\n            return module.context && libs.some(function (o) {\r\n              return module.context.indexOf(o) >= 0\r\n            }) \r\n          },\r\n          minChunks: 3,\r\n          priority: 5,\r\n          reuseExistingChunk: true\r\n        }\r\n}\r\n}\r\n````\r\nFor example.I have three dynamic import vue files,they all import the file map.js.I want webpack can pack map.js into vendor-async.bundle.js.\r\nBut the result is webpack will pack map.js  file into app.bundle.js\uff0ceven if the file is use more than 3 times in different dynamic vue files.\r\nBut when i change the config minChunks to 1.and rebuild map.js can be packed into wendor-async\r\nI mean how webpack count minChunks,dynamic import only count once?\\\r\nCan you help me,how can i find the right way to split chunk into dynamic import...\r\nI'm looking forward to your reply\uff01\r\n\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.8.2\r\nNode.js version: 10.16\r\nOperating System: win7 64\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 1, "created_at": "2020-01-14 05:17:11", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "548596080": {"author_username": "jeffin143", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10241, "title": "Fix: 10210 - Backport fix for chunkid from webpack-5", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nBackport fix for webpack-4\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\nfix : #10210 \r\n**Did you add tests for your changes?**\r\nNA\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNONE\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nNothing \r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-not-ok", "PR: reviewed-changes-requested", "PR: webpack-4"], "number_of_comments": 2, "created_at": "2020-01-12 16:48:57", "reactions": {"total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "heart": 1, "hooray": 0}}, "548160450": {"author_username": "smelukov", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10233, "title": "support entry deps (parent-child)", "body": "**What kind of change does this PR introduce?**\r\n\r\nfeature\r\ncloses [this card](https://github.com/webpack/webpack/projects/5#card-28064951)\r\n\r\n*TODO:*\r\n- [x] tests\r\n- [x] support dynamic entrypoints\r\n\r\n- [ ] add some info about entry-depends to stats printer\r\n\r\n**Did you add tests for your changes?**\r\n\r\nnot yet\r\n\r\n**Does this PR introduce a breaking change?**\r\n \r\nno\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nabout new entry syntax", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 2, "created_at": "2020-01-10 16:03:54", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "548094164": {"author_username": "armand1m", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10231, "title": "Option to disable webpack inline loaders", "body": "Is there anyway one can completely disable inline loaders when running webpack? I couldn't find anything in the docs, or in the source code itself.\r\n\r\nIf there isn't, is it something planned? What is the recommended way to deal with this?", "labels": [], "number_of_comments": 8, "created_at": "2020-01-10 13:57:47", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "547091774": {"author_username": "lilotop", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10224, "title": "In browser debugger - no access to thrown error when in async context", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nWhen an exception is caught inside an async function, the debugger does not display the value of the exception parameter given to the `catch` block.\r\nIt is accesible by the program itself, e.g. you can log it to the console, but not to the debugger (tried it with the latest Chrome, Firefox and Edge)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n1. Create a simple **async** function that throws and catches an exception.\r\n2. In the browser's dev-tools, place a breakpoint inside the `catch` block.\r\n3. The value of the caught exception is not shown on hover.\r\n4. Also it is not available by typing the parameter's name in the console.\r\n\r\nExample function:\r\n```\r\n        async created() {\r\n            try {\r\n                throw {a: 42, msg: 'hello lilo'};\r\n            }\r\n            catch (e) { // <-- can't inspect in dev-tools\r\n                console.log(e); // <-- prints the value correctly (breakpoint here)\r\n            }\r\n        }\r\n```\r\nIt is worth noting that I found the exception object inside `arguments[0].t0` (if you type this into the console you get the exception object passed to the `catch` block.\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nCaught exception should be available to the debugger.\r\nNote that if you remove the `async` prefix from the function the exception is available.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.2\r\nNode.js version: v10.13.0\r\nOperating System: Windows 10\r\nAdditional tools: Vue CLI (@vue/cli 4.0.5)\r\n\r\nThe webpack project was created by the Vue CLI tool.\r\n", "labels": [], "number_of_comments": 3, "created_at": "2020-01-08 20:43:18", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "545428700": {"author_username": "amoshydra", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10217, "title": "Typescript: Cannot find name 'RuleSetConditionsRecursive'", "body": "> I didn't know recursive type was only supported in Typescript 3.7 (landed Nov 5, 2019)\r\n\r\n<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nTypescript reports type definition errors for `webpack/declarations/WebpackOptions.d.ts` when using:\r\n```ts\r\nimport { WebpackOptions } from 'webpack/declarations/WebpackOptions';\r\n```\r\n\r\nThe following errors are generated when running type checking: `tsc --noEmit -p ./tsconfig.json`\r\n```\r\n../../../node_modules/webpack/declarations/WebpackOptions.d.ts:135:33 - error TS2304: Cannot find name 'RuleSetConditionsRecursive'.\r\n\r\n135 export type RuleSetConditions = RuleSetConditionsRecursive;\r\n                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n../../../node_modules/webpack/declarations/WebpackOptions.d.ts:184:41 - error TS2304: Cannot find name 'RuleSetConditionsAbsoluteRecursive'.\r\n\r\n184 export type RuleSetConditionsAbsolute = RuleSetConditionsAbsoluteRecursive;\r\n                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n```\r\n\r\nThis issues seem to be related to https://github.com/webpack/webpack/pull/8348. However, applying the fix mentioned in #8348 doesn't resolve this issue.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n### Option 1\r\n1. Clone webpack\r\n2. `git checkout v4.41.5` (of any version between 4.20.0 and 4.41.5)\r\n3. Open project in VSCode\r\n4. Inspect the file `webpack/declarations/WebpackOptions` in VSCode\r\n5. Both `RuleSetConditionsRecursive` and `RuleSetConditionsAbsoluteRecursive` are highlighted in red with errors:\r\n    1. `Cannot find name 'RuleSetConditionsRecursive'.ts(2304)`\r\n    1. `Cannot find name 'RuleSetConditionsAbsoluteRecursive'.ts(2304)`\r\n\r\n### Option 2\r\n1. `yarn add typescript`\r\n2. `yarn tsc --init`\r\n3. Create a typescript project that import the declaration file\r\n    ```ts\r\n    import { WebpackOptions } from 'webpack/declarations/WebpackOptions';\r\n    ```\r\n4. Run `yarn tsc --noEmit`\r\n5. Typescript should reported the errors\r\n\r\n[![Edit modern-architecture-78bo4](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/modern-architecture-78bo4?expanddevtools=1&fontsize=14&hidenavigation=1&moduleview=1&theme=dark)\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should be no types definition error.\r\n\r\n##### Current Workaround\r\nRight now it is possible to workaround this issue by adding a type definition shim matching the content in https://github.com/webpack/webpack/blob/c7681825f868cddff0a6aa840330354a588188ff/declarations.d.ts#L223-L230\r\n```ts\r\nimport { RuleSetConditions, RuleSetConditionsAbsolute } from 'webpack/declarations/WebpackOptions';\r\n\r\ndeclare module 'webpack/declarations/WebpackOptions' {\r\n  type RuleSetConditionsRecursive = RuleSetConditions[]\r\n  type RuleSetConditionsAbsoluteRecursive = RuleSetConditionAbsolute[]\r\n}\r\n```\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version: Between 4.20.0 to 4.41.5\r\nNode.js version: v8.16.0\r\nOperating System: Windows 10\r\nAdditional tools: typescript@3.7.4\r\n", "labels": ["Send a PR"], "number_of_comments": 2, "created_at": "2020-01-05 15:03:17", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "545417670": {"author_username": "alan-agius4", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10216, "title": "You may need an appropriate loader to handle this file type - when ES6 classes contain public or private field declarations", "body": "\r\n\r\n**What is the current behavior?**\r\nWhen using public/private field declarations in an es6 class. Webpack fails to bundle with the below error\r\n\r\n```\r\nERROR in ./index.js 2:9\r\nModule parse failed: Unexpected token (2:9)\r\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\r\n| class Rectangle {\r\n>   height = 0;\r\n|   width;\r\n| \r\n\r\n\r\nERROR in ./index.js 10:2\r\nModule parse failed: Unexpected character '#' (10:2)\r\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\r\n| \r\n| class RectangleP {\r\n>   #height = 0;\r\n|   #width;\r\n|   constructor(height, width) {\r\n```\r\n\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n**index.js**\r\n```js\r\nclass Rectangle {\r\n  height = 0;\r\n  width;\r\n\r\n  constructor(height, width) {\r\n    this.height = height;\r\n    this.width = width;\r\n  }\r\n}\r\n\r\nclass RectangleP {\r\n  #height = 0;\r\n  #width;\r\n  constructor(height, width) {\r\n    this.#height = height;\r\n    this.#width = width;\r\n  }\r\n}\r\n```\r\n\r\n**webpack.config.js**\r\n```js\r\nconst { resolve } = require('path');\r\n\r\nmodule.exports = {\r\n    entry: './index.js',\r\n    output: {\r\n      path: resolve(__dirname, 'dist'),\r\n      filename: '[name].js'\r\n    },\r\n    resolve: {\r\n        extensions: [ '.js' ]\r\n    }\r\n}\r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nCode gets bundled. \r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.5\r\nNode.js version: v12.12.0\r\nOperating System: macOS Catalina\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 8, "created_at": "2020-01-05 13:27:02", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "544844347": {"author_username": "Mensu", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10210, "title": "HotModuleReplacementPlugin throws TypeError: Cannot read property 'filter' of undefined", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nI set up a dev server for my private project and run it, and when I edit some file, I see the following error thrown by HotModuleReplacementPlugin and then the server exits.\r\n\r\n```\r\n<cwd>/node_modules/webpack/lib/HotModuleReplacementPlugin.js:275\r\n                                                                const removedModules = records.chunkModuleIds[chunkId].filter(\r\n                                                                                                                       ^\r\n\r\nTypeError: Cannot read property 'filter' of undefined\r\n    at compilation.hooks.additionalChunkAssets.tap (<cwd>/node_modules/webpack/lib/HotModuleReplacementPlugin.js:275:64)\r\n    at SyncHook.eval [as call] (eval at create (<cwd>/node_modules/tapable/lib/HookCodeFactory.js:19:10), <anonymous>:12:1)\r\n    at SyncHook.lazyCompileHook (<cwd>/node_modules/tapable/lib/Hook.js:154:20)\r\n    at hooks.optimizeTree.callAsync.err (<cwd>/node_modules/webpack/lib/Compilation.js:1399:37)\r\n    at AsyncSeriesHook.eval [as callAsync] (eval at create (<cwd>/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:9:1)\r\n    at AsyncSeriesHook.lazyCompileHook (<cwd>/node_modules/tapable/lib/Hook.js:154:20)\r\n    at Compilation.seal (<cwd>/node_modules/webpack/lib/Compilation.js:1342:27)\r\n    at compilation.finish.err (<cwd>/node_modules/webpack/lib/Compiler.js:675:18)\r\n    at hooks.finishModules.callAsync.err (<cwd>/node_modules/webpack/lib/Compilation.js:1261:4)\r\n    at AsyncSeriesHook.eval [as callAsync] (eval at create (<cwd>/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:20:1)\r\n    at AsyncSeriesHook.lazyCompileHook (<cwd>/node_modules/tapable/lib/Hook.js:154:20)\r\n    at Compilation.finish (<cwd>/node_modules/webpack/lib/Compilation.js:1253:28)\r\n    at hooks.make.callAsync.err (<cwd>/node_modules/webpack/lib/Compiler.js:672:17)\r\n    at _done (eval at create (<cwd>/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:9:1)\r\n    at _err1 (eval at create (<cwd>/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:32:22)\r\n    at _addModuleChain (<cwd>/node_modules/webpack/lib/Compilation.js:1185:12)\r\n    at processModuleDependencies.err (<cwd>/node_modules/webpack/lib/Compilation.js:1097:9)\r\n    at process._tickCallback (internal/process/next_tick.js:61:11)\r\n```\r\n\r\nI tried printing the variables and was surprised to find that `chunkId` was `Infinity`, and `key` was `'55124230e814'`. I believe it is because of the logic here\r\n\r\nhttps://github.com/webpack/webpack/blob/v4.41.5/lib/HotModuleReplacementPlugin.js#L260\r\n```js\r\nconst chunkId = isNaN(+key) ? key : +key;\r\n```\r\n\r\nWhen `key` is `'55124230e814'`, `+key` would be `Infinity`, which is not `NaN`, so `chunkId` is assigned `Infinify`. I believe in this case `chunkId` should still be `key`, that is `'55124230e814'`.\r\n\r\nI also find that in webpack 5.0.0 this condition is already removed.\r\n\r\nhttps://github.com/webpack/webpack/blob/v5.0.0-beta.11/lib/HotModuleReplacementPlugin.js#L311\r\n```js\r\nconst chunkId = key;\r\n```\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nI can only reproduce this bug in my private project and I can't share it.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nNo errors are thrown\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.5\r\nNode.js version: 10.7.0/12.9.1\r\nOperating System: Mac OS\r\nAdditional tools: None\r\n", "labels": ["Send a PR"], "number_of_comments": 5, "created_at": "2020-01-03 04:18:35", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "544725531": {"author_username": "andrescst", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10207, "title": "Fix:9206 index.js is not resolved by dll reference plugin ", "body": "**What kind of change does this PR introduce?**\r\n\r\nBugfix for issue [9206](https://github.com/webpack/webpack/issues/9206)\r\n\r\n**Tests**\r\nhttps://github.com/andrescst/webpack/commit/8cf87ef6bda17197bfd69f46a64d366016283174\r\nOne for the vendor, for creating the manifest file.\r\nOne for the DLLReference who uses the manifest.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nThe file under the folder in which you want to access should be called \"index.js\"\r\n", "labels": ["PR: CI-ok", "PR: review-outdated"], "number_of_comments": 5, "created_at": "2020-01-02 20:04:19", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "544422329": {"author_username": "Loonride", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10202, "title": "feat(wasm): allow WebAssembly module filenames to use more path templates (e.g. [file], [base])", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nSolves https://github.com/webpack/webpack/issues/9517 (I used this to dive into the webpack source a bit since this issue looked inactive)\r\n\r\nThe problem is that currently you can only use `[hash]` to set a wasm output filename:\r\n\r\n```\r\noutput: {\r\n  webassemblyModuleFilename: \"[hash].wasm\"\r\n},\r\n```\r\n\r\nMore options would be useful, such as: `[base].wasm`, etc.\r\n\r\nChanges were needed in `TemplatedPathPlugin.js` because the wasm path templates were not being set correctly. For example, in the output, I would get the path string:\r\n\r\n```\r\nreadFile(join(__dirname, \"[base].wasm\"), ...\r\n```\r\n\r\nbut, I wanted the output:\r\n\r\n```\r\nreadFile(join(__dirname, \"\" + {\"./wasm.wat\":\"wasm.wat\"}[wasmModuleId] + \".wasm\"), ...\r\n```\r\n\r\nI adjusted the `TemplatedPathPlugin` so that it could be easier to handle the many templates that stem from the `filename` property (e.g. `base`, `ext`, `file`) in this situation.\r\n\r\n\r\nI added tests using configs that encompass many of the template cases: `webassemblyModuleFilename: \"[fullhash].[hash].[hash:16].[base][ext].wasm\"`\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nfeature\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo, there should be no breaking changes.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nwasm in general seems to not be documented well, so that in addition to the new path templates for `webassemblyModuleFilename`.\r\n", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 2, "created_at": "2020-01-02 01:47:12", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "542668237": {"author_username": "tuliprope", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10179, "title": "when target=node, webpack5 splitChunk load vendor.js with incorrect path,cause 'module not found' error", "body": "<!--\r\n  Please note that this template is not optional.\r\n  Please fill out _ALL_ fields, or your issue may be closed as \"invalid.\"\r\n  Please do not delete this template.\r\n  Please ask questions on StackOverflow or Gitter (https://gitter.im/webpack/webpack).\r\n  General questions, how-to questions, and support requests will be closed.\r\n-->\r\n\r\n- Operating System: Windows 10\r\n- Node Version: v10.15.3\r\n- NPM Version: v6.4.1\r\n- webpack Version: 5.0.0-beta.11\r\n- webpack-dev-server Version:\r\n- Browser:\r\n\r\n<!--\r\n  Please place an x, no spaces, in all [ ] that apply\r\n  Please note that we are NOT accepting FEATURE requests at this time.\r\n-->\r\n\r\n- [x] This is a **bug**\r\n- [ ] This is a **modification** request\r\n\r\n### Code\r\n\r\n<!--\r\n  If you have a large amount of code to share which demonstrates the problem\r\n  you're experiencing, or your webpack config is very large, please provide a link\r\n  to your repository rather than pasting code. We'd also encourage you to use a\r\n  Github Gist link instead of pasting code. Otherwise, please paste relevant\r\n  short snippets below.\r\n\r\n  For bugs, please do consider providing a link to a stripped-down, bare-bones\r\n  repo that can reproduce the problem you're experiencing. Many times, bugs\r\n  aren't actual bugs, but rather specific issues with loaders, plugins, or\r\n  an environment/OS. Problems with complicated or large applications will almost\r\n  always require this to be triaged.\r\n-->\r\n\r\n```js\r\n// webpack.config.js\r\nconst path = require('path')\r\nconst relative = p => path.join(__dirname, '../', p)\r\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\r\nconst ForkTSPlugin = require('fork-ts-checker-webpack-plugin')\r\nconst { pagesEntry, componentEntry } = require('./getEntry')\r\nconst CopyPlugin = require('copy-webpack-plugin')\r\n\r\nconst mode = process.env.NODE_ENV\r\nconst isDev = mode === 'development'\r\n\r\n/** @type {(import('webpack').Configuration)} */\r\nconst config = {\r\n  entry: {\r\n    ...pagesEntry,\r\n    ...componentEntry\r\n  },\r\n  output: {\r\n    path: relative('dist'),\r\n    filename: '[name].js'\r\n  },\r\n  target: 'node',\r\n  devtool: false,\r\n  context: relative('.'),\r\n  resolve: {\r\n    extensions: ['.ts', '.js'],\r\n    alias: {\r\n      '@': relative('.'),\r\n      '@comp': relative('./components'),\r\n      '@utils': relative('./src/utils')\r\n    }\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.[tj]s$/,\r\n        use: [\r\n          {\r\n            loader: 'eslint-loader',\r\n            options: {\r\n              fix: true\r\n            }\r\n          }\r\n        ],\r\n        enforce: 'pre'\r\n      },\r\n      {\r\n        test: /\\.tsx?$/,\r\n        exclude: /(node_modules|bower_components)/,\r\n        use: [\r\n          {\r\n            loader: 'babel-loader',\r\n            options: {\r\n              presets: ['@babel/preset-env'],\r\n              plugins: ['@babel/plugin-proposal-object-rest-spread']\r\n            }\r\n          },\r\n          {\r\n            loader: 'ts-loader',\r\n            options: {\r\n              transpileOnly: true\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.js$/,\r\n        exclude: /(node_modules|bower_components)/,\r\n        use: {\r\n          loader: 'babel-loader',\r\n          options: {\r\n            presets: ['@babel/preset-env'],\r\n            plugins: ['@babel/plugin-proposal-object-rest-spread']\r\n          }\r\n        }\r\n      },\r\n      {\r\n        test: /\\.s[ac]ss$/i,\r\n        use: [\r\n          {\r\n            loader: 'file-loader',\r\n            options: {\r\n              name: file => {\r\n                return path\r\n                  .relative(path.resolve(__dirname, '../src'), file)\r\n                  .replace(/\\.s[ca]ss$/, '.wxss')\r\n              }\r\n            }\r\n          },\r\n          {\r\n            loader: 'sass-loader',\r\n            options: {\r\n              webpackImporter: false,\r\n              sassOptions: {\r\n                importer: function(url, content, done) {\r\n                  done('')\r\n                }\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  plugins: [\r\n    new ForkTSPlugin(),\r\n    new CopyPlugin(\r\n      [\r\n        {\r\n          from: '**/*.wxml',\r\n          to: ''\r\n        },\r\n        {\r\n          from: '**/*.json',\r\n          to: ''\r\n        }\r\n      ],\r\n      { context: 'src/', ignore: relative('./dist') }\r\n    )\r\n  ].concat(isDev ? [] : [new CleanWebpackPlugin()]),\r\n  optimization: {\r\n    splitChunks: {\r\n      cacheGroups: {\r\n        lib: {\r\n          test: /node_modules/,\r\n          minSize: 2000,\r\n          minChunks: 2,\r\n          name: 'vendor',\r\n          chunks: 'all'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  mode,\r\n  watch: isDev\r\n}\r\n\r\nmodule.exports = config\r\n```\r\n```js\r\n// getEntry.js\r\nconst glob = require('glob')\r\nconst path = require('path')\r\n\r\nfunction getEntry(rootSrc, gb) {\r\n  var map = {}\r\n  glob.sync(rootSrc + gb).forEach(file => {\r\n    var key = path.relative(rootSrc, file).replace(/\\.[tj]s/, '')\r\n    map[key] = file\r\n  })\r\n  return map\r\n}\r\n\r\nmodule.exports.pagesEntry = getEntry(path.resolve(__dirname,'../src'),'/**/pages/**/index.[tj]s')\r\nmodule.exports.componentEntry = getEntry(path.resolve(__dirname,'../src'), '/components/**/index.[tj]s')\r\nmodule.exports.sassEntry = getEntry(path.resolve(__dirname, '../src'), '/**/pages/**/*.s[ca]ss')\r\n```\r\n### Expected Behavior\r\nvendor.js have correct require() path\r\n### Actual Behavior\r\nvendor.js require() path is not correct\r\n### For Bugs; How can we reproduce the behavior?\r\ni found the dist have this line:\r\n```js\r\nvar chunk = require(\"./\" + __webpack_require__.u(chunkId));\r\n```\r\ni think the './' should replace to the relative path between entry and the chunk\r\n### For Features; What is the motivation and/or use-case for the feature?\r\n", "labels": [], "number_of_comments": 3, "created_at": "2019-12-25 13:28:37", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "542289986": {"author_username": "andrey12432132", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10175, "title": "WebPack - locks a file (read-only) during build time", "body": "Hello!\r\n\r\nI press ctrl + s the studio saves the file, and WebPack starts the assembly ...\r\nI press ctrl + s a second time and the **studio does not allow to save the file**\r\nsince he is involved in the assembly.\r\ninstead the save as window appears ...\r\n- this is the problem\r\n\r\n**QUESTION:**\r\nHow in WebPack to disable file lock during build\r\nso that you can always rewrite it.\r\n\r\n(I have visual studio + task runner - but it doesn\u2019t matter, it's in webpack)\r\n\r\n```\r\n\"use strict\";\r\nvar VueLoaderPlugin = require('vue-loader/lib/plugin');\r\nmodule.exports = {\r\n    mode: 'development',\r\n    entry: './Scripts/entry.js',\r\n    output: {\r\n        path: `${__dirname}/Scripts`,\r\n        publicPath: '/',\r\n        filename: 'coms.js'\r\n    },\r\n    module: {\r\n        rules: [\r\n            {\r\n                test: /\\.(js|tsx?)$/,\r\n                use: 'babel-loader',\r\n                exclude: /node_modules/,\r\n            },\r\n            {\r\n                test: /\\.vue$/,\r\n                loader: 'vue-loader',\r\n            },\r\n            {\r\n                test: /\\.css$/,\r\n                use: [\r\n                    'style-loader',\r\n                    { loader: 'css-loader', options: { url: false } },\r\n                    'postcss-loader',\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n\r\n};\r\n```", "labels": [], "number_of_comments": 1, "created_at": "2019-12-25 08:19:23", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "541343349": {"author_username": "maximilianMairinger", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10165, "title": "Static properties on classes break tree shaking", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nStatic properties on classes break tree shaking (using ts)\r\n\r\n`file: tree.ts`\r\n```ts\r\nexport class BBB {\r\n  public name = \"BBB\"\r\n  public static staticProp = \"BBB\"\r\n  constructor(public inner: any) {}\r\n}\r\n\r\n\r\nexport class AAA {\r\n  public name = \"AAA\"\r\n  constructor(public inner: any) {}\r\n}\r\n```\r\n\r\n`file test.ts`\r\n```ts\r\nimport { AAA } from \"./tree\"\r\n\r\nconsole.log(new AAA(\"\"))\r\n```\r\n\r\nBBB gets ends up in the production bundle. I assume this is because ts resolves the static attribute to:\r\n\r\n```js\r\nexport class BBB {\r\n  constructor(inner) {\r\n    this.name = \"BBB\"\r\n    this.inner = inner\r\n  }\r\n}\r\nBBB.staticProp = \"BBB\"\r\n```\r\n\r\nAnd the last line `BBB.staticProp = \"BBB\"` gets interpreted as side effect, thus disabeling the tree shakableness of BBB.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nClone example [repo](https://github.com/maximilianMairinger/test-tree-shaking) or:\r\n\r\nCreate a project with the files and content shown above.\r\n\r\nSimple tsconfig with: `mode: \"production\"` and `ts-loader@^6.2.1`.\r\n\r\nWhen deleting the line \u00b4public static staticProp = \"BBB\"\u00b4 in `tree.ts`, BBB gets tree shaked as expected. \r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nBBB should be tree shakeable even with a static property.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version: 4.41.4\r\nNode.js version: v12.12.0\r\nOperating System: Winows\r\nAdditional tools: \"ts-loader\": \"^6.2.1\"\r\n", "labels": [], "number_of_comments": 1, "created_at": "2019-12-21 16:16:19", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "541262008": {"author_username": "Loonride", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10163, "title": "feat(compiler): kill watcher by ending compilation early", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\n/cc @hiroppy @evilebottnawi \r\n\r\nThis is an updated version of the PR: https://github.com/webpack/webpack/pull/9656\r\n\r\nThe motivation behind this is to make it possible to end a large compilation quickly. See https://github.com/webpack/webpack-dev-server/issues/1479#issuecomment-442492922\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nfeature\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nPossibly new `kill` method for watcher\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: conflict", "PR: unreviewed"], "number_of_comments": 2, "created_at": "2019-12-21 01:08:13", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "539929161": {"author_username": "Amaimersion", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10148, "title": "Logging API: as plugin developer i need to delete plugin name from every message  ", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Allow plugin developers to control plugin name in messages\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nUsing `compilation.getLogger('PluginName)` and `compiler.getInfrastructureLogger('PluginName')` i want to control how `PluginName` appears in log messages. In particaular, i don't want `PluginName` to appear in **every** message.\r\n\r\nCurrent behavior is:\r\n![1](https://user-images.githubusercontent.com/20613502/71123724-56c96f00-21f4-11ea-8f97-0ef9466f84a5.jpg)\r\n\r\nAs you can see, there is `[remove-files-plugin@1.1.4]` in every message, but i need this only in first message.\r\n \r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nPretty and clear logs.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nAs an object with options:\r\n```javascript\r\ncompiler.getInfrastructureLogger('PluginName', {\r\n    pluginNameInMessage: 'first' // or 'every'\r\n});\r\n```\r\n\r\n**Are you willing to work on this yourself?**\r\nno\r\n", "labels": [], "number_of_comments": 2, "created_at": "2019-12-18 21:17:36", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "539298330": {"author_username": "franleplant", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10142, "title": "[Suggestion / Feature request] webpack config composition", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\nA way of composing several webpack configurations or chunks of configuration together \r\n\r\n**What is the expected behavior?**\r\n\r\nHaving a base webpack configuration that can be extended or be composed with others should be native in weback, or make this process easier by either adding config getters or finders and setters; or change the way the config is represented. \r\n\r\nThe more problematic part is the `rules` array, if you want to customize a rule you basically need to traverse the array until you find an element that matches one search criteria (such as `loader.includes('file-loader')`). I've also seen in some boilerplates something like this `rules[someIndex].options.newOption = newValue` which is a rather brittle way of writing code.\r\n\r\nI know there are things such as `webpack-merge` but they dont always work as expected (think when some deep config value is the result of running a function, and I've seen that lots of libraries (see below) just inspect the config object manually and tweak it to compose or modify it.\r\n\r\nAlso, different frameworks and libraries provide some sort of \"plugin\" interface. These plugins should not be confused with Webpack plugins, these libraries call plugins to hooks that they provide to customize the default webpack configuration that they abstract over.\r\n\r\n\r\n\r\n\r\n\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nCurrently there are lots of libraries and frameworks that try to abstract over the webpack configuration but they require to provide some sort of escape hatch so that the users of said library or framework can customize the default abstracted configuration.\r\nExamples of this are `razzle.js`, `next.js`, `create-react-app` and probably many others (note how these as pretty big names).\r\n\r\nThis should be proof that people are re-inventing this wheel over and over and that is something that is useful and needed.\r\n\r\nI believe that webpack should recognize that it is a tool that should be abstracted other for most application developers and that abstractions with common configurations are desirable.\r\n\r\nThink of an interface like this\r\n\r\n```javascript\r\ncreateWebpackConfig(\r\n  useJSX(),\r\n  useSASS(),\r\n  useTypescript(),\r\n  progressiveImages(), \r\n)\r\n```\r\n\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nAs I said before, lets analyse the most often operations that webpack config compositions might perform\r\n- add new rules (loaders): usually done by `rules.push(newRule)`\r\n- customize existing rules: this is the most problematic one because there is no easy or standard way of finding a rule by some id and tweaking it. It is further problematic when some value in that rule comes from running a function such as `nodeExternals`\r\n- add new plugins: usually done by `rules.push(newRule)`\r\n\r\nThe potential solutions I can think of are\r\n- providing a standard API for getters and setters of rules (we will probably need to add some sort of id to the rule for a more deterministic behavior)\r\n- providing some sort of composition primitive like middlewares, inheritance. This will require further work to make composition a first class citizen.\r\n- providing composition APIs such as `applyConfigChunk(configChunk)` and having official smart merging strategies (but im not sure how they will handle all of the problems described above). It will probably require that the underlying config object should be _flatter_ for easier composition.\r\n\r\nEDIT: expanding on the first option since it looks like the least involved\r\nif the config schema could be modified to allow rule ids then we might get to do something like this\r\n\r\n```javascript\r\ngetRuleById(config, \"javascript-rules\") // => the entire rule object that you customize\r\n```\r\n\r\nand the original rule would look like this\r\n\r\n```javascript\r\n{\r\n   module: {\r\n    rules: [{\r\n      id: \"javascript-rules\",\r\n      test: /*\\.jsx?/,\r\n      loader: {loaders}\r\n    }]\r\n  }\r\n}\r\n```\r\n\r\nI guess that something similar could be applied to loader arrays\r\n\r\n\r\n**Are you willing to work on this yourself?**\r\nMaybe, this might be above my capabilities but with the proper guidance I can definitively help\r\n", "labels": [], "number_of_comments": 1, "created_at": "2019-12-17 20:39:56", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "537225452": {"author_username": "vankop", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10119, "title": "Asset module gets different hash", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nusing different configurations:\r\n```js\r\nrules: [\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.css$/,\r\n\t\t\t\tloader: 'css-loader'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.ttf$/,\r\n\t\t\t\ttype: \"asset\"\r\n\t\t\t}\r\n\t\t]\r\n```\r\n\r\n```js\r\nrules: [\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.css$/,\r\n\t\t\t\tloader: 'css-loader'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.ttf$/,\r\n\t\t\t\toneOf: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tissuer: /\\.js$/,\r\n\t\t\t\t\t\tloader: 'glyph-size-loader'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n   type: \"asset\"\r\n}\r\n]\r\n\t\t\t}\r\n\t\t]\r\n```\r\n\r\ncreates different hash for same asset\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nhttps://github.com/vankop/webpack-asset-module\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nsame hash for each asset\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.0.0-beta.9\r\nNode.js version: 10.17\r\nOperating System: OSX\r\n\r\n", "labels": ["webpack-5"], "number_of_comments": 5, "created_at": "2019-12-12 21:33:35", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "536879446": {"author_username": "Aarthy217", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10114, "title": "Webpack4 upgrading issues", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\nInitially, there were 25 chunks generated (10MB size ) using webpack 3,\r\n\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nI have upgraded to webpack4.\r\nand there are 111 chunks are generated(37 MB size) using webpack4.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nUltimate aim is to reduce the size of the chunks.\r\nIs there any config needs to added or remove to reduce the number and size of the config files.\r\nAny help would be appreciated\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41\r\nNode.js version: 10\r\nOperating System: Windows 10\r\nAttached both the config files for referrence.\r\n\r\n[Webpack3_Config_js.txt](https://github.com/webpack/webpack/files/3955126/Webpack3_Config_js.txt)\r\n[Webpack4_config_js.txt](https://github.com/webpack/webpack/files/3955127/Webpack4_config_js.txt)", "labels": [], "number_of_comments": 1, "created_at": "2019-12-12 10:11:34", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "536802050": {"author_username": "jamil-alisgandarov", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10113, "title": "\"string\" must be a string, Buffer, or ArrayBuffer when webpack is called", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nWebpack returns error provided below when webpack is called both with `cli` and `webpack` function. Strange thing is that it started returning this error after reinstalling node modules.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n`webpack --config=./configs/webpack.config.lib.js`\r\n\r\n````\r\n\r\nthrow new TypeError('\"string\" must be a string, Buffer, or ArrayBuffer');\r\n    ^\r\n\r\nTypeError: \"string\" must be a string, Buffer, or ArrayBuffer\r\n    at Function.byteLength (buffer.js:481:11)\r\n    at RawSource.size (Documents/GitHub/projectName/node_modules/webpack-sources/lib/Source.js:18:17)\r\n    at obj.assets.compilationAssets.map (Documents/GitHub/projectName/node_modules/webpack/lib/Stats.js:415:20)\r\n    at Array.map (<anonymous>)\r\n    at Stats.toJson (Documents/GitHub/projectName/node_modules/webpack/lib/Stats.js:412:6)\r\n    at Stats.toString (Documents/GitHub/projectName/node_modules/webpack/lib/Stats.js:857:20)\r\n    at compilerCallback (Documents/GitHub/projectName/node_modules/webpack-cli/bin/cli.js:333:32)\r\n    at compiler.run (Documents/GitHub/projectName/node_modules/webpack-cli/bin/cli.js:359:7)\r\n    at finalCallback (Documents/GitHub/projectName/node_modules/webpack/lib/Compiler.js:257:39)\r\n    at hooks.done.callAsync.err (Documents/GitHub/projectName/node_modules/webpack/lib/Compiler.js:306:14)\r\n    at AsyncSeriesHook.eval [as callAsync] (eval at create (Documents/GitHub/projectName/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:6:1)\r\n    at AsyncSeriesHook.lazyCompileHook (Documents/GitHub/projectName/node_modules/tapable/lib/Hook.js:154:20)\r\n    at emitRecords.err (Documents/GitHub/projectName/node_modules/webpack/lib/Compiler.js:304:22)\r\n    at Compiler.emitRecords (Documents/GitHub/projectName/node_modules/webpack/lib/Compiler.js:499:39)\r\n    at emitAssets.err (Documents/GitHub/projectName/node_modules/webpack/lib/Compiler.js:298:10)\r\n    at hooks.afterEmit.callAsync.err (Documents/GitHub/projectName/node_modules/webpack/lib/Compiler.js:485:14)\r\n    at _err0 (eval at create (Documents/GitHub/projectName/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:11:1)\r\n    at callback (Documents/GitHub/projectName/node_modules/copy-webpack-plugin/dist/index.js:126:17)\r\n    at afterEmit (Documents/GitHub/projectName/node_modules/copy-webpack-plugin/dist/index.js:220:13)\r\n    at AsyncSeriesHook.eval [as callAsync] (eval at create (Documents/GitHub/projectName/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:7:1)\r\n    at AsyncSeriesHook.lazyCompileHook (Documents/GitHub/projectName/node_modules/tapable/lib/Hook.js:154:20)\r\n    at asyncLib.forEachLimit.err (Documents/GitHub/projectName/node_modules/webpack/lib/Compiler.js:482:27)\r\n    at Documents/GitHub/projectName/node_modules/neo-async/async.js:2818:7\r\n    at done (Documents/GitHub/projectName/node_modules/neo-async/async.js:3522:9)\r\n    at AsyncSeriesHook.eval [as callAsync] (eval at create (Documents/GitHub/projectName/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:6:1)\r\n    at outputFileSystem.writeFile.err (Documents/GitHub/projectName/node_modules/webpack/lib/Compiler.js:464:33)\r\n    at Documents/GitHub/projectName/node_modules/graceful-fs/graceful-fs.js:57:14\r\n    at FSReqWrap.oncomplete (fs.js:135:15)\r\n````\r\n**What is the expected behavior?**\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  `4.41.0` occurs for `3.12.0` too, works fine on `3.11.0`\r\nNode.js version: `dubnium -> v10.17.0`\r\nOperating System: `MACOS 10.14.2 (18C54)`\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 1, "created_at": "2019-12-12 07:22:32", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "536790965": {"author_username": "kingller", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10111, "title": "Cannot exclude lodash when use it as an external", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nI set the `lodash` to externals, but it still left some code in my package file.\r\n![image](https://user-images.githubusercontent.com/9544236/70689783-1ea3c700-1cf0-11ea-9921-cc3ce77a52ba.png)\r\n\r\nwebpack.config.js\r\n```\r\n{\r\n   externals: {\r\n    lodash: '_'\r\n  }\r\n}\r\n```\r\n\r\nIf I add `noParse` to webpack.config.js\r\n```\r\n{\r\n  module: {\r\n    noParse: /lodash/,\r\n  }\r\n}\r\n```\r\nThen an error happens,\r\n```\r\nUncaught ReferenceError: require is not defined\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n`lodash` code should not be in my file.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  `4.41.2`\r\nNode.js version:  `10.16.3`\r\nOperating System: ios\r\nAdditional tools: vs code\r\n", "labels": [], "number_of_comments": 1, "created_at": "2019-12-12 06:52:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "535516708": {"author_username": "fodelf", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10103, "title": "ModuleConcatenationPlugin cost much time", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nwhen we use webpack ModuleConcatenationPlugin  it cost us much time\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nI hope it work faster when we use the ModuleConcatenationPlugin \r\n\r\n**How should this be implemented in your opinion?**\r\nreason \uff1a i guess  in the ModuleConcatenationPlugin.js  , user the _tryToAdd function when our project it import many js ,it will cost much time. example [https://github.com/angular/angular-cli/issues/11327]\r\nplan one :  cache all  problem , like this : const failureCache = require(\"./failureCache.js\");it works;\r\nplan two :  use nodejs worker_threads  to lifting speed\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": [], "number_of_comments": 2, "created_at": "2019-12-10 06:11:11", "reactions": {"total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "534486352": {"author_username": "Lyrkan", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10097, "title": "Allow to change module types from loaders", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nThis PR adds a `setModuleType(type)` method to the Loader interface that allows to change the type, parser and generator of the related module (closes #7057).\r\n\r\nFor instance:\r\n\r\n```js\r\nmodule.exports = function(content) {\r\n\tthis.setModuleType('javascript/auto');\r\n\treturn \"module.exports = \" + JSON.stringify(content);\r\n};\r\n```\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nFeature\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes, let me know if I need to add more.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nThe new method should be added to the following page: https://webpack.js.org/api/loaders/", "labels": ["PR: conflict", "PR: unreviewed"], "number_of_comments": 11, "created_at": "2019-12-08 03:26:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "534234034": {"author_username": "felixmosh", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10095, "title": "a nameless vendor chunk not triggers HMR updates", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nHMR not triggers an update when vendor chunk is nameless.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n1. clone https://github.com/felixmosh/i18next-hmr/tree/master/examples/react-i18next\r\n2. npm i\r\n3. npm start\r\n4. update some key in `public/locales/en/translation.json`.\r\n   It will send to client something  like\r\n   ```\r\n   {\"h\":\"7a2a05a02fe8fcfc2289\",\"c\":{\"0\":false}}\r\n   ```\r\n   but the `module.hot.accept` is **not triggered**.\r\n5. change in `config/webpack.config.js` `splitChunks.name: true`\r\n6. re-do steps 3-4, client side will get a proper update and `module.hot.accept` will be triggered.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nIt should trigger an HMR update for a nameless chunks.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.x latest\r\nNode.js version: 8\r\nOperating System: macOS \r\nAdditional tools:\r\n\r\n<!-- Bug reports and Feature requests must use other templates, or will be closed -->\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->", "labels": [], "number_of_comments": 2, "created_at": "2019-12-06 20:04:58", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "534201881": {"author_username": "maclockard", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10094, "title": "Performant alternative to stats objects for getting preload/prefetch childAsset info", "body": "## Feature request\r\n\r\n**What is the expected behavior?**\r\n\r\nCurrently, the only way to get whether a child asset of an entry point should be preloaded/prefetched in a plugin is to use the [`stats` object](https://webpack.js.org/api/node/#stats-object), however, for larger builds this can be too slow. Similarly to how there is an API for getting basic entry point info in a performant way avoiding the `stats` object, there should possibly be an API for getting this preload/prefetch information in a lightweight way.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nIf [html-webpack-plugin](https://github.com/jantimon/html-webpack-plugin) had access to a performant API for preload/prefetch info, it would be able to support preload/prefetch for the child assets of entry points in the initial HTML. This could significantly speed up initial load for larger bundles that make heavy use of async chunks.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nPossibly extending the existing `compilation.entrypoints` API that html-webpack-plugin already uses?\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nNo. I'm simply filing this on behalf of @jantimon since he expressed the need for this feature before being able to add support for preloading/prefetching chunks to [html-webpack-plugin](https://github.com/jantimon/html-webpack-plugin).\r\n\r\nRelevant discussions with more information:\r\n- https://github.com/jantimon/html-webpack-plugin/issues/934\r\n- https://github.com/jantimon/html-webpack-plugin/pull/1014\r\n- https://github.com/jantimon/html-webpack-plugin/issues/1150\r\n- https://github.com/facebook/create-react-app/issues/3319", "labels": [], "number_of_comments": 0, "created_at": "2019-12-06 18:48:55", "reactions": {"total_count": 2, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "533876496": {"author_username": "alan-agius4", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10089, "title": "fix: stringify error value in RuleSetCompiler", "body": "Before\r\n```\r\n Error: Compiling RuleSet failed: Properties enforce are unknown (at ruleSet[1].rules[5]: [object Object])\r\n```\r\n\r\nAfter\r\n```\r\nError: Compiling RuleSet failed: Properties enforce are unknown (at ruleSet[1].rules[5]: {\"test\":{},\"exclude\":{},\"enforce\":\"pre\"})\r\n```\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-ok", "PR: reviewed-changes-requested"], "number_of_comments": 5, "created_at": "2019-12-06 10:28:40", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "533711480": {"author_username": "igozali", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10087, "title": "`SourceMapDevToolPlugin ... generate SourceMap` for vendors takes a very long time", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n**What is the current behavior?**\r\nI'm experiencing a massive performance regression between `webpack@4.28.4` and `webpack@4.41.2`, in particular during the `SourceMapDevToolPlugin ... generate SourceMap` for vendors.\r\n\r\nWhen I use `webpack@4.28.4` to build my project in production mode, this step takes 3-4 seconds tops. However, after I upgrade to the latest `webpack@4.41.2` by using `npm i webpack@latest`, my build would be stuck at this step for a very long time (> 5 minutes):\r\n```\r\n93% after chunk asset optimization SourceMapDevToolPlugin 660c9e1426ee984771b2.vendors.bundle.js generate SourceMap\r\n```\r\n\r\nI'm using the following build command and the same config before and after the webpack update:\r\n```\r\nnpx webpack --colors --display-modules --progress --config ./webpack.prod.config.js\r\n```\r\n\r\nI tried looking at the diff of `package-lock.json` before and after the update, but I couldn't find anything out of the ordinary.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nAll of the files that I think are relevant are here. \r\n\r\n - [Initial `package.json`](https://gist.github.com/igozali/854ec0c7d6245f8513acf4b750f122b2#file-package-json)\r\n - [Initial `package-lock.json`](https://gist.github.com/igozali/854ec0c7d6245f8513acf4b750f122b2#file-package-lock-json)\r\n - [`webpack.base.config.js`](https://gist.github.com/igozali/854ec0c7d6245f8513acf4b750f122b2#file-webpack-base-config-js)\r\n - [`webpack.prod.config.js`](https://gist.github.com/igozali/854ec0c7d6245f8513acf4b750f122b2#file-webpack-prod-config-js)\r\n - [Diff for `package.json` after running `npm i webpack@latest`](https://gist.github.com/igozali/854ec0c7d6245f8513acf4b750f122b2#file-package-json-diff)\r\n - [Diff for `package-lock.json` after running `npm i webpack@latest`](https://gist.github.com/igozali/854ec0c7d6245f8513acf4b750f122b2#file-package-lock-json-diff)\r\n\r\nUnfortunately, I don't have an example project for a MWE since this occurred on a work project. I was hoping some insights could be gained from the `package-lock.json` diffs, but if not, please let me know and I'll try to reproduce with a simple project.\r\n\r\n\r\n**What is the expected behavior?**\r\nThe expected behavior is the one before the webpack update, where the generate SourceMap step on vendors takes 3-4 seconds.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.2\r\nNode.js version:  13.2.0\r\nOperating System:  macOS Mojave 10.14.6\r\nAdditional tools:  npm@6.13.1\r\n", "labels": [], "number_of_comments": 3, "created_at": "2019-12-06 02:41:26", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "533228578": {"author_username": "milahu", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10082, "title": "javascript hot code completion - send live object introspection to editor", "body": "## Feature request\r\n\r\nadd \"hot module introspection\"\r\nas a feedback channel from browser to editor\r\n\r\n**situation in my code editor**\r\n\r\n```js\r\nclass Class1 {constructor() {this.key1 = 'val1'}};\r\nclass Class2 {constructor() {this.key2 = 'val2'}};\r\nobj1 = new Class1();\r\nobj2 = new Class2();\r\n\r\nobj1.k\r\n//    ^\r\n//    at this point i want \"hot code completion\" in my code editor\r\n//    so only \"key1\" is suggested, but not \"key2\"\r\n\r\n// code introspection at runtime\r\nObject.keys(obj1)\r\n// = [ 'key1' ]\r\n\r\n// the node.js shell can do it\r\nobj1.k\r\n//    ^\r\n//    the tab-key does the right completion to \"key1\"\r\n```\r\n\r\n**Ideal?**\r\n\r\n**What is the expected behavior?**\r\n\r\n```js\r\nobj1.k\r\n//    ^\r\n//    at this point i want \"hot code completion\" in my code editor\r\n//    so only \"key1\" is suggested, but not \"key2\"\r\n```\r\n\r\nas far as i know\r\nall code editors fail at this point of \"dynamic code analysis\"\r\nthe best they can offer is: `key1` or `key2`\r\n\r\nvscode and eclipse do this by default\r\nvscode calls this \"intellisense text suggestions\"\r\n\r\nbut i dont want to be limited by \"static code analysis\"\r\nwhen the program is started anyway, after every file change\r\n\r\n**Solution?**\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nextend the \"hot module replacement\" system\r\nto feed back \"hot module introspection\" data to the editor\r\n\r\n![js-webpack-hmr--hot-module-introspection-feedback](https://user-images.githubusercontent.com/12958815/70218504-613f2f80-1743-11ea-9d66-a725eb8b558f.jpg)\r\n\r\nthis introspection-data can be sent over http\r\nso the editor has a keep-alive connection\r\nand is waiting for the server to push new introspection data\r\n\r\n.... or use the browser as code editor, using [CodeMirror](https://codemirror.net/demo/tern.html)\r\nand show the program inside a frame, like on jsfiddle.net\r\n[ the code completion function of codemirror seems broken to me ]\r\n\r\nthe data format should be optimized for machine-readability\r\nfor example by using length-prefixed lists and strings,\r\nlike in BSON, messagepack, python-pickle, EXI, flatbuffers, ....\r\n\r\nin an ideal world, the javascript runtime does offer a fast way\r\nto access the \"internal representation\" of the running program\r\n\r\n**limits**\r\n\r\nintrospection requires a valid program,\r\nso you must have a running \"last version\"\r\nto provide introspection data for your not-running \"current version\"\r\n\r\n**potential problems**\r\n\r\ncircular references must be detected and handled\r\nlike `object.child.parent.child.parent.child`....\r\n\r\n**related**\r\n\r\n[recursive introspection in javascript](https://stackoverflow.com/questions/15690706/recursively-looping-through-an-object-to-build-a-property-list)\r\n\r\n[get inherited properties of javascript objects](https://stackoverflow.com/questions/8024149/is-it-possible-to-get-the-non-enumerable-inherited-property-names-of-an-object)\r\n\r\n[VS Code to autocomplete JavaScript class 'this' properties automatically](https://news.ycombinator.com/item?id=16289698)\r\n-- \"doesn't work too well if you bind things to the class at runtime\"\r\n\r\n[the ahaa moment of hot reloading in clojurescript/figwheel, by bruce hauman](https://www.youtube.com/watch?v=j-kj2qwJa_E&t=228s)\r\n\r\n**Why?**\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nthis allows for \"zero knowledge programming\"\r\n\r\nlet the machine do the boring-precise part of \r\n\"how did i call this property? where is it hidden?\"\r\nand focus on the creative-fuzzy part of \r\n\"let me just add something like ....\"\r\n\r\nthis also makes it much easier to learn new libraries.\r\ninstead of depending on good documentation,\r\nyou can make full use of the existing introspection functions.\r\n\r\nfor \"distant properties\" who are hidden in child/parent objects,\r\nyou can browse a \"map of properties\", like a mind-map.\r\n\r\nalso, why not? : P\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nno, not today.\r\ni hope that the \"insider people\" can solve this much faster than me\r\nand i can avoid digging into unfamiliar projects\r\n\r\n**more keywords**\r\n\r\ncode hinting, runtime analysis, dynamic analysis, runtime introspection, live object introspection, hierarchy of variable names, javascript object graph \r\n", "labels": [], "number_of_comments": 1, "created_at": "2019-12-05 09:31:50", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "533150601": {"author_username": "sunzongzheng", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10081, "title": "What is the recommend way to modify module result?", "body": "I cannot find the recommend way to modify module result after reading the docs.\r\nI tried to modify `module._source._value` to modify result. But I get some troubles.\r\nWhen file has dependencies, it turns strange in the output file.\r\n\r\nI made an smallest repo\r\nhttps://github.com/sunzongzheng/webpack-plugin-to-modify-module-content-sample", "labels": [], "number_of_comments": 6, "created_at": "2019-12-05 06:23:57", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "531517128": {"author_username": "simonhowey", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10071, "title": "watchOptions.aggregateTimeout cannot be 0", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nUsing a config with:\r\n`\r\n    watchOptions: {\r\n      aggregateTimeout: 0\r\n    },\r\n`\r\nReverts to aggregateTimeout to 200 due to the || assignment here:\r\n\r\nhttps://github.com/webpack/webpack/blob/c41bf0ed24ecba2a6406697481d699db8dbce379/lib/Watching.js#L46\r\n\r\nhappens here as well:\r\n\r\nhttps://github.com/webpack/watchpack/blob/c0221fc3be199b34711909c6c1245fc1054c7a51/lib/watchpack.js#L67\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nUse a config with:\r\n   ` watchOptions: {\r\n      aggregateTimeout: 0\r\n    },`\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nNot positive what expected behaviour is supposed to be. IMO either: \r\n- should change docs to note it should be > 0 and throw an error/warning if its 0\r\n- change code to accept 0\r\n\r\nLooking at watchpack it looks like 0 is fine it just ends up being a setTimeout value.\r\n\r\nI can put in a PR for either.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.0\r\nNode.js version:  v10.17.0\r\nOperating System: OSX\r\nAdditional tools:\r\n", "labels": ["Send a PR"], "number_of_comments": 1, "created_at": "2019-12-02 20:24:16", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "531013962": {"author_username": "smelukov", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10064, "title": "add check of crossorigin for prefetch link", "body": "closes #10059\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nbugfix\r\n\r\n**Did you add tests for your changes?**\r\n\r\nno\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nno", "labels": ["PR: CI-ok", "PR: unreviewed", "PR: webpack-4"], "number_of_comments": 4, "created_at": "2019-12-02 09:54:23", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "530483160": {"author_username": "ArgonAlex", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10059, "title": "Prefetch adds crossorigin attribute for same origin", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nRegular script and preload requests check if the request url has the same origin as the page before adding the crossorigin attribute:\r\nhttps://github.com/webpack/webpack/blob/v4.41.2/lib/web/JsonpMainTemplatePlugin.js#L234\r\nBut prefetch requests don't have that check:\r\nhttps://github.com/webpack/webpack/blob/v4.41.2/lib/web/JsonpMainTemplatePlugin.js#L253\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nEnable crossOriginLoading, and add an import with a prefetch magic comment.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nPrefetch requests should check against the page origin before adding the crossorigin attribute.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.2\r\nNode.js version: 12\r\nOperating System: Windows\r\n", "labels": ["Send a PR"], "number_of_comments": 1, "created_at": "2019-11-29 20:42:07", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "530456434": {"author_username": "verbeeksteven", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10057, "title": "IE 11 splitChunks + cacheGroups causes nothing to happen?", "body": "Hello,\r\n\r\nI have a setup which looks like\r\n\r\n    splitChunks: {\r\n        cacheGroups: {\r\n            default: false,\r\n            common: false,\r\n            styles: {\r\n                name: settings.vars.cssName,\r\n                test: /\\.(scss|css|vue)$/,\r\n                chunks: 'all',\r\n                enforce: true\r\n            }\r\n        }\r\n    },\r\n\r\nAnd this splits out an app.js and a styles.css file. My problem is the app.js is setup with dynamic code loading using the `webpackChunkName` which I can see in the file (I see each file that should be loaded in the Promise area).\r\n\r\nMy problem seems to be there is a function in the file called `checkDeferredModules` which is from webpack and looks like\r\n\r\n \tfunction checkDeferredModules() {\r\n \t\tvar result;\r\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\r\n \t\t\tvar deferredModule = deferredModules[i];\r\n \t\t\tvar fulfilled = true;\r\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\r\n \t\t\t\tvar depId = deferredModule[j];\r\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\r\n \t\t\t}\r\n \t\t\tif(fulfilled) {\r\n \t\t\t\tdeferredModules.splice(i--, 1);\r\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\r\n \t\t\t}\r\n \t\t}\r\n\r\nand the problem is `if(installedChunks[depId] !== 0)` for some reason returns true which sets `fulfilled = false;` if I comment out this line IE 11 loads the JS files (fails elsewhere) but it at least loads them. If I don't it does absolutely nothing.\r\n\r\nNow I don't really know webpack internals, but where should I start looking to solve this issue?", "labels": [], "number_of_comments": 1, "created_at": "2019-11-29 18:25:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "529597514": {"author_username": "spamshaker", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10044, "title": "External library deep structure consumption", "body": "  - **What kind of change does this PR introduce?**\r\n    - when UMD in use - fixes bundle dist file and transforms / to array path to search in deep structure while consuming the deeply exported structure\r\n\r\n  - **Did you add tests for your changes?**\r\n    - yes\r\n  - **Does this PR introduce a breaking change?**\r\n    - no\r\n\r\n  - **What needs to be documented once your changes are merged?**\r\nUpdate UmdTemplatePlugin.js\r\nhttps://github.com/webpack/webpack.js.org/blob/master/src/content/guides/author-libraries.md#external-limitations\r\n\r\nThere is a possibility to get deep structure externalized by\r\n\r\n>     // Everything that starts with \"library/\"\r\n>     /^library\\/.+$/,\r\n> \r\n\r\nAll this regex externalization doesn't make sense without properly consuming it.\r\ne.g the library structure is\r\nmy-library\r\n + /components/A\r\n + /components/B\r\n + /utils/A\r\n + /etc/\r\neach module is exported and creates the structure in runtime:\r\n```\r\nroot['my-library']['components']['A']\r\nroot['my-library']['components']['B']\r\nroot['my-library']['utils']['A']\r\nroot['my-library']['etc']\r\n```\r\nnow my-package-when-i-am-using-my-library has an index.js which contains `import A from 'my-library/components/A'`\r\nthe compilation phase will externalize this cause it match the regular expression but in runtime umd implementation will be looking for\r\n`root['my-library/components/A']` instead of `root['my-library']['components']['A']`\r\nsplitting this string resolves the issue for all cases", "labels": ["PR: CI-ok", "PR: review-outdated"], "number_of_comments": 8, "created_at": "2019-11-27 22:20:19", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "529362718": {"author_username": "marinav", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10043, "title": "XHR request not supported by stream-http getReader() of undefined", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nI need to send xhr requests to set up Cypress tests in my project, unfortunatly, even if the request succeed, i can't access data because of  dependencies used by webpack: (node-libs-browser and stream-http). It triggers this error :\r\n\r\n> Cannot read property 'getReader' of undefined\r\n\r\nbecause response.js file in stream-http package need a response.body and is empty.\r\n\r\nI saw an [open PR](https://github.com/jhiesey/stream-http/pull/110 ) on stream-http package but I don't know if it will be merged one day. So I tried to desactivate node in webpack settings (https://webpack.js.org/configuration/node/) but I have another error : \r\n\r\n> 'crypto' is undefined\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nTo simulate an xhr request I delete win.fetch in my Cypress file, but you can do it in the project directly. And I have whatwg-fetch polyfill installed.\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like to send xhr request and get the answer.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.2\r\nNode.js version: 10.15.3\r\nOperating System: Mac osx\r\n", "labels": [], "number_of_comments": 0, "created_at": "2019-11-27 13:57:48", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "528774122": {"author_username": "AviVahl", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10037, "title": "webpack@4, node@13, Mac crashes when compiler.watch().close()", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\nWhen closing a watching compiler programmatically, the node process crashes.\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nGetting the following crash in several repositories on our Mac CIs:\r\n```\r\nAssertion failed: (0), function uv_close, file ../deps/uv/src/unix/core.c, line 187.\r\nerror Command failed with signal \"SIGABRT\".\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n- clone repo: https://github.com/AviVahl/lodash-es-webpack4\r\n- `yarn`\r\n- paste the following to `a.js`:\r\n```js\r\nconst webpack = require('webpack');\r\nconst compiler = webpack({ mode: 'development' });\r\n\r\nfunction createWatcher() {\r\n    const watcher = compiler.watch({}, () => {\r\n        console.log('watching');\r\n        setTimeout(() => {\r\n            watcher.close(() => {\r\n                console.log('closed watcher');\r\n                createWatcher();\r\n            });\r\n        }, 1000);\r\n    });\r\n}\r\n\r\ncreateWatcher();\r\n```\r\n- `node a.js`\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n(for the above code) watch -> wait for 1 sec -> close watcher -> rewatch and repeat process.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.2\r\nNode.js version: 13.2.0\r\nOperating System: Mac 10.12.6\r\n\r\n@sokra maybe this is because `watchpack` is using old `chokidar` with outdated `fsevents`? :/", "labels": [], "number_of_comments": 16, "created_at": "2019-11-26 14:48:53", "reactions": {"total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "528693066": {"author_username": "Yegorich555", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10036, "title": "Hot reloading webpack-dev-server by changing mock-data", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nUsing wepback-dev-server as mock-api-server with hot-reloading. \r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nDuring the developing I have to provide a mock-data (when I have no real apiServer). So we can use \r\n```js \r\n{\r\n  devServer: {\r\n    after(app) {\r\n      app.get(\"some url\", function (req, res) {\r\n        res.json('some object here')\r\n      });\r\n     ...\r\n      app.post(\"some url\", function (req, res) {\r\n        res.json('some object here')\r\n      });\r\n    }\r\n  }\r\n};\r\n```\r\n\r\nAnd as mock-functions are set through wepback.config.js hot-replacement doesn't work. Right now I implemented proxy config for webpack and mockServer with nodemon. But it doesn't look perfect and nodemon doesn't resolve hmr (by watching imports). I would like to see hot-replacement directly into devServer that should reload dev-server by changing mock-files (that are imported in webpack.config.js and are used instead of ```app.get....```). Using the json files instead of functions doesn't work for me because I need to response based on request.\r\n\r\n**How should this be implemented in your opinion?**\r\nI guess we should run two webpack instances. The first one watch for mock data changes and reloads the dev-server, the second one works as is.\r\n\r\n**Are you willing to work on this yourself?**\r\nno, because I'm not good at in webpack architecture\r\n", "labels": [], "number_of_comments": 0, "created_at": "2019-11-26 12:28:21", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "528533382": {"author_username": "Praveer1981", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10035, "title": "Uncaught ReferenceError: global is not defined", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nI have an `Electron` based application. we do `webpack ` in the render process. It throws error when I run the app\r\n`Uncaught ReferenceError: global is not defined`\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nIt should not throw this error when I run the application\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nhere is the Error:\r\n```\r\nindex.js?e792:25 Uncaught ReferenceError: global is not defined\r\n    at eval (index.js?e792:25)\r\n    at Object../node_modules/@babel/polyfill/lib/index.js (feb33beb921cb1f5a1b3.worker.js:97)\r\n    at __webpack_require__ (feb33beb921cb1f5a1b3.worker.js:20)\r\n    at eval (eval at ./node_modules/babel-loader/lib/index.js?{\"babelrc\":false,\"presets\":[\"@babel/preset-env\", \"@babel/preset-react\"]}!./node_modules/ts-loader/index.js?{\"transpileOnly\":true,\"configFile\":\"tsconfig.webpack.json\"}!./node_modules/ts-loader/index.js?!./packages/myApp/modules/frameworks/file-provider/box-provider/webworker/box.worker.ts (feb33beb921cb1f5a1b3.worker.js:526), <anonymous>:2:73)\r\n    at Module../node_modules/babel-loader/lib/index.js?{\"babelrc\":false,\"presets\":[\"@babel/preset-env\", \"@babel/preset-react\"]}!./node_modules/ts-loader/index.js?{\"transpileOnly\":true,\"configFile\":\"tsconfig.webpack.json\"}!./node_modules/ts-loader/index.js?!./packages/myApp/modules/frameworks/file-provider/box-provider/webworker/box.worker.ts (feb33beb921cb1f5a1b3.worker.js:526)\r\n    at __webpack_require__ (feb33beb921cb1f5a1b3.worker.js:20)\r\n    at feb33beb921cb1f5a1b3.worker.js:84\r\n    at feb33beb921cb1f5a1b3.worker.js:87\r\n```\r\n\r\nNote: Since it is an electron app: \r\nconfig.target = \"electron-renderer\";\r\n{global:true};\r\n\r\n\r\nwebpack version:  ^4.41.2\r\nNode.js version: 10.16.3\r\nOperating System: windows 10\r\n\"@babel/core\": \"^7.6.4\"\r\nAdditional tools: chrome 78\r\nElectron version : 7.1.1\r\n", "labels": ["Send a PR", "bug"], "number_of_comments": 7, "created_at": "2019-11-26 07:11:38", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "527203301": {"author_username": "hogmoru", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10022, "title": "Errors should output to STDERR (bis)", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWebpack prints everything to stdout, including errors.\r\n\r\nIt's a problem when webpack is used by another tool in a build process: that tool cannot extract the error messages, only detect that there was an error... or do some guesswork like \"Upon non-zero exit code with empty stderr, let's use stdout\", as I implemented for Rush, but the issue was reported by other tools, and it'd be better to fix it in Webpack itself.\r\n\r\nSee also #1278\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nSee [this reproducible test repo](https://github.com/hogmoru/webpack-nostderr)\r\n\r\nClone it, `npm install`, `npm run build`.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nThe build tool expects Webpack to print errors to stderr.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.2\r\nNode.js version: 12.13.1\r\nOperating System: macOS Catalina\r\nAdditional tools: tools known to have a problem with that: Rush, webpacker (Ruby on Rails)\r\n", "labels": [], "number_of_comments": 1, "created_at": "2019-11-22 13:44:41", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "526334625": {"author_username": "felipellrocha", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10014, "title": "Webpack bundling wrong file when using custom loader", "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\nI have created a custom loader. It transforms `.proto` files into typescript that I can import and use.\r\nI've verified that the typescript is generated correctly, although the problem now is that when I open my `bundle.js` I see multiple `index.ts` files. This is a express app, so it tries to bind to port 8000 multiple times, and the application never loads (is how I found out about the issue).\r\nTyping seems to work just fine (although I haven't verified that).\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nNot sure how to reproduce except creating a new loader, and seeing if bundles the correct data, or some other file in the bundle.\r\n\r\n**What is the expected behavior?**\r\nI would see the compiled typescript file I have generated from my `.proto` file included in the final bundle.\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.2\r\nNode.js version: v12.12.0\r\nOperating System: Docker Container: node:12-slim\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 5, "created_at": "2019-11-21 02:59:32", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "526329306": {"author_username": "Airkro", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 10013, "title": "Change the logic of MinChunkSizePlugin", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nMerge chunks what too small together. Don't merge async chunks to initial chunks.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nCurrently, webpack assigns small chunks to large chunks, whatever they are initial or async.\r\n\r\n**How should this be implemented in your opinion?**\r\nAdd an option to avoid breaking change.\r\n\r\n**Are you willing to work on this yourself?**\r\nno", "labels": [], "number_of_comments": 0, "created_at": "2019-11-21 02:39:58", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "524923141": {"author_username": "maykinayki", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9992, "title": "Webpack parser.hooks.call does not working for imported functions", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nI'm trying to write webpack plugin for exporting translation keys per entry-point and export them to `.json` file.\r\n\r\n`\r\ncompiler.hooks.normalModuleFactory.tap(pluginName, factory => {\r\n          factory.hooks.parser.for('javascript/auto').tap(pluginName, (parser, options) => {\r\n              parser.hooks.call.for(\"___\").tap(pluginName, expression => {\r\n                   console.log(expression);\r\n              });\r\n           });\r\n    });\r\n`\r\n\r\nin `MyComponent.js` if I import the function `___` then `call` hooks above will not get triggered but if I define `___` as a global function and use it without importing then it works. So how should I solve this problem?\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.35.0\r\nNode.js version: 10.15.0\r\n", "labels": ["inactive"], "number_of_comments": 2, "created_at": "2019-11-19 10:40:16", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "524909361": {"author_username": "icy0307", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9991, "title": "Webpack default minimizer produces staled sourcemap ", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nBuilt a simple project followed by this guide,\r\nhttps://webpack.js.org/guides/typescript/\r\n the generated map's `sources` field point to a staled file path **no longer existed in the file system**.\r\nHere is webpack config:\r\n![image](https://user-images.githubusercontent.com/8952410/69138302-62445000-0af9-11ea-9bea-a4036d607345.png)\r\nAnd here is the result:\r\n![image](https://user-images.githubusercontent.com/8952410/69138382-89028680-0af9-11ea-9e9c-5ffe8b48083f.png)\r\nThere is no file named `main.js` in the file system. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1.  Create a project follow this guide.https://webpack.js.org/guides/typescript/\r\n2.  Change the output filename to `main.js` and build with sourcemap\r\n3.  Change the output filename again to  `abc.js` and build again , then you can reproduce this bug.\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nGenerate correct sourcemap.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  \r\nthe package I am using:\r\n![image](https://user-images.githubusercontent.com/8952410/69131414-52bf0a00-0aed-11ea-8175-1dc8d6d442bd.png)\r\nNode.js version: \r\nOperating System: \r\nAdditional tools:\r\n", "labels": ["inactive"], "number_of_comments": 7, "created_at": "2019-11-19 10:16:11", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "524476916": {"author_username": "slavafomin", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9986, "title": "Stats output API improvements", "body": "Hello!\r\n\r\nI've been working on debugging Webpack builds for quite some time now. This process is heavily dependent on [Stats](https://webpack.js.org/configuration/stats/) configuration. And in my experience the structure and behavior of this API is counter-intuitive, error-prone and cumbersome.\r\n\r\n# maxModules\r\n\r\nFor example, I've been struggling all week trying to figure out why debugging tools like `webpack-bundle-analyzer` show very awkward and inconsistent statistics. And only today I've accidentally figured out that I need to explicitly specify `maxModules: Number.MAX_VALUE` in the stats config to make it to output all modules, because by default it truncates the data to only 15 modules. The funny thing is that setting this option to `false` will not disable it, but will be interpreted as zero or \"DO NOT SHOW MODULES AT ALL\", so you have to set it to `Number.MAX_VALUE`, which is extremely weird.\r\n\r\nWhy do we limit maximum modules to 15? Why not to 20 or 25? Shouldn't it be unlimited by default? Why exactly do we need this option in the first place in the low-level API? Shouldn't it be responsibility of the UI (Webpack CLI) to filter or truncate the results? I wouldn't expect the method `stats.toJson()` to truncate something for me by default.\r\n\r\nI have a strong feeling that this API and especially it's default values was specifically designed for console output and not for build analysis tools. If so, this should be reconsidered.\r\n\r\n**I believe that options like `maxModules` shouldn't be enabled by default. The user of this API should provide it's own defaults if needed instead.** For example, if Webpack CLI doesn't want to display all modules then it should set `maxModules` to `15` by default. This shouldn't happen in the underlying low-level library.\r\n\r\n# Stat presets\r\n\r\nHaving an option to use a preset is great, but the current API either gives you an option to use the preset or to use the customized config. You can't use the preset and to override some specific options at the same time.\r\n\r\n# `stats.all`\r\n\r\nThis option is documented as:\r\n\r\n> A fallback value for stats options when an option is not defined. It has precedence over local webpack defaults.\r\n\r\nThis option is really weird, because its type is `boolean`, but stats object can have various options with various value types like `Number`, `String`, `Array` and `Function`. The description doesn't make any sense for this option and it's behavior is vague.\r\n\r\n# Proposition\r\n\r\n1. Remove underlying default values from this API and move it higher (e.g. to Webpack CLI).\r\n\r\n2. Give developers a way to use built-in presets with the ability to override some specific options.\r\n\r\n3. Remove this weird fallback `all` option (I believe it's sole purpose was to enable all boolean options by default and then to disable some of them explicitly) and instead provide a preset with all options enabled (user will be able to disable some options, see point 2).", "labels": ["inactive"], "number_of_comments": 2, "created_at": "2019-11-18 16:28:45", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "523598847": {"author_username": "jhg", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9980, "title": "Support \"optionalDependencies\" when target is node (or related, for example electron-main)", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nSupport `optionalDependencies` as NPM and Yarn do:\r\nhttp://npm.github.io/using-pkgs-docs/package-json/types/optionaldependencies.html\r\nhttps://yarnpkg.com/lang/en/docs/dependency-types/\r\n\r\nIt's useful for example when you need to use an package in Windows and other in Mac/Linux and packages support `os` then it can be not installed in the rest of operate systems but webpack doesn't check that and raise an error.\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen you have an require/import inside an `if` to use module for that OS, which's installed, not raise errors for an optional package that won't be used and NPM and Yarn are ignoring when install packages.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nUse optional packages feature of NPM and Yarn.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nChecking `optionalDependencies` of `package.json` is ok.\r\n\r\n**Are you willing to work on this yourself?**\r\nI didn't develop webpack never before, I'm suggesting an feature that is so needed by comunity as you can see searching about dynamic dependencies or optional dependencies.\r\n", "labels": ["inactive"], "number_of_comments": 1, "created_at": "2019-11-15 17:33:17", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "523081039": {"author_username": "smelukov", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9975, "title": "Update web-worker example", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nRefactoring web-worker example to close [this](https://github.com/webpack/webpack/projects/5#card-13359496) card\r\n\r\nDepends on this [PR](https://github.com/webpack-contrib/worker-loader/pull/224) with worker-loader update to support webpack 5, before it will be merged - CI on this PR will be failed\r\n\r\n**Did you add tests for your changes?**\r\n\r\nno\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nno", "labels": ["PR: CI-not-ok", "PR: unreviewed"], "number_of_comments": 2, "created_at": "2019-11-14 20:15:11", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "523023967": {"author_username": "Leedehai", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9974, "title": "(updated) hot.status() returns wrong value", "body": "I submitted the issue by mistake in #9973, I'm updating it here.\r\n<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n`module.hot.status()` the status string fed to the status handler (registered via `module.hot.addStatusHandler()`) is different in some cases.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n```\r\nmodule.hot.addStatusHandler(s => {\r\n    console.log(`handler given ${s}, hot.status() is ${module.hot.status()}`);\r\n});\r\n```\r\n\r\nIn console:\r\n```\r\nhandler given check, hot.status() is check\r\nhandler given prepare, hot.status() is prepare\r\nhandler given ready, hot.status() is ready\r\nhandler given dispose, hot.status() is dispose\r\nhandler given apply, hot.status() is apply\r\nhandler given idle, hot.status() is idle\r\nhandler given ready, hot.status() is idle # this is wrong\r\n```\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nThe last line of the console output: it should be\r\n```\r\nhandler given ready, hot.status() is ready # expected\r\n```\r\n\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.2\r\nNode.js version:  10.5.3\r\nOperating System: Linux\r\nAdditional tools: N/A", "labels": [], "number_of_comments": 2, "created_at": "2019-11-14 18:15:35", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "522595633": {"author_username": "chenyulun", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9970, "title": "webpack use pkg.es2015", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\nWe all know that webapck can set the resolve.mainFields to read the node_modules package dependency file, but if I set<code> {\" es2015\": \"./fesm2015/core.js \"} </code>like <code>@angluer/core </code>package.json;\r\nI will configure <code>resolve.mainFields</code> as<code>[' es2015 ', 'module', 'main']</code>;\r\nIf my build target is es5,\r\n<code>babel-loader</code>should exclude loading <code>[' module', 'main ']</code>; Including mainFields as<code> [' es2015 ']</code>; How can I fulfill this abnormal demand\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nI can filter module. rules freely according to <code>resolve.mainFields </code>\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nIn order to embrace the future, convenient tree-string, reduce duplication of code\r\n\r\n**How should this be implemented in your opinion?**\r\nRule exclude or some other conditional Rule that tells the Rule function whether the incoming file reads the mainFields field in the package.json, what's the name of the field?\r\ne.g :\r\n#### Scenario 1\r\n```json\r\n{\r\n\"es2015\":\"./lib/es/index.js\",\r\n\"main\":\"./lib/bundles/index.js\"\r\n}\r\n```\r\nnode_models/a/lib/es/index.js(es2015:'./lib/es/index.js')  {mainField: 'es2015'}\r\n```javascript\r\n//  lib/es/index.js\r\nimport b from \"./b.js\"\r\n```\r\nnode_models/a/lib/es/b.js  {mainField: [false?|undefined?]}\r\n#### Scenario 2\r\n```json\r\n{\r\n\"main\":\"./lib/bundles/index.js\"\r\n}\r\n```\r\nnode_models/b/lib/bundles/index.js(\"main\":\"./lib/bundles/index.js\")  {mainField: 'mian'}\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": ["inactive"], "number_of_comments": 1, "created_at": "2019-11-14 03:08:18", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "522456777": {"author_username": "THernandez03", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9968, "title": "Fixes #5392 - Allow destructuring using EnvironmentPlugin", "body": "I'm getting the exact same problem described in the issue (#5392). So I review the previous approaches to solve it (#8721), but I think is not necessary to change the current behavior. Just need to add destructured info to DefinePlugin.\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nIt's a bugfix\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNot yet... Just need help how to do that and I will make the tests\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo, just adding more elements to the array of env definitions that we want to use. After that we will use DefinePlugin as always.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nImprove EnvironmentPlugin documentation adding examples using object destructuring.", "labels": ["PR: CI-not-ok", "PR: unreviewed"], "number_of_comments": 5, "created_at": "2019-11-13 20:32:14", "reactions": {"total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "522309675": {"author_username": "smelukov", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9966, "title": "Pass options to a devtool plugin thru devtool option", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nA feature that closes [this](https://github.com/webpack/webpack/projects/5#card-10780167) card\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYep\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNope\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nAbout new features of the `devtool` option\r\n\r\n---\r\nAfter done with it, I will create a PR with these changes to webpack 4 and the docs", "labels": ["PR: CI-ok", "PR: tests-needed", "PR: unreviewed"], "number_of_comments": 4, "created_at": "2019-11-13 15:51:20", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "521822956": {"author_username": "samuelcastro", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9964, "title": "LimitChunkCountPlugin bug with maxChunks: 1", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nUsing `new webpack.optimize.LimitChunkCountPlugin({ maxChunks: 1 })` in my build process generates the following message:\r\n\r\n```\r\nchunk main [entry]\r\nCannot convert undefined or null to object\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nTo reproduce just use the `LimitChunkCountPlugin` plugin with `maxChunks: 1`\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nRun without any error.\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.0\r\nNode.js version: 10.16.0\r\nOperating System: macOS Mojave 10.14.6\r\n", "labels": [], "number_of_comments": 3, "created_at": "2019-11-12 21:48:36", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "521754857": {"author_username": "volkanunsal", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9963, "title": "webpackExclude doesn't work ", "body": "**Reposting with corrected code**\r\n\r\n# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nGiven a dynamic import like this:\r\n\r\n```js\r\nconst CompanyEdit = universal(import(\r\n/* webpackExclude: /(__generated__|__tests__)/ */ \r\n'comps/Company/Edit'));\r\n```\r\n\r\nIt does not exclude the files matching the pattern from the chunk generation. Here is a sample output from the `manifest.json` of the files that match the following pattern and are generated by this import\r\n\r\n```\r\npublic/__generated__-GetKey.chunk-647967baa76de181db7c.js\r\npublic/__generated__-GetKey.chunk-647967baa76de181db7c.js.map\r\npublic/__generated__-RegenKey.chunk-4f4202d851a015422d6d.js\r\npublic/__generated__-RegenKey.chunk-4f4202d851a015422d6d.js.map\r\npublic/__generated__-updateCompany.chunk-c3ad3a2c0a71b001bb29.js\r\npublic/__generated__-updateCompany.chunk-c3ad3a2c0a71b001bb29.js.map\r\npublic/__tests__-AccessKeyManager-test.chunk-bed6e34b29ee6fbd5d72.js\r\npublic/__tests__-AccessKeyManager-test.chunk-bed6e34b29ee6fbd5d72.js.map\r\npublic/__tests__-__snapshots__-AccessKeyManager-test-js-snap.chunk-07f6461ec4547a0878ef.js\r\npublic/__tests__-__snapshots__-AccessKeyManager-test-js-snap.chunk-07f6461ec4547a0878ef.js.map\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nIt is expected to exclude these files from the manifest.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.0\r\nNode.js version: 8.x.x\r\nOperating System: Mac OS\r\n\r\n", "labels": ["inactive"], "number_of_comments": 3, "created_at": "2019-11-12 19:28:19", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "521632767": {"author_username": "PanFrontend", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9961, "title": "404 during loading chunks when using contenthash", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nSplitting bundle into chunks using [contenthash] substitution in chunkFilename causes random changes in chunk name even if there were no changes to a file. Because of that some of the requested chunks did not exist anymore. That causes 404 and an app crash.\r\n\r\nSetting a single runtimeChunk did not help. Other techniques used to avoid boilerplate described in [Caching](https://webpack.js.org/guides/caching/) don't work too. \r\n\r\nIn my opinion related issues: #8419 #7179\r\n\r\n**Detailed description:**\r\nLet's say I'm building an app that consists total of around 20 chunks and 3 entry points.\r\n\r\n```javascript\r\noutput: {\r\n    path: path.resolve(__dirname, '../static/js/'),\r\n    filename: '[name].bundle.js',\r\n    chunkFilename: '[name].[contenthash].chunk.js',\r\n    publicPath: '/static/js/',\r\n},\r\n```\r\n\r\n[package.json shape stripped to related dev packages](https://gist.github.com/PanFrontend/91f13f9eea41a4a868cb6c886c9c415e)\r\n[webpack config](https://gist.github.com/PanFrontend/64711839e60015cabdf0fd2fc6d49579)\r\n\r\nI have to use [contenthash] substitution as without it chunks will be wrongly cached (after an app rebuild end-user browser won't ever know that chunks content changed so it will load old chunks from cache instead new chunks - that can cause an app crash I want to avoid with adding [contenthash]).\r\n\r\nAfter build pass, webpack notifies me about created chunks. For the sake of this description let's focus on 3 of them with ids: 1, 2, 3.\r\n```\r\nAsset                               Size         Chunks                              \r\n1.e3b2009f94d2bf9131f1.chunk.js     25.9 KiB     1        [emitted] [immutable]\r\n2.bc6c43f9e093015d2b7f.chunk.js     22 KiB       2        [emitted] [immutable]\r\n3.5bfc0cb13051a77d4b92.chunk.js     189 KiB      3        [emitted] [immutable]\r\nreact/panel.bundle.js               245 KiB      6        [emitted]\r\nruntime.bundle.js                   2.67 KiB     2        [emitted]\r\n```\r\nAfter the build, the app is ready to be deployed to clients. As it lands on the production they download bundles and start using it. Then the next build comes in where changes are totally not related to the frontend spa and its bundles. As our build process involves `yarn install && yarn build` packages are rebuilt. No files were changed in the frontend spa source. Now some of the clients that were using the app earlier before that build comes to our app. The result will be like this - 404's on requests for some chunks:\r\n\r\n![image](https://user-images.githubusercontent.com/3399141/68683610-5db2f100-0567-11ea-9e1b-60bd36193c75.png)\r\n\r\nLet's see what's going on in build log:\r\n```\r\nAsset                               Size         Chunks                      \r\n1.e3b2009f94d2bf9131f1.chunk.js     25.9 KiB       1      [emitted] [immutable]\r\n3.a3c596835de321215805.chunk.js     22 KiB         3      [emitted] [immutable]\r\n// where is chunk id 2?   \r\nreact/panel.bundle.js               245 KiB        6      [emitted]\r\nruntime.bundle.js                  2.67 KiB        2      [emitted]\r\n```\r\n\r\nSo as you can observe in the build log, even if files have not changed and all settings to avoid boilerplate was used, we still have different results. First of all contenthash for chunk id 3 differs (3.5bfc0cb13051a77d4b92 vs a3c596835de321215805) and there's no chunk id 2. And our panel.bundle.js is still requesting old chunks that cause 404 on that requests and app crash (asking user to refresh app is not considered as 'ok solution', it should work).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nAs mentioned in other issues related to 'contenthash changing even if files didn't change' it's hard to create minimum version of the repo to allow reproduction. Moreover from what I observed in other issues even if someone provided repo it never was 100% chances to reproduce that behavior.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nOne of:\r\n1) Stable chunks & bundles names between builds\r\n2) Entry bundle can somehow load chunks even if names containing contenthash has changed\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  ^4.41.2\r\nNode.js version: 10.15.3\r\nOperating System: Unix", "labels": ["inactive"], "number_of_comments": 6, "created_at": "2019-11-12 15:47:59", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "520068871": {"author_username": "iki", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9945, "title": "Deleting from require.cache doesn't reload module latest version from node_modules", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nDeleting from [`require.cache`](https://webpack.js.org/api/module-methods/#requirecache) does re-execute and re-export the module, but doesn't reload its latest version, which is an [expected behavior](https://nodejs.org/api/modules.html#modules_require_cache) in Node.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. Update module in node_modules\r\n2. `delete require.cache[require.resolve('dependency')]` in app code, e.g. in `module.hot.dispose` handler\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nNew module version should be imported, but it is **not**.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Temporary workaround**\r\n\r\nWorkaround is possible using @maerzhase [webpack-clear-require-cache-plugin](https://github.com/maerzhase/webpack-clear-require-cache-plugin) solution to the same https://github.com/zeit/next.js/issues/5463 issue.\r\n\r\nUsing **both** `new ClearRequireCachePlugin([/dependency/])` in webpack plugins to clear the module from `require.cache` on each `compiler.hooks.afterEmit` **and**  `delete require.cache[require.resolve('dependency')]` in app code, e.g. in `module.hot.dispose` handler, to clear the module from `__webpack_require__.c` works **ok**.\r\n\r\n**Proposed solution**\r\n\r\nMake deleting from `require.cache` to reload the module latest version, which is an [expected behavior](https://nodejs.org/api/modules.html#modules_require_cache) in Node.\r\n\r\nPossible implementation: Instead of transpiling `delete require.cache[<code>]` to `delete __webpack_require__.c[<code>]`, transpile it to a call to a new internal webpack bootstrap method that will remove the depedency from both `__webpack_require__.c` and `require.cache`, including it's children in the latter.\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.2\r\nNode.js version: 13.1.0-x64\r\nOperating System:  Windows 10.0.18362.418 x64\r\nAdditional tools: @vlazh [node-hot-loader](https://github.com/vlazh/node-hot-loader)\r\n", "labels": [], "number_of_comments": 2, "created_at": "2019-11-08 15:13:25", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "519381186": {"author_username": "aappddeevv", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9941, "title": "dynamic import & magic comments: pre-processor strips comments; need \"config\" way", "body": "Some code pre-processors strip comments so using comments may not be a robust way.\r\n\r\nThis is a request to support \"config\" support to handle the magic comments.\r\n\r\nOr perhaps move the comments inside the string and strip them out, kind of like inline loader config.", "labels": [], "number_of_comments": 7, "created_at": "2019-11-07 16:38:41", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "519117686": {"author_username": "ematipico", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9939, "title": "feat(types): added first draft of creation of types from JSDoc", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nThis PR bumps TypeScript to 3.7.2 and it adds the feature of generating types (declarations) during compiling time.\r\n\r\nCloses #9936\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nNo\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nProbably there should be a link somewhere or maybe it should be documented that webpack will ship its own types after this PR.\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-not-ok", "PR: review-outdated"], "number_of_comments": 15, "created_at": "2019-11-07 08:34:42", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "518342362": {"author_username": "vankop", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9936, "title": "create TypeScript definitions", "body": "There is killer feature in TypeScript 3.7 for webpack - declaration now works with JS files, see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#--declaration-and---allowjs\r\n\r\nIt allows to create one state of truth for types - code, right now code is separated from JSON schema and definitions files. So we can create one flow - code => definitions => JSON schema\r\n\r\nPlus there is `asserts `feature that will be great for `schema-utils`, see https://github.com/webpack/schema-utils/pull/73\r\n", "labels": ["Send a PR"], "number_of_comments": 5, "created_at": "2019-11-06 09:22:27", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "516284939": {"author_username": "matthew798", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9926, "title": "Can't use 2 js files created in same library", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport A bug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nI'm not 100% sure this is a bug, and I also have an [SO question ](https://stackoverflow.com/questions/58660117/multiple-entries-result-in-library-outpts-overwriting-each-other)open.\r\n\r\nWhen running webpack with 2 entries and one, common library name i.e.:\r\n```\r\nentry: {\r\n        editor: path.resolve(__dirname, './src/js/FormrEditor.js'),\r\n        renderer: path.resolve(__dirname, './src/js/FormrRenderer.js')\r\n    },\r\n    output: {\r\n        filename: 'formr-[name].js',\r\n        path: path.resolve(__dirname, 'dist/js'),\r\n        library: 'Formr',\r\n        libraryTarget: \"umd\"\r\n    },\r\n```\r\nThe output files are _not_ able to be loaded in the same context. That is to say that if, in html, one where to do:\r\n```\r\n<script src=\"formr-editor.js\"></script>\r\n<script src=\"formr-renderer.js\"></script>\r\n```\r\n\r\nthe browser would complain that `Formr.Editor() === undefined`. Upon further investigation, it seems that `formr-renderer.js` is _overwriting_ the result of `formr-editor.js` and the `Formr` object no longer contains a definition for `Editor`. It does however contain `Renderer`. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nCreate 2 js files, each with an empty class and bundle with the above config. Then include both js files in an html file and attempt to instantiate both classes.\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nI would have expected the `Formr.Renderer` \"class\" to be _added_ to the `Formr` \"namespace\"/library and being able to safely include both JS files\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\nwebpack 4.41.0\r\n\r\nHere is my whole [webpack.config](https://gist.github.com/matthew798/93cbbed49debdeb9e24c6fb56a7bf43c)", "labels": ["inactive"], "number_of_comments": 5, "created_at": "2019-11-01 18:43:17", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "515689206": {"author_username": "stof", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9922, "title": "Externals are generating unnecessary wrapper functions", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using externals while building an UMD library, each external generate a wrapper module using CommonJS, which bails out from optimization.\r\n\r\nThe output file looks like this:\r\n\r\n```js\r\n(function webpackUniversalModuleDefinition(root, factory) {\r\n// REDACTED\r\n})(this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n// REDACTED\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__0__;\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__1__;\r\n\r\n/***/ }),\r\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\r\n// REDACTED (code of the library, all concatenated together)\r\n/***/ })\r\n/******/ ]);\r\n});\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nGiven that the generated external modules are simply re-exporting the `__WEBPACK_EXTERNAL_MODULE__*__` variables (which are defined based on UMD dependencies in the external wrapper), I see no benefit for them over referencing this variable directly.\r\nMaybe the ExternalModule could be generated as an ES module for that case instead (exporting the `__WEBPACK_EXTERNAL_MODULE__0__` variable as its export) and letting the concatenation plugin optimize it, in case this is simpler to handle than removing the wrapper.\r\n\r\nNote that I'm mostly interested in cases where the library source code is written entirely in ES modules, and the output uses UMD (until we get support for the ESM output in the future)\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.2\r\nNode.js version: 12.13.0\r\nOperating System: Ubuntu 18.04\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 5, "created_at": "2019-10-31 19:31:10", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "515026736": {"author_username": "brandonkal", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9919, "title": "resolveSync not defined in loader context", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nLoaders should be able to call `this.resolveSync()` for a synchronous module resolution as documented.\r\n\r\nSee issue #1634 that was closed without resolution for context.\r\n\r\nIf this API has been removed and the webpack team does not care to restore it, it should be removed from the documentation.\r\n\r\nThis is important for loaders that require synchronous resolve. It enables plugins to avoid creating a separate enhanced-resolve instance and attempting to make its behavior match the one used by the webpack compiler.\r\n\r\nSee:\r\n\r\nhttps://github.com/brandonkal/linaria/blob/27888fa8a3e15cedbfdcf779b18d81ca04af77ee/src/loader.ts#L277-L280\r\n\r\nFor a runnable example, you can clone that repository and run vscode-jest-tests in the VSCode debugger. You will see that the resolveSync is not defined in the loader's context, so the fallback code is executed.\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.40.2\r\nNode.js version: v10.15.3\r\nOperating System: MacOS 10.12.6\r\nAdditional tools: webpack-dev-server", "labels": [], "number_of_comments": 2, "created_at": "2019-10-30 22:34:41", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "510556151": {"author_username": "Fatme", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9877, "title": "fix: emit correctly hot-update files when noEmitOnErrors is true", "body": "When `noEmitOnErrors` is true, there are situations when only `.hot-update.json` file is emitted but `.hot-update.js` is not emitted.\r\n\r\nThe issue happens using the following steps:\r\n1. Set `noEmitOnErrors` to true inside `webpack.config.js`\r\n2. Start webpack compilation in `watch` mode\r\n3. Change whatever import to something invalid -> you'll see the webpack compilation stops\r\n4. Fix the import -> only `.hot-update.json` file is emitted, `hot-update.js` file is not emitted\r\n\r\nExpected behavior:\r\nIt should be emitted either both files `.hot-update.json` and `.hot-update.js` or no hot-update files.\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nA bugfix\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNothing.\r\n", "labels": ["PR: unreviewed", "PR: webpack-4"], "number_of_comments": 2, "created_at": "2019-10-22 10:10:56", "reactions": {"total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "509436401": {"author_username": "Siegrift", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9861, "title": "Integrate Trusted Types in webpack 4", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Trusted Types\r\n[Trusted Types](https://github.com/WICG/trusted-types) ([spec](https://wicg.github.io/trusted-types/dist/spec/), [introductory article](https://developers.google.com/web/updates/2019/02/trusted-types)) is a new experimental DOM API implemented within the WICG , with a working [Chrome implementation](https://www.chromestatus.com/feature/5650088592408576).\r\n\r\nThe API creates a few new objects available on the global object in the browser, like most other web APIs ([impl in TS](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/trusted-types/index.d.ts) and in [Closure compiler](https://github.com/WICG/trusted-types/blob/master/externs/externs.js)).\r\n\r\nUnder certain conditions, controlled by a HTTP header (analogous to Content-Security-Policy behavior), the API can enable the enforcement - then it changes the signature of several DOM API functions and property setters, such that they accept specific object types, and reject strings. Colloquially, DOM API becomes strongly typed.\r\n\r\nFor example, with Trusted Types Element.innerHTML property setter accepts a TrustedHTML object.\r\n\r\nTrusted Type objects stringify to their inner value. This API shape is a deliberate choice that enables existing web applications and libraries to gradually migrate from strings to Trusted Types without breaking functionality. In our example, it makes it possible to write the following:\r\n\r\n```javascript\r\nconst policy = TrustedTypes.createPolicy('foo', { \r\n  createHTML: (s) => { /* some validation*/; return s} \r\n});\r\n\r\nconst trustedHTML = policy.createHTML('bar');\r\nanElement.innerHTML = trustedHTML\r\n\r\nanElement.innerHTML === 'bar'\r\n```\r\n\r\nThe above code works regardless if the Trusted Types enforcement is enabled or not.\r\n\r\nReading from the DOM is unaffected, so Element.innerHTML getter returns a string. That's for practical reasons -- web applications read from DOM more often than they write to it, and only writing exposes the application to DOM XSS risks. Typing only the setters allows us to secure web applications with minimal code changes.\r\n\r\n## Why add Trusted Types to webpack?\r\nModern JavaScript applications use frameworks and bundlers to server the files to clients. Webpack is one of the most popular bundlers and part of webpack is running on the client. On client side, webpack [creates script elements to download application chunks](https://github.com/webpack/webpack/blob/92caa5de066ded4232a119752bd5dde1497606ef/lib/web/JsonpMainTemplatePlugin.js#L166). Currently, it assigns strings to `script.src` which violates Trusted Types rules when client applications uses Trusted Types. In order to allow applications use Trusted Types, webpack needs to convert these values to Trusted Types. \r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nThis PR allows applications which use Webpack to use Trusted Types. The only thing the application needs to do to enable Trusted Types is to specify webpack policy in the HTTP header.\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n**Yes**, I have created unit tests in webpack and I also verified the changes in my [example application](https://github.com/Siegrift/nextjs-tt-integration/tree/webpack-tt) where I am using the updated webpack locally.\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n**No**, this PR preserves the same behavior when trusted types are not available on the client.\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nThe only thing that needs to be documented is that webpack will create a policy which will allow serving chunks on clients if application has enabled Trusted Types. The policy name is important, because there can be only one policy with the same name in an application. Policy name webpack uses defaults to `webpack`, but can be overridden in webpack configuration in `output.trustedTypesPolicyName`.\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: conflict", "PR: unreviewed", "PR: webpack-4"], "number_of_comments": 2, "created_at": "2019-10-19 11:22:48", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "508957048": {"author_username": "koto", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9856, "title": "Integrate Trusted Types in webpack", "body": "Note: This is a rebase of the PR #9426  for webpack 5 code. There are no changes in logic between this PR and #9426 \r\n\r\n## Trusted Types\r\n[Trusted Types](https://github.com/WICG/trusted-types) ([spec](https://wicg.github.io/trusted-types/dist/spec/), [introductory article](https://developers.google.com/web/updates/2019/02/trusted-types)) is a new experimental DOM API implemented within the WICG , with a working [Chrome implementation](https://www.chromestatus.com/feature/5650088592408576).\r\n\r\nThe API creates a few new objects available on the global object in the browser, like most other web APIs ([impl in TS](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/trusted-types/index.d.ts) and in [Closure compiler](https://github.com/WICG/trusted-types/blob/master/externs/externs.js)).\r\n\r\nUnder certain conditions, controlled by a HTTP header (analogous to Content-Security-Policy behavior), the API can enable the enforcement - then it changes the signature of several DOM API functions and property setters, such that they accept specific object types, and reject strings. Colloquially, DOM API becomes strongly typed.\r\n\r\nFor example, with Trusted Types Element.innerHTML property setter accepts a TrustedHTML object.\r\n\r\nTrusted Type objects stringify to their inner value. This API shape is a deliberate choice that enables existing web applications and libraries to gradually migrate from strings to Trusted Types without breaking functionality. In our example, it makes it possible to write the following:\r\n\r\n```js\r\nconst policy = TrustedTypes.createPolicy('foo', { \r\n  createHTML: (s) => { /* some validation*/; return s} \r\n});\r\n\r\nconst trustedHTML = policy.createHTML('bar');\r\nanElement.innerHTML = trustedHTML\r\n\r\nanElement.innerHTML === 'bar'\r\n```\r\n\r\nThe above code works regardless if the Trusted Types enforcement is enabled or not.\r\n\r\nReading from the DOM is unaffected, so Element.innerHTML getter returns a string. That's for practical reasons -- web applications read from DOM more often than they write to it, and only writing exposes the application to DOM XSS risks. Typing only the setters allows us to secure web applications with minimal code changes.\r\n\r\n## Why add Trusted Types to webpack?\r\nModern JavaScript applications use frameworks and bundlers to server the files to clients. Webpack is one of the most popular bundlers and part of webpack is running on the client. On client side, webpack [creates script elements to download application chunks](https://github.com/webpack/webpack/blob/92caa5de066ded4232a119752bd5dde1497606ef/lib/web/JsonpMainTemplatePlugin.js#L166). Currently, it assigns strings to `script.src` which violates Trusted Types rules when client applications uses Trusted Types. In order to allow applications use Trusted Types, webpack needs to convert these values to Trusted Types.\r\n\r\n**What kind of change does this PR introduce?**\r\nThis PR allows applications which use Webpack to use Trusted Types. The only thing the application needs to do to enable Trusted Types is to specify webpack policy in the HTTP header.\r\n\r\n**Did you add tests for your changes?**\r\n**Yes**, I have created unit tests in webpack.\r\n\r\n**Does this PR introduce a breaking change?**\r\n**No**, this PR preserves the same behavior when trusted types are not available on the client.\r\n\r\n**What needs to be documented once your changes are merged?**\r\nThe only thing that needs to be documented is that webpack will create a policy which will allow serving chunks on clients if application has enabled Trusted Types. The policy name is important, because there can be only one policy with the same name in an application. Policy name webpack uses defaults to `webpack`, but can be overridden in webpack configuration in `output.trustedTypesPolicyName`.\r\n", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 5, "created_at": "2019-10-18 09:18:04", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "508519898": {"author_username": "purpledrgn", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9852, "title": "Scale webpack in large projects by watching \"observers\" instead of files", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nWebpack performance improvement that is unaffected by scale of project.\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nIdeally I believe everyone wants that should you have a project that is 65,000 entry points[1] its just as fast as a project running just 1 entry point.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nAt the moment project re-build performance in development is tied directly to the performance of rebuilding all your entry points.\r\n\r\nWhen you have a single entry point in your application you can only really make webpack faster by \"make webpack **build** faster\". However when you have a *N* entry points your performance degrades over time based on how many entry points you are building. \r\n\r\nLet's say N is 10 and webpack has come out with a new version that improves performance by 50%. All it takes is for you to reach 20 for N and the performance is now (likely) back to where it was previously. Even worse, once you reach 30 it's worse then it was originally, and going forward 50 it's now abysmal.\r\n\r\nEach entry point itself will take verying time to compile based on it's complexity. However in general the developer is very motivated to keep it low and since there's only so much that can go on a page even in a full page js rendered page you'll hit some natural limits (outside of very special cases).\r\n\r\nSome solutions do exist at the moment that try to address this, one of which is DLLs. Parts of the application are marked static and compiled into their own separate bundle using `webpack.DllPlugin` and thereby webpack doesn't need to deal with them. However this is not particularly ideal, you have to pick things to put into it and remember you put them into it. Everything you don't put into it is now your new N, which is unlikely to be 1.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nThe specific settings names & placement isn't important for this feature, so let's just say it's simply `mode` value of `observer` and when present the following happen.\r\n\r\n1. webpack no longer re-compiles on change, only marks files as having changed in it's internal representation of the filesystem \r\n2. only fast error checks are performed if any at all; where fast means checks that can scale to (extremely) large number of files per project (may be disabled entirely; projects may be running their own language error checkers anyway, such as typescript)\r\n3. under no circumstance will webpack decide to compile \"everything\" (exception: if next rule happens to apply to every file in the project)\r\n4. a entry point or partial are recompiled only when they are \"observed\"\r\n\r\nIn the abstract, something is considered \"observed\" when:\r\n1. the server was required to send the file\r\n2. the user is viewing the page and the page is not in the background \r\n3. the partial (eg. async import, and similar patterns) was requested (this is added to the current page's \"observed\" parts; all parts together are the observed)\r\n\r\nWe'll need webpack to be \"told\" what is observed and what isn't. For this purpose we'll define a very simple protocol as follows. In observer mode, webpack listens on a predefined port and responds to the following messages:\r\n - `ID <id|uuid|etc>` tells the server who we are (a uuid is automatically assigned per connection otherwise)\r\n - `RESET` wipes the current list of observables (for the client). If multiple clients are connected each have their own list and webpack's complete list is the sum of all of them.\r\n - `OBSERVE <entity>` tells webpack whats being observed (for the client)\r\n - `BUILD` tells webpack to build it's current observable list, request only finishes when it's done\r\n - `TRY` like build but returns the list of all observables and their current build number (since each might have been build different number of times). This can be used on client side to determine if the state is stable.\r\n\r\nThe protocol should be simple so helpers can be easily implemented by hand if need be in practically any language. An alternative might be to implement it as a json protocol, the details aren't important.\r\n\r\nWe'll assume a `webpack-helper` exists that just implements the protocol.\r\n\r\n**Example**\r\n\r\nLet's say you have a site that is fully rendered by javascript. You have SSR support for it so every page is also another entry point. Some of your pages also import some of their features asynchronously. \r\n\r\n_We'll assume the example application has 65,000 entry points._\r\n\r\n1. You open `/home`\r\n2. The server uses the `webpack-helper` to send `RESET`, `OBSERVE home` (the entry point), `BUILD` then once it's finished sends the page and calls `RESET` (this instance of `webpack-helper` won't be reused for future requests). Webpack has now built just 1 entry point (out of 65,000). Likely took less then a second.\r\n3. The client loads the bundle. Because we are in development mode a client version of `webpack-helper` was included. It sends `ID webpack-<uuid>` and then also sends `RESET`, `OBSERVE home` but this time does not send `BUILD` (since the http request to get the bundle is confirmation enough). Webpack is now aware of this new client with and it's set of observables.\r\n4. You click `About` in your navigation. There is an about entry point but this time this is not done though the server but loaded directly. (Fundamentally there's just a bunch of `async import` calls that go to work.)\r\n5. Since we are in development mode webpack wrapped all `async import` with `webpack-helper` calls, so our request for about turns into `OBSERVE about-target-partial` (or whatever is necessary), `TRY`. Using the output of try it determines if it's state is stable; if we happen to hit some strange case where the code won't work webpack will give us an error instead (we can simply refresh to solve the problem). Once `TRY` is succesful the import goes though as usual (since the file now exists) and everything works as expected.\r\n6. You open a new tab. The page is now in the background. The client side webpack-helper sends `RESET` to the server to tell it to clear it's list.\r\n7. You go back to the tab. The client side `webpack-helper` sends `RESET` and uses `OBSERVE` to rebuild the list of entities then it does a `TRY`. If the TRY takes more then 1 second then (as part of development mode) webpack places a dark gray overlay with a \"Checking...\" to indicate to you the tab may be stale. If after TRY the build numbers are unchanged compared to last build numbers webpack pops up a tiny confirmation \"Build is fresh\" in a corner otherwise it gives a \"Build is old\" in the corner (ideally configurable to \"just refresh page\" in options)\r\n8. You close the tab, the `webpack-helper` sends a `RESET`\r\n\r\n_If this was normal `--watch` long after the example above was done and over with, you would still be waiting for webpack to startup and finish it's initial build of the 65,000 entry points._\r\n\r\nI don't think I need to convince anyone that not compiling things is the fastest way to compile, but if you simply want to see how much of a difference this sort of optimization would make in your own project you can simply comment out all entry points except a few and see what webpack's build time is for your app, when you change files. _For me it goes from a CPU / memory hog that can builds at snail pace (and I do use DLLs and everything I can) to less then a second._\r\n\r\nIn the example the webpack-helper was called in the server code directly. This honestly the simplest solution and might be even the best for anyone who wants to have control over it (its easy to understand and integrate). An alternative if you want it to be more transparent is to simply implement it as a proxy. You can then simply have servers such as nginx proxy_pass to it (this only replaces the server part of the example). So long as the protocol is kept to be simple, the webpack project doesn't really need to implement every variation of it, just the most basic.\r\n\r\n**Are you willing to work on this yourself?**\r\nI do not have the free time at the moment. (My understanding of webpack internals is also nonexistent.)\r\n\r\n[1] approximation of FAT32 max directory size (every other filesystem is practically max filesystem files number)", "labels": [], "number_of_comments": 3, "created_at": "2019-10-17 14:34:42", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "507501465": {"author_username": "notgiorgi", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9840, "title": "Loaders aren't required properly when using different compiler.inputFileSystem", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nWhen using any `compiler.inputFileSystem` other then `require('fs')` loaders are not required properly.\r\n\r\nE.g. if (see the repo down bellow for more details):\r\n- `compiler.inputFileSystem = myMemfs`\r\n- `webpackConfig.context = /memfs/`\r\n- I have `babel-loader` as one of my loaders\r\n\r\nthis is the error I get:\r\n\r\n```\r\n\r\n  './index.js\\n' +\r\n    'Module build failed (from ./node_modules/babel-loader/lib/index.js):\\n' +\r\n    \"Error: Cannot find module '/memfs/node_modules/babel-loader/lib/index.js'\\n\" +\r\n    'Require stack:\\n' +\r\n    '- /Users/Gio/develop/webpack-memfs-bug-demo/node_modules/loader-runner/lib/loadLoader.js\\n' +\r\n    '- /Users/Gio/develop/webpack-memfs-bug-demo/node_modules/loader-runner/lib/LoaderRunner.js\\n' +\r\n    '- /Users/Gio/develop/webpack-memfs-bug-demo/node_modules/webpack/lib/NormalModule.js\\n' +\r\n    '- /Users/Gio/develop/webpack-memfs-bug-demo/node_modules/webpack/lib/NormalModuleFactory.js\\n' +\r\n    '- /Users/Gio/develop/webpack-memfs-bug-demo/node_modules/webpack/lib/Compiler.js\\n' +\r\n    '- /Users/Gio/develop/webpack-memfs-bug-demo/node_modules/webpack/lib/webpack.js\\n' +\r\n    '- /Users/Gio/develop/webpack-memfs-bug-demo/index.js\\n' +\r\n    '    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:780:15)\\n' +\r\n    '    at Function.Module._load (internal/modules/cjs/loader.js:685:27)\\n' +\r\n    '    at Module.require (internal/modules/cjs/loader.js:838:19)\\n' +\r\n    '    at require (internal/modules/cjs/helpers.js:74:18)\\n' +\r\n    '    at loadLoader (/Users/Gio/develop/webpack-memfs-bug-demo/node_modules/loader-runner/lib/loadLoader.js:22:17)\\n' +\r\n    '    at iteratePitchingLoaders (/Users/Gio/develop/webpack-memfs-bug-demo/node_modules/loader-runner/lib/LoaderRunner.js:169:2)\\n' +\r\n    '    at runLoaders (/Users/Gio/develop/webpack-memfs-bug-demo/node_modules/loader-runner/lib/LoaderRunner.js:365:2)\\n' +\r\n    '    at NormalModule.doBuild (/Users/Gio/develop/webpack-memfs-bug-demo/node_modules/webpack/lib/NormalModule.js:295:3)\\n' +\r\n    '    at NormalModule.build (/Users/Gio/develop/webpack-memfs-bug-demo/node_modules/webpack/lib/NormalModule.js:446:15)\\n' +\r\n    '    at Compilation.buildModule (/Users/Gio/develop/webpack-memfs-bug-demo/node_modules/webpack/lib/Compilation.js:739:10)\\n' +\r\n    '    at /Users/Gio/develop/webpack-memfs-bug-demo/node_modules/webpack/lib/Compilation.js:1111:12\\n' +\r\n    '    at /Users/Gio/develop/webpack-memfs-bug-demo/node_modules/webpack/lib/NormalModuleFactory.js:409:6\\n' +\r\n    '    at /Users/Gio/develop/webpack-memfs-bug-demo/node_modules/webpack/lib/NormalModuleFactory.js:155:13\\n' +\r\n    '    at AsyncSeriesWaterfallHook.eval [as callAsync] (eval at create (/Users/Gio/develop/webpack-memfs-bug-demo/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:6:1)\\n' +\r\n    '    at AsyncSeriesWaterfallHook.lazyCompileHook (/Users/Gio/develop/webpack-memfs-bug-demo/node_modules/tapable/lib/Hook.js:154:20)\\n' +\r\n    '    at /Users/Gio/develop/webpack-memfs-bug-demo/node_modules/webpack/lib/NormalModuleFactory.js:138:29'\r\n\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nSee the repo for reproduction: https://github.com/notgiorgi/webpack-memfs-bug-demo (to run `yarn install && yarn start`, for code check out the `index.js`) \r\n\r\n(As you can see I'm even loading babel-loader from into the memfs `node_modules` if I don't do that, exactly the same happens but the error message is just less helpul) \r\n\r\nI managed to \"fix this\" by changing this line of code: https://github.com/webpack/loader-runner/blob/master/lib/loadLoader.js#L5 to this:\r\n\r\n```js\r\nconst fallback = {\r\n    ['/memfs/node_modules/babel-loader/lib/index.js']: 'babel-loader',\r\n}\r\nvar module = require(fallback[loader.path] || loader.path);\r\n```\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\nExpected behavior is for webpack to always require loaders from the \"real\" (`require('fs')`) filesystem\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.2\r\nNode.js version: 12\r\nOperating System: macOS sierra\r\n\r\n", "labels": [], "number_of_comments": 2, "created_at": "2019-10-15 21:50:49", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "507319599": {"author_username": "daveisfera", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9838, "title": "default cacheGroup not processed when mode set to production", "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\nChunks for the `default` cacheGroup are generated when `mode` is `development` but not when `mode` is `production`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nRun build with `mode` set to `development` and notice the chunks for `default` and then run it with `mode` set to `production` and the chunks for `default` aren't built\r\n\r\n**What is the expected behavior?**\r\n`default` cacheGroup behaves the same in both `development` and `production`. The workaround I found is to add `enforce: true` to the `default` cacheGroup and then the behavior is consistent\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.0\r\nNode.js version: 10.16.3\r\nOperating System: macOS 10.14.6\r\nAdditional tools: babel 7.5.5\r\n", "labels": [], "number_of_comments": 15, "created_at": "2019-10-15 15:25:08", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "506574690": {"author_username": "AndyOGo", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9818, "title": "Stats: RangeError: Expected Area/Location(/Location)* for time zone, got CET", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n`timeZone` = **CET** throws RangeError.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. set the OS timezone to `CET`\r\n2. run webpack\r\n\r\n**Error Log:**\r\n\r\n```sh\r\nwebpack --config webpack.config.client.js\r\n\r\n \r\n\r\n/var/lib/jenkins/wd/workspace/.../node_modules/webpack/lib/Stats.js:991\r\n\r\n                               builtAtDate.toLocaleDateString(undefined, {\r\n\r\n                                           ^\r\n\r\n \r\n\r\nRangeError: Expected Area/Location(/Location)* for time zone, got CET\r\n\r\n    at new DateTimeFormat (native)\r\n\r\n    at Date.toLocaleDateString (native)\r\n\r\n    at Function.jsonToString (/var/lib/jenkins/wd/workspace/.../node_modules/webpack/lib/Stats.js:991:17)\r\n\r\n    at Stats.toString (/var/lib/jenkins/wd/workspace/.../node_modules/webpack/lib/Stats.js:859:16)\r\n\r\n    at compilerCallback (/var/lib/jenkins/wd/workspace/.../node_modules/webpack-cli/bin/cli.js:333:32)\r\n\r\n    at compiler.run (/var/lib/jenkins/wd/workspace/.../node_modules/webpack-cli/bin/cli.js:359:7)\r\n\r\n    at finalCallback (/var/lib/jenkins/wd/workspace/.../node_modules/webpack/lib/Compiler.js:257:39)\r\n\r\n    at hooks.done.callAsync.err (/var/lib/jenkins/wd/workspace/.../node_modules/webpack/lib/Compiler.js:306:14)\r\n\r\n    at AsyncSeriesHook.eval [as callAsync] (eval at create (/var/lib/jenkins/wd/workspace/.../node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:6:1)\r\n\r\n    at AsyncSeriesHook.lazyCompileHook (/var/lib/jenkins/wd/workspace/.../node_modules/tapable/lib/Hook.js:154:20)\r\n\r\n    at emitRecords.err (/var/lib/jenkins/wd/workspace/.../node_modules/webpack/lib/Compiler.js:304:22)\r\n\r\n    at Compiler.emitRecords (/var/lib/jenkins/wd/workspace/.../node_modules/webpack/lib/Compiler.js:499:39)\r\n\r\n    at emitAssets.err (/var/lib/jenkins/wd/workspace/.../node_modules/webpack/lib/Compiler.js:298:10)\r\n\r\n    at hooks.afterEmit.callAsync.err (/var/lib/jenkins/wd/workspace/.../node_modules/webpack/lib/Compiler.js:485:14)\r\n\r\n    at AsyncSeriesHook.eval [as callAsync] (eval at create (/var/lib/jenkins/wd/workspace/.../node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:15:1)\r\n\r\n    at AsyncSeriesHook.lazyCompileHook (/var/lib/jenkins/wd/workspace/.../node_modules/tapable/lib/Hook.js:154:20)\r\n\r\n    at asyncLib.forEachLimit.err (/var/lib/jenkins/wd/workspace/.../node_modules/webpack/lib/Compiler.js:482:27)\r\n\r\n    at /var/lib/jenkins/wd/workspace/.../node_modules/neo-async/async.js:2818:7\r\n\r\n    at done (/var/lib/jenkins/wd/workspace/.../node_modules/neo-async/async.js:3522:9)\r\n\r\n    at AsyncSeriesHook.eval [as callAsync] (eval at create (/var/lib/jenkins/wd/workspace/.../node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:6:1)\r\n\r\n    at outputFileSystem.writeFile.err (/var/lib/jenkins/wd/workspace/.../node_modules/webpack/lib/Compiler.js:464:33)\r\n\r\n    at /var/lib/jenkins/wd/workspace/.../node_modules/graceful-fs/graceful-fs.js:57:14\r\n\r\n    at FSReqWrap.args [as oncomplete] (fs.js:140:20)\r\n\r\nnpm ERR! code ELIFECYCLE\r\n\r\nnpm ERR! errno 1\r\n\r\nnpm ERR! ui-renderer-standalone@1.5.0 build-common: `webpack --config webpack.config.client.js`\r\n\r\nnpm ERR! Exit status 1\r\n\r\nnpm ERR!\r\n\r\nnpm ERR! Failed at the ui-renderer-standalone@1.5.0 build-common script.\r\n\r\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n\r\n \r\n\r\nnpm ERR! A complete log of this run can be found in:\r\n\r\nnpm ERR!     /home/jenkins/.npm/_logs/2019-10-14T09_36_17_518Z-debug.log\r\n\r\nnpm ERR! code ELIFECYCLE\r\n\r\nnpm ERR! errno 1\r\n\r\nnpm ERR! ui-renderer-standalone@1.5.0 build: `cross-env NODE_ENV=production npm run build-common`\r\n\r\nnpm ERR! Exit status 1\r\n\r\nnpm ERR!\r\n\r\nnpm ERR! Failed at the ui-renderer-standalone@1.5.0 build script.\r\n\r\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n\r\n \r\n\r\nnpm ERR! A complete log of this run can be found in:\r\n\r\nnpm ERR!     /home/jenkins/.npm/_logs/2019-10-14T09_36_17_534Z-debug.log\r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**Related code:**\r\n\r\nhttps://github.com/webpack/webpack/blob/42407cb5616aff940935cb58a4fda8429140c122/lib/Stats.js#L977-L996\r\n\r\n**Introduced here:**\r\nhttps://github.com/webpack/webpack/commit/3d43f1e85f0e38edc62b85754b68ecfc53699ee7\r\n\r\n**What is the expected behavior?**\r\n\r\nNo RangeError.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  `4.41.1`\r\nNode.js version: `10.16.3`\r\nOperating System: `Linux nodejs-slave-dtmhw 3.10.0-957.21.2.el7.x86_64 #1 SMP Tue May 28 09:26:43 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux`\r\nAdditional tools: OpenShift Jenkins NodeJs Slave\r\n\r\nDetails about the OpenShift pod:\r\n\r\n```sh\r\nNAME=\"Red Hat Enterprise Linux Server\"\r\nVERSION=\"7.6 (Maipo)\"\r\nID=\"rhel\"\r\nID_LIKE=\"fedora\"\r\nVARIANT=\"Server\"\r\nVARIANT_ID=\"server\"\r\nVERSION_ID=\"7.6\"\r\nPRETTY_NAME=\"Red Hat Enterprise Linux Server 7.6 (Maipo)\"\r\nANSI_COLOR=\"0;31\"\r\nCPE_NAME=\"cpe:/o:redhat:enterprise_linux:7.6:GA:server\"\r\nHOME_URL=\"https://www.redhat.com/\"\r\nBUG_REPORT_URL=\"https://bugzilla.redhat.com/\"\r\n\r\nREDHAT_BUGZILLA_PRODUCT=\"Red Hat Enterprise Linux 7\"\r\nREDHAT_BUGZILLA_PRODUCT_VERSION=7.6\r\nREDHAT_SUPPORT_PRODUCT=\"Red Hat Enterprise Linux\"\r\nREDHAT_SUPPORT_PRODUCT_VERSION=\"7.6\"\r\n```\r\n", "labels": [], "number_of_comments": 14, "created_at": "2019-10-14 10:43:06", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "506337754": {"author_username": "sodatea", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9815, "title": "fix: limit progress bar length to 40 when no columns provided", "body": "See the comment here: https://github.com/webpack/webpack/pull/9225#issuecomment-536501366\r\nThere are several cases where `process.stderr.columns` could be `undefined`. Like, in the Vue CLI UI console, or in a CI log page. But that doesn't mean there's infinity room to display the lines. In these cases, we should fall back to **the old behavior** of the `40` max length.\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nA bugfix\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNothing.", "labels": ["PR: CI-ok", "PR: unreviewed", "PR: webpack-4"], "number_of_comments": 2, "created_at": "2019-10-13 15:09:40", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "505838433": {"author_username": "sokra", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9802, "title": "webpack 5 beta feedback", "body": ":tada: Thanks for being brave and donating your valuable time to testing unfinished beta software :tada:\r\n\r\nwebpack 5 is in beta phase now. This means major changes and features are done. Major breaking changes have been added. Basic backward-compatibility has been added.\r\n\r\nWe want to use the beta phase to do the following:\r\n\r\n* Let a boarder range of users test the beta version.\r\n* Find bugs in new features.\r\n* Find regressions in old features.\r\n* Find places where a compat-layer can be added to avoid breaking changes.\r\n* Improve the [migration guide](https://github.com/webpack/changelog-v5/blob/master/MIGRATION%20GUIDE.md) and [changelog](https://github.com/webpack/changelog-v5/blob/master/README.md).\r\n\r\nWe want to reach these goals after the beta phase:\r\n\r\n* Old features are very stable\r\n* New features are a bit stable\r\n* Backward-compatibility layer allows most existing plugins/loader to work unmodified (potentially with deprecation warnings)\r\n* There clear way how to migrate from webpack 4 to 5\r\n* There are experimental webpack 5 branches for higher-level tools (like angular-cli, vue-cli, create-react-app, ...) (at least 2)\r\n\r\nTo help with testing you can do the following:\r\n\r\n* Always test with the latest webpack beta version, as problems might already be fixed there\r\n* When using webpack directly:\r\n  * Follow the [migration guide](https://github.com/webpack/changelog-v5/blob/master/MIGRATION%20GUIDE.md)\r\n  * Report or add missing steps in the migration guide\r\n  * Report problems during the migration\r\n  * Report problems with the build after the migration\r\n* When using a higher-level tool:\r\n  * Check if there is a branch/Pull Request for webpack 5\r\n  * Follow guide there\r\n  * Report problems in the Pull Request\r\n* Make sure to also report (positive) experience\r\n  * Performance comparison\r\n  * Size comparison\r\n  * DX comparison\r\n* Try new features\r\n  * Enable persistent caching -> [guide](https://github.com/webpack/changelog-v5/blob/master/guides/persistent-caching.md)\r\n  * Enable Top Level Await\r\n  * Enable the new `asset` module type\r\n  * Enable Long Term Caching\r\n  * Try to break filesystem watching\r\n* Trace back deprecation warnings with `node --trace-deprecation`\r\n  * Help upgrading plugins/loaders\r\n* Make sure to follow beta releases\r\n  * Retest newer version to avoid regressions in beta versions\r\n* Consider sponsoring webpack when this version\r\n  * increases your productivity with better build performance\r\n  * increases your productivity with better developer experience\r\n  * increases your consumer happiness with better application performance\r\n  * make you happy in some other way...\r\n\r\nKnown problems:\r\n\r\n* `eval()` causes problems with the `optimization.innerGraph` (production).\r\n* `libraryTarget: \"module\"` is not implemented yet\r\n* `devtool`s don't support persistent caching yet\r\n* Persistent Cache file include absolute paths are are not portable yet\r\n* `import.meta` is still missing\r\n* prefetching doesn't work for WASM yet\r\n* CLI arguments doesn't contribute to cache version\r\n* ~[stack trace is incorrectly displayed in stats](https://github.com/webpack/webpack/issues/9802#issuecomment-541209889)~\r\n* Build Time is a bit higher for non-cached builds. Possible reasons:\r\n  * tracking extra information in the resolver for safe caching\r\n* [mini-css-extract-plugin is not able to persistent cache yet](https://github.com/webpack/webpack/issues/9802#issuecomment-541303173)\r\n* https://github.com/webpack-contrib/stylelint-webpack-plugin/issues/187\r\n* [svg-sprite-loader doesn't work](https://github.com/webpack/webpack/issues/9802#issuecomment-541468003)\r\n* There is no warning for Buffer or process yet.\r\n\r\nPlanned breaking changes:\r\n\r\n* ~devtool options will be more restrictive~\r\n* Internal HMR API for plugins will probably change\r\n* ~Disable some webpack-only syntax by default: `require.ensure`, `require.include`~\r\n* terser-webpack-plugin will be upgraded\r\n* ~cache.store != \"pack\" will be removed~", "labels": ["webpack-5"], "number_of_comments": 350, "created_at": "2019-10-11 12:59:50", "reactions": {"total_count": 30, "+1": 2, "-1": 0, "laugh": 0, "heart": 3, "hooray": 23}}, "502012049": {"author_username": "aryaroudi", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9769, "title": "Webpack progress log output seems unformatted in the last version", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nA problem in progress output log which is showing in a bad format in macOs\r\n\r\n**What is the current behavior?**\r\nWhen the webpack is progressing, the log is showing this way:\r\n````\r\n\u2502 <s> [webpack.Progress] 98% after emitting                                                                                                                                                                                                                                                                                  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u2502 <s> [webpack.Progress] 98% after emitting CopyPlugin                                                                                                                                                                                                                                                                       \u2502\u250c\u2500Operation\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 <s> [webpack.Progress] 98% after emitting angular-compiler                                                                                                                                                                                                                                                                 \u2502\u2502 idle (236s)                                                                                            \u2502\r\n\u2502 <s> [webpack.Progress] 98% after emitting StylelintWebpackPlugin                                                                                                                                                                                                                                                           \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u2502 <s> [webpack.Progress] 100%      \r\n````\r\nAnd it creates a huge log in my console\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nwith the last version of webpack-cli if you run with `--progress` flag you'll see that long ugly log\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nThe log being shortened and formatted properly\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.41.0\r\nNode.js version: 12\r\nOperating System: macOS\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 17, "created_at": "2019-10-03 11:36:47", "reactions": {"total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "501156852": {"author_username": "fscherwi", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9761, "title": "remove istanbul coverage reporter", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nRemove deprecated istanbul coverage reporter and use jest build in coverage reporters.\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNo\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNone\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 2, "created_at": "2019-10-01 21:30:53", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "500130879": {"author_username": "phaistonian", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9757, "title": "[HMR] Hot Module Replacement is disabled after v4.40.3", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\nAfter upgrading from 4.40.2 to 4.40.3 or higher, this comes up.\r\n\r\n![image](https://user-images.githubusercontent.com/796530/65862101-30730080-e376-11e9-9cdc-72ca33f44ed0.png)\r\n\r\nAs seen in the releases, 4.40.3 fixes an HMR-related issue, but somehow it has also triggered this one.\r\n\r\nDowgrading to 4.40.2 resolves the issue.\r\n\r\n**Other relevant information:**\r\nwebpack version:  v4.40.3\r\nNode.js version: 11.10.0\r\nOperating System: OSX\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 14, "created_at": "2019-09-30 08:35:00", "reactions": {"total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "499875831": {"author_username": "vankop", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9755, "title": "deprecated API", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nDiving into `webpack@5` sources I found out a lot of different methods to deprecate getters/setters/methods. For instance:\r\nhttps://github.com/webpack/webpack/blob/next/lib/ModuleGraph.js#L1142\r\nhttps://github.com/webpack/webpack/blob/next/lib/Chunk.js#L100\r\nhttps://github.com/webpack/webpack/blob/next/lib/Module.js#L635\r\nhttps://github.com/webpack/webpack/blob/next/lib/ChunkGroup.js#L551\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nLooks like most use cases could be solved with something like:\r\n```typescript\r\ndeprecateFn(\r\n     fn: function,\r\n     {\r\n          reason: \"renamed\" | \"removed\" | \"moved\" | \"refactored\",\r\n          release: \"major\" | \"minor\" = \"major\", // maybe it is useful\r\n          comment?: string,\r\n          use?: string|string[]\r\n     }\r\n);\r\n\r\ndeprecate(\r\n   class,\r\n   properties: {[k: string]: {reason, comment?, use?, release?, fn?}}\r\n)\r\n```\r\n\r\nSo usage will looks like:\r\nhttps://github.com/webpack/webpack/blob/next/lib/Module.js#L635\r\n```typescript\r\ndeprecate(\r\n   Module,\r\n  {\r\n       isUsed: {\r\n           reason: \"refactored\",\r\n           use: [\"getUsedName\", \"isExportUsed\", \"isModuleUsed\"]\r\n      }\r\n  }\r\n)\r\n```\r\n\r\nhttps://github.com/webpack/webpack/blob/next/lib/ChunkGroup.js#L551\r\n```typescript\r\nChunkGroup.prototype.getModuleIndex = deprecateFn(\r\n   ChunkGroup.prototype.getModulePreOrderIndex,\r\n  {\r\n       reason: \"renamed\",\r\n       comment: \"to getModulePreOrderIndex\"\r\n  }\r\n)\r\n```\r\n\r\nI think API design could be more flexible, my design is just to show some examples + I think deprecated API must use standard `util.deprecate` under the hood.\r\n\r\nMaybe it is useful for other `webpack` ecosystem packages, too.\r\n\r\n**Are you willing to work on this yourself?**\r\nprobably", "labels": [], "number_of_comments": 2, "created_at": "2019-09-29 07:58:39", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "499592845": {"author_username": "goganchic", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9749, "title": "Describe index and index2 properties of different data structures", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nPurpose of index and index2 properties is clear.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nI'm exploring source code of Webpack. There are two variables `index` and `index2` used in different data structures (module, chunk group) filled during [building chunk graph](https://github.com/webpack/webpack/blob/master/lib/buildChunkGraph.js). If I'm not mistaken `index` is a position of module in a chunk group and `index2` is a some sort of reversed position (?). For me as a newcomer it's difficult to understand the purpose of these fields, e.g. why `index2` is required? Why can't we just use `-index` or something like this. It will be much more easy if there will be short explanation in the code or at least names of these variables. If someone help me to understand purpose of these variables better I can try to add such description myself.\r\n\r\nUnfortunately there is almost no chance to get this info from gitter chat or stackoverflow because only few developers need it and can explain.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nRename variables if it possible and add comments to the code.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": ["Send a PR", "webpack-5"], "number_of_comments": 9, "created_at": "2019-09-27 18:42:12", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "498833424": {"author_username": "AndyOGo", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9739, "title": "code-splitting of different module versions", "body": "<!-- Bug reports and Feature requests must use other templates, or will be closed -->\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nWe `import` two mini-apps, both depend upon [`react-intl`](https://github.com/formatjs/react-intl), but each are using different versions of it (which leads to breaking changes)\r\n- A: `react-intl`@**^2.7.3**\r\n- B: `react-intl`@**^3.1.8**\r\n\r\n[`SplitChunksPlugin`](https://webpack.js.org/plugins/split-chunks-plugin/) does not seem to be aware of the difference of the two \ud83e\udd14 \r\nIt would be great if the official docs would clearly state how different module versions are handled, especially regarding breaking changes/major version numbers, is [`SplitChunksPlugin`](https://webpack.js.org/plugins/split-chunks-plugin/) aware of `package.json`'s dependecies version?\r\n\r\nThis issue has been raised  several times, but I think is not handled completely:\r\n- https://github.com/webpack/webpack/issues/646\r\n- https://github.com/webpack/webpack/issues/6505\r\n", "labels": [], "number_of_comments": 12, "created_at": "2019-09-26 11:41:34", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "498286006": {"author_username": "alshdavid", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9735, "title": "New option to \"skip initial emit\" during watch mode", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nThis pull request introduces a new option to the watchOptions allowing users to skip the initial emit when using webpack in watch mode.\r\n\r\nThe use case for this is developers which work on projects that build multiple packages using multiple watch instances of webpack. In these scenarios it's important to get the initial compilation order correct. \r\n\r\nCurrently, webpack in watch mode will emit assets along with the initial build. When working with multiple packages which depend on each other, the initial emit can cause a waterfall of packages building and rebuilding as their dependencies build out of order. \r\n\r\nWhile the situation eventually stabilizes, it does result in long startup times and many unnecessary package rebuilds.\r\n\r\nBabel provides a --skip-initial-build flag to solve this issue:\r\n![image](https://user-images.githubusercontent.com/12656294/65605034-c19b4d80-dfeb-11e9-887c-f2ea9d36cb44.png) \r\n\r\nhttps://github.com/webpack/webpack/issues/9730\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nFeature\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo breaking changes\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nhttps://webpack.js.org/configuration/watch/\r\n\r\nneeds to be updated with a new option\r\n\r\n`watchOptions.skipInitialEmit`\r\n\r\n`boolean = false`\r\n\r\nTurn on skipping the initial assets emit when running the initial build. This means that webpack won't output any assets on the first pass, but will continue to watch for changes in any of the resolved files, building normally after it detects a change.\r\n\r\nwebpack.config.js\r\n\r\n```javascript\r\nmodule.exports = {\r\n  //...\r\n  watchOptions: {\r\n    skipInitialEmit: false\r\n  }\r\n};\r\n```\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 5, "created_at": "2019-09-25 13:26:09", "reactions": {"total_count": 9, "+1": 8, "-1": 0, "laugh": 0, "heart": 1, "hooray": 0}}, "498051335": {"author_username": "alshdavid", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9730, "title": "Option to skip initial build when using watch flag", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\nOption to skip initial build when using watch flag.\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen `--watch --skip-initial-build`, the `skip-initial-build` flag tells webpack not to build initially, but instead build on subsequent detected changes.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nWhen working with mono-repos that have multiple packages where some packages depend on higher level packages, developers must build the top level dependencies first, then watch everything.\r\n\r\nSo imagine there are two packages a and b\r\nb depends on a, so to successfully build b, a must already be built.\r\n\r\nDevelopers would:\r\nbuild a\r\nwatch a && watch b\r\n\r\nb will automatically rebuild when it detects a change to a, which the initial build from watching a will produce.\r\nThis triggers a waterfall of builds when starting.\r\n\r\na, b, a, b\r\n\r\nYou can only imagine how bad it gets in projects with a few too many packages\r\n\r\nIf a developer could skip the initial building on a watch the flow would be\r\n\r\nbuild a\r\nbuild b\r\nwatch skip a && watch skip b\r\n\r\n**How should this be implemented in your opinion?**\r\n**Are you willing to work on this yourself?**\r\n\r\nAdded a pull request\r\nhttps://github.com/webpack/webpack/pull/9735\r\n", "labels": [], "number_of_comments": 6, "created_at": "2019-09-25 05:09:52", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "496390996": {"author_username": "goganchic", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9720, "title": "Refactor Compilation.js", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nrefactoring\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nexisting behaviour wasn't changed, new features weren't added so new tests are not required\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nno new documentation is required\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: conflict", "PR: unreviewed"], "number_of_comments": 5, "created_at": "2019-09-20 14:41:29", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "495574940": {"author_username": "hedgepigdaniel", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9714, "title": "ProgressPlugin does not include most hooks on the compiler instance", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nProgressPlugin reports information about the current plugin in all hooks of the compiler instance (not just each compilation) \r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nFor example, I had an issue with stylelint-webpack-plugin [taking a long time](https://github.com/webpack-contrib/stylelint-webpack-plugin/issues/181) in the `watchRun` hook of the compiler. ProgressPlugin did not output detailed information in this case about which plugin was causing the delay, because it does not instrument the `watchRun` hook of the compiler.\r\n\r\n**How should this be implemented in your opinion?**\r\nSimilar to how ProgressPlugin has a (probablyish) complete list of hooks that it instruments on the compilation, it should instrument all the hooks on the compiler aswell.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes", "labels": ["Send a PR"], "number_of_comments": 3, "created_at": "2019-09-19 05:04:20", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "485526209": {"author_username": "maxwoo-houzz", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9632, "title": "now that `mtimes` has been removed from watchpack, how do we get all changed/removed files?", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nIt seems like the new version of WatchPack (v2.0.0) are getting rid of the [`mtimes`](https://github.com/webpack/watchpack/blob/v1.6.0/lib/watchpack.js#L21) variable. However, from my research it seems like that variable was the only way to get the list of changed files that triggered a re-compilation ([source](https://stackoverflow.com/questions/43140501/can-webpack-report-which-file-triggered-a-compilation-in-watch-mode)).\r\nAs such, there should be an alternative way to get this list of changed files.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nSeems like a pretty useful feature for the `watchRun` hook, as there are [already a couple people](https://stackoverflow.com/questions/43140501/can-webpack-report-which-file-triggered-a-compilation-in-watch-mode) (including me) that use it.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nWatchpack actually provides the info we need, in the variable `filesModified` that [it passes to Watching.js](https://github.com/webpack/webpack/blob/bba93d2a85a35dc793dda6d347e54b094e2ce784/lib/Watching.js#L122). However, Watching.js doesn't use it at all. Ideally I think this variable should be provided in the `watchRun` hook, but it should also be fine to just store it as a property just like how it's done with `removedFiles`, eg in Watching.js:\r\n\r\n```js\r\nthis.compiler.filesModified = filesModified;\r\n```\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": ["Send a PR"], "number_of_comments": 2, "created_at": "2019-08-27 01:03:43", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "482870452": {"author_username": "OliverJAsh", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9607, "title": "Tree shaking does not apply to re-exported namespace imports", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\nGiven:\r\n\r\n`./src/index.js`:\r\n\r\n``` js\r\nimport { other } from \"./proxy\";\r\n\r\nconsole.log(other.foo1);\r\n```\r\n\r\n`./src/proxy.js`:\r\n\r\n``` js\r\nimport * as other from \"./other\";\r\nexport { other };\r\n```\r\n\r\n`./src/other.js`:\r\n\r\n``` js\r\nexport const foo1 = 1;\r\nexport const foo2 = 2;\r\n```\r\n\r\n`./webpack.config.js`:\r\n\r\n``` js\r\nconst pathHelpers = require(\"path\");\r\n\r\nconst ROOT_PATH = __dirname;\r\nconst TARGET_PATH = pathHelpers.join(ROOT_PATH, \"./target/\");\r\nconst SRC_PATH = pathHelpers.join(ROOT_PATH, \"./src/\");\r\n\r\nconst ENTRY_FILENAME = \"index.js\";\r\nconst OUTPUT_FILENAME = \"index.js\";\r\n\r\nconst config = {\r\n  mode: \"development\",\r\n  devtool: \"source-map\",\r\n  optimization: {\r\n    usedExports: true\r\n  },\r\n  entry: pathHelpers.resolve(SRC_PATH, ENTRY_FILENAME),\r\n  output: {\r\n    path: TARGET_PATH,\r\n    filename: OUTPUT_FILENAME\r\n  }\r\n};\r\n\r\nmodule.exports = config;\r\n```\r\n\r\nThe resulting output tells us that the unused export `foo2` will not be removed by tree shaking:\r\n\r\n``` js\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"foo1\", function() { return foo1; });\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"foo2\", function() { return foo2; });\r\nconst foo1 = 1;\r\nconst foo2 = 2;\r\n```\r\n\r\nRepo containing the above: https://github.com/OliverJAsh/tree-shaking-test/tree/proxy\r\n\r\n**What is the expected behavior?**\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n`foo2` should be tree shakeable.\r\n\r\nWe can achieve this if we bypass the re-export and use a namespace import directly:\r\n\r\n`./index.js`:\r\n\r\n```diff\r\n-import { other } from \"./proxy\";\r\n+import * as other from \"./other\";\r\n```\r\n\r\nResult:\r\n\r\n``` js\r\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return foo1; });\r\n/* unused harmony export foo2 */\r\nconst foo1 = 1;\r\nconst foo2 = 2;\r\n```\r\n\r\nDiff:\r\n\r\n``` diff\r\n /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return foo1; });\r\n-/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"foo2\", function() { return foo2; });\r\n+/* unused harmony export foo2 */\r\n const foo1 = 1;\r\n const foo2 = 2;\r\n```\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.39.2\r\nNode.js version: 10.16.3\r\nOperating System: macOS\r\nAdditional tools:\r\n\r\nThis works in Rollup. [Playground example](https://rollupjs.org/repl/?version=1.19.4&shareable=JTdCJTIybW9kdWxlcyUyMiUzQSU1QiU3QiUyMm5hbWUlMjIlM0ElMjJtYWluLmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMmltcG9ydCUyMCU3QiUyMG90aGVyJTIwJTdEJTIwZnJvbSUyMCU1QyUyMi4lMkZwcm94eSU1QyUyMiUzQiU1Q24lNUNuY29uc29sZS5sb2cob3RoZXIuZm9vMSklM0IlNUNuJTIyJTJDJTIyaXNFbnRyeSUyMiUzQXRydWUlN0QlMkMlN0IlMjJuYW1lJTIyJTNBJTIyb3RoZXIuanMlMjIlMkMlMjJjb2RlJTIyJTNBJTIyZXhwb3J0JTIwY29uc3QlMjBmb28xJTIwJTNEJTIwMSUzQiU1Q25leHBvcnQlMjBjb25zdCUyMGZvbzIlMjAlM0QlMjAyJTNCJTIyJTdEJTJDJTdCJTIybmFtZSUyMiUzQSUyMnByb3h5LmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMmltcG9ydCUyMColMjBhcyUyMG90aGVyJTIwZnJvbSUyMCU1QyUyMi4lMkZvdGhlciU1QyUyMiUzQiU1Q25leHBvcnQlMjAlN0IlMjBvdGhlciUyMCU3RCUzQiU1Q24lMjIlN0QlNUQlMkMlMjJvcHRpb25zJTIyJTNBJTdCJTIyZm9ybWF0JTIyJTNBJTIyY2pzJTIyJTJDJTIybmFtZSUyMiUzQSUyMm15QnVuZGxlJTIyJTJDJTIyYW1kJTIyJTNBJTdCJTIyaWQlMjIlM0ElMjIlMjIlN0QlMkMlMjJnbG9iYWxzJTIyJTNBJTdCJTdEJTdEJTJDJTIyZXhhbXBsZSUyMiUzQW51bGwlN0Q=).\r\n\r\nFor context, the reason you might re-export a namespace import is for dev UX\u2014VS Code can provide import suggestions only for named exports.\r\n\r\nThis approach is used in libraries [such as fp-ts](https://github.com/gcanti/fp-ts-rxjs/blob/4308683f8d252e44e19c46135ae57ab257fc347c/src/index.ts).", "labels": [], "number_of_comments": 5, "created_at": "2019-08-20 13:44:49", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "482763304": {"author_username": "OliverJAsh", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9601, "title": "Suggestion: improve default source map behaviour for Node users", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nGiven:\r\n\r\n`./package.json` (all latest versions):\r\n\r\n``` json\r\n{\r\n  \"dependencies\": {\r\n    \"source-map-support\": \"^0.5.13\",\r\n    \"webpack\": \"^4.39.2\",\r\n    \"webpack-cli\": \"^3.3.7\"\r\n  }\r\n}\r\n```\r\n\r\n`./webpack.config.js`:\r\n\r\n``` js\r\nconst pathHelpers = require(\"path\");\r\n\r\n// Expect `__dirname` to be `/config/target/`.\r\nconst ROOT_PATH = __dirname;\r\nconst TARGET_PATH = pathHelpers.join(ROOT_PATH, \"./target/\");\r\nconst SRC_PATH = pathHelpers.join(ROOT_PATH, \"./src/\");\r\n\r\nconst ENTRY_FILENAME = \"index.js\";\r\nconst OUTPUT_FILENAME = \"index.js\";\r\n\r\nconst config = {\r\n  mode: \"development\",\r\n  target: \"node\",\r\n  devtool: \"source-map\",\r\n  entry: pathHelpers.resolve(SRC_PATH, ENTRY_FILENAME),\r\n  output: {\r\n    path: TARGET_PATH,\r\n    filename: OUTPUT_FILENAME\r\n  }\r\n};\r\n\r\nmodule.exports = config;\r\n```\r\n\r\n`./src/index.js` (entry file):\r\n\r\n``` js\r\nconst fn = () => {\r\n  throw new Error(\"foo\");\r\n};\r\n\r\nfn();\r\n```\r\n\r\nWhen running:\r\n\r\n```bash\r\nwebpack\r\nnode --require source-map-support/register ./target/index.js\r\n```\r\n\r\nThe error stack trace looks like this:\r\n\r\n```\r\n/Users/oliverash/Development/webpack-source-map-test/target/webpack:/src/index.js:2\r\n    throw new Error('foo')\r\n^\r\nError: foo\r\n    at fn (/Users/oliverash/Development/webpack-source-map-test/target/webpack:/src/index.js:2:1)\r\n```\r\n\r\nObserve how the path to the source file where the error originated is resolved against the source map, but only partially so. This makes it difficult to interact with the stack trace. E.g. in iTerm, it's usually possibly to <kbd>Command</kbd> + click a path to open it, but this is not possible here because the path is invalid. Ideally the original file path would be shown.\r\n\r\nIIUC, we can fix this using [`devtoolModuleFilenameTemplate`](https://webpack.js.org/configuration/output/#outputdevtoolmodulefilenametemplate)/[`moduleFilenameTemplate`](https://webpack.js.org/plugins/source-map-dev-tool-plugin/#options):\r\n\r\n``` diff\r\n   output: {\r\n     path: TARGET_PATH,\r\n     filename: OUTPUT_FILENAME,\r\n+    devtoolModuleFilenameTemplate: \"[absolute-resource-path]\"\r\n   }\r\n```\r\n\r\nNow the error stack trace looks like this:\r\n\r\n```\r\n/Users/oliverash/Development/webpack-source-map-test/src/index.js:2\r\n    throw new Error('foo')\r\n^\r\nError: foo\r\n    at fn (/Users/oliverash/Development/webpack-source-map-test/src/index.js:2:1)\r\n```\r\n\r\nHowever, I would like to suggest that we make this behaviour the default when using webpack to build code that will be ran by Node (i.e. when `target: 'node'` as in this example).\r\n\r\nSecondly, when using `eval-source-map` instead of `source-map` (used above), `devtoolModuleFilenameTemplate` does not help. The error stack trace always looks like this:\r\n\r\n```\r\nwebpack-internal:///./src/index.js:2\r\n    throw new Error('foo')\r\n    ^\r\n\r\nError: foo\r\n    at fn (webpack-internal:///./src/index.js:2:11)\r\n```\r\n\r\nAgain, this path is difficult to interact with\u2014ideally the original file path would be shown. What is the recommended fix in this case?\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": ["inactive"], "number_of_comments": 2, "created_at": "2019-08-20 09:58:48", "reactions": {"total_count": 3, "+1": 2, "-1": 0, "laugh": 0, "heart": 1, "hooray": 0}}, "482709553": {"author_username": "shaodahong", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9599, "title": "examples(source-map): useful config", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nuseful examples source-map\r\nFixed #9129\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nNo\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nYes\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-ok", "PR: review-outdated"], "number_of_comments": 6, "created_at": "2019-08-20 08:11:21", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "480969813": {"author_username": "otakustay", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9581, "title": "Configure persistent cache scope in v5", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nAs I test the effect of persistent cache in webpack v5, it involves some issue when using `DefinePlugin` to inject `process.env`\r\n\r\nI tried a entry js like:\r\n\r\n```js\r\nimport 'lodash';\r\n\r\nconsole.log(process.env.TEST_VALUE);\r\n```\r\n\r\nProduction mode build cause 240ms the first time, and 50ms when cache is enabled, however **when `process.env.TEST_VALUE` is changed the output still remains the same**.\r\n\r\n```shell\r\nTEST_VALUE=123 webpack # cuases 240ms\r\nTEST_VALUE=456 webpack # causes 50ms but outputs 123\r\n```\r\n\r\nI can generate `cache.version` depending on `process.env` but this cache version is way too dynamic, also I have something like git revision or timestamp into javascript via `DefinePlugin` so the persistent cache can never hit.\r\n\r\nOn the other side, I can definitely tell that only src javascript are  affected by those dynamic context, all third party node modules can be cached stably, but I can't find a way to configure persistent cache only on my src scripts.\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nI'd like to be able to specify only some scripts being persistent cached depending on their path and content.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nThis can boost build performance even some of the scripts is depending on dynamic context like process environments, build revisions, timestamps, feature flags, etc....\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nTry to add a `Condition` to `cache` configuration like:\r\n\r\n\r\n```js\r\n{\r\n  cache: {\r\n    test(path, content) {\r\n      return path.includes('node_modules/') || !content.includes('process.env.');\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nBoth `path` and `content` are required, `content` should be the raw content without any loader or plugin involved.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\npossibly not, I'm not familiar with webpack\r\n", "labels": ["webpack-5"], "number_of_comments": 5, "created_at": "2019-08-15 02:44:38", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "476528561": {"author_username": "thomasjm", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9520, "title": "Feature request: compute [contenthash] after minification instead of before", "body": "## Feature request\r\n\r\n**What is the expected behavior?**\r\n\r\nThe documentation says that\r\n\r\n> The `[contenthash]` substitution will add a unique hash based on the content of an asset. When the asset's content changes, `[contenthash]` will change as well.\r\n\r\nHowever, the `[contenthash]` does **not** actually match the hash of the file, i.e. the result you would get if you ran `md5sum` or `sha256sum` on the file.\r\n\r\nThis [StackOverflow answer](https://stackoverflow.com/questions/50224845/why-is-the-contenthash-different-in-webpack) explains why: the `[contenthash]` is computed before minification.\r\n\r\nThe feature request is to compute the `[contenthash]` *after* minification/any other post-processing steps, or at least provide an option to do so. \r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nThis would have nice properties, such as allowing proxies to validate the integrity of a file just by comparing its hash to the filename.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nChange the point in the process where the `[contenthash]` is computed. I don't know anything about webpack's architecture so I have no idea how hard this is.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nI'm not a webpack developer but if there was some guidance from an expert I could take a stab at it.\r\n", "labels": [], "number_of_comments": 11, "created_at": "2019-08-04 08:28:43", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "476310773": {"author_username": "RReverser", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9517, "title": "Can't use `[name]` in `webassemblyModuleFilename`", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nTrying to use `[name]` in `output.webassemblyModuleFilename` config leads to:\r\n\r\n```\r\nChunkRenderError: Path variable [name] not implemented in this context: \r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n`[name]` should be accepted and replaced with a basename of the Wasm file, like WebPack does in `filename` and `chunkFilename` contexts.\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.28.0\r\nNode.js version: 12.7.0\r\nOperating System: Windows 10\r\nAdditional tools:\r\n", "labels": ["Send a PR"], "number_of_comments": 13, "created_at": "2019-08-02 18:47:52", "reactions": {"total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "476115715": {"author_username": "dejour", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9514, "title": "HotModuleReplacementPlugin occasionally not working", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nAfter webpack detect changes, it produce new bundles, but it won't call the\r\ncompiler done hooks.And hmr doesn't work correctly.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nWebpack calls the done hook, And hmr works correctly.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.35.0\r\nNode.js version:  12.7.0\r\nOperating System: macOs\r\nAdditional tools:\r\n\r\nAfter some debugging, I find the problem was caused by this code\r\n``\r\ncurrentChunk.files.push(filename);\r\ncompilation.hooks.chunkAsset.call(currentChunk, filename);\r\n``\r\nfrom HotModuleReplacementPlugin.js. After i delete it, everything works fine.\r\nMaybe someone can think of something related to this problem.\r\n", "labels": [], "number_of_comments": 12, "created_at": "2019-08-02 10:38:44", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "475863267": {"author_username": "mdreizin", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9509, "title": "Respect \"exports\" filed in \"package.json\"", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be nice if `webpack` respects `\"exports\"` filed defined in `package.json` and follow a new resolution strategy.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nThis feature is just landed in [`node@12.7.0`](https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V12.md#2019-07-23-version-1270-current-targos) (see [`proposal-pkg-exports`](https://github.com/jkrems/proposal-pkg-exports/)).\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\n1. Read `\"exports\"` filed and create `resolve.alias` map internally (ie if `resolve.useExports = true` is turned on) using proposed resolution strategy.\r\n\r\n2. Allow to specify `resolve.mainFields = ['exports']` and check for this reserved keyword. If it is found then apply proposed resolution strategy. \r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nno\r\n", "labels": [], "number_of_comments": 9, "created_at": "2019-08-01 20:01:02", "reactions": {"total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "475036343": {"author_username": "thiscantbeserious", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9498, "title": "Shared runtime for library & code splitting via the SplitChunksPlugin doesn't work properly (SystemJS & UMD)", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nCode-splitting via the SplitChunksPlugin and/or via a shared Runtime leads to a non-functional library when being loaded by SystemJS. Chunks are never loaded.\r\n\r\nIf you disable both then, depending on the size of the files, webpack will create automatic Chunks that are properly loaded (provided if you have properly set the publicPath).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nMinimal repository to reproduce the behaviour:\r\n\r\nhttps://github.com/thiscantbeserious/webpack-library-code-splitting\r\n\r\nUse yarn build && yarn start and see console output and the global window object.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nModules should be properly populated on request when being loaded by SystemJS - beware that modules here are spefically transpiled with new the 'system' libaryTarget. However the same behaviour occurs for UMD, so I guess it must be something else.\r\n\r\nAs per https://github.com/webpack/webpack/issues/8512 it seems like you're required to include all chunks manually ? Isn't that the purpose of the shared runtime? This doesn't seem feesible in any way for me.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.38.0\r\nNode.js version: v10.15.3\r\nOperating System: Windows 8.1 and Debian 9\r\nAdditional tools: -\r\n", "labels": [], "number_of_comments": 4, "created_at": "2019-07-31 09:31:07", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "474776337": {"author_username": "nveenjain", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9492, "title": "Fixed automaticPrefetchPlugin to not apply loaders via config to the request", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nFixes #9485 \r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nBugFix\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nNA\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-ok", "PR: reviewed-changes-requested"], "number_of_comments": 3, "created_at": "2019-07-30 19:17:52", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "473951449": {"author_username": "EricAdonis", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9485, "title": "After change file .js (import (css, less, scss)), webpack result is error.", "body": "<!-- Bug reports and Feature requests must use other templates, or will be closed -->\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n- This is my project: [https://gitlab.com/EricAdonis/webpack-cra](https://gitlab.com/EricAdonis/webpack-cra)\r\n- Can someone help me. I really need help. I thank you very much if you support me.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n- report a bug.\r\n\r\n**What is the current behavior?**\r\n- I'm working on a project boilerplate with webpack (optimized for bundler) but I have a very strange error in during installation.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n- step 1: yarn\r\n- step2: yarn start (it work)\r\n- step3: change file app.js (it not work)\r\n- step4: change file app.js (it not work)\r\n- I'm working on a project boilerplate with webpack (optimized for bundler) but I have a very strange error in during installation.\r\n- After the first run, it work.\r\n![image](https://user-images.githubusercontent.com/49099200/62011418-6ba05a00-b1a2-11e9-8e2e-a0a463891d02.png)\r\n- But after i changed file app.js, hot reload worked and reloaded, but it thrown an error as below.\r\n![image](https://user-images.githubusercontent.com/49099200/62011444-c33ec580-b1a2-11e9-9804-0bdb76bf6de7.png)\r\n- And so on, after each change file *.js, it thrown an error\r\n![image](https://user-images.githubusercontent.com/49099200/62011473-ee291980-b1a2-11e9-98fb-1352a242a120.png)\r\n**What is the expected behavior?**\r\n- After hot reload applied, js,css bundler file built successfully.\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\nwebpack version: lts\r\nNode.js version: 10.16.2\r\nOperating System: Ubuntu\r\nMyConfig:\r\n```javascript\r\nconst path = require('path')\r\nconst webpack = require('webpack')\r\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\r\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\r\nconst TerserPlugin = require('terser-webpack-plugin')\r\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin')\r\nconst cssnano = require('cssnano')\r\nconst AutoDllPlugin = require('autodll-webpack-plugin')\r\n\r\nconst postcssLoader = {\r\n  loader: 'postcss-loader',\r\n  options: {\r\n    ident: 'postcss',\r\n    plugins: [\r\n      require('autoprefixer')\r\n    ]\r\n  }\r\n}\r\n\r\nconst pluginsOfProc = [\r\n  new MiniCssExtractPlugin({\r\n    filename: 'static/css/[name].[hash].css',\r\n    chunkFilename: 'static/css/chunk/[id].[hash].[contenthash].chunk.css',\r\n    ignoreOrder: false\r\n  }),\r\n  new OptimizeCSSAssetsPlugin({\r\n    cssProcessor: cssnano,\r\n    cssProcessorOptions: {\r\n      discardComments: {\r\n        removeAll: true\r\n      }\r\n    }\r\n  }),\r\n  new AutoDllPlugin({\r\n    inject: true,\r\n    filename: '[id].[hash].dll.js',\r\n    path: 'static/dll',\r\n    entry: {\r\n      vendor: [\r\n        'react',\r\n        'react-dom'\r\n      ]\r\n    }\r\n  })\r\n]\r\n\r\nconst _default = isDev => ({\r\n  cache: true,\r\n  mode: isDev ? 'development' : 'production',\r\n  entry: path.resolve(__dirname, '../src/index.js'),\r\n  output: {\r\n    path: path.resolve(__dirname, '../dist'),\r\n    filename: 'static/js/[name].[hash].js',\r\n    chunkFilename: 'static/js/chunk/[id].[hash].[contenthash].chunk.js',\r\n    publicPath: '/'\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        oneOf: [\r\n          {\r\n            test: /\\.css$/,\r\n            use: [\r\n              { loader: isDev ? 'style-loader' : MiniCssExtractPlugin.loader },\r\n              { loader: 'css-loader', options: { importLoaders: 1 } },\r\n              {...postcssLoader}\r\n            ]\r\n          },\r\n          {\r\n            test: /\\.scss$/,\r\n            use: [\r\n              { loader: isDev ? 'style-loader' : MiniCssExtractPlugin.loader },\r\n              { loader: 'css-loader' },\r\n              {...postcssLoader},\r\n              { loader: 'sass-loader' }\r\n            ]\r\n          },\r\n          {\r\n            test: /\\.less$/,\r\n            use: [\r\n              { loader: isDev ? 'style-loader' : MiniCssExtractPlugin.loader },\r\n              { loader: 'css-loader' },\r\n              {...postcssLoader},\r\n              { loader: 'less-loader' }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.(js|jsx)$/,\r\n        exclude: /(node_modules)/,\r\n        use: [\r\n          {\r\n            loader: 'thread-loader',\r\n            options: {\r\n              workers: require('os').cpus(),\r\n              workerParallelJobs: 2\r\n            }\r\n          },\r\n          {\r\n            loader: 'babel-loader',\r\n            options: {\r\n              cacheDirectory: true,\r\n              presets: [\r\n                '@babel/preset-env',\r\n                '@babel/preset-react'\r\n              ],\r\n              plugins: [\r\n                'react-hot-loader/babel',\r\n                [\r\n                  '@babel/plugin-proposal-decorators',\r\n                  { legacy: true }\r\n                ],\r\n                [\r\n                  '@babel/plugin-proposal-class-properties',\r\n                  { loose: true }\r\n                ],\r\n                '@babel/plugin-transform-runtime'\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.png$/,\r\n        use: [\r\n          {\r\n            loader: 'url-loader',\r\n            options: {\r\n              mimetype: 'image/png'\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.svg$/,\r\n        use: 'file-loader'\r\n      },\r\n      {\r\n        test: /\\.html$/,\r\n        use: [\r\n          {\r\n            loader: 'html-loader',\r\n            options: {\r\n              minimize: true\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  resolve: {\r\n    modules: [\r\n      path.resolve(__dirname, '../src'),\r\n      path.resolve(__dirname, '../node_modules')\r\n    ],\r\n    extensions: ['.js', '.jsx'],\r\n    alias: {\r\n      'react-dom': '@hot-loader/react-dom'\r\n    }\r\n  },\r\n  devtool: isDev ? 'cheap-module-eval-source-map' : '',\r\n  devServer: {\r\n    port: 10000,\r\n    contentBase: path.resolve(__dirname, 'dist'),\r\n    historyApiFallback: true,\r\n    hot: true,\r\n    hotOnly: true,\r\n    compress: true,\r\n    inline: true\r\n  },\r\n  plugins: [\r\n    new CleanWebpackPlugin(),\r\n    new HtmlWebpackPlugin({\r\n      template: path.resolve(__dirname, '../public/index.html'),\r\n      inject: true\r\n    }),\r\n    new webpack.optimize.MinChunkSizePlugin({\r\n      minChunkSize: 512\r\n    }),\r\n    ...(isDev ? [\r\n      new webpack.AutomaticPrefetchPlugin(),\r\n      new webpack.HotModuleReplacementPlugin()\r\n    ] : pluginsOfProc)\r\n  ],\r\n  optimization: {\r\n    moduleIds: 'hashed',\r\n    runtimeChunk: 'single',\r\n    splitChunks: {\r\n      cacheGroups: {\r\n        vendor: {\r\n          test: /[\\\\/]node_modules[\\\\/]/,\r\n          name: 'vendors',\r\n          chunks: 'all'\r\n        }\r\n      }\r\n    },\r\n    ...(isDev && {\r\n      usedExports: true\r\n    }),\r\n    ...(!isDev && {\r\n      minimizer: [\r\n        new TerserPlugin({\r\n          cache: true,\r\n          parallel: true\r\n        })\r\n      ]\r\n    })\r\n  }\r\n})\r\n\r\nmodule.exports = { _default }\r\n```", "labels": ["Send a PR"], "number_of_comments": 10, "created_at": "2019-07-29 09:39:28", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "472022744": {"author_username": "abirmingham", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9461, "title": "Webpack sourcemaps do not work well with ES6 imports (repost)", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nThis is a repost of #4560, which was closed due to inactivity.\r\n\r\nCurrent behavior is that sourcemaps do not work well with ES6 imports.\r\n\r\nExample:\r\n`import { printToConsole } from './util';` becomes `_util__WEBPACK_IMPORTED_MODULE_0__.printToConsole`. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. Clone minimal project: https://github.com/abirmingham/webpack-sourcemap-repro\r\n2. Open <repository>/index.html with Chrome. I used Chrome `74.0.3729.169 (Official Build) (64-bit)` but the issue has been present in all builds for awhile. Also tested Firefox `68.0 (64-Bit)`.\r\n3. Open developer tools\r\n4. Set a breakpoint on line 3 of index.js\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n1. In scope pane, `printToConsole` should be shown. Instead, `_util__WEBPACK_IMPORTED_MODULE_0__.printToConsole` is shown. There are likely other areas where it should show up mapped as well.\r\n2. User should be able to input `printToConsole('foo')` and see the `printToConsole` function successfully execute. Instead, `Uncaught ReferenceError: printToConsole is not defined` is shown. (I'm curious as to whether this part is even solvable by webpack or if I am making a browser feature request here).\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.37.0\r\nNode.js version: 8.10.0\r\nOperating System: Ubuntu\r\nAdditional tools: Chrome 74.0.3729.169 (Official Build) (64-bit)\r\n\r\n**Chrome**\r\n![image](https://user-images.githubusercontent.com/1661498/61755921-8b80e980-ad6e-11e9-8366-f4fc998b04b0.png)\r\n**Firefox**\r\n![image](https://user-images.githubusercontent.com/1661498/61814946-09d89c80-adfe-11e9-9f0c-9ccc339d708d.png)\r\n\r\n", "labels": [], "number_of_comments": 11, "created_at": "2019-07-24 00:19:53", "reactions": {"total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "470794000": {"author_username": "LarsDenBakker", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9445, "title": "Data uri import does not work", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nData uri import does not work\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nWhen using a data uri in an import statement, webpack throws an error saying it can't find the import. For example:\r\n\r\n```javascript\r\nimport \"data:text/javascript;charset=utf-8;base64,Y29uc29sZS5sb2coJ2lubGluZSAxJyk7\";\r\n```\r\n\r\nNeither base 64 encoded, or unencoded data uris work.\r\n\r\nI know this is a bit of a strange pattern, but it's valid to use this in the browser so I was hoping webpack would support this as well.\r\n\r\nMy use case is that I have tool which converts legacy module syntax to es modules, and data uris are a nice way to handle executing code in-between imports when you want to preserve the order of the code. For example this is valid in commonjs, but not in an es module:\r\n\r\n```javascript\r\nrequire('./foo.js');\r\nconsole.log('hello world');\r\nrequire('./bar.js');\r\n```\r\n\r\n**What is the expected behavior?**\r\nI expect webpack to create a module in the module graph using the decoded data uri. The result is bundled with the rest of the code as if it were any regular module.\r\n\r\n**Other relevant information:**\r\nwebpack version:  v4.36.1\r\nNode.js version: v10\r\nOperating System: mac\r\nAdditional tools: none\r\n", "labels": ["Send a PR"], "number_of_comments": 5, "created_at": "2019-07-21 15:28:32", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "470177242": {"author_username": "LiamMartens", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9441, "title": "Inferred TS declaration imports in monorepo are changed to relative imports", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\nFor some reason when generating ts declaration files, using either `ts-loader` or `awesome-typescript-loader`, the imports to local packages in the monorepo are changed to relative imports. They should remain as module imports.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nWhen building both packages the inferred lerna package import in the declaration files of typescript in the `my-package` package are converted to a relative import.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nReproduction repository and steps can be found [here](https://github.com/LiamMartens/webpack-ts-loader-declaration-import/)\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nThese imports that reference a lerna package and are not explicitly specified should not be changed to a relative import and instead should remain a module import.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.36.1\r\nNode.js version: v11.15.0\r\nOperating System: PopOS! 18.10\r\nAdditional tools: yarn, lerna\r\n", "labels": [], "number_of_comments": 2, "created_at": "2019-07-19 07:19:54", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "468833385": {"author_username": "jrschumacher", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9420, "title": "feat(providePlugin): Add ability to exclude files for ProvidePlugin", "body": "This feature will allow one to exclude files from the ProvidePlugin. This is useful if you wish to override a native function such as XMLHttpRequest. See #6226 for more details.\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nThis is a feature and adds a new form of input in `ProvidePlugin`:\r\n\r\n```\r\nnew ProvidePlugin({ module: \"aaa\", exclude: \"bbb.js\" })\r\nnew ProvidePlugin({ module: \"aaa\" })\r\nnew ProvidePlugin({ module: [\"aaa\", \"bbb\"] })\r\n```\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNeed to update the documentation to show the new feature and optional data structure.\r\n", "labels": ["PR: conflict", "PR: unreviewed"], "number_of_comments": 3, "created_at": "2019-07-16 19:50:24", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "466440942": {"author_username": "lucas-rudd", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9393, "title": "Add ability to use native nodejs require resolve method", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nI am using a 3rd party library which uses the nodeJs `require.resolve` method to get the path of a module at runtime. The specific piece of code in question is as follows\r\n\r\n```\r\nvar sourceDir = path.join(path.dirname(require.resolve('dep')), 'dir', 'subdir');\r\n```\r\n\r\nWhen bundled with webpack, this results in the following\r\n\r\n```\r\nvar sourceDir = path.join(path.dirname(/*require.resolve*/(124)), 'dir', 'subdir');\r\n```\r\n\r\nwhich results in a runtime failure, as `path.dirname` requires a string.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nTo support 3rd party packages which may use the built in NodeJs implementation of `require.resolve`\r\n\r\n\r\n**How should this be implemented in your opinion?**\r\nThrough the use of a key `_use_node_resolve_` in webpack config to indicate that webpack should leave the `require.resolve` implementation alone when bundling.\r\n\r\n**Are you willing to work on this yourself?**\r\nWith some guidance and help, yes\r\n", "labels": [], "number_of_comments": 6, "created_at": "2019-07-10 17:54:06", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "466312974": {"author_username": "slavafomin", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9392, "title": "\"verbose\" preset is not outputting \"everything\" in stats.json", "body": "Hello!\r\n\r\nAccording to [the documentation](https://webpack.js.org/configuration/stats/#stats) the `verbose` preset should `\"Output everything\"` in `stats.json` file. However, in the [source code](https://github.com/webpack/webpack/blob/master/lib/Stats.js#L1362) the `modules` property is set to `false` for the `verbose` preset. Therefore, it's not outputting `\"everything\"`.\r\n\r\nI've lost a whole day trying to figure out why the analyzing tools are not working correctly with my `stats.json` file and I was absolutely sure, that it contains all the needed information. Even more awful thing is that a lot of people encountering the same behavior and blame the tools for that, thinking that their `stats.json` is perfectly fine, [including the official analyze tool](https://github.com/webpack/analyse/issues/30) \ud83d\ude28\r\n\r\nShould the documentation be updated or the preset itself?\r\n\r\n---\r\n\r\nOne of the workarounds is to use the `webpack-stats-plugin` to generate the stats file:\r\n\r\n```typescript\r\nimport { StatsWriterPlugin } from 'webpack-stats-plugin';\r\n\r\nconst plugins = [\r\n  new StatsWriterPlugin({ fields: null }), // outputs all fields\r\n];\r\n```", "labels": [], "number_of_comments": 7, "created_at": "2019-07-10 13:34:28", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "465518267": {"author_username": "cinderblock", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9382, "title": "Support Windows network shares as absolute paths", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nWindows shares start with `\\\\`. It would be nice if webpack could output a bundle directly to a folder on a Windows share.\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nAllows `config.output.path` to start with `\\\\` which, on Windows systems, is a valid absolute path to a network share.\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNo - it is not clear to me how to \"test\" this.\r\nDo I add a test that checks if a path that starts with `\\\\` is now allowed?\r\nOr a test that depends on a network share being available and actually writing to that output?\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo.\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nhttps://webpack.js.org/concepts/output/ should probably include an example of using a Windows share.\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: Abandoned but important", "PR: conflict", "PR: unreviewed"], "number_of_comments": 10, "created_at": "2019-07-09 00:50:14", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "464132333": {"author_username": "villesau", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9360, "title": "hash might collide with unidentical file contents when webpack config changes", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nIf certain configs are changed, webpack produces different file output, but the calculated hash remaisn the same. This is the case at least with different source map configs: `hidden-source-map` and `source-map` devtools: `source-map` produces line `/*# sourceMappingURL=1-ee230307f9c3ff792b7c.css.map*/` in the end of file which means that the hash should already be there at that point.\r\n\r\nThis is problematic for CDN since changing webpack config might not propagate to CDN and files in S3 and CDN differs. It's hard to debug why is that. \r\n\r\nThis also makes it impossible to validate that file contents & hash matches what we already have in production.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nHave very basic webpack config. Produce the build with hashes using both types of source maps -> hash remains the same but contents are different.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\nhash should change when devtool or other settings that change the output changes.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Potential solution**\r\n\r\nTake relevant parts of webpack config into account when calculating the hash. In this case devtool could be part of the hash calculation, as well as e.g different compression types and other relevant configs. I'm not that familiar with Webpack internals, but a naive way to achieve this would be to append relevant configs in the end of files they relate to and then calculate hash from that. If we know that some of the devtools produces identical result, it could be taken into account by mapping the devtools in a way that the identical results does not change when devtool or other similar settings changes.\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.30.0\r\nNode.js version: v10.15.0\r\nOperating System: macOS\r\nAdditional tools: -\r\n\r\nE: There is a related feature request: https://github.com/webpack/webpack/issues/7787", "labels": [], "number_of_comments": 3, "created_at": "2019-07-04 08:23:19", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "462337586": {"author_username": "dejesus2010", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9337, "title": "Tree shaking not working for ES module library", "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nI'm importing a library (@Shopify/polaris https://github.com/Shopify/polaris-react) that's quite large and I'm relying on Tree Shaking to remove unused code to ensure I don't import the entire library. But webpack isn't doing this. It's importing the entire library (1.3MB before compression) \r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nHere's a small repo to reproduce the issue: https://github.com/dejesus2010/temp_repo_tree_shake\r\n\r\n1. Run `npm install`\r\n2. Run `npm build`\r\n3. Examine the opened webpack visualizer in the browser\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\n\r\nLooking at the webpack visualizer output opened in the browser, I don't expect @shopify/polaris-icons/index.js and @shopify/app-bride/* to be included in the vendor.chunk.js file. The entire @shopify/polaris/index.es.js should not be included either. I expect the TextContainer component (https://github.com/Shopify/polaris-react/tree/master/src/components/TextContainer) and its dependencies to be the only code imported from @Shopify/polaris. Its dependencies are very small (https://github.com/Shopify/quilt/tree/master/packages/css-utilities). Instead the entire library is imported (1.3MB before compression). In @shopify/polaris/index.es.js TextContainer is exported as a function.\r\n\r\nSteps I've tried to resolve this issue:\r\n\r\n- Setting `sidEffects: false` in `package.json` [1] and as a module rule [2]. I also ensured `optimization.sideEffects: true` [3].\r\n\r\n- Ensure `mode` is `production`. I've tried setting it in the webpack config file and as a command flag [1].\r\n\r\n- Ensure `@babel/preset-env {modules: false}`. From issue #660 this should be false by default anyways.\r\n\r\n- I've followed the side-effects/tree-shaking example in the webpack repo: https://github.com/webpack/webpack/tree/master/examples/side-effects\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.32.1\r\nNode.js version: v12.3.1\r\nOperating System: Mac OS Mojave 10.14.3 \r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 9, "created_at": "2019-06-29 20:02:12", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "459557920": {"author_username": "fabb", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9319, "title": "__webpack_public_path__ is Reset Across Entrypoints", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**Background Information**\r\n\r\nMy application build generates urls for image and other assets that depend on a runtime environment variable. Therefore I need to adapt the webpack public path at runtime, which is possible by setting `__webpack_public_path__` ([see documentation](https://webpack.js.org/guides/public-path/#on-the-fly)).\r\n\r\nI use next.js which generates one entrypoint per page + entrypoints `_document.js`, `_app.js` and `_error.js` which are called from the page entrypoints. Since the `__webpack_public_path__` should be set for each of these entry points, I use the [entrypoint array functionality](https://webpack.js.org/concepts/entry-points/) to inject a short `public-path.js` file before each of the files referenced in the entrypoints. This file just sets the `__webpack_public_path__`. You can [see a short gist of this here](https://gist.github.com/fabb/adf9e62596529e81fb517b38dbf98eab).\r\n\r\n**What is the current behavior?**\r\n\r\nWhen my app runs and a page is requested, webpack loads modules from the page chunk (where it also correctly loads `public-path.js` and sets `__webpack_public_path__`), and in proceeding it loads needed modules from the `_document.js` and then `_app.js` chunks.\r\n\r\nWhile the `__webpack_public_path__` is correctly set while the code executes modules from the page chunk, as soon as it continues to load modules from `_document.js`, the webpack chunk initialization code sets the `__webpack_public_path__` (or rather `__webpack_require__.p` in the built code) to an empty string `\"\"`.\r\n\r\nEven though the `_document.js` chunk also tries to load the `public-path.js` module, it does not set the `__webpack_public_path__` anymore, as the module is now cached in the `installedModules` cache, and therefore is not executed (with `call`) anymore.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nSee [this short gist](https://gist.github.com/fabb/adf9e62596529e81fb517b38dbf98eab).\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nI would either expect that 1. the `__webpack_public_path__` is not reset across entrypoints when a module of one entrypoint calls a module of a chunk in another entrypoint, or 2. there was a way to mark side effects as in `public-path.js` as such, and avoid caching in `installedModules`.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version: 4.20.2\r\nNode.js version: 10.15.3\r\nOperating System: maxOS Mojave\r\nAdditional tools: next.js 7.0.3", "labels": [], "number_of_comments": 7, "created_at": "2019-06-23 09:57:58", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "459083974": {"author_username": "snyk-bot", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9313, "title": "[Snyk] Fix for 1 vulnerable dependencies", "body": "#### Description\nThis PR fixes one or more vulnerable packages in the `yarn` dependencies of this project.\nSee the [Snyk test report](https://app.snyk.io/org/sokra/test/github/aaa2d9af-c1c4-4012-a282-a9821845b8e8/master..snyk-fix-a76439768b31921cc040efb87d79ab0b) for more details.\n\n#### Snyk Project: [webpack/webpack:package.json](https://app.snyk.io/org/sokra/project/aaa2d9af-c1c4-4012-a282-a9821845b8e8)\n#### Snyk Organization: [sokra](https://app.snyk.io/org/sokra)\n\n#### Lockfile\nIf you are using `package-lock.json` or `yarn.lock`, please re-lock your dependencies and push an updated lockfile before merging this PR.\n\n#### Changes included in this PR\n\n- Changes to the following files to upgrade the vulnerable dependencies to a fixed version:\n    - package.json\n\n\n\n#### Vulnerabilities that will be fixed\n##### With an upgrade:\n- [SNYK-JS-SETVALUE-450213](https://snyk.io/vuln/SNYK-JS-SETVALUE-450213) - potentially breaking change\n\n\n\n\nYou can read more about Snyk's upgrade and patch logic in [Snyk's documentation](https://snyk.io/docs/using-snyk/).\n\nCheck the changes in this PR to ensure they won't cause issues with your project.\n\nStay secure,\nThe Snyk team\n\n_**Note**: You are seeing this because you or someone else with access to this repository has authorised Snyk to open Fix PRs. To review the settings for this Snyk project please go to the [project settings page](https://app.snyk.io/org/sokra/project/aaa2d9af-c1c4-4012-a282-a9821845b8e8/settings)._\n\n[//]: # (snyk:metadata:{\"type\":\"auto\",\"packageManager\":\"yarn\",\"vulns\":[\"SNYK-JS-SETVALUE-450213\"],\"patch\":[],\"upgrade\":[\"SNYK-JS-SETVALUE-450213\"],\"isBreakingChange\":true,\"env\":\"prod\",\"dependencies\":[{\"name\":\"micromatch\",\"from\":\"3.1.10\",\"to\":\"4.0.0\"}]})\n", "labels": ["PR: conflict"], "number_of_comments": 2, "created_at": "2019-06-21 08:44:44", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "458896325": {"author_username": "huston007", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9309, "title": "Rule with issuer is not applied when importing via require.context", "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\nLoaders are not applied for files, imported via `require.context`, if rule has \"issuer\" option.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nSee reproduction https://github.com/huston007/webpack-issuer-repro\r\n\r\nIn short:\r\nIn webpack.config:\r\n```\r\nrules: [\r\n      {\r\n        test: /\\.svg/,\r\n        issuer: /\\.js/, // Remove this line and everything works\r\n        loader: 'url-loader'\r\n      }\r\n    ]\r\n```\r\n\r\na.js:\r\n```\r\nfunction importAll (r) {\r\n  r.keys().forEach(r);\r\n}\r\n\r\nimportAll(require.context('.', false, /\\.svg$/));\r\n```\r\n\r\nBuild error:\r\n```\r\nWARNING in ./circle.svg 1:0\r\nModule parse failed: Unexpected token (1:0)\r\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\r\n> <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><circle cx=\"8\" cy=\"8\" r=\"8\"/></svg>\r\n @ . sync nonrecursive \\.svg$ ./circle.svg\r\n @ ./a.js\r\n```\r\n\r\nNote that it is doesn't matter what is inside [\"issuer\"](https://github.com/huston007/webpack-issuer-repro/blob/master/webpack.config.js#L9) property.\r\nIt also breaks if using wildcarded require like `require('./'+fileName+'.svg')`\r\n\r\n**What is the expected behavior?**\r\nLoaders are applied in-spite of a way how file is imported: via direct require or via context.\r\n\r\n**Known workaround**\r\nIt is possible to workaround by inlining loader syntax like: `require.context('!file-loader!./', true, /\\.svg$/)`\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.35.0\r\nNode.js version: 10.15.0\r\nOperating System: macOS\r\n\r\nMaybe related to #6915", "labels": [], "number_of_comments": 4, "created_at": "2019-06-20 21:39:53", "reactions": {"total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "456651999": {"author_username": "nveenjain", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9291, "title": "Added support to specify template identifiers in append option of SourceMapDevToolPlugin", "body": "\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nFixes #9245.\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nFeature\r\n\r\n**Did you add tests for your changes?**\r\nYes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nSourceMapDevToolPlugin's append option\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: conflict", "PR: reviewed-changes-requested"], "number_of_comments": 2, "created_at": "2019-06-16 15:16:30", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "451907901": {"author_username": "evenstensberg", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9227, "title": "feat: allow webpack to input and output in mem", "body": "# Rationale \r\n\r\nThere's been an interest in allowing webpack to be used with 0CJS, zero configuration and allowing webpack to run without having to supply any information (even though this is hard..). What this PR proposes, is a way to fallback to using a memory file (not emitting anything on disk) if there's no entries to be found by looking up common filenames or by common configuration names. When developing the new webpack CLI (next branch at webpack-cli), we're working on setting good defaults, and this is apart of that.\r\n \r\nhttps://github.com/webpack/webpack-cli/issues/717\r\n\r\nThis functionality also turns out positive if the developer wants to run a webpack instance without the need of outputting to disk, such for webpack dev server or similar. Webpack Dev server has now the possibility of using the output webpack emits rather than wrapping their implementation in their own Memory FS wrapper. What I could envision, is that instead of adding the output to an object (quite big on large builds), we can serialize it for stats and then stats can pick up that information. \r\n\r\nThis would be equivalent to emitting to disk, even though there are some advantages of doing memory compilations this way. The current abstraction of webpack is architectured in such a way that wrapping the files to a memory API is hard as the IO is abstracted (which is nice, but not in this use case) into two seperate API's and objects holding fs info. \r\n\r\nThe implementation uses the `memory-fs` dependency already included, and used by enhanced resolve. Altough the abstraction is bad, this feature has the possibility to either do a duplex mem compilation, meaning that you can both supply input files in memory and output in memory. You can also have an input file (the main reason for this PR) as a memory file with a good initial default and output to disk.\r\n\r\nI've thought about providing this abstraction elsewhere, such as in webpack-cli itself, but we are reliant on providing the object which holds the vfs data to webpack and getting it back with data in order to transpile. \r\n\r\nAdding duplex functionality (read/write) as for the `NodeInput` and `NodeOutput` filesystems aren't really well architectural-wise, as I think you would like to have this abstraction seperate (except in the instance of a virtual filesystem). Having the functionality implemented in [Enhanced-Resolve](https://github.com/webpack/enhanced-resolve/blob/master/lib/NodeJsInputFileSystem.js#L9) (https://github.com/webpack/webpack/blob/next/lib/node/NodeOutputFileSystem.js) at a granular level also breaks the abstraction, which is pretty good for webpack right now. \r\n\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nThe PR introduces a way for the CLI and webpack core to collaborate between outputting to disk and memory, either by having the entry point as a memory file, or both entry and output being in memory.\r\n\r\n**Did you add tests for your changes?**\r\n\r\nN/A\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nN/A (needs to be elaborated on)\r\n\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n- webpack.js.org\r\n- webpack-CLI \r\n- webpack-dev-server (maybe)\r\n\r\n## Summary\r\n\r\nOnce this is implemented, we are able to run webpack without any files, but we can set defaults and help the user in the initial process of setting up webpack bottom-up. Also working on a few more 0CJS changes, but this is the most important one.\r\n\r\nLet me know what is needed to get this through..\r\n\r\nEven \r\n", "labels": ["PR: conflict", "PR: unreviewed"], "number_of_comments": 4, "created_at": "2019-06-04 10:04:41", "reactions": {"total_count": 3, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 2}}, "450203638": {"author_username": "yevhey", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9206, "title": "index.js is not resolved by dll reference plugin", "body": "* Operating System: macOS Mojave 10.14.3\r\n* Node Version: v10.11.0\r\n* NPM Version: 6.4.1\r\n* webpack Version: 4.32.2\r\n\r\nThis issue is for a:\r\n\r\n- [x] **bug**\r\n- [ ] **feature** request\r\n- [ ] **modification** request\r\n\r\n### Code\r\nI created a repo to represent the problem: https://github.com/yevhey/dll-plugin-problem\r\n\r\nBut also the architecture is described below:\r\n##### test.js\r\n```js\r\n  // resolve from 'components/beta/index' is fine\r\n  import b from 'components/beta'; // not working\r\n\r\n  alert(b);\r\n```\r\n\r\n##### webpack.config.js\r\n```js\r\nvar path = require(\"path\");\r\nvar webpack = require(\"webpack\");\r\n\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: ['./test'],\r\n  plugins: [\r\n    new webpack.DllReferencePlugin({\r\n      scope: 'components',\r\n      manifest: require('./components.json')\r\n    })\r\n  ],\r\n};\r\n```\r\n\r\n##### plugin.config.js\r\n```js\r\nvar path = require(\"path\");\r\nvar webpack = require(\"webpack\");\r\n\r\nmodule.exports = {\r\n  mode: 'development',\r\n  resolve: { alias: {} },\r\n  entry: {\r\n    components: ['./beta'],\r\n  },\r\n  output: {\r\n    path: path.join(__dirname, '..'),\r\n    library: '[name]'\r\n  },\r\n  plugins: [\r\n    new webpack.DllPlugin({\r\n      name: '[name]',\r\n      path: path.join(__dirname, '..', '[name].json')\r\n    })\r\n  ]\r\n};\r\n```\r\n\r\n##### components/beta/index.js\r\n```\r\nmodule.exports = \"beta\";\r\n```\r\n\r\n### Expected Behavior\r\n\r\nIt resolves `index.js` inside the specified folder without mentioning explicitly `/index.js`\r\n\r\n### Actual Behavior\r\n\r\nYou need to write `/some-folder/index` to resolve the `index.js`\r\n\r\n### How Do We Reproduce?\r\n\r\n```\r\n\u251c\u2500\u2500 root folder                  \r\n\u2502   \u251c\u2500\u2500 components    \r\n\u2502   |   \u251c\u2500\u2500 beta\r\n\u2502   |   |   \u251c\u2500\u2500 index.js\r\n\u2502   |   \u251c\u2500\u2500 plugin.config.js\r\n\u2502   \u251c\u2500\u2500 webpack.config.js                                  \r\n\u2502   \u251c\u2500\u2500 test.js                                  \r\n```", "labels": ["bug"], "number_of_comments": 11, "created_at": "2019-05-30 09:01:08", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "448754082": {"author_username": "otakustay", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9194, "title": "Loaders behaves different between function or array module.rules.use", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWhen `module.rules.use` is set to a function, and `babel-loader` is given an `options` property, the `worker-loader` as a final loader could report errors:\r\n\r\n```text\r\nERROR in ./src/background.worker.js\r\nModule build failed: Error: Final loader (./node_modules/worker-loader/dist/cjs.js) didn't return a Buffer or String\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nI have submitted a reproduction repo: https://github.com/otakustay/webpack-issues/tree/use-function\r\n\r\nThe `use-function` branch reproduces this issue described in README, I don't quite understand whether the issue lies in `webpack`, `babel-loader`, or `worker-loader`, however this is a smallest reproduction case.\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nAll 3 configurations should compile successfully.\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.32.2\r\nNode.js version: v10.13.0\r\nOperating System: macOS mojave\r\nAdditional tools:\r\n", "labels": ["Send a PR"], "number_of_comments": 4, "created_at": "2019-05-27 09:23:09", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "448447934": {"author_username": "canadaduane", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9187, "title": "SyntaxError on devtool:inline and import non-existing module", "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\nUnder the following 3 conditions, webpack generates syntactically incorrect javascript by placing a `!` after the `new` reserved word:\r\n1. Set Webpack config `devtool` to `inline`, and\r\n2. Use `import` to import a module that doesn't exist, and\r\n3. Instantiate a class with the `new` keyword.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nPlease see this minimal repro: https://github.com/canadaduane/webpack-test \r\n\r\n**What is the expected behavior?**\r\nGenerated code should not raise SyntaxError.\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.32.2\r\nNode.js version: 10.15.3\r\nOperating System: Mac OS X\r\nAdditional tools: babel\r\n\r\nSee also #6191 and #8762.", "labels": [], "number_of_comments": 5, "created_at": "2019-05-25 10:02:14", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "447840691": {"author_username": "DaniJG", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9184, "title": "Allow webpackChunkName to be specified when using require.context", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen using `require.context` it should be possible to specify the chunk name, same as when using [magic comments](https://webpack.js.org/api/module-methods#magic-comments) with dynamic import statements.\r\n\r\nIe it should be possible to write (assuming a 5th argument is added to [require.context](https://webpack.js.org/api/module-methods#requirecontext) for the chunk name):\r\n```\r\nrequire.context(\r\n  '@/views', \r\n  true, \r\n  /\\.async\\.vue$/, \r\n  'lazy',\r\n  '[request]')\r\n```\r\nwhich should generate the same chunks as when using\r\n```\r\nimport(\r\n  /* webpackChunkName: \"[request]\" */\r\n  `@/views/${name}.async.vue`\r\n);\r\n```\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nI would like to automatically generate a chunk for every page in a Vue app that meets a certain convention. Ideally the chunk name would be based on the page name.\r\n\r\n**How should this be implemented in your opinion?**\r\nA 5th argument could be added to the [`RequireContextDependencyParserPlugin`](https://github.com/webpack/webpack/blob/8a7597aa6eb2eef66a8f9db3a0c49bcb96022a94/lib/dependencies/RequireContextDependencyParserPlugin.js) to extract the chunk name and pass it into the `RequireContextDependency` options.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": [], "number_of_comments": 5, "created_at": "2019-05-23 19:43:06", "reactions": {"total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "447484219": {"author_username": "Globegitter", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9182, "title": "Add new jail option to options schema", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nA new feature discussed in https://github.com/webpack/webpack/issues/9165 and implemented here: https://github.com/webpack/enhanced-resolve/pull/175\r\n\r\n**Did you add tests for your changes?**\r\n\r\nTests are in enhanced-resolve\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nThe new information that can now be passed through via `resolve` and `resolveLoader`.\r\n\r\nLet me know if there is anything else missing.\r\n", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 2, "created_at": "2019-05-23 07:07:07", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "447199830": {"author_username": "julienw", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9173, "title": "Error \"ReferenceError: can't access lexical declaration `XXX' before initialization\" when loading a webpack-ed app", "body": "# Bug report\r\n**What is the current behavior?**\r\nWhen loading the home page, we get this error in the browser's console:\r\n```\r\nReferenceError: can't access lexical declaration `reportTrackThreadHeight' before initialization app.js:1\r\n    js app.js:1\r\n    js TrackThread.js:243\r\n```\r\nThis happens both in Firefox and Chrome (the error message is slightly different in Chrome).\r\nThis also happens in a dev server, or when building and loading the built app, both in dev and prod mode.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nSTR:\r\n1. clone https://github.com/julienw/perf.html.git\r\n2. switch to branch `webpack-bug`\r\n3. run `yarn install`\r\n4. run `yarn start`\r\n5. open http://localhost:4242\r\n\r\n=> notice the error in the console log\r\n\r\nSteps 1 to 4 in a few commands:\r\n```\r\ngit clone https://github.com/julienw/perf.html.git\r\ncd perf.html\r\ngit checkout webpack-bug\r\nyarn install\r\nyarn start\r\n```\r\n\r\nSorry this isn't quite a minimal testcase, but I believe the problem comes from some form of dependency mismanagement and the problem might not happen with a smaller testcase.\r\n\r\nMy initial theory is that the problem comes from `ModuleConcatenationPlugin` hoisting  this function where it shouldn't, but the problem happens in dev mode as well, where `ModuleConcatenationPlugin` shouldn't be configured by default. So I'm a bit confused here.\r\n\r\nOther useful commands are:\r\n* `yarn build` => builds a development bundle to `dist/`\r\n* `yarn build-prod` => builds a production bundle to `dist/`\r\n\r\n**What is the expected behavior?**\r\n\r\nThere's no error in the generated bundle and we should be able to load the homepage without an error.\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.32.1\r\nNode.js version:  v10.15.1\r\nOperating System: Linux\r\nAdditional tools: --\r\n", "labels": [], "number_of_comments": 11, "created_at": "2019-05-22 15:21:13", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "446808996": {"author_username": "dmwmt", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9162, "title": "Provide an option to limit the number of workers for multi-config compiler", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nProvide an option to limit the number of workers for multi-config compiler\r\n\r\n**What is the expected behavior?**\r\n\r\nWebpack should be able to limit the number of workers for multi-config compiler\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nWe need to build multiple versions of our very small package (about 100 loc) so we export an array of configurations as explained [here](https://webpack.js.org/configuration/configuration-types/#exporting-multiple-configurations).\r\nOne standalone build takes 4 seconds and about 150 Mb of memory (which is too much I believe but we can live with that)\r\n16 parallel builds take 2:30 and about 1.5 Gb of memory.\r\nSo our concerns are:\r\n1. parallel compilation takes 2.5x longer than sequential\r\n2. peak memory consumption is too high for CI slave nodes\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nProvide an option to limit the number of parallel workers.\r\nLimiting to 1 will essentially make the build sequential.\r\nOptimal number would be the number of cpu cores and this should be its default value.\r\n\r\n**Are you willing to work on this yourself?**\r\nno\r\n", "labels": [], "number_of_comments": 6, "created_at": "2019-05-21 20:25:38", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "446753307": {"author_username": "gusvargas", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9161, "title": "ContextModule dependency errors manifest as warnings", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nIf an error occurs while processing a `ContextElementDependency` then that error manifests as a warning.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nhttps://github.com/gusvargas/webpack-contextmodule-dep-warning-bug\r\n\r\n```\r\ngit clone git@github.com:gusvargas/webpack-contextmodule-dep-warning-bug.git\r\ncd webpack-contextmodule-dep-warning-bug\r\nyarn\r\nyarn build\r\nyarn run v1.6.0\r\n$ webpack --mode development\r\nHash: 84ea86465d90efc8f434\r\nVersion: webpack 4.32.0\r\nTime: 69ms\r\nBuilt at: 2019-05-21 12:58:48\r\n  Asset      Size  Chunks             Chunk Names\r\nmain.js  5.31 KiB    main  [emitted]  main\r\nEntrypoint main = main.js\r\n[./src/components sync recursive ^\\.\\/.*$] ./src/components sync ^\\.\\/.*$ 183 bytes {main} [built]\r\n[./src/index.js] 33 bytes {main} [built]\r\n    + 1 hidden module\r\n\r\nWARNING in ./src/components/foo.js 1:1\r\nModule parse failed: Unterminated regular expression (1:1)\r\nYou may need an appropriate loader to handle this file type.\r\n> /invalid js\r\n|\r\n @ ./src/components sync ^\\.\\/.*$ ./foo.js\r\n @ ./src/index.js\r\n\u2728  Done in 0.94s.\r\n```\r\n\r\nI also included a plugin in the repo that fixes the bug.\r\n```\r\nyarn build-w-fix\r\nyarn run v1.6.0\r\n$ webpack --mode development --plugin ./FixContextModuleDepWarningsPlugin.js\r\nHash: 84ea86465d90efc8f434\r\nVersion: webpack 4.32.0\r\nTime: 67ms\r\nBuilt at: 2019-05-21 13:03:39\r\n  Asset      Size  Chunks             Chunk Names\r\nmain.js  5.31 KiB    main  [emitted]  main\r\nEntrypoint main = main.js\r\n[./src/components sync recursive ^\\.\\/.*$] ./src/components sync ^\\.\\/.*$ 183 bytes {main} [built]\r\n[./src/index.js] 33 bytes {main} [built]\r\n    + 1 hidden module\r\n\r\nERROR in ./src/components/foo.js 1:1\r\nModule parse failed: Unterminated regular expression (1:1)\r\nYou may need an appropriate loader to handle this file type.\r\n> /invalid js\r\n|\r\n @ ./src/components sync ^\\.\\/.*$ ./foo.js\r\n @ ./src/index.js\r\nerror Command failed with exit code 2.\r\n```\r\n\r\nNotice that when you build with the fix the module's build error fails the build, as expected.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nI would expect the build to fail with the error that occurred while building the `ContextElementDependency`.\r\n\r\nThis code determines how the error should manifest:\r\nhttps://github.com/webpack/webpack/blob/1dc561865ad57d9e862832ccf3579f67a8bbba2d/lib/Compilation.js#L157-L160\r\n\r\nThe `ContextModuleFactory` sets `dep.optional` to `true` for all `ContextElementDependency`s:\r\nhttps://github.com/webpack/webpack/blob/1dc561865ad57d9e862832ccf3579f67a8bbba2d/lib/ContextModuleFactory.js#L144-L146\r\n\r\nI think that `dep.optional` should be set to `false`. I'm happy to PR the change if that makes sense.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.32.0\r\nNode.js version: v8.9.1\r\nOperating System: macOS 10.12.5\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 3, "created_at": "2019-05-21 18:06:10", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "446223456": {"author_username": "fabiospampinato", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9157, "title": "Support for executing files in an external process", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nIt's somewhat common to spawn specific files in another process like this:\r\n\r\n```js\r\nrequire ( 'child_process' ).spawn ( process.execPath, [path.join ( __dirname, 'foo.js' ) ] )\r\n```\r\nCurrently WebPack isn't able to understand that the file at `path.join ( __dirname, 'foo.js' )` should be bundled, but even if it could this code would still not work, as this code expects to be able to spawn a specific file called `foo.js`, while WebPack would instead include `foo.js` in the bundle itself.\r\n\r\nThis sort of code should be bundle-able with WebPack.\r\n\r\nI think there should be a way to tell WebPack when a file is required, when it should be bundled in a separate chunk, and perhaps what that chunk should be named (or at least webpack should implement some key-value store so that the app could query webpack for the chunk that's supposed to be named \"foo.js\", so that webpack can actually name it whatever it wants in order to avoid conflicts).\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nSome packages write this kind of code, including [`update-notifier`](https://www.npmjs.com/package/update-notifier), which is used in CLI apps, which should start as quickly as possible, so bundling them would make sense, but because of this issue they can't be bundled properly with WebPack.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nMaybe this particular use case is simple enough that WebPack could support it without requiring any modification to existing code, but if that's not possible:\r\n\r\n- Maybe there could be a magic comment added for telling webpack to bundle a specific file with a specific filename, like:\r\n\r\n```js\r\n/* webpack-trust-me-bundle-this-external-file: __dirname + '/foo.js' */\r\n```\r\n\r\n- And maybe a function for retrieving the path to that external file, like:\r\n\r\n```js\r\ntypeof __webpack_path_to_external__ !== 'undefined' ? __webpack_path_to_external__ ( __dirname + '/foo.js' ) : __dirname + '/foo.js'\r\n```\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nYes, maybe with some pointers I could implement something like this.", "labels": [], "number_of_comments": 4, "created_at": "2019-05-20 17:11:22", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "446217691": {"author_username": "fabiospampinato", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9155, "title": "Support more cases where modules are being required in a dynamic way", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nSometimes modules are imported in a more dynamic way than WebPack currently supports, for instance there are multiple packages for lazily importing modules, so one might write code like this:\r\n\r\n```js\r\nconst importLazy = require ( 'import-lazy' );\r\nconst lodash = importLazy ( 'lodash' );\r\n```\r\n\r\nAnd WebPack will not include `lodash` in the bundle, but it should.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nSome modules I depend on import modules like that, perhaps even in more dynamic ways. It's not always possible to make those packages WebPack-compatible (just [`import-lazy`](https://www.npmjs.com/package/import-lazy) alone has ~4M+ weekly downloads, we can't update all the packages depending on it), but WebPack should still be smart enough to bundle our code correctly.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nSolving this without requiring any modification at all to existing packages might be impossible, as I think WebPack would have to start executing the code it's trying to bundle in a very smart way.\r\n\r\nBut perhaps there could be a way for modules like `import-lazy` to tell WebPack: \"This function may require the following modules when such and such happen\", maybe some magic comment like:\r\n\r\n```js\r\nfunction importLazy ( originalRequire ) { /* webpack-interface: () => require */\r\n  return function lazyRequirer ( pkg ) {\r\n    return originalRequire ( pkg );\r\n  };\r\n}\r\n```\r\n\r\nCould instruct webpack to treat it as if it was the provided code or something? And then WebPack could figure out that if `foo` and `bar` modules are being passed through that code they are eventually going to get required, so it can include those modules in the bundle too.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nI'm not sure I'd be able to implement this, but maybe I could try \ud83e\udd37\u200d\u2642 ", "labels": [], "number_of_comments": 8, "created_at": "2019-05-20 16:56:03", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "445795720": {"author_username": "ifeltsweet", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9149, "title": "fix records revival of used chunk and module ids", "body": "When running webpack in watch mode or using portable records, revival of chunk and module ids happens correctly but after it `usedChunkIds` and `usedModuleIds` are assigned values from the records instead from what has actually been revived. It turns out to be that even if nothing is revived, `usedChunkIds` and `usedModuleIds` will be equal to values from previous compilation taken from records \u2013 this is clearly not intended.\r\n\r\nBecause of this, chunk ids will change on every compilation if running in watch mode or using portable records.\r\n\r\nI believe it closes https://github.com/webpack/webpack/issues/8419\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nbugfix\r\n\r\n**Did you add tests for your changes?**\r\n\r\nshould be covered by existing tests\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nnothing\r\n", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 3, "created_at": "2019-05-19 08:52:10", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "445157506": {"author_username": "FranckFreiburger", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9142, "title": "access compiler's resolver in the \"externals\" configuration option", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nGive the ability for configuration externals function to access current compiler's resolver.\r\n```\r\n{\r\n\ttarget: 'node',\r\n \texternals: [\r\n\t\tfunction({ context, request, resolve}, callback) { ...\r\n\r\n```\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\n1/ More accurate filtering modules contained in `node_modules` using compiler's resolver.\r\n2/ create a list of packages that are required but not bundled.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nNow that externals function is able to support more information (https://github.com/webpack/webpack/pull/8533), it should be fine to add a \"resolve\" property to { context, request } argument.\r\n\r\neg. `resolve(context, request)` -> full path of the request\r\n\r\n_edit_: unfortunately it seems that the resolver is not available easily.\r\n\r\n**Are you willing to work on this yourself?**\r\nwhy not\r\n", "labels": [], "number_of_comments": 5, "created_at": "2019-05-16 20:59:33", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "443144286": {"author_username": "joeldenning", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9119, "title": "Exposing System.register _context variable to bundled code.", "body": "**Motivation**\r\n\r\nThe motivation for this change is discussed in https://github.com/systemjs/systemjs/issues/1939.\r\n\r\nThe change allows users to do things like the following:\r\n```js\r\n// Set the public path on the fly, depending on the dynamic URL that SystemJS downloaded\r\n// this bundle from\r\nconst dynamicUrl = __system_context__.meta.url\r\n__webpack_public_path__ = dynamicUrl.slice(0, dynamicUrl.lastIndexOf('/') + 1)\r\n```\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nFeature. This allows webpack users to use the [_context argument provided to System.register bundles](https://github.com/systemjs/systemjs/blob/master/docs/system-register.md#format-definition).\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nWe need to document that `__system_context__` is a variable available to those bundling to `output.libraryTarget: \"system\"`.\r\n", "labels": ["PR: CI-ok", "PR: review-outdated"], "number_of_comments": 18, "created_at": "2019-05-12 20:34:50", "reactions": {"total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "442761409": {"author_username": "villesau", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9114, "title": "ProfilingPlugin crashes with devserver and in watch mode", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using ProfilingPlugin and run webpack in `--watch` mode or devserver, following error is thrown:\r\n\r\n```\r\n 98% after emitting(node:79437) UnhandledPromiseRejectionWarning: Error [ERR_INSPECTOR_NOT_CONNECTED]: Session is not connected\r\n    at Session.post (inspector.js:75:13)\r\n    at Promise (/Users/path/to/code/node_modules/webpack/lib/debug/ProfilingPlugin.js:54:25)\r\n    at new Promise (<anonymous>)\r\n    at Profiler.sendCommand (/Users/path/to/code/node_modules/webpack/lib/debug/ProfilingPlugin.js:53:11)\r\n    at Profiler.stopProfiling (/Users/path/to/code/node_modules/webpack/lib/debug/ProfilingPlugin.js:76:15)\r\n    at compiler.hooks.done.tapAsync (/Users/path/to/code/node_modules/webpack/lib/debug/ProfilingPlugin.js:209:21)\r\n    at args (/Users/path/to/code/node_modules/webpack/lib/debug/ProfilingPlugin.js:394:11)\r\n    at AsyncSeriesHook.eval [as callAsync] (eval at create (/Users/path/to/code/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:32:10), <anonymous>:18:1)\r\n    at Watching._done (/Users/path/to/code/node_modules/webpack/lib/Watching.js:97:28)\r\n    at compiler.emitRecords.err (/Users/path/to/code/node_modules/webpack/lib/Watching.js:72:19)\r\n    at Compiler.emitRecords (/Users/path/to/code/node_modules/webpack/lib/Compiler.js:449:39)\r\n    at compiler.emitAssets.err (/Users/path/to/code/node_modules/webpack/lib/Watching.js:53:20)\r\n    at hooks.afterEmit.callAsync.err (/Users/path/to/code/node_modules/webpack/lib/Compiler.js:435:14)\r\n    at AsyncSeriesHook.eval [as callAsync] (eval at create (/Users/path/to/code/node_modules/webpack/node_modules/tapable/lib/HookCodeFactory.js:32:10), <anonymous>:9:1)\r\n    at asyncLib.forEachLimit.err (/Users/path/to/code/node_modules/webpack/lib/Compiler.js:432:27)\r\n    at /Users/path/to/code/node_modules/neo-async/async.js:2760:7\r\n    at done (/Users/path/to/code/node_modules/neo-async/async.js:3450:9)\r\n    at /Users/path/to/code/node_modules/graceful-fs/graceful-fs.js:43:10\r\n    at FSReqWrap.oncomplete (fs.js:141:20)\r\n(node:79437) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)\r\n(node:79437) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\r\n```\r\n\r\nAfter this webpack does not crash completely, but no files are watched anymore. events.json file is produced, but I'm fairly sure it does not contain anything from the point when exception is thrown.\r\n\r\nThis makes it fairly difficult to debug performance issues in incremental builds.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. setup the plugin like in documentation\r\n2. run webpack in watch mode\r\n3. after initial build modify watched file -> error thrown\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nplugin should not crash\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.31.0\r\nNode.js version: v10.15.0\r\nOperating System: macOS 10.14.4\r\nAdditional tools: \r\n\r\n@pleunv seems to be experiencing the same: https://github.com/webpack/webpack/issues/6767#issuecomment-384713454", "labels": ["Send a PR"], "number_of_comments": 5, "created_at": "2019-05-10 14:57:37", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "437435054": {"author_username": "captbaritone", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9067, "title": "Extra tiny chunk created when transitively dynamically importing a module that shadows Node builtin", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\nCreating a dynamic `import()` which either directly or transitively includes a module named `stream` results in an extra, tiny, chunk being generated.\r\n\r\n**What is the current behavior?**\r\n\r\nAn extra chunk (`2.js`) is created:\r\n\r\n```\r\n\u256d\u2500[16:06]: jordaneldredge at Jordans-MBP in ~/projects/stream-bug on master\r\n\u2570\u2500\u27a4 yarn run build\r\nyarn run v1.15.2\r\nwarning package.json: No license field\r\n$ webpack\r\nHash: 2f6b544f06a325bb53cd\r\nVersion: webpack 4.30.0\r\nTime: 1553ms\r\nBuilt at: 04/25/2019 4:07:52 PM\r\n    Asset      Size  Chunks             Chunk Names\r\n     1.js    62 KiB       1  [emitted]\r\n     2.js  98 bytes       2  [emitted]\r\nwebamp.js  2.03 KiB       0  [emitted]  webamp\r\nEntrypoint webamp = webamp.js\r\n [0] multi ./index.js 28 bytes {0} [built]\r\n [1] ./index.js 17 bytes {0} [built]\r\n [5] (webpack)/buildin/global.js 472 bytes {1} [built]\r\n[22] util (ignored) 15 bytes {2} [built]\r\n[24] util (ignored) 15 bytes {2} [built]\r\n    + 28 hidden modules\r\n\u2728  Done in 2.57s.\r\n```\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. Clone `https://github.com/captbaritone/webpack-node-import-bug`\r\n2. cd into repo\r\n3. `yarn`\r\n4. `yarn build`\r\n\r\n**What is the expected behavior?**\r\n\r\nOnly one chunk file.\r\n\r\n**Other relevant information:**\r\nwebpack version:  \"webpack\": \"^4.30.0\", \"webpack-cli\": \"^3.3.1\r\nNode.js version: v11.10.1\r\nOperating System: Mac\r\n\r\nSetting `\"node\": false` in my config resolves this issue, but causes other ones.\r\n\r\nI hit this in [Webamp](https://github.com/captbaritone/webamp) trying to lazy load https://www.npmjs.com/package/music-metadata-browser and https://github.com/Stuk/jszip since they both transitively depend upon `stream`. Music-metadata-browser is actually supplying it's own package [`stream`](https://www.npmjs.com/package/stream) which is browser safe but shadows the Node version.\r\n\r\nSo, a secondary question is: Is it expected that referencing a Node built in that is shadowed in `node_modules` results in getting the `NodeStuffPlugin` version?\r\n\r\n", "labels": ["bug"], "number_of_comments": 4, "created_at": "2019-04-25 23:15:17", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "434744847": {"author_username": "manucorporat", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9047, "title": "fix(parser): add acorn-import-meta plugin", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\nCurrently, any usage of `import.meta` makes the bundler to crash. This PR solves that. This PR does not implement any transformation in the webpack side, instead it just leaves import.meta untouched without crashing.\r\n\r\nRelates with: https://github.com/webpack/webpack/issues/6719\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nIt's a bug fix.\r\n\r\n**Did you add tests for your changes?**\r\n\r\nWIP, asking for feedback before further work!\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNop\r\n", "labels": ["PR: conflict", "PR: reviewed-changes-requested"], "number_of_comments": 10, "created_at": "2019-04-18 12:28:16", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "431324234": {"author_username": "AlexLeung", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9026, "title": "HotModuleReplacementPlugin allow for custom implementations of hotDownloadManifest and hotDownloadUpdateChunk", "body": "## Feature request\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nSometimes you might want to have influence over how the HMR runtime fetches the manifest and update files. For example perhaps in node, you want to perform a XHR request rather than requiring the file from the operating system's file system. Another example: perhaps in a bundle which targets the web, you want the GET request to have some special headers for authentication.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nIn any file which is bundled, there could be a global api where we could register a class which implements some downloadHotFile method, and then this method is called by hotDownloadManifest and hotDownloadUpdateChunk from then on.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes, after some discussion.\r\n", "labels": [], "number_of_comments": 6, "created_at": "2019-04-10 06:24:12", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "430613729": {"author_username": "ChristianIvicevic", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9020, "title": "Webpack unexpectedly watches unrelated files even the ones not imported anywhere", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nWebpack in watch mode is recursively scanning unrelated files in the current working directory and the `src` folder even though none of them should appear in the dependency graph and they don't happen to be imported in any of the files defined by the `entry` config.\r\n\r\nThe result is that even though those files don't end up in the bundle, webpack still attempts to process them and (re)builds take an enormous amount of time since it aparently works on the dependency graph on the \"94% after seal\" step.\r\n\r\nI noticed this issue due to immense build times and because I had some TypeScript errors in certain files in the `src` folder which all of a sudden appeared in the webpack output even though those files are unrelated to the entry file!\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nCreate a simple `foo.ts` file in your root folder and have a `src` folder with an arbitrary amount of source files. In our case this was our entire codebase. The `foo.ts` file should only contain `console.log(\"Foo\");`. Run webpack in watch mode with the following config file:\r\n\r\n```\r\nconst path = require('path');\r\n\r\nmodule.exports = {\r\n    entry: './foo.ts',\r\n    devtool: 'inline-source-map',\r\n    module: {\r\n        rules: [\r\n            {\r\n                test: /\\.tsx?$/,\r\n                use: 'ts-loader',\r\n                exclude: [\r\n                    /node_modules/\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    resolve: {\r\n        extensions: [ '.tsx', '.ts', '.js' ]\r\n    },\r\n    output: {\r\n        filename: 'bundle.js',\r\n        path: path.resolve(__dirname, 'dist')\r\n    }\r\n};\r\n```\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nThe bundle will only contain the `foo.ts` output and be built in merely milliseconds instead of 10+ seconds with our huge codebase in the mentioned `src` folder.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.29.6\r\nNode.js version: 8.10.0\r\nOperating System: macOS 10.14.4\r\nAdditional tools: n/a\r\n", "labels": ["inactive"], "number_of_comments": 20, "created_at": "2019-04-08 19:14:03", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "429683106": {"author_username": "SassNinja", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 9007, "title": "output.filename not working if function", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I use a function for `output.filename` it doesn't work for my dynamic imports: they get emitted as `1.js`, `2.js` etc. with identical chunk value (whereas chunk name is correct)\r\n\r\nIn addition things get worse when I set `optimization.runtime` to `single` what results in even the entries being affected (only `runtime.js` is correct then).\r\n\r\nThe same filename code as string works without problems and emits `foo.js`, `bar.js` etc.\r\n\r\n```javascript\r\n// working\r\nfilename: isProd ? '[name].[chunkhash].js' : '[name].js',\r\n\r\n// not working\r\nfilename: data => isProd ? '[name].[chunkhash].js' : '[name].js',\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1) create `app.js` with dynamic imports\r\n\r\n```javascript\r\n// app.js\r\nconsole.log('[entry] app');\r\nimport(/* webpackChunkName: 'foo' */ './foo').then(mod => console.log(mod.default));\r\nimport(/* webpackChunkName: 'bar' */ './bar').then(mod => console.log(mod.default));\r\n\r\n// foo.js\r\nexport default '[dynamic] foo';\r\n\r\n// bar.js\r\nexport default '[dynamic] bar';\r\n```\r\n\r\n2) change `output.filename` to function and run webpack via node api\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect no difference when filename function returns the same string I've used for filename string before.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version: 4.29.6\r\nNode.js version: 10.15.0\r\nOperating System: macOS Mojave (10.14)\r\nAdditional tools: -\r\n", "labels": ["Send a PR"], "number_of_comments": 16, "created_at": "2019-04-05 10:17:05", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "427374467": {"author_username": "jantimon", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8982, "title": "Add FileSystemInfo to Webpack4", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\nAs @sokra [announced](https://github.com/jantimon/html-webpack-plugin/issues/1129#issuecomment-456078898) Webpack 5 will come with the new `FileSystemInfo` Api to help developers find out which files have changed since the last build.\r\n\r\nI really like the API design a lot and I believe it is a great improvement over the previous way to access it using `compiler.fileDependencies` directly and do the diffing by yourself.\r\n\r\nCould you please help us plugin developers to provide a good upgrade path?  \r\nIt would be awesome to deprecate `compiler.fileDependencies` in webpack 4 and provide the `FileSystemInfo` Api also for webpack 4.\r\nWhat do you think?\r\n\r\nThat way I could already solve [html-webpack-plugin compatibility with webpack 4 & 5](https://github.com/jantimon/html-webpack-plugin/issues/1129) issue and provide support not only for webpack 5 but also for all who have not the time/money to upgrade from webpack 4.", "labels": ["Send a PR"], "number_of_comments": 12, "created_at": "2019-03-31 09:03:21", "reactions": {"total_count": 6, "+1": 4, "-1": 0, "laugh": 0, "heart": 2, "hooray": 0}}, "426267450": {"author_username": "onlybye", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8972, "title": "contenthash is inconsistent while build on multi machine", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nwe have deployed our webapp via two servers , index.html and static files are build and deployed seperately.when we apply the contenthash of webpack4.29.6, we found that the content hash of vendors and app are different when builded on multi machines, and some other cachegroup is same,such as angular. we have apply the  HashedModuleIdsPlugin and NamedChunksPlugin, and the content is defenitily identical\u3002It's really confuse us.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nwebpack cacheGroups:\r\n        optimization: {\r\n            runtimeChunk: 'single',\r\n            splitChunks: {\r\n                cacheGroups: {\r\n                    vendor: {\r\n                        name: \"vendor\",\r\n                        test: /[\\\\/]node_modules[\\\\/]/,\r\n                        chunks: \"all\",\r\n                        priority: 10\r\n                    },\r\n                    angular: {\r\n                        name: \"angular\",\r\n                        test: /[\\\\/]node_modules[\\\\/]angular/,\r\n                        chunks: \"all\",\r\n                        priority: 11\r\n                    },\r\n\r\n                }\r\n            }\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nwhen build on multi machines, the contenthash can keep identical.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.29.0\r\nNode.js version: 11.12.0\r\nOperating System: windows or linux\r\nAdditional tools:\r\n\r\n\r\n@sokra ", "labels": [], "number_of_comments": 9, "created_at": "2019-03-28 02:35:23", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "424593972": {"author_username": "melan0802", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8952, "title": "Can't find options with ident 'ref--*-*' when Rule.use is a function", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWhen Rule.use is a function that return UseEntry **With Options**, the compilation failed with error \"Can't find options with ident 'ref--4-1'\"\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n`webpack.config.js`\r\n```\r\nconst path = require('path')\r\nmodule.exports = {\r\n  mode: 'production',\r\n  entry: './index.js',\r\n  output: {\r\n    path: path.resolve(__dirname, './dist')\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.css/,\r\n        use (info) {\r\n          return [\r\n            'style-loader',\r\n            {\r\n              loader: 'css-loader',\r\n              options: {\r\n                url: true\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nbehavior like it is a UseEntry Array\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.29.6\r\nNode.js version: 10.15.3\r\nOperating System: Windows 10\r\n\r\nCheck out the source and pretty sure it's a bug in RuleSet.js , the options references as RuleSet.references is assigned only when rule.use is an array. Should I make an PR?\r\n", "labels": ["Send a PR"], "number_of_comments": 13, "created_at": "2019-03-24 09:46:22", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "424579687": {"author_username": "Apidcloud", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8951, "title": "Possible bug with tree shaking between packages", "body": "# Bug report\r\n\r\nI have also posted this issue on stackoverflow, because I don't know for sure if it's a bug or the expected behaviour: https://stackoverflow.com/questions/55320774/webpack-tree-shaking-not-working-between-packages\r\n\r\n**What is the current behavior?**\r\nTree shaking doesn't seem to be working between packages. But it works for an individual package. \r\n\r\nBefore going further, I have created a minimum repro that I will explain throughout this issue: https://github.com/Apidcloud/tree-shaking-webpack\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nFor simplicity sake, the example above just uses webpack. **Babel is not used**.\r\nAlso, despite not using real dependencies between the packages in the above example, the behaviour is exactly the same. I tried that (including its own `webpack.config.js` and `package.json`) and the behaviour is the same.\r\n\r\nThe above example has **two packages**, both with their respective bundle:\r\n\r\n- `core` - exports 2 functions, `cube` and `unusedFn`\r\n- `consumer` - imports `cube` from `core` and exports its own function, `consumerFn`\r\n\r\n## Core Package - **tree shaking works for this one**\r\n\r\n![image](https://user-images.githubusercontent.com/3720818/54875622-fd98f000-4dc7-11e9-99f9-de45116724c7.png)\r\n\r\nNote that `square` function is not exported in the `index.js` file. It's a way to know that tree shaking is indeed working within `core` at least, as it's not included in the final bundle (which is correct).\r\n\r\n## Consumer Package - **doesn't seem to work for this one**\r\n\r\n![image](https://user-images.githubusercontent.com/3720818/54875631-3638c980-4dc8-11e9-8689-8bc4360df406.png)\r\n\r\nAs you can see, only `cube` is being imported from `core`. It then exports its own function (`consumerFn`) consuming `cube`.\r\n\r\n## Webpack config\r\n```javascript\r\nconst path = require('path');\r\n\r\nmodule.exports = {\r\n  mode: 'production',\r\n  entry: {\r\n    core: './src/index.js',\r\n    consumer: './consumer/index.js'\r\n  },\r\n  output: {\r\n    filename: '[name].js',\r\n    path: path.resolve(__dirname, 'dist'),\r\n    // for simplicity sake I removed the UMD specifics here.\r\n    // the problem is the same, with or without it.\r\n  },\r\n  optimization: {\r\n    usedExports: true,\r\n    sideEffects: true\r\n  },\r\n  stats: {\r\n    // Examine all modules\r\n    maxModules: Infinity,\r\n    // Display bailout reasons\r\n    optimizationBailout: true\r\n  }\r\n};\r\n```\r\n\r\nI also have `\"sideEffects\": false` in the `package.json`. Webpack is also running in `production` mode, and `ES6 modules` are being used despite the ModuleConcatenation plugin's warnings (which in essence might have a point because the bundle itself doesn't?)\r\n\r\n**What is the expected behavior?**\r\n\r\nThe problem is that the `consumer` bundle is including everything from the `core` bundle. That is, it's **including** `unusedFn` **when it shouldn't** (?), resulting in a bigger bundle.\r\n\r\nUltimately, the goal is to do the same in a monorepo with multiple packages. There's no point on having them if each package is bundling the everything from the others. The goal is to bundle only what's necessary for each package.\r\n\r\nUsing `optimizationBailout` I can see that **ModuleConcatenation** plugin is issuing **some warning messages**. I also used `--verbose` flag:\r\n![image](https://user-images.githubusercontent.com/3720818/54875667-d262d080-4dc8-11e9-8b7e-16567e33ca23.png)\r\n\r\nAnd here are the sizes of the bundles:\r\n![image](https://user-images.githubusercontent.com/3720818/54875708-66349c80-4dc9-11e9-8fc6-d285b06ed793.png)\r\n\r\nAs you can see, `consumer` almost doubles `core`, because it's essentially including unused functions within. I have been on this for couple days, but can't tell whether this is a bug or not.\r\n\r\n**Other relevant information:**\r\nwebpack version: 4.29.6\r\nwebpack-cli version: 3.3.0\r\nNode.js version: 8.15.0", "labels": [], "number_of_comments": 3, "created_at": "2019-03-24 06:17:43", "reactions": {"total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "423574307": {"author_username": "Miaoxingren", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8934, "title": "Dynamic import from node_modules is not working", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nI made a vue component package `my-custom-comp`, which contains dynamic import:\r\n`my-custom-comp.vue`\r\n```\r\n<template>\r\n  <component v-if=\"id && data\" :is=\"`list-${id}`\" :data=\"data\" />\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: ['id','data'],\r\n  components: {\r\n    'list-1': () => import(/* webpackChunkName: \"MyTaglist0\" */'./list-1.vue'),\r\n    'list-2': () => import(/* webpackChunkName: \"MyTaglist0\" */'./list-2.vue'),\r\n    'list-3': () => import(/* webpackChunkName: \"MyTaglist1\" */'./list-3.vue'),\r\n    'list-4': () => import(/* webpackChunkName: \"MyTaglist1\" */'./list-4.vue')\r\n  }\r\n}\r\n</script>\r\n```\r\nOutput files in lib:\r\n```\r\n  my-custom-comp.common.js\r\n  my-custom-comp.common.MyTaglist0.js\r\n  my-custom-comp.common.MyTaglist1.js\r\n```\r\nI have `my-custom-comp` package installed in my app, and add package path to  `resolve.modules`:\r\n`webpack.config.js`\r\n```\r\nmodule.exports = {\r\n  ...\r\n  resolve: {\r\n    modules: [path.join(__dirname, '../node_modules'), path.join(__dirname, '../node_modules/my-custom-comp/lib')],\r\n  }\r\n  ...\r\n}\r\n```\r\nbut `MyTaglist0.js` can't be resolved:\r\n```\r\nGET http://localhost:8882/my-custom-comp.common.MyTaglist0.js net::ERR_ABORTED 404 (Not Found)\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nHow to resolve dynamic import  from node_modules?\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.28.4\r\nNode.js version: 10.3.0\r\nOperating System: windows\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 11, "created_at": "2019-03-21 05:08:13", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "419651724": {"author_username": "philipwalton", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8896, "title": "Support built-in modules", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nChrome is currently shipping [KV storage](https://developers.google.com/web/updates/2019/03/kv-storage) (behind a flag, origin trial coming soon), which is the first of many planned [built-in modules](https://github.com/tc39/proposal-javascript-standard-library/) on the web.\r\n\r\nThe issue with webpack is that built-in modules are only consumable via native `import` statements, which webpack [does not currently support](https://github.com/webpack/webpack/issues/2933).\r\n\r\nIdeally, a developer would be able to include the following in their source code, and webpack (perhaps with the help of a plugin) would know how to optimally load it.\r\n\r\n```js\r\nimport {storage} from 'std:kv-storage';\r\n\r\nstorage.set('key', 'value');\r\n```\r\n\r\n**What is the motivation or use case for adding/changing the behavior?**\r\n\r\nBuilt-in modules offer a way for developers to import code into their projects with no download, cost. And they're actually usable in production today because they have viable fallback mechanisms:\r\n\r\n*   [Import maps](https://github.com/WICG/import-maps) provide a fallback for browsers that don't support the built-in modules.\r\n*   And <code>[module/nomodule builds](https://philipwalton.com/articles/deploying-es2015-code-in-production-today/)</code> provide a fallback for browsers that don't support imports.\r\n\r\nThe only thing preventing webpack users from using built-in modules in their projects today is that webpack itself doesn't support outputting in module format.\r\n\r\nNote: if you're curious, here's [a small demo](https://rollup-built-in-modules.glitch.me/) ([source code](https://glitch.com/edit/#!/rollup-built-in-modules?path=rollup.config.js:1:0)) of a site using built-in modules (via Rollup) and using the above fallbacks so it works in all browsers. In Chrome 74+ (with the experimental web platform features flag turned on), the built-in module is used. In all other browsers a polyfill is loaded.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nIn my opinion, the best way to enable this would be to add full support for ES module output, eliminating the current ES5 runtime code and depending entirely on `import` statements to load chunks.\r\n\r\nBut since I assume supporting ES module output would be a lot of work, it would be nice if (at minimum) webpack could be configured to preserve unresolved (or external) module import statements.\r\n\r\nI've filed [a separate issue for this feature](https://github.com/webpack/webpack/issues/8895). If support were added, I think it would make it possible (albeit in a slightly hackish way) for webpack users to use built-in modules in their bundles while we wait for proper ES module support.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nI'm willing to help, but cannot commit to full implementation.\r\n", "labels": [], "number_of_comments": 3, "created_at": "2019-03-11 19:48:15", "reactions": {"total_count": 30, "+1": 30, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "419651399": {"author_username": "philipwalton", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8895, "title": "Add support for ES modules in the externals configuration option", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nWebpack currently supports the concept of [externals](https://webpack.js.org/configuration/externals) but it only allows the forms: `root`, `commonjs`, `commonjs2`, and `amd`.\r\n\r\nThis is a problem if my source code depends on a third-party library that is hosted on a CDN (in ES module format).\r\n\r\nFor example, the following does not currently work with webpack:\r\n\r\n```js\r\nimport {externalLibrary} from 'https://cdn.com/externalLibrary.mjs';\r\n\r\n// Do something with `externalLibrary`.\r\nexternalLibrary.init();\r\n```\r\n\r\n**What is the motivation or use case for adding/changing the behavior?**\r\n\r\nNow that most browsers natively support loading modules via `import` statements in [module scripts](https://developers.google.com/web/fundamentals/primers/modules#module-vs-script), it should be possible to leverage this feature while still bundling with webpack.\r\n\r\nWebpack already has the notion of external dependencies, it should be possible to do the same with external module dependencies.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nExternal imports could be placed at the top of each chunk, and their exported variables could be renamed as necessary to ensure no collisions with existing chunk code.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nI'm willing to help, but cannot commit to full implementation. I looked into whether it would be possible to implement this via a plugin, and it didn't seem like it's currently possible.\r\n", "labels": ["Send a PR"], "number_of_comments": 2, "created_at": "2019-03-11 19:47:27", "reactions": {"total_count": 16, "+1": 16, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "419093009": {"author_username": "nathan", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8889, "title": "Module ids with trailing slash inconsistent with node.js behavior", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n`require('some-module/')` resolves to `node_modules/some-module.js` in webpack, while node resolves this to `node_modules/some-module/index.js` because of the trailing slash.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nHere is a minimal example: https://gist.github.com/nathan/972d601c02fcf4cde50c43a3b91a5d9a\r\n\r\nNote that `require('./local/')` with a trailing slash matches node's behavior, while `require('mod/')` doesn't. `require('mod/subdir/')` is also inconsistent with node.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nWebpack should match the node behavior and respect the trailing slash in `require('some-module/')`.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.29.6\r\nNode.js version: 11.11.0\r\nOperating System: macOS 10.14.3\r\nAdditional tools: none", "labels": ["bug"], "number_of_comments": 5, "created_at": "2019-03-09 17:03:45", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "418872600": {"author_username": "tstirrat15", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8886, "title": "Library included multiple times in bundle code", "body": "# Bug report\r\n\r\n## Note\r\nThis is a similar issue to #2134, but the context is not exactly the same, so I chose to open another issue.\r\n\r\n## What is the current behavior?\r\nHere's the configuration for the server bundle: https://gist.github.com/tstirrat15/38a1ab2b768406496284d5fdfbef63a6\r\n\r\nWhen I run our production build and inspect the output, I see:\r\n\r\n```javascript\r\n// ...\r\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\r\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\r\n// ...\r\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\r\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\r\n// ...\r\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);\r\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\r\n// ...\r\n```\r\nWhere `__webpack_require__(0)` is:\r\n```javascript\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __webpack_require__(__webpack_require__.s = 868);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = require(\"react\");\r\n\r\n/***/ }),\r\n// ...\r\n```\r\n\r\nThis indicates that there are at least 3 instances of React floating around during execution. This hasn't been a problem in the past, but with recent changes to the React context API, React now needs to be a singleton.\r\n\r\nIn #2134, I found a recommendation to use `optimization: { runtimeChunk: 'single' }`, and when I tried that, I only found a single instance of React in the bundle, which was good. However, running `node build/server.js` immediately exited 0 without waiting for requests.\r\n\r\nIs there something obvious that I'm missing? If so, I'd be happy to add it to documentation.\r\n\r\n## If the current behavior is a bug, please provide the steps to reproduce.\r\nI don't have a minimal repro yet. My impression is that it's the result of the confluence of a bunch of different things, rather than an easily localized bug.\r\n## What is the expected behavior?\r\nA single instance of React, or a working server build with `runtimeChunk: 'single'`.\r\n\r\n## Additional context\r\n* This is an isomorphic React app, with the majority of code being shared between frontend and backend, using two different entrypoints.\r\n* We make extensive use of code-splitting\r\n\r\nPlease let me know if there's any additional context that would be helpful.\r\n\r\n## Other relevant information:\r\nwebpack version:  4.29.6\r\nNode.js version: 8.15.1\r\nOperating System: Ubuntu\r\nAdditional tools: (like?)", "labels": [], "number_of_comments": 12, "created_at": "2019-03-08 17:00:26", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "418205512": {"author_username": "Piero87", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8876, "title": "Webpack code splitting, code not executed by browser", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\nAfter using webpack to have code splitting the code is not being executed by the browser, nothing happens.\r\n\r\n**What is the current behavior?**\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n\r\n```\r\nconst webpack = require('webpack');\r\nconst path = require('path')\r\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\r\n\r\nmodule.exports = {\r\n    mode: \"development\",\r\n    entry: {\r\n        main: './js/main.js',\r\n        login: './js/apps/login/login_app.js',\r\n    },\r\n    output: {\r\n        path: __dirname + '/dist',\r\n        filename: '[name].[hash].js'\r\n    },\r\n    optimization: {\r\n        splitChunks: {\r\n            chunks: 'all',\r\n            cacheGroups: {\r\n                vendors: {\r\n                    name: 'vendors',\r\n                    chunks: 'all',\r\n                    enforce: true,\r\n                    priority: 1,\r\n                    test(module, chunks) {\r\n                        const name = module.nameForCondition && module.nameForCondition();\r\n                        return chunks.some(chunk => chunk.name === 'main' && /node_modules/.test(name));\r\n                    }\r\n                },\r\n                main: {\r\n                    name: 'main',\r\n                    chunks: 'all',\r\n                    enforce: true,\r\n                    priority: 0,\r\n                    test(module, chunks) {\r\n                        return chunks.some(chunk => chunk.name === 'main');\r\n                    }\r\n                },\r\n                login: {\r\n                    name: 'login',\r\n                    chunks: 'all',\r\n                    enforce: true,\r\n                    priority: 0,\r\n                    test(module, chunks) {\r\n                        return chunks.some(chunk => chunk.name === 'login');\r\n                    }\r\n                },\r\n            }\r\n        }\r\n    },\r\n    resolve: {\r\n        extensions: ['*', '.js', '.jsx'],\r\n        modules: ['js', 'node_modules'],\r\n        alias: {\r\n            \"backbone\": path.join(__dirname, 'node_modules', 'backbone', 'backbone'),\r\n            \"spin.jquery\": 'lib/spin.jquery',\r\n            \"datetimepicker\": 'lib/datetimepicker',\r\n            \"common-behavior\": 'common/common_behavior',\r\n            \"utilities\": 'common/utilities',\r\n            \"storage\": 'models/storage',\r\n            \"local_storage\": 'local_storage',\r\n            \"session_storage\": 'session_storage',\r\n            \"cookie_storage\": 'cookie_storage',\r\n            \"head_app\": 'apps/head/head_app',\r\n            \"pages\": 'pages',\r\n            \"header_app\": 'apps/header/header_app',\r\n            \"footer_app\": 'apps/footer/footer_app',\r\n            \"views\": 'common/views',\r\n            \"search_activity_app\": 'apps/search/search_activity_app',\r\n            \"calendar\": 'components/calendar/calendar',\r\n            \"calendar-render\": 'components/calendar/calendar.render',\r\n            \"calendar-costants\": 'components/calendar/calendar.costants',\r\n            \"components-utils\": 'components/utils',\r\n            \"dropdown\": \"components/dropdown/dropdown\",\r\n            \"dropdown-render\": \"components/dropdown/dropdown.render\",\r\n            \"dropdown-constants\": \"components/dropdown/dropdown.constants\",\r\n            \"handlebars\": 'handlebars/dist/handlebars.min.js',\r\n            \"bootstrap-datetimepicker\": 'lib/bootstrap-datetimepicker.min',\r\n            \"bootstrap-select\": \"lib/bootstrap-select\",\r\n            \"jasny-bootstrap\": \"jasny-bootstrap/dist/js/jasny-bootstrap.min.js\",\r\n            \"card\": 'lib/jquery.card',\r\n        }\r\n    },\r\n    module: {\r\n        rules: [\r\n            { test: /pages/, loader: 'imports-loader?head_app' },\r\n            { test: /views/, loader: 'imports-loader?head_app' },\r\n            { test: /footer_app/, loader: 'imports-loader?head_app' },\r\n            { test: /header_app/, loader: 'imports-loader?head_app' },\r\n            { test: /spin.jquery/, loader: 'imports-loader?jquery,spin' },\r\n            { test: /bootstrap-datetimepicker/, loader: 'imports-loader?bootstrap,moment' },\r\n            { test: /bootstrap-select/, loader: 'imports-loader?bootstrap' },\r\n            { test: /jasny-bootstrap/, loader: 'imports-loader?jquery,bootstrap' },\r\n            {\r\n                test: /\\.(js|jsx)$/,\r\n                exclude: /node_modules/,\r\n                use: ['babel-loader']\r\n              }\r\n        ]\r\n    },\r\n    plugins: [\r\n        //new BundleAnalyzerPlugin()\r\n        new webpack.ProvidePlugin({\r\n            $: \"jquery\",\r\n            jQuery: \"jquery\"\r\n           })\r\n      ]\r\n}\r\n```\r\n\r\nThat generate these files:\r\n\r\n```\r\nmain.ca06beb99f4c5bcd9ee2.js\r\nvendors.ca06beb99f4c5bcd9ee2.js\r\nlogin.ca06beb99f4c5bcd9ee2.js\r\n```\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nIn my project I don't have only the login page, I have also other pages and with a router I want load dynamically only the specific build, so for example: i visit the /home page i want load home.js etc..\r\n\r\nSo my question are:\r\n\r\n1.  Why if I import main & vendors nothing happens in browser?\r\n2. With this webpack code splitting Can I then load dynamically only the build of the page when the route match?\r\n3. all page code use node_modules libs, for example login_app use some node_modules. where these node modules are added? in the vendors? inside login.js or in another vendor-login.js? what is the right way and how to achieve it?\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.29.6\r\nNode.js version:  10.15.0\r\nOperating System: MacOS Mojave\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 7, "created_at": "2019-03-07 09:22:10", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "417758795": {"author_username": "JanThiel", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8872, "title": "Display a warning in the browser log for existing window.webpackJsonp on the page when mode = development", "body": "## Feature request\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen there are multiple WebPack compilations on a single page (two ore more total differnt projects being used on the same page e.g.) the code from the later loaded ones will not be executed as you expect. There is a note (kind of) hidden within the docs how to solve it ( https://webpack.js.org/configuration/output/#outputjsonpfunction ) as the **webpackJsonp** object is bound to the window object and will be merged together.\r\n\r\nStrangely, the code *does* execute when being built in ```mode: development```. But this is another riddle to solve...\r\n\r\nFor this Feature Request, I would solely ask for hint (aka colsole.warn) from the code, being built in ```mode: development``` if there already is a ```window.webpackJsonp``` (or ```window.[output.jsonpfunction]```). It should note, that this might lead to unexpected issues or chunks not being executed at all. Maybe also pointing to the ```output.jsonpfunction``` documentation.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nCould have saved me hours of searching and digging in an edge-case that is well known by the developers, documented and technically easy to detect. As there are no obvious errors in this case, it is very hard to trace back if you do not know about the particular **webpackJsonp** name that can and has to be configured. I found this solution more by chance than by debugging.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nIf there already is a window.webpackJsonp object defined and the bundle was built in mode: development, log / warn / error something to the console / log. This should increase developer happiness alot and prevents unexpected errors.\r\n\r\n**Are you willing to work on this yourself?**\r\nmaybe", "labels": [], "number_of_comments": 6, "created_at": "2019-03-06 11:34:55", "reactions": {"total_count": 5, "+1": 3, "-1": 0, "laugh": 0, "heart": 1, "hooray": 0}}, "416926271": {"author_username": "stefanfisk", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8863, "title": "Imports inside template literals breaks when using Babel", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nImports used inside template literal expressions in calls to `require()` are not *mangled* correctly when using `@babel/plugin-transform-template-literals`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nIn this code for example, `module1` in `module1('module2')` is not transformed to the import's variable name.\r\n\r\n```\r\nimport module1 from './module1';\r\n\r\nconst foo = module1;\r\n\r\nrequire(`./${foo('module2')}`);\r\nrequire(`./${module1('module2')}`);\r\n```\r\n\r\nI have created an example project at https://github.com/stefanfisk/webpack-template-literal-bug.\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nThat the import's name is mangled correctly.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.29.6\r\nNode.js version: 11.4.0\r\nOperating System: macOS 10.14.3\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 1, "created_at": "2019-03-04 18:08:04", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "415184478": {"author_username": "lostPixels", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8842, "title": "When multiple entry files are included on a single page, they contain redundant chunks. There is no way to optimize this use case.", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\nWe have a multi-page website that uses Webpack v4. Some pages have entry files. All pages have UI that needs JS to run.\r\n\r\nIn the past, we have had an entry that acts as a global JS initializer. This contains code for the site navigation, modernizr, and other global utilities. This is site level, consider it page agnostic code.\r\n\r\nAdditionally, we have entries for some pages that have additional JS driven UI. The entry files are not mapped to all pages though, so some pages will not have an entry.\r\n\r\nWhen we build our <script> tags, we used to do something like this:\r\n```\r\n<script src='global.bundle.js' />\r\n<script src='mypage.bundle.js' />\r\n```\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\nStack Overflow discussion here: https://stackoverflow.com/questions/54795391/webpack-v4-with-multiple-entries-on-a-single-page-chunks-are-duplicated-unneces?noredirect=1\r\n\r\n**What is the current behavior?**\r\nWe are encountering a bug in Webpack v4 where chunks that are shared between **global** and **mypage** are redundantly included in each bundle. Webpack is not aware that these files exist on the same page together, so it treats them as if they do not have access to eachother. We have been unable to locate a configuration that creates this link. \r\n\r\nWe need this link because we cannot make an entry for each page that imports an init file from **global.js**, and even if we could, it would cause unnecessary overhead. A clear separation of concerns is ideal, where global actions and page-specific actions live in different files and do not reference each other.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nCreate a config with more than one entry, and include both in the same page. Add some imports to files that are used on both entries. Analyze the bundle and you'll find the same chunks in both files.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\nExample config file here: https://gist.github.com/lostPixels/fef3f0cc4a3e99bf526249c605c2096f\r\n\r\n**What is the expected behavior?**\r\nWebpack should optimize the entries to include only one chunk, and share it across multiple entries that live together in one HTML document. The config should offer a way to describe these connections, and not assume that a page can only contain one entry file. \r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.28.4\r\nNode.js version: 9.3.0\r\nOperating System: OSX\r\nAdditional tools: Salesforce Commerce Cloud Ecommerce platform\r\n", "labels": [], "number_of_comments": 8, "created_at": "2019-02-27 15:33:12", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "414975724": {"author_username": "jamesknelson", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8838, "title": "Allow optional `require.resolveWeak()` to fail without warning ", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should be possible to try to `require.resolveWeak()` a module that doesn't exist, *without* emitting a warning.\r\n\r\nE.g. I can already do this:\r\n\r\n```js\r\ntry {\r\n      require.resolveWeak('not-here')\r\n}\r\ncatch (e) {\r\n      // no worries, it was optional anyway\r\n}\r\n```\r\n\r\nAnd webpack will emit a warning:\r\n\r\n```text\r\nModule not found: Can't resolve 'not-here' in '/path/to/app'\r\n```\r\n\r\nI'd like to be able to ask webpack to not show this warning in some cases.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nI'm creating a library that implements a number of extra features when specific packages are available, but the features are all optional. The required packages are on the large side, so I don't want to bundle them unless the user requires them.\r\n\r\nCurrently, optional require using `try/catch` works, but would introduce build warnings to any application that depends on my library unless it requires all of the optional dependencies, which would be rather confusing for users.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nWebpack already marks dependencies as optional when they're inside a `try/catch` block, and switches from an error to a warning in these cases:\r\n\r\n- https://github.com/webpack/webpack/blob/eb6831673afc6fdc109137bec4af47ac96247c5e/lib/dependencies/RequireResolveDependencyParserPlugin.js#L49\r\n- https://github.com/webpack/webpack/blob/6389e41e4c65bf32a916e6fffa5d65f66538d483/lib/Compilation.js#L813\r\n\r\nOne option would be to just stop warning when dependencies are optional. Another would be to create a new function, e.g. `require.resolveWeakOptional()`, that sets a different flag on the dependency object that indicates not to warn:\r\n\r\n```js\r\ntry {\r\n  require.resolveWeakOptional('not-here')\r\n}\r\ncatch (e) {\r\n  // all good.\r\n}\r\n```\r\n\r\nIt may also be desirable to add support for silencing warnings on `import()` with a magic comment.\r\n\r\nI'd be interested to hear any opinions on the best approach.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nYes, just need to know what approach would be most likely to be accepted.", "labels": [], "number_of_comments": 8, "created_at": "2019-02-27 07:08:39", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "414876375": {"author_username": "sandersonatlatitude", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8837, "title": "Amd optimizations (AMD for code-split chunks)", "body": "I am looking to update webpack to increase AMD performance for chunk dependencies.\r\n\r\nSee https://github.com/webpack/webpack/issues/5489\r\n\r\nI have a proof of concept working, but realize it will probably take a some more work to get this PR working correctly. \r\n\r\nTo this end i was hoping I could get some review/ feedback on the best way to proceed.\r\n\r\n", "labels": ["PR: conflict", "PR: unreviewed"], "number_of_comments": 4, "created_at": "2019-02-26 23:50:24", "reactions": {"total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 2}}, "413791823": {"author_username": "sindresorhus", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8826, "title": "Webpack should have a way to ignore `require` calls", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWebpack tries to handle all `require()` calls, even those not meant for browser usage. This makes it almost impossible to have a module that works in both Node.js and the browser, but has some added capabilities in Node.js.\r\n\r\nNote that this is about authoring reusable npm packages, not end-user apps. I don't have the ability to set any Webpack config like the `externals` option since I'm making packages other devs will consume.\r\n\r\nThis is the kind of awfulness we have to do because of Webpack: https://github.com/sindresorhus/ow/blob/d62a06c192b892d504887f0b97fdc842e8cbf862/source/utils/node/require.ts We have wasted countless of hours on this.\r\n\r\nPrior discussion that went mostly ignored by the Webpack team: https://github.com/webpack/webpack/issues/196#issuecomment-354900072\r\n\r\n**What is the expected behavior?**\r\n\r\nI expected to be able to annotate the code to make Webpack ignore certain `require()` calls.\r\n\r\nFor example with a comment:\r\n\r\n```js\r\nconst require('chalk'); // webpack-ignore\r\n```\r\n\r\nI know for certain that this `require()` call will not be used in the browser, so I should be able to have it in my source code without Webpack printing warnings to users or erroring out.\r\n\r\nI need this as a module maintainer (not user).\r\n\r\nTelling users to use the `externals` config is out of the questions, as my package might be a dependency many levels down.\r\n\r\nSome more examples of where I have to use awful code to work around Webpack:\r\n\r\n- https://github.com/sindresorhus/file-type/pull/187/files#diff-168726dbe96b3ce427e7fedce31bb0bcR923\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version: 4.29.0 (applies to any version though)\r\nNode.js version: 10.15.0\r\nOperating System: macOS 10.14.3\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 17, "created_at": "2019-02-24 07:32:44", "reactions": {"total_count": 30, "+1": 30, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "411931482": {"author_username": "linvain", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8811, "title": "Alert loudly if there were errors during build", "body": "## Feature request\r\n\r\nAlert loudly if there were errors during build\r\n\r\n**What is the expected behavior?**\r\n\r\nWebpack should output big red notice at the bottom of the output if there was errors during build\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\n`webpack --watch` output:\r\n\r\n![image](https://user-images.githubusercontent.com/42490556/53018924-a02a2000-3464-11e9-929c-ac8a49f18879.png)\r\n\r\nSeems OK, right? But scroll a bit further:\r\n\r\n![image](https://user-images.githubusercontent.com/42490556/53018990-ccde3780-3464-11e9-814c-531a910eefa1.png)\r\n\r\nVery bad experience. Runtime error in the browser did not give any clue about unresolved imports\r\n\r\n**How should this be implemented in your opinion?**\r\nidk\r\n\r\n**Are you willing to work on this yourself?**\r\nno\r\n", "labels": [], "number_of_comments": 2, "created_at": "2019-02-19 13:47:03", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "409053143": {"author_username": "spalger", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8775, "title": "Using CSP with DLLs", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using the DLLPlugin there is no way to include the `__webpack_nonce__` value as described in https://webpack.js.org/guides/csp/.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n 1. Checkout the reproduction project: https://github.com/spalger/reproduce-issues/tree/master/webpack-dll-csp\r\n 1. Run `npm run start` to build the dll and start webpack-dev-server\r\n 1. Open http://localhost:8080 and see the error message in the console because the DLL is not setup to use the nonce \r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should probably be some way to configure the nonce in the DLL, the best option I've come up with is including a stub file in the DLL that will set the internal `__webpack_require__.nc`, but it makes the code rather brittle as it has to be the first module required in the DLL to be sure it is applied in time for subsequent imports.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.29.3\r\nNode.js version: v10.15.1\r\nOperating System: macOS\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 6, "created_at": "2019-02-12 00:50:24", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "408240367": {"author_username": "extempl", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8762, "title": "`Uncaught SyntaxError: Unexpected token !` with `new Method` usage", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nFails with an expection\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n```\r\nimport Method from 'path/to/unexisting/module';\r\nnew Method();\r\n```\r\nIt will be transpiled to \r\n```\r\nnew !(function webpackMissingModule() { var e = new Error(\"Cannot find module 'path/to/unexisting/module'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(params);\r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nProper exception with proper error message and stack.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.19.1\r\nNode.js version: v10.13.0\r\nOperating System: MacOS\r\n", "labels": [], "number_of_comments": 4, "created_at": "2019-02-08 17:00:47", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "407269636": {"author_username": "sokra", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8743, "title": "update inner dependencies", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\ndeps\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nexisting \r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nnothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 2, "created_at": "2019-02-06 14:47:05", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "401210840": {"author_username": "aberezkin", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8659, "title": "Ability to predefine charset attribute for dynamically imported scripts", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\nIt would be very useful to have an ability to choose file encoding for dynamically imported scripts, since some users (including myself) can use something other than 'utf-8' in their scripts.\r\n\r\n**What is the expected behavior?**\r\n\r\nI think an option in configuration would be perfectly fine. Something like this in `webpack.config.js` should work:\r\n\r\n```\r\nmodule.exports = {\r\n...\r\n  dynamicScripts: {\r\n    encoding: 'maccyrillic',\r\n  },\r\n...\r\n};\r\n```\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nThere's plenty of web pages in the internet that for some reason (mostly legacy code) use encoding different from UTF-8. I'm want to utilize webpack and deferred code loading on site with legacy cyrillic encoding that but I can't because UTF-8 charset for dynamic scripts seems to be hardcoded in webpack core. \r\n\r\nhttps://github.com/webpack/webpack/blob/master/lib/web/JsonpMainTemplatePlugin.js#L155\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nAn option in webpack config that then should be used when injecting `<script>` tags with `import()`.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": [], "number_of_comments": 7, "created_at": "2019-01-21 06:28:44", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "401008117": {"author_username": "mc-zone", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8653, "title": "Fix: resolve index.* for DelegatedModuleFactoryPlugin when using scope", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nThis fixed #8648;\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nbugfix\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nYes.\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo.\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nNothing.\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: conflict", "PR: unreviewed"], "number_of_comments": 3, "created_at": "2019-01-19 15:54:01", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "400647597": {"author_username": "creage", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8648, "title": "DllReferencePlugin cannot consume exposed index.js correctly", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nIn ES6, having an index.js file in a folder lets you perform an import from the folder implicitly without specifying the index.js. \r\n\r\n**DllPlugin** correctly adds such files to **manifest.json**, but when you try to import such module consumed by **DllReferencePlugin** - it fails with error ```Cannot find module```. You have to append ```/index.js``` to the import statement explicitly to workaround this.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n1. Create simple Dll project, having a folder with some module in it, and  ```index.js``` within this folder, which should basically reexport the module\r\n```\r\n// example structure\r\n//--MyModule\r\n//  |_ MyModule.js\r\n//  |_ index.js\r\n```\r\n```javascript\r\n// index.js\r\nexport { default } from './MyModule';\r\n```\r\n\r\n2. Next, create another DllReference project, and try to consume the Dll from the step above\r\n```javascript\r\n// some Dll consumer code\r\nimport MyModule from 'Dll/MyModule'; // FAILS\r\n\r\nimport MyModule from 'Dll/MyModule/index'; // WORKS\r\n```\r\n\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n**DllReferencePlugin** should be able to import such modules correctly if they exist in **manifest.json**\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.28.4\r\nNode.js version: 11.6.0\r\nOperating System: Windows 10", "labels": ["Send a PR"], "number_of_comments": 8, "created_at": "2019-01-18 09:47:20", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "400529264": {"author_username": "TheLarkInn", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8645, "title": "feat(chunk): Introduce asyncChunkMode and default to 'eager'", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nFixes #8644 \r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nFeature\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nNot yet, but we'll get there. \r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nYes.\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\nTechnically this is a breaking change. By default webpack generates in `mode: development` a individual bundle for each use of `import()`. This PR would modify this behavior for the users dev environment to **not** create additional async bundles. \r\n\r\nHowever functionally this may only cause break's on extreme edge cases (strange SSR/mode usages?).\r\n\r\n**What needs to be documented once your changes are merged?**\r\nAddition of a new configuration property\r\n\r\n```\r\nmodule: {\r\n  asnycChunkMode: \"eager\" // (or \"lazy\")\r\n}\r\n```\r\n\r\n\"eager\" is the default for development environment, and \"lazy\" is the default for any other mode.\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: conflict", "PR: reviewed-approved"], "number_of_comments": 13, "created_at": "2019-01-18 01:05:49", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "400511765": {"author_username": "TheLarkInn", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8644, "title": "[webpack-5] Default webpackMode to \"eager\" in `mode: \"development\"`", "body": "# Feature Request\r\nPropose altering the default `webpackMode` for async chunks from \"lazy\" to \"eager\" in `mode: development`. \r\n\r\n## Background\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nIn my work with @MLoughry from the Outlook Web App team (arguably the largest web application deployed at Microsoft), we discovered during the update process from webpack 4 to webpack 5@alpha.6 (or whatever is the current latest build), that their \"inner development loop\" (AKA: Their local dev env using webpack-dev-server and incrementally rebuilding a single entrypoint on each change), that there was a *5-20% build time regression*\r\n\r\nSome of this was alleviated by turning back on `unsafeCache: true` for relevant config properties, but it still wasn't the win's that we were expecting. (Turns out caching really isn't relevant here in watch mode because WDS is using memory-fs anyways). \r\n\r\nSo we decided to do some watch mode profiles to try and identify area's of opportunity or concern for their builds. Below is a screen shot of a CPU Profile Segment starting from a file change, to webpack finishing the incremental compilation: \r\n\r\n![image](https://user-images.githubusercontent.com/3408176/51354873-f113b680-1a69-11e9-8d72-a43b44f980c3.png)\r\n\r\nThis segment shows the incremental rebuild taking 62.779 seconds for a single entrypoint (roughly 16-18k modules). \r\n\r\nUpon further inspection we noticed that ~60% (43.499 seconds) of this time spent was performing \"file creation\". See the sceenshot below which has highlighted `emitFiles` function being called continuously. \r\n\r\n![image](https://user-images.githubusercontent.com/3408176/51354963-4fd93000-1a6a-11e9-8ab6-d0b94d4db3c7.png)\r\n\r\nFor this function to be executing so many times, there would in theory have to be significant amount of chunk generation happening (this is usually caused by a team that is effectively using code-splitting throughout their application). After having @MLoughry scan their usage for that entry he comfirmed that indeed they are using `import()` **over 200-300 times throughout that single entry point**\r\n\r\nThis confirmed my theory that chunk creation via webpack is subjected to _at least_ a O(x) (linear) time complexity. \r\n\r\n**How should this be implemented in your opinion?**\r\nThe development loop time for OWA (consisting of easily 150-300 engineers) incredibly important as reducing time by a factor of 2-3x could mean millions of dollars of wasted engineering cost saved. Therefore, we don't have to focus on performance of the webpage itself when we are in our development evnironment. (Today webpack already makes these awesome tradeoffs via the `mode` feature). \r\n\r\nSince chunk creation is the main cost, we could reduce the number of bundles generated inside the development environment by setting the `webpackMode` for all async bundles to `eager`. This would cause chunks to load still using Promise.resolve (retaining behavior of a `import()`), meanwhile, emitting those modules into the same entry chunk, and not additional lazy bundles. \r\n\r\nTo test this theory, we broke into the `ImportParserPlugin` and modified the default behavior from \"lazy\" to \"eager\". https://github.com/webpack/webpack/blob/4be6797700753a54b223600f01e941580b6a6ba3/lib/dependencies/ImportParserPlugin.js#L32-L36\r\n\r\nThen we ran the exact same profiles to calculate the difference in incremental build times. **The results were astonishing.** Below, is a segmented profile from (once again) file change, to recompilation completion. \r\n\r\n![image](https://user-images.githubusercontent.com/3408176/51355670-b3fcf380-1a6c-11e9-8173-0d6a82bae555.png)\r\n\r\nAs you can see in the highlighted segment, the new incremental build time, from the exact same set of modules was **5.036 seconds**. \r\n\r\nWe then wanted to dig deeper to identify what the cost of the `emitFile` functions were now. See this subsection below: \r\n\r\n![image](https://user-images.githubusercontent.com/3408176/51355736-e4449200-1a6c-11e9-820f-8c6d5675ed1c.png)\r\n\r\nAs seen in the screenshot the cost of file creation has now been reduced to  (.651 seconds) reducing the time complexity to near O(1). \r\n\r\n## Proposal\r\nWith the huge performance gains realized in this research we would like to propose altering the default `webpackMode` to \"eager\" for `mode: development`. The tradeoff's here are a potentially slower *booting* page, however this kind of trade-off is precidented via decisions like `eval` source-maps, not minifying, etc.\r\n\r\nI don't believe that this has the potential to cause a \"functional break\" in development experience for users, because imports will still use `Promise.resolve()` to load modules therefore retaining its async behavior. \r\n\r\n## Implementation Details\r\nIt appears that the \"infrastructure\" is already in place to pass options from the ImportParserPlugin: \r\n\r\nhttps://github.com/webpack/webpack/blob/4be6797700753a54b223600f01e941580b6a6ba3/lib/dependencies/ImportParserPlugin.js#L18-L37\r\n\r\nIn addition options passed from the ImportPlugin also recieve options from WebpackOptionsApply:  \r\n\r\nhttps://github.com/webpack/webpack/blob/4be6797700753a54b223600f01e941580b6a6ba3/lib/dependencies/ImportPlugin.js#L63-L65\r\n\r\nOptions are obtained from the configuration's `options.module` property:\r\n\r\nhttps://github.com/webpack/webpack/blob/4be6797700753a54b223600f01e941580b6a6ba3/lib/WebpackOptionsApply.js#L338-L341\r\n\r\nTherefore, we would update the ImportParserPlugin to set `webpackMode` based on a newly created property in `options.module` called  `defaultAsyncChunkMode;'eager'`. (Similarly we could make this a boolean property as well).\r\n\r\n## Rationale\r\nBy making this a default we hold true to our fundemantals of #0CJS and have sane defaults for development envrionments. If users want to opt out of this behavior, they then have the ability to do so via `options.module.defaultAsyncChunkMode`. **This also reduces builds for scaled builds like OWA by a factor of 7!**\r\n\r\n## Breaking Change Implications\r\nThis would _technically_ be considered a breaking change _behaviorally_ however, we are in webpack@5 alpha and this would be the place to make it. \r\n\r\nFor the ~250 lazy chunks on Outlook Web App, we expect there to be no functional regressions from this change (and intend to test the submitted PR during its review process). \r\n\r\n**Are you willing to work on this yourself?**\r\nBring it on. :smirk:\r\n", "labels": ["enhancement", "webpack-5"], "number_of_comments": 15, "created_at": "2019-01-17 23:44:12", "reactions": {"total_count": 30, "+1": 14, "-1": 0, "laugh": 3, "heart": 5, "hooray": 8}}, "399863072": {"author_username": "Jessidhia", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8637, "title": "HMR support for import() with non-constant request (implicit context)", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n`module.hot.accept(...)` where the first argument is the same as the first argument given to an `import()` should be able to work. Currently, as when the path is not static, it is actually compiled to a trampoline module (`ContextModule#getLazySource`, or `webpackAsyncContext` by default), and as there is no way to delegate HMR to parents, it is not possible to accept hot reloads from modules with dynamic paths.\r\n\r\nIt is technically possible to rewrite it in terms of `require.context` by using the 4th argument, but that loses features like the magic comments and has semantics closer to `require.ensure` instead of `import()`.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nMy use case: hot reloading of translations in development. The specific translation files loaded depend not only on the language setting, but also on the specific page's requirements (`namespace`s in i18next terminology), and the latter is a freeform string that corresponds to a filename.\r\n\r\nFor example, on a backend plugin that loads english:\r\n\r\n```js\r\nif (module.hot) {\r\n  module.hot.accept(`./text/en/${namespace}.yaml`, () => {\r\n    services.backendConnector.reload('en', namespace)\r\n  })\r\n}\r\nreturn (await import(`./text/en/${namespace}.yaml`)).default\r\n```\r\n\r\nThe accepted module id is a correct module id for the reloaded module, but there is a context module in between that prevents the hot reload from being accepted.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nI'm... not sure. I'm not familiar with HMR internals. It'd probably require that context modules get some kind of special treatment by the HMR API, or require that a general purpose API be added to `module.hot` that could then be called by context modules to say that they are \"not part of\" the hot reloading chain of the given modules.\r\n\r\nThis could probably be made slightly easier by converting the context modules to ES modules.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nProbably not, at least not now.", "labels": [], "number_of_comments": 6, "created_at": "2019-01-16 15:31:25", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "398578848": {"author_username": "hulkish", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8617, "title": "deprecation warnings should be mocked or thrown in tests", "body": "Currently, I don't think we are accounting for deprecations much in our tests. There are some legit cases (Such as `ProfilingPlugin`) where these deprecation warnings are actually of webpack code itself. \r\n\r\nGiven, this is expected considering lots of new stuff in `next` branch. This pr is meant to bring vision to those deprecations in tests - by forcing a `jest.mock('util', { deprecate: ...` or letting the deprecation fail the test by throwing.\r\n\r\nWith this change, here is an example of what to expect:\r\n```sh\r\n FAIL  test/ProfilingPlugin.test.js\r\n  Profiling Plugin\r\n    \u2715 should handle output path with folder creation (520ms)\r\n\r\n  \u25cf Profiling Plugin \u203a should handle output path with folder creation\r\n\r\n    DeprecationWarning: Compilation.hooks.normalModuleLoader was moved to NormalModule.getCompilationHooks(compilation).loader\r\n\r\n      220 | \t */\r\n      221 | \tconstructor(compiler) {\r\n    > 222 | \t\tconst getNormalModuleLoader = () => deprecatedNormalModuleLoaderHook(this);\r\n          | \t\t                                    ^\r\n      223 | \t\tthis.hooks = Object.freeze({\r\n      224 | \t\t\t/** @type {SyncHook<Module>} */\r\n      225 | \t\t\tbuildModule: new SyncHook([\"module\"]),\r\n\r\n      at getNormalModuleLoader (lib/Compilation.js:222:39)\r\n      at Object.get normalModuleLoader [as normalModuleLoader] (lib/Compilation.js:424:12)\r\n      at Object.keys.forEach.hookName (lib/debug/ProfilingPlugin.js:308:18)\r\n          at Array.forEach (<anonymous>)\r\n      at interceptAllHooksFor (lib/debug/ProfilingPlugin.js:307:31)\r\n      at compiler.hooks.compilation.tap (lib/debug/ProfilingPlugin.js:192:5)\r\n      at args (lib/debug/ProfilingPlugin.js:407:13)\r\n      at SyncHook.eval (eval at create (node_modules/tapable/lib/HookCodeFactory.js:19:10), <anonymous>:9:1)\r\n      at SyncHook.lazyCompileHook (node_modules/tapable/lib/Hook.js:154:20)\r\n      at Compiler.newCompilation (lib/Compiler.js:531:26)\r\n```\r\n\r\nIf you dig . into ProfilingPlugin code, you will see this is caused by `ProfilingPlugin` accessing the `normalModuleFactory` hook - which is now a getter/deprecated.\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nci\r\n\r\n**Did you add tests for your changes?**\r\n\r\nN/A\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nN/A\r\n", "labels": ["PR: conflict", "PR: unreviewed"], "number_of_comments": 3, "created_at": "2019-01-12 18:22:09", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "398177269": {"author_username": "JanJakes", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8614, "title": "Add preserveEntrypoint option to splitChunks cacheGroups (rebased)", "body": "This is just a fork of #7242 rebased on master since the original pull request was not rebased.\r\n\r\nFixes #7230, closes #7242.", "labels": ["PR: CI-not-ok", "PR: unreviewed"], "number_of_comments": 11, "created_at": "2019-01-11 08:15:58", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "397026938": {"author_username": "defcc", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8604, "title": "feat(config): make `output.library` accept functions", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\nFeature, closes #7904 \r\n\r\n**Did you add tests for your changes?**\r\nYes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n`output.library`, `output.libraryExport` can now accept function.\r\n\r\n------------\r\nThis PR is based on the works of @byzyk #8000 \r\n@byzyk @sokra Will you please help to review the changes? Thanks a lot.\r\n", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 5, "created_at": "2019-01-08 18:19:52", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "396245724": {"author_username": "Roaders", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8594, "title": "\"target\" ignored when specified in custom angular builder", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nWhen specifying `target=\"electron-renderer\"` as part of a customsed Angular 7 build this is ignored and errors are thrown on `fs` or `path` imports\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n* checkout https://github.com/Roaders/angular-electron-chrome/tree/custom-webpack\r\n* run `npm run build` to get errors\r\n* run `npm run webpack` to run a working equivalent webpack build\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nIt should resepct the `target=\"electron-renderer\"` and successfully compile an application that import node functionality such as `fs` and `path`\r\nI have verified that the config pass to webpack in both example builds has the same value for \"target\"\r\n\r\n**Other relevant information:**\r\nAngular CLI: 7.1.4\r\nNode: 10.14.1\r\nOS: win32 x64\r\nAngular: 7.1.4\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... language-service, platform-browser, platform-browser-dynamic\r\n... router\r\n\r\nPackage                           Version\r\n-----------------------------------------------------------\r\n@angular-devkit/architect         0.11.4\r\n@angular-devkit/build-angular     0.11.4\r\n@angular-devkit/build-optimizer   0.11.4\r\n@angular-devkit/build-webpack     0.11.4\r\n@angular-devkit/core              7.1.4\r\n@angular-devkit/schematics        7.1.4\r\n@ngtools/webpack                  7.1.4\r\n@schematics/angular               7.1.4\r\n@schematics/update                0.11.4\r\nrxjs                              6.3.3\r\ntypescript                        3.1.6\r\nwebpack                           4.28.3\r\n", "labels": ["inactive"], "number_of_comments": 1, "created_at": "2019-01-06 10:20:53", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "395873962": {"author_username": "gitgrimbo", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8589, "title": "Better error message when resolveLoader alias not found", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nIf I have some webpack config that wants to alias references to a \"i18n\" loader to another loader module...\r\n\r\n```\r\nresolveLoader: {\r\n  alias: {\r\n    \"i18n\": \"amdi18n-loader-DELIBERATE-ERROR\",\r\n  },\r\n},\r\n```\r\n\r\nand there is a mistake (e.g. typo) in the target module name (as above), then the error is\r\n\r\n```\r\nERROR in ./webapp/modules/preview/harModel.js\r\nModule not found: Error: Can't resolve 'i18n' in 'D:\\dev\\git_repos\\harviewer\\harviewer-react\\webapp\\modules\\preview'\r\n @ ./webapp/modules/preview/harModel.js 8:0-365:2\r\n @ ./webapp/demo.js\r\n @ multi (webpack)-dev-server/client?http://localhost:8080 (webpack)/hot/dev-server.js whatwg-fetch ./webapp/demo.js\r\n```\r\n\r\nAlthough this error correctly tells me there is a problem with loading the \"i18n\" loader, I would like the error to tell me that the target module was not found (and maybe where webpack tried to find it).\r\n\r\nThe correct config is\r\n\r\n```\r\nresolveLoader: {\r\n  alias: {\r\n    \"i18n\": \"amdi18n-loader\",\r\n  },\r\n},\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nSee above.\r\n\r\n**What is the expected behavior?**\r\n\r\nMore detailed error message.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nMore detailed error message.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n\r\n- Windows 10\r\n- Node v11.3.0\r\n-    \"webpack\": \"^4.28.3\",\r\n-    \"webpack-cli\": \"^3.2.0\",\r\n-    \"webpack-dev-server\": \"^3.1.14\"\r\n", "labels": [], "number_of_comments": 7, "created_at": "2019-01-04 10:16:59", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "395097464": {"author_username": "mc-zone", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8579, "title": "[WIP] Feature: support universal target", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nThis PR try to resolve #6525.\r\nAlso resolve #6522.\r\n\r\nWIP: Because of my knowledge of the whole internal code is inadequate, currently is working in progress, and some detail needs more advice and discussion.\r\n\r\n## the things should be done (AFAIK):\r\nAfter digging into the code, I think these two big things should be done to achieve this feature:\r\n- MainTemplate: Add all runtime codes that may be used, but enable them conditionally at runtime.\r\n- ChunkTemplate: Also like the main, first should pack all runtime loaders (JsonpArray, Jsonp, exports) wrapped with conditions into chunks, and hoist the chunk modules alone, then choose correct way to export them at runtime.\r\n\r\n## Current implementation:\r\nthe steps of my implementation now:\r\n- Add a new \"universal\" target.\r\n- Apply all `web/webworker/node` templates, and a new `universal` template additionally at the new target:\r\n  - UniversalTemplatePlugin (new)\r\n  - JsonpTemplatePlugin\r\n  - WebWorkerTemplatePlugin\r\n  - NodeTemplatePlugin\r\n  - TODO: any others ?\r\n- Add a new runtime variable `__webpack_require__.env`(`RuntimeGlobals.environment`) to figure out the environment type of runtime.\r\n- Add `RuntimeGlobals.environment` to `runtimeRequirements` while `UniversalTemplatePlugin` applied.\r\n- Change `**RuntimeModule` that used for each kind of template, wrap a checker by `__webpack_require__.env` for their runtime code:\r\n```javascript\r\nreturn shouldCheckEnvironment\r\n  ? Template.asString([\r\n    `if(${RuntimeGlobals.environment} === \"web\") {`,\r\n    Template.indent(runtimeCodeLines),\r\n    \"}\"\r\n  ])\r\n  : Template.asString(runtimeCodeLines);\r\n```\r\n- Add `UniversalChunkTemplatePlugin`, make chunk modules render hoisted first and before other chunkTemplates render.\r\n- Change other `**ChunkTemplatePlugin`, wrap a condition to original chunk source  when`options.target === \"universal\"`.\r\n```javascript\r\nif (target === \"universal\") {\r\n  return new ConcatSource(\r\n    previousSource,// chunk modules has been hoisted in here\r\n    `if(__universal_env__ === \"web\") {`,\r\n    new PrefixSource(\"\\t\", source),\r\n    \"}\"\r\n  );\r\n}\r\nreturn source;\r\n```\r\n- Finally, different runtime type runs different runtime code, both of `main` an `chunk`.\r\n\r\n## Current problems (need help):\r\n\r\n### Should `NodeSourcePlugin` be added? \r\n\"universal\" includes node support.\r\n\r\n### How to put or reference `__webpack_require__.xxx` runtime globals to each chunk? Or any other ideas?\r\nBecause now both `main` and `chunk` need to check environment type at runtime. I have to re-create a useless `RuntimeModule` instance in `ChunkTemplatePlugin` to reuse the runtime check code, and also created some global variables like `__universal_env__`:\r\n```javascript\r\nconst runtimeEnvironment = new EnvironmentRuntimeModule(\r\n  this.compilation,\r\n  \"__universal_env__\"\r\n  ).generate();\r\n//...\r\nsource.add(\"var __universal_env__;\\n\");\r\nsource.add(runtimeEnvironment);\r\n```\r\n\r\n### Avoid `output.globalObject` repetition:\r\nCurrently the `output.globalObject` only support a static value or inline statement, it should be dynamic at \"universal\" occassion, otherwise it will be excute repeatedly, and duplicated with runtime global:\r\n```javascript\r\nvar __universal_env__;\r\nif ((typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this).document !== undefined) {\r\n\t__universal_env__ = \"web\";\r\n} else if (typeof (typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this).importScripts === \"function\") {\r\n\t__universal_env__ = \"webworker\";\r\n} else if ((typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this).process !== undefined) {\r\n\t__universal_env__ = \"node\";\r\n} else {\r\n\t__universal_env__ = \"web\";\r\n}\r\n```\r\n\r\n### Redundant chunkTemplate conditions:\r\nEach chunkTemplate's apply/render logic is separate. For support multiple types of runtime code exist together, I have to add at least two invasive conditions to each render . Any better idea?\r\n```javascript\r\nchunkTemplate.hooks.render.tap(\r\n\"JsonpChunkTemplatePlugin\",\r\n(modules, moduleTemplate, renderContext) => {\r\n  const previousSource = modules;\r\n  if (target === \"universal\") { // conditions 1\r\n    modules = new RawSource(\"__universal_modules__\");\r\n  }\r\n\r\n  // origin source generate...\r\n\r\n  if (target === \"universal\") { // more conditions\r\n    return new ConcatSource(\r\n\tpreviousSource,\r\n\t`if(__universal_env__ === \"web\") {`,\r\n\tnew PrefixSource(\"\\t\", source),\r\n\t\"}\"\r\n    );\r\n  }\r\n  return source;\r\n});\r\n```\r\n\r\n### More: Any other problems?...\r\n\r\ncc @sokra @ooflorent . Looking forward to some advice.\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nFeature\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nTODO\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo.\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nNew target option needs to be addressed.\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-ok", "PR: tests-needed", "PR: unreviewed"], "number_of_comments": 8, "created_at": "2019-01-01 16:52:53", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "393410766": {"author_username": "aarefiev", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8535, "title": "Feature: Loaders API: add method to get outputOptions", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nI would be nice to have ability to get formatted outputOptions like `this._compilation.outputOptions` but without using structure hacking.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nI found that some of output options not working as I expected. Some days ago I configured webpack based project with `output.hashDigestLength` option. But when I set it, only bundled files and files processed by plug-ins are ha truncated names as I expected, but files that processed by loaders only are not. \r\n\r\nI did not understand what was wrong, because the documentation says\r\n> The lengths of [hash] and [chunkhash] can be specified using [hash:16] (defaults to 20). Alternatively, specify output.hashDigestLength to configure the length globally.\r\n\r\nAccording to documentation all plug-ins has access to outputOptions through Hooks API. But loaders are not. I think it is not good :-1:  \r\n\r\n**How should this be implemented in your opinion?**\r\nI think in Loaders API should be a method to get formatted outputOptions.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes, sure \r\n", "labels": [], "number_of_comments": 15, "created_at": "2018-12-21 10:39:19", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "393144694": {"author_username": "xtuc", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8531, "title": "[WASM] - experimental BigInt/I64 support", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nAllow WebAssembly i64 to be used in JavaScript; using the conversion to BigInt.\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nMore info in https://github.com/WebAssembly/JS-BigInt-integration.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nTo move the proposal forward we need some toolchain support (https://github.com/WebAssembly/JS-BigInt-integration/issues/15), currently Webpack ensures that no I64 flows in JavaScript.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nBehind a flag!\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": [], "number_of_comments": 0, "created_at": "2018-12-20 17:35:08", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "392434307": {"author_username": "irudoy", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8521, "title": "Wrong script charset when using dynamic import", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\nPage encoded in windows-1251. All chunks are encoded in windows-1251 using the `webpack-encoding-plugin`.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nDoing dynamic `import()` call. Windows-1251 encoded chunk injected with `charset=\"utf-8\"` attribute.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nhttps://github.com/irudoy/webpack-charset-repro\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nDoing dynamic `import()` call. Windows-1251 encoded chunk injected with `charset=\"windows-1251\"` attribute.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version: 4.27.1\r\nNode.js version: 11.4.0\r\nOperating System: macOS 10.14.1\r\n\r\nPossible solution: https://github.com/webpack/webpack/pull/8288", "labels": [], "number_of_comments": 1, "created_at": "2018-12-19 04:16:14", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "389959250": {"author_username": "shairez", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8489, "title": "Add stack to errors with the errorDetails option", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\n<!-- Try to link to an open issue for more information. -->\r\nfixes #8425 \r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nfeature\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nyes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nNow, whenever you'll pass `errorDetails` to `toJson()` of Stats you'll also see the error's stack trace if it exists. \r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: conflict", "PR: review-outdated"], "number_of_comments": 8, "created_at": "2018-12-11 21:22:36", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "389941257": {"author_username": "ooflorent", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8488, "title": "Always create a multi compiler", "body": "Uses a `MultiCompiler` no matter what config it is.\r\n\r\n\u26a0\ufe0f The first commit must be ignored. The branch must be rebased once #8490 is merged.\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nrefactoring\r\n\r\n**Did you add tests for your changes?**\r\n\r\nno\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nyes\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nTODO", "labels": ["PR: conflict", "PR: unreviewed"], "number_of_comments": 4, "created_at": "2018-12-11 20:32:13", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "388234846": {"author_username": "dawidgarus", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8470, "title": "Feature: prefetch dynamic import on demand", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nI would be nice to have ability to customize when dynamic import are prefetch exactly\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nWith magic comments like `/* webpackPrefetch: 1 */` we can say that we wan't this dynamic import to be prefetched and determine priority, but you can't specify when you wan't to prefetch them.\r\nTo be considerate for users with slow internet connection and/or for those who pay for every byte received, you may not want to prefetch all the dynamic imports but only imports for the routes that are directly accessible from you current route.\r\nFor example, from your home page you can go to \"to do\" list, so you want to prefetch list component, but don't prefetch item details component right away, only when you go to list.\r\n\r\n**How should this be implemented in your opinion?**\r\nWe can use `webpackChunkName` to name a dynamic import and the use new kind of magic comment, lets say: `/* webpackPrefetchChunk: <CHUNK NAME> <PRIORITY>` */.\r\nThe magic comment should be replaced by webpack with code that adds `<link>` tag, for example:\r\n```javascript\r\nclass MyComponent {\r\n  constructor() {\r\n    /* webpackPrefetchChunk: foo 0` */\r\n  }\r\n}\r\n```\r\nshould be replaced with something like this:\r\n```javascript\r\nclass MyComponent {\r\n  constructor() {\r\n    __webpackPrefetchChunk('foo', 0);\r\n  }\r\n}\r\n```\r\n**Are you willing to work on this yourself?**\r\nno\r\n", "labels": [], "number_of_comments": 12, "created_at": "2018-12-06 14:21:19", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "385744973": {"author_username": "chrisckc", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8437, "title": "Unable to override optimization.namedModules and optimization.namedChunks defaults", "body": "# Bug report\r\n\r\nThe docs currently state:\r\n\r\n**optimization.namedModules**\r\n> When optimization.namedModules is not set in webpack config, webpack will enable it by default for mode development and disable for mode production.\r\n\r\n**optimization.namedChunks**\r\n> Tells webpack to use readable chunk identifiers for better debugging. This option is enabled by default for mode development and disabled for mode production if no option is provided in webpack config.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen specifying these in the webpack config like this:\r\n\r\n```\r\noptimization: {\r\n    namedChunks: false,\r\n    namedModules: false,\r\n    moduleIds: 'hashed'\r\n}\r\n```\r\n\r\nand then building in development mode, it seems that namedChunks and/or namedModules is enabled, overriding the config, which is not what the docs state and is undesirable.\r\n\r\nMy observation is based on the name of the generated chunks:\r\n\r\nin production mode i get a chunk named like this:\r\n\r\n`vendors~53127b40.da236ba505352285db0c.chunk.js`\r\n\r\nIn development mode i get a chunk named like this:\r\n\r\n`vendors~._node_modules_scheduler_cjs_scheduler.development.js~30696716.21f236c249b3280ea481.chunk.js`\r\n\r\nThis is despite that fact that namedChunks and namedModules are both set to false. I expected that the name would remain like the first example when building in development mode.\r\n\r\nThose above names appear to be composed of:\r\n`{chunkname}~{someidentifier}.{chunkhash}.chunk.js` because i am using `output.chunkFilename: '[name].[chunkhash].chunk.js'` in the config.\r\n\r\nIt seems that {someidentifier} is either {modulename~somehash} when in dev mode or just {somehash}  when in production mode?\r\n\r\nNote: This behaviour is only visible when using optimization.splitChunks.maxSize such that chunks are split down into smaller chunks. When not using maxSize, {someidentifier} is not generated, the name is simply: `{chunkname}.{chunkhash}.chunk.js`\r\n\r\nI noticed that the 'moduleIds' setting has no effect on the filenames, it must not be something that is used when generating filenames?\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nClone the following repo:\r\nhttps://github.com/chrisckc/minimal-react-webpack-babel-setup\r\n\r\nBuild the project using both:\r\n\r\n```\r\nnpm run build\r\n```\r\nand\r\n```\r\nnpm run build:dev\r\n```\r\n\r\nNotice my observations,  namedChunks and namedModules setting is ignored and overriden by the build mode, this is also case when setting them to true.\r\n\r\n**What is the expected behavior?**\r\n\r\nnamedChunks and namedModules specified in the config should take precedence over the build mode as stated in the docs.\r\n\r\n**Other relevant information:**\r\nwebpack version:  v4.26.1\r\n\r\n", "labels": [], "number_of_comments": 3, "created_at": "2018-11-29 13:49:16", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "385426994": {"author_username": "jameskoch", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8435, "title": "Non-deterministic output when certain optimizations in use", "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\nRepeated builds of the same inputs produce slightly different outputs. Non-determinism; inability to author a repeatable, reproducible, build.\r\n\r\nThrough trial and error I found that disabling a rather large set of optimizations will make my build repeatable, at least for the 5 consecutive tests I ran, whereas I had zero consecutive repeatable production builds with these enabled.\r\n```\r\noptimization: {\r\n  occurrenceOrder: false,\r\n  providedExports: false,\r\n  usedExports: false,\r\n  concatenateModules: false,\r\n  sideEffects: false,\r\n},\r\n```\r\nI have not yet tried to bisect this list.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nI have not had time to produce a minimalist repro, but below is a fairly large/slow one. I'm happy to have this issue closed until I can provide a better repro, but I wanted to throw something into the issue tracker for others who might search for repeatability issues/work-arounds.\r\n\r\n1. `git clone git@github.com:nteract/nteract.git && git checkout 247fcfbf3992f938d7a1041e565729e084825061`\r\n2. `yarn install`\r\n3. `yarn run lerna run build --scope nteract-on-jupyter --stream`\r\n4. Copy aside the problematic file `./applications/jupyter-extension/build/lib/nteract_on_jupyter/dist/vendors~vega-transform-*.bundle.js`\r\n5. Delete entire folder, repeat. In my experience, nearly 100% of the time, two chunks of ~50 exports each routinely flip their position within the file.\r\n\r\n**What is the expected behavior?**\r\n\r\nByte-level identical output is desirable for long term caching and for monitoring for unexpected mutations in upstream dependencies (especially thinking about malicious ones).\r\n\r\n**Other relevant information:**\r\nwebpack version: 4.25.1\r\nNode.js version: 8.11.4\r\nOperating System: macOS\r\n\r\n", "labels": [], "number_of_comments": 1, "created_at": "2018-11-28 19:41:43", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "385214855": {"author_username": "xtuc", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8429, "title": "[wasm] emit producer section", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nSince https://github.com/WebAssembly/tool-conventions/pull/65, tooling is expected to emit the custom producer section.\r\n\r\nNote that we should only add the Webpack entry and preserve the original producer.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nFor future pipeline/tooling analysis.\r\n\r\n\r\n**How should this be implemented in your opinion?**\r\nwebassemblyjs\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": ["Send a PR", "Web Assembly"], "number_of_comments": 6, "created_at": "2018-11-28 11:05:17", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "384957534": {"author_username": "weaverryan", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8426, "title": "SplitChunksPlugin generated name: option to not change when more chunks use it", "body": "## Feature request\r\n\r\nHi guys!\r\n\r\nI maintain a wrapper around Webpack (Webpack Encore) that heavily uses `splitChunks.chunks = 'all'` to automatically split re-used checks. However, I've noticed that (seemingly) the filenames (split chunk names) of the split files changes more often than they need to.\r\n\r\n**What is the expected behavior?**\r\n\r\nTake the following configuration:\r\n\r\n```js\r\nmodule.exports = {\r\n    entry: {\r\n        // using jquery as convenient \"large\" library that gets split\r\n        entry1: 'jquery',\r\n        entry2: 'jquery'\r\n    },\r\n    mode: 'production',\r\n    optimization: {\r\n        splitChunks: {\r\n            chunks: 'all',\r\n            name: true\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nThe result is:\r\n\r\n```\r\n                   Asset      Size  Chunks             Chunk Names\r\n               entry1.js  1.43 KiB       1  [emitted]  entry1\r\n               entry2.js  1.43 KiB       2  [emitted]  entry2\r\nvendors~entry1~entry2.js  85.2 KiB       0  [emitted]  vendors~entry1~entry2\r\nEntrypoint entry1 = vendors~entry1~entry2.js entry1.js\r\nEntrypoint entry2 = vendors~entry1~entry2.js entry2.js\r\n```\r\n\r\nHowever, if you added an `entry3` that also required the split module (`jquery` in this case), the name of the split module will change to `vendors~entry1~entry2~entry3` (and the filename will also change).\r\n\r\nThe proposal is to add, for example, some \"hashed\" name option - e.g.:\r\n\r\n```diff\r\nmodule.exports = {\r\n    entry: {\r\n        // using jquery as convenient \"large\" library that gets split\r\n        entry1: 'jquery',\r\n        entry2: 'jquery'\r\n    },\r\n    mode: 'production',\r\n    optimization: {\r\n        splitChunks: {\r\n            chunks: 'all',\r\n-           name: true\r\n+           name: 'hashed'\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nThis would generate a split chunk name using some sort of deterministic hash, but one that is independent of the modules using it (not sure how to do this actually) - e.g. `vendor~abc123`.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nBetter caching. When a split chunk is included by an additional entry, its filename changes unnecessarily. But, because the chunk name changes, the contents of *other* files that depend on it may also change (it depends on your `namedChunks` option, but we will likely change this to `namedChunks: true` everywhere until Webpack 5 to work around #8354).\r\n\r\nHoweever, the current behavior seems very intentional - so I'm wondering if I'm missing something after my digging. Apologies of that's the case :).\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nSpeaking way above my pay grade on Webpack internals, I would imagine the \"hash\" part the filename would be created based on the specific chunks that are being *included* in the new split chunk. Thus, the hash would only change if the split chunk suddenly contained *different* chunks' contents - but not if it is needed by more or less chunks.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nYep! I just need a sanity check on the issue.\r\n", "labels": ["Send a PR"], "number_of_comments": 1, "created_at": "2018-11-27 19:48:06", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "384940399": {"author_username": "shairez", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8425, "title": "Adding call stacks to errors ", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nAdding the stack trace of mysterious errors in the `formatError` in `Stats.js`\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nI spent a whole day debugging the following error while trying to build an Angular app. \r\n\r\n![image](https://user-images.githubusercontent.com/1430726/49104448-b15cf980-f286-11e8-9485-663b2d345810.png)\r\n\r\nNow good luck finding out what's the issue there \ud83d\ude04 \r\n\r\nSo I hacked around the Angular CLI and eventually reached `Stats.js` and saw that the stack property isn't getting added to the error text. \r\n\r\n**How should this be implemented in your opinion?**\r\nI'll create a PR to add it\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": [], "number_of_comments": 4, "created_at": "2018-11-27 19:00:40", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "384222747": {"author_username": "rightaway", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8419, "title": " contenthash changing even though file remains identical", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\nThis issue was opened because https://github.com/webpack/webpack/issues/7984 was closed saying it's been fixed even though many people have reported that it has definitely not been fixed.\r\n\r\n# Bug report\r\n\r\n```js\r\n\toutput: {\r\n\t\tfilename: 'file-[contenthash].js',\r\n\t\tchunkFilename: 'chunk-[contenthash].js'\r\n\t},\r\n        optimization: {\r\n        \tsplitChunks: {\r\n\t\tchunks: 'all',\r\n\t\tcacheGroups: {\r\n\t\t\t\tvendors: {\r\n\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]/,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n       }\r\n```\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nIf I have the above config, in my build I get a file called `file-XXX.js` and `chunk-XXX.js`. If I change the config line from `chunkFilename: 'chunk-[contenthash].js'` to `chunkFilename: 'CHUNK-[contenthash].js'`, then the files are `file-YYY.js` and `chunk-XXX.js`. So `chunk-` has the same name but `file-` has a different name when the `chunkFilename` changes.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nCreate a webpack bundle when the chunkFilename is set to one value, then create another bundle after changing the chunkFilename. You'll see the the contenthash has changed even though the file contents are identical.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm using `[contenthash]` and in both cases the file contents are identical so the contenthash shouldn't change and the filename should remain the same.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.17.1\r\nNode.js version: 10.9.0\r\nOperating System: linux \r\nAdditional tools:", "labels": [], "number_of_comments": 40, "created_at": "2018-11-26 08:33:55", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "383790387": {"author_username": "icewind7030", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8413, "title": "Cheap-module-source-map not generated with correct source file.", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\nI create a project with `Vue-Cli 3` and set webpack config `devtool` as `cheap-module-source-map`.\r\n\r\n**What is the current behavior?**\r\n\r\nThe source map file generated just contain source content `webpack:///webpack/bootstrap` and content from `node_modules`, not with my actually source file.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nHere a repository you can reproduce with:\r\n```\r\nhttps://github.com/icewind7030/sentry-vue-debug.git\r\n```\r\n\r\nI commit the generated webpack config file named `config.js` with `vue inspect --mode production > config.js`.\r\n\r\nAnd I also commit the webpack build files in `dist` folder. \r\n\r\nPlease check the config file and the source map files.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n`cheap-module-source-map` works like the webpack document says:\r\n> original source (lines only)\r\n\r\nShow the source code error with line location.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.26.0\r\nNode.js version: 10.13.0\r\nOperating System: macOS 10.14.1\r\nAdditional tools: VS Code 1.29.1\r\n", "labels": [], "number_of_comments": 5, "created_at": "2018-11-23 11:28:59", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "382998551": {"author_username": "imjacobclark", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8400, "title": "Module not found: Error: Can't resolve 'aws-sdk'  when importing Webpack", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nImporting Webpack into an Express application results in errors being thrown.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nwebpack.config.dev.js:\r\n\r\n```js\r\nconst path = require('path');\r\n\r\nconst server = {\r\n    entry: './index.js',\r\n    mode: \"production\",\r\n    target: 'node',\r\n    output: {\r\n        path: path.resolve(__dirname, 'dist'),\r\n        filename: '[name].bundle.js',\r\n    },\r\n    module: {\r\n        rules: [\r\n            {\r\n                test: /\\.js$/,\r\n                exclude: /node_modules/,\r\n                use: \"babel-loader\"\r\n            }, {\r\n                test: /\\.jsx?$/,\r\n                exclude: /node_modules/,\r\n                use: \"babel-loader\"\r\n            }\r\n        ]\r\n    }\r\n};\r\n\r\nmodule.exports = [server];\r\n```\r\n\r\ndevelopmentMode.js\r\n```js\r\nimport webpack from 'webpack';\r\nimport webpackDevMiddleware from 'webpack-dev-middleware';\r\n\r\nexport default (app) => {\r\n    const webpackConfig = require('./webpack.config.dev')[0];\r\n\r\n    const compiler = webpack(webpackConfig);\r\n\r\n    app.use(webpackDevMiddleware(compiler, {}));\r\n}\r\n```\r\n\r\nserver.js\r\n```js\r\nimport express from 'express';\r\nimport ReactDOMServer from 'react-dom/server';\r\nimport React from 'react';\r\n\r\nimport developmentMode from './developmentMode';\r\n\r\nimport HelloWorld from './src/HelloWorld.jsx';\r\n\r\nconst app = express();\r\nconst port = 3000;\r\n\r\nif (process.env.NODE_ENV === \"dev\") developmentMode(app);\r\n\r\nconst template = application => `\r\n<html>\r\n    <head>\r\n    </head>\r\n    <body>\r\n        ${application}\r\n    </body>\r\n</body>\r\n`;\r\n\r\nconst application = ReactDOMServer.renderToString(<HelloWorld />);\r\n\r\napp.get('/', (req, res) => res.send(template(application)));\r\n\r\napp.listen(port, () => console.log(`Example app listening on port ${port}!`));\r\n```\r\n\r\npackage.json\r\n```json\r\n{\r\n  \"version\": \"6.0.0\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"build\": \"webpack --config webpack.config.dev.js\",\r\n    \"start\": \"node dist/main.bundle.js\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n  },\r\n  \"author\": \"Jacob Clark\",\r\n  \"license\": \"MIT\",\r\n  \"dependencies\": {\r\n    \"express\": \"^4.16.4\",\r\n    \"react\": \"^16.6.3\",\r\n    \"react-dom\": \"^16.6.3\",\r\n    \"react-redux\": \"^5.1.1\",\r\n    \"redux\": \"^4.0.1\",\r\n    \"redux-thunk\": \"^2.3.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/cli\": \"^7.1.5\",\r\n    \"@babel/core\": \"^7.1.6\",\r\n    \"@babel/preset-env\": \"^7.1.6\",\r\n    \"@babel/preset-react\": \"^7.0.0\",\r\n    \"babel-loader\": \"^8.0.4\",\r\n    \"webpack\": \"^4.26.0\",\r\n    \"webpack-cli\": \"^3.1.2\",\r\n    \"webpack-dev-middleware\": \"^3.4.0\"\r\n  }\r\n}\r\n```\r\n\r\nRunning `webpack --config  webpack.config.dev.js` yields the following errors\r\n\r\n```\r\n[clarkj84:~/Desktop/jacobclark.xyz]$ npm run build && npm start                                                                                                                                                                 (6.0.0-dev\u2731) \r\n\r\n> jacobclarkxyz@6.0.0 build /Users/clarkj84/Desktop/jacobclark.xyz\r\n> webpack --config webpack.config.dev.js\r\n\r\nHash: b1078bef90371617b277\r\nVersion: webpack 4.26.0\r\nChild\r\n    Hash: b1078bef90371617b277\r\n    Time: 33472ms\r\n    Built at: 21/11/2018 08:01:36\r\n     1 asset\r\n    Entrypoint main = main.bundle.js\r\n       [1] external \"path\" 42 bytes {0} [built]\r\n       [9] (webpack)/lib/Template.js 7.96 KiB {0} [built]\r\n      [13] external \"events\" 42 bytes {0} [built]\r\n      [39] (webpack)/lib/dependencies/DependencyReference.js 1.75 KiB {0} [built]\r\n      [45] (webpack)/lib/util/createHash.js 1.92 KiB {0} [built]\r\n      [46] (webpack)/lib/Module.js 10.1 KiB {0} [built]\r\n      [53] (webpack)/lib/ModuleFilenameHelpers.js 5.36 KiB {0} [built]\r\n      [60] (webpack)/lib/Dependency.js 1.97 KiB {0} [built]\r\n      [79] (webpack)/lib/ExternalsPlugin.js 546 bytes {0} [built]\r\n      [87] (webpack)/lib/Stats.js 38.2 KiB {0} [built]\r\n     [110] (webpack)/lib/node/NodeTemplatePlugin.js 880 bytes {0} [built]\r\n     [513] (webpack)/lib/webpack.js 7.71 KiB {0} [built]\r\n     [515] (webpack)-dev-middleware/index.js 2.21 KiB {0} [built]\r\n    [1325] ./webpack.config.dev.js 433 bytes {0} [built]\r\n    [1327] ./index.js + 2 modules 1.13 KiB {0} [built]\r\n           | ./index.js 743 bytes [built]\r\n           | ./developmentMode.js 273 bytes [built]\r\n           | ./src/HelloWorld.jsx 118 bytes [built]\r\n        + 1313 hidden modules\r\n    \r\n    WARNING in ./node_modules/terser-webpack-plugin/dist/worker.js 14:130-137\r\n    Critical dependency: require function is used in a way in which dependencies cannot be statically extracted\r\n     @ ./node_modules/terser-webpack-plugin/dist/TaskRunner.js\r\n     @ ./node_modules/terser-webpack-plugin/dist/index.js\r\n     @ ./node_modules/terser-webpack-plugin/dist/cjs.js\r\n     @ (webpack)/lib/WebpackOptionsDefaulter.js\r\n     @ (webpack)/lib/webpack.js\r\n     @ ./developmentMode.js\r\n     @ ./index.js\r\n    \r\n    WARNING in ./node_modules/fsevents/fsevents.js 14:13-71\r\n    Critical dependency: the request of a dependency is an expression\r\n     @ ./node_modules/chokidar/lib/fsevents-handler.js\r\n     @ ./node_modules/chokidar/index.js\r\n     @ ./node_modules/watchpack/lib/DirectoryWatcher.js\r\n     @ ./node_modules/watchpack/lib/watcherManager.js\r\n     @ ./node_modules/watchpack/lib/watchpack.js\r\n     @ (webpack)/lib/node/NodeWatchFileSystem.js\r\n     @ (webpack)/lib/node/NodeEnvironmentPlugin.js\r\n     @ (webpack)/lib/webpack.js\r\n     @ ./developmentMode.js\r\n     @ ./index.js\r\n    \r\n    WARNING in ./node_modules/worker-farm/lib/child/index.js 49:33-53\r\n    Critical dependency: the request of a dependency is an expression\r\n     @ ./node_modules/worker-farm/lib/fork.js\r\n     @ ./node_modules/worker-farm/lib/farm.js\r\n     @ ./node_modules/worker-farm/lib/index.js\r\n     @ ./node_modules/terser-webpack-plugin/dist/TaskRunner.js\r\n     @ ./node_modules/terser-webpack-plugin/dist/index.js\r\n     @ ./node_modules/terser-webpack-plugin/dist/cjs.js\r\n     @ (webpack)/lib/WebpackOptionsDefaulter.js\r\n     @ (webpack)/lib/webpack.js\r\n     @ ./developmentMode.js\r\n     @ ./index.js\r\n    \r\n    WARNING in ./node_modules/fsevents/node_modules/node-pre-gyp/lib/util/versioning.js 17:20-67\r\n    Critical dependency: the request of a dependency is an expression\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib sync ^\\.\\/.*$\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib/node-pre-gyp.js\r\n     @ ./node_modules/fsevents/fsevents.js\r\n     @ ./node_modules/chokidar/lib/fsevents-handler.js\r\n     @ ./node_modules/chokidar/index.js\r\n     @ ./node_modules/watchpack/lib/DirectoryWatcher.js\r\n     @ ./node_modules/watchpack/lib/watcherManager.js\r\n     @ ./node_modules/watchpack/lib/watchpack.js\r\n     @ (webpack)/lib/node/NodeWatchFileSystem.js\r\n     @ (webpack)/lib/node/NodeEnvironmentPlugin.js\r\n     @ (webpack)/lib/webpack.js\r\n     @ ./developmentMode.js\r\n     @ ./index.js\r\n    \r\n    WARNING in ./node_modules/loader-runner/lib/loadLoader.js 3:2-28\r\n    Critical dependency: the request of a dependency is an expression\r\n     @ ./node_modules/loader-runner/lib/LoaderRunner.js\r\n     @ (webpack)/lib/NormalModule.js\r\n     @ (webpack)/lib/AutomaticPrefetchPlugin.js\r\n     @ (webpack)/lib/webpack.js\r\n     @ ./developmentMode.js\r\n     @ ./index.js\r\n    \r\n    WARNING in ./node_modules/fsevents/node_modules/node-pre-gyp/lib/pre-binding.js 20:22-48\r\n    Critical dependency: the request of a dependency is an expression\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib/node-pre-gyp.js\r\n     @ ./node_modules/fsevents/fsevents.js\r\n     @ ./node_modules/chokidar/lib/fsevents-handler.js\r\n     @ ./node_modules/chokidar/index.js\r\n     @ ./node_modules/watchpack/lib/DirectoryWatcher.js\r\n     @ ./node_modules/watchpack/lib/watcherManager.js\r\n     @ ./node_modules/watchpack/lib/watchpack.js\r\n     @ (webpack)/lib/node/NodeWatchFileSystem.js\r\n     @ (webpack)/lib/node/NodeEnvironmentPlugin.js\r\n     @ (webpack)/lib/webpack.js\r\n     @ ./developmentMode.js\r\n     @ ./index.js\r\n    \r\n    WARNING in ./node_modules/express/lib/view.js 81:13-25\r\n    Critical dependency: the request of a dependency is an expression\r\n     @ ./node_modules/express/lib/application.js\r\n     @ ./node_modules/express/lib/express.js\r\n     @ ./node_modules/express/index.js\r\n     @ ./index.js\r\n    \r\n    WARNING in ./node_modules/fsevents/node_modules/node-pre-gyp/lib/util/compile.js\r\n    Module not found: Error: Can't resolve 'node-gyp' in '/Users/clarkj84/Desktop/jacobclark.xyz/node_modules/fsevents/node_modules/node-pre-gyp/lib/util'\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib/util/compile.js\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib sync ^\\.\\/.*$\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib/node-pre-gyp.js\r\n     @ ./node_modules/fsevents/fsevents.js\r\n     @ ./node_modules/chokidar/lib/fsevents-handler.js\r\n     @ ./node_modules/chokidar/index.js\r\n     @ ./node_modules/watchpack/lib/DirectoryWatcher.js\r\n     @ ./node_modules/watchpack/lib/watcherManager.js\r\n     @ ./node_modules/watchpack/lib/watchpack.js\r\n     @ (webpack)/lib/node/NodeWatchFileSystem.js\r\n     @ (webpack)/lib/node/NodeEnvironmentPlugin.js\r\n     @ (webpack)/lib/webpack.js\r\n     @ ./developmentMode.js\r\n     @ ./index.js\r\n    \r\n    WARNING in ./node_modules/fsevents/node_modules/node-pre-gyp/lib/util/compile.js\r\n    Module not found: Error: Can't resolve 'npm' in '/Users/clarkj84/Desktop/jacobclark.xyz/node_modules/fsevents/node_modules/node-pre-gyp/lib/util'\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib/util/compile.js\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib sync ^\\.\\/.*$\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib/node-pre-gyp.js\r\n     @ ./node_modules/fsevents/fsevents.js\r\n     @ ./node_modules/chokidar/lib/fsevents-handler.js\r\n     @ ./node_modules/chokidar/index.js\r\n     @ ./node_modules/watchpack/lib/DirectoryWatcher.js\r\n     @ ./node_modules/watchpack/lib/watcherManager.js\r\n     @ ./node_modules/watchpack/lib/watchpack.js\r\n     @ (webpack)/lib/node/NodeWatchFileSystem.js\r\n     @ (webpack)/lib/node/NodeEnvironmentPlugin.js\r\n     @ (webpack)/lib/webpack.js\r\n     @ ./developmentMode.js\r\n     @ ./index.js\r\n    \r\n    WARNING in ./node_modules/fsevents/node_modules/node-pre-gyp/lib/util/nw-pre-gyp/index.html 1:0\r\n    Module parse failed: Unexpected token (1:0)\r\n    You may need an appropriate loader to handle this file type.\r\n    > <!doctype html>\r\n    | <html>\r\n    | <head>\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib sync ^\\.\\/.*$ ./util/nw-pre-gyp/index.html\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib/node-pre-gyp.js\r\n     @ ./node_modules/fsevents/fsevents.js\r\n     @ ./node_modules/chokidar/lib/fsevents-handler.js\r\n     @ ./node_modules/chokidar/index.js\r\n     @ ./node_modules/watchpack/lib/DirectoryWatcher.js\r\n     @ ./node_modules/watchpack/lib/watcherManager.js\r\n     @ ./node_modules/watchpack/lib/watchpack.js\r\n     @ (webpack)/lib/node/NodeWatchFileSystem.js\r\n     @ (webpack)/lib/node/NodeEnvironmentPlugin.js\r\n     @ (webpack)/lib/webpack.js\r\n     @ ./developmentMode.js\r\n     @ ./index.js\r\n    \r\n    WARNING in ./node_modules/loader-runner/lib/loadLoader.js 3:2-28\r\n    System.import() is deprecated and will be removed soon. Use import() instead.\r\n    For more info visit https://webpack.js.org/guides/code-splitting/\r\n     @ ./node_modules/loader-runner/lib/LoaderRunner.js 7:17-40\r\n     @ (webpack)/lib/NormalModule.js\r\n     @ (webpack)/lib/AutomaticPrefetchPlugin.js\r\n     @ (webpack)/lib/webpack.js\r\n     @ ./developmentMode.js\r\n     @ ./index.js\r\n    \r\n    ERROR in ./node_modules/fsevents/node_modules/node-pre-gyp/lib/unpublish.js\r\n    Module not found: Error: Can't resolve 'aws-sdk' in '/Users/clarkj84/Desktop/jacobclark.xyz/node_modules/fsevents/node_modules/node-pre-gyp/lib'\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib/unpublish.js 16:14-32\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib sync ^\\.\\/.*$\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib/node-pre-gyp.js\r\n     @ ./node_modules/fsevents/fsevents.js\r\n     @ ./node_modules/chokidar/lib/fsevents-handler.js\r\n     @ ./node_modules/chokidar/index.js\r\n     @ ./node_modules/watchpack/lib/DirectoryWatcher.js\r\n     @ ./node_modules/watchpack/lib/watcherManager.js\r\n     @ ./node_modules/watchpack/lib/watchpack.js\r\n     @ (webpack)/lib/node/NodeWatchFileSystem.js\r\n     @ (webpack)/lib/node/NodeEnvironmentPlugin.js\r\n     @ (webpack)/lib/webpack.js\r\n     @ ./developmentMode.js\r\n     @ ./index.js\r\n    \r\n    ERROR in ./node_modules/fsevents/node_modules/node-pre-gyp/lib/publish.js\r\n    Module not found: Error: Can't resolve 'aws-sdk' in '/Users/clarkj84/Desktop/jacobclark.xyz/node_modules/fsevents/node_modules/node-pre-gyp/lib'\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib/publish.js 18:14-32\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib sync ^\\.\\/.*$\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib/node-pre-gyp.js\r\n     @ ./node_modules/fsevents/fsevents.js\r\n     @ ./node_modules/chokidar/lib/fsevents-handler.js\r\n     @ ./node_modules/chokidar/index.js\r\n     @ ./node_modules/watchpack/lib/DirectoryWatcher.js\r\n     @ ./node_modules/watchpack/lib/watcherManager.js\r\n     @ ./node_modules/watchpack/lib/watchpack.js\r\n     @ (webpack)/lib/node/NodeWatchFileSystem.js\r\n     @ (webpack)/lib/node/NodeEnvironmentPlugin.js\r\n     @ (webpack)/lib/webpack.js\r\n     @ ./developmentMode.js\r\n     @ ./index.js\r\n    \r\n    ERROR in ./node_modules/fsevents/node_modules/node-pre-gyp/lib/info.js\r\n    Module not found: Error: Can't resolve 'aws-sdk' in '/Users/clarkj84/Desktop/jacobclark.xyz/node_modules/fsevents/node_modules/node-pre-gyp/lib'\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib/info.js 14:14-32\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib sync ^\\.\\/.*$\r\n     @ ./node_modules/fsevents/node_modules/node-pre-gyp/lib/node-pre-gyp.js\r\n     @ ./node_modules/fsevents/fsevents.js\r\n     @ ./node_modules/chokidar/lib/fsevents-handler.js\r\n     @ ./node_modules/chokidar/index.js\r\n     @ ./node_modules/watchpack/lib/DirectoryWatcher.js\r\n     @ ./node_modules/watchpack/lib/watcherManager.js\r\n     @ ./node_modules/watchpack/lib/watchpack.js\r\n     @ (webpack)/lib/node/NodeWatchFileSystem.js\r\n     @ (webpack)/lib/node/NodeEnvironmentPlugin.js\r\n     @ (webpack)/lib/webpack.js\r\n     @ ./developmentMode.js\r\n     @ ./index.js\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno 2\r\nnpm ERR! jacobclarkxyz@6.0.0 build: `webpack --config webpack.config.dev.js`\r\nnpm ERR! Exit status 2\r\nnpm ERR! \r\nnpm ERR! Failed at the jacobclarkxyz@6.0.0 build script.\r\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     /Users/clarkj84/.npm/_logs/2018-11-21T08_01_36_419Z-debug.log\r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nWebpack should run without errors.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.26.0\r\nNode.js version: 9.4.0\r\nOperating System: OS X 10.12.6\r\nAdditional tools: N/A\r\n", "labels": [], "number_of_comments": 14, "created_at": "2018-11-21 08:03:24", "reactions": {"total_count": 27, "+1": 27, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "378727283": {"author_username": "smelukov", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8355, "title": "Hashed chunk ids", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nHashed chunk ids\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nAfter [this PR](https://github.com/webpack/webpack/issues/8268) we have got better long-term caching \"out of the box\", but we have many chunks and they have numeric ids and these ids changes very often and it still affects long-term caching.\r\n\r\nNamed chunk ids is too large\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nClone `HashedModuleIdsPlugin` with the same login and adopt it for chunks. It looks like an easy solution...\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": ["Send a PR"], "number_of_comments": 4, "created_at": "2018-11-08 13:18:11", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "378269604": {"author_username": "jantimon", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8348, "title": "fix missing declarations.d.ts entry in package.json", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nRight now the `webpack/declarations/WebpackOptions.d.ts` is using `RuleSetConditionsRecursive` from `webpack/declarations.d.ts`.\r\n\r\nTherefore this merge request also adds `webpack/declarations.d.ts` to the published npm version of webpack\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\nAdd entry to the files package.json section\r\n\r\n**Did you add tests for your changes?**\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\nNo.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-ok", "PR: types", "PR: unreviewed"], "number_of_comments": 2, "created_at": "2018-11-07 12:35:47", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "377334473": {"author_username": "smelukov", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8335, "title": "fixed progress calculation", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nbugfix\r\n\r\nI've set `entries` to true and got `68% building 198/804 entries 2050/2115 modules 65 active .....`\r\n198/804 is not 68%\r\n\r\n**Did you add tests for your changes?**\r\n\r\nno\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nno\r\n", "labels": ["PR: CI-ok", "PR: reviewed-changes-requested"], "number_of_comments": 4, "created_at": "2018-11-05 10:22:44", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "374469265": {"author_username": "xtuc", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8287, "title": "wasm: js fallback", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nWebAssembly should work on every plateform regardless of its actually support for wasm.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n@lukewagner suggested it.\r\n\r\n**How should this be implemented in your opinion?**\r\nWebpack's runtime can detect the support for WebAssembly (or for specific features) and potentially fallback to a JS chunk (download it like we would do for wasm). This JS chunk is compiled AOT from the initial WebAssembly module using `wasm2js` (from binaryen).\r\n\r\nOn a side note, Webpack shouldn't parse the JS since it will be pretty big.\r\n\r\nThis should be opt-in since it requires the binary in the `$PATH`.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": ["Send a PR"], "number_of_comments": 9, "created_at": "2018-10-26 17:02:50", "reactions": {"total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "heart": 1, "hooray": 0}}, "372191820": {"author_username": "Simek", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8248, "title": "AMDDefineDependencyParserPlugin processItem simplification", "body": "This PR introduces small refactor to `processItem` function in `AMDDefineDependencyParserPlugin`. Currently with each invoke of  `processItem` the returned value has been checked and when result was missing `processContext` has been called. To simplify code and avoid additional checks `processContext` has been moved inside `processItem`.\r\n\r\nI'm also not sure if boolean returns from `processItem` and `processContext` are still needed but I leave them for now. Also it seems that return of `processContext` was never used in current code. If you can confirm or deny this I can prepare suitable update to this PR.\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nSmall refactor/code cleanup.\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNo.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo.\r\n", "labels": ["PR: CI-ok", "PR: tests-needed", "PR: unreviewed"], "number_of_comments": 6, "created_at": "2018-10-20 09:15:38", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "370384446": {"author_username": "loganfsmyth", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8226, "title": "Explore using urls instead of absolute paths in source-map 'sources' array", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\nI've been exploring improvements to the `source-map` library to bring it more in line with the source-map specification, and one of the things I've run into is the fact that Webpack expects tooling to use the absolute path as the entry in the 'sources' array.\r\n\r\nThis directly conflicts with the spec, in the case of Windows paths, because\r\n```\r\nC:\\\\some\\directory\\file.js\r\n```\r\nwill just be parsed as a URL with `c:` being the protocol and a `pathname` as\r\n```\r\n\\\\some\\directory\\file.js\r\n```\r\nwhich is clearly not helpful.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe 'sources' entry should be a valid URL, either a relative path as a simple UUID, or as a absolute path to the file itself?\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nBugs like\r\n* https://github.com/postcss/postcss-loader/issues/390\r\n* https://github.com/mozilla/source-map/issues/355\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nIn a perfect world it seems like Webpack would slowly transition to supporting `file:` URLs in source-map `sources` so that loaders could output that, and checks like https://github.com/webpack/webpack/blob/945a9514ca23dfa3438df2ca7abd1238a2ea0c72/lib/EvalSourceMapDevToolModuleTemplatePlugin.js#L64 could perform a lookup based on that URL, and fall back to doing the looking based on `identifier`.\r\n\r\nFor instance, if loader added support for a `this.resourceURL`, they could transition to inserting the URL, if the property is present, and fall back to using the `resourcePath` for older Webpack versions.\r\n\r\nFor the example above for instance, the URL would be\r\n\r\n    file:///C://some/directory/file.js\r\n\r\nThe downside here being that if some other loader in the chain wants to process the sourcemap and it expected the non-URL versions, they'll likely have issues and would also need to be updated to handle the `file:` URL implementation. I think that's acceptable though as long as loaders bump their major versions when switching to use the URL version.\r\n\r\n**Are you willing to work on this yourself?**\r\npossibly!\r\n", "labels": ["Send a PR"], "number_of_comments": 7, "created_at": "2018-10-15 23:40:10", "reactions": {"total_count": 5, "+1": 1, "-1": 0, "laugh": 0, "heart": 4, "hooray": 0}}, "367769107": {"author_username": "bd041556", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8156, "title": "Creating target: \"node\" module with runtimeChunk: \"single\" doesn't work", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nWe have a large code base with a number of different packages. We want to make each package a separate umd module.\r\n\r\nSome of the packages are used on both the server, using node, and in the browser.\r\n\r\nWhen we attempt to webpack the packages for use in node, we are trying to make sure that there is only one webpack \"runtime\", so when we build each module we are using the runtimeChunk: \"single\" key. That separates the runtime chunk from the main package chunk. We want to use the runtime that is webpacked with the consumer of the package/modules, so that setting seems like what we want.\r\n\r\nWe specify target: \"node\", and in the consuming package we specify the modules as externals with \"commonjs2 {webpacked package}.js\".The modules are found at runtime, but the exports are not available to the consumer.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nSee the github repository https://github.com/bd041556/webpack-runtime-single\r\n\r\nLook at the README.md for steps to reproduce.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should create a module that can be used from node consumers.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.20.2\r\nNode.js version: 8.11.3\r\nOperating System:  Windows 10\r\nAdditional tools: N/A\r\n", "labels": [], "number_of_comments": 10, "created_at": "2018-10-08 12:35:34", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "367019085": {"author_username": "littledan", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8144, "title": "Align with the proposed WebAssembly/ESM integration specification", "body": "_Update: On further investigation, it seems that there's a very significant mismatch between webpack Wasm semantics and the early draft proposed standard, in terms of when Wasm instantiation happens. I'm happy to have the help of the webpack team here, with your experience this space and success building a working system. Let's keep discussing this to figure out what semantics should be standardized._\r\n\r\n## Feature request\r\n\r\nThe WebAssembly CG is working on standardizing the integration of WebAssembly modules and ES Modules. The [proposal's semantics](https://github.com/WebAssembly/esm-integration/blob/e098188221887871410616ba1e186740c9d4aa86/proposals/esm-integration/README.md) are very similar to what webpack's experimental WebAssembly support. However, there may be some minor differences. This issue is intended to be an umbrella bug to track the general effort to add tests against the new proposal and semantic changes to match it.\r\n\r\n**What is the expected behavior?**\r\n\r\nThat webpack's WebAssembly module support would match the new specification.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\n- All documentation about wasm and ESM (the spec itself, MDN, other developer resources) could match up with webpack's implementation\r\n- Bring compatibility among bundlers, to make things easier for programmers\r\n- Make native modules and webpack behave the same, in case the same code may be used both with webpack and as a native module\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nLet's start with tests. Long-term, it'd be best if tests are part of web-platform-tests and imported into webpack; that's a bit of an unsolved problem for now, though, so the initial plan is to develop tests directly against webpack in a PR.\r\n\r\nTest plan:\r\n- Convert the remaining .wasm tests to .wat for easier development\r\n- Exports of globals from Wasm are imported as WebAssembly.Global\r\nobjects, not Numbers (this looks likely to be an existing spec violation)\r\n- Imports of Numbers become only immutable, not mutable, Global objects,\r\nand undergo rounding based on the declared type\r\n- A WebAssembly.Table, Memory or Global instance, or exported Wasm\r\nfunction, exported JS -> Wasm -> JS, comes out with the same identity\r\n- A cycle Wasm <-> JS, with Wasm on top, leads to a TDZ error for\r\nMemory, Global or Table, but hoisted functions work, and Wasm things are\r\nall initialized by the time the JS top-level statement runs\r\n- A cycle JS <-> Wasm, with JS on top, lets Wasm's start function access\r\nMemory, Global, Table and functions, but using Wasm exports too early\r\nleads to TDZ\r\n- Variables imported JS -> Wasm are snapshotted (whether you overwrite a\r\nbare Number or function, or an entire Memory, Global or Table object\r\nwhich isn't replaced when the variable containing it is overwritten)\r\n- Memory, Table and mutable Global can be mutated by JS code that's\r\ncalled out from Wasm code, and the mutations are observed from Wasm\r\n- LinkError results if there is a type mismatch when importing into\r\nWebAssembly (whether it's from JS or Wasm)\r\n- Circular Wasm modules result in an error before any start function\r\nexecutes\r\n- All Wasm modules in the module graph are validated before any start\r\nfunction runs or JS modules are evaluated; failing validation throws a\r\nCompileError\r\n- The same Wasm module can be imported multiple times (both from JS and\r\nWasm) and only one copy of it is made (1 start function evaluation, 1\r\nmemory/table/global identity, etc)\r\n- The name (number) of exported functions, and the enumeration order of\r\nexports overall, matches the JS API specification\r\n- Wasm modules can be imported from an ordinary import inside an inline\r\na JS module and a dynamic import from either a script or a JS module\r\n- Some parts of the semantics will probably be different in webpack and with native ESM; these tests might only be landed in wpt and not in webpack:\r\n    - The return value of import() for a Wasm module is a\r\nmodule namespace exotic object, similar to that of native modules\r\n(WebPack will need to take shortcuts here)\r\n    - The same resource can be used both as a Wasm module as\r\nwell as through instantiateStreaming, and there's no observable\r\ncaching/sharing between these\r\n    - The choice between interpreting as JS and Wasm is\r\nbased on the mimetype and nothing else; many URL types work (blob, data,\r\nserved from SW), CSP is checked appropriately, the modern CORS settings\r\nare used for the fetch, etc.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nI plan to start implementing the test plan described above. (I wouldn't mind help here, cc @ms2ger @xtuc) I am not sure when I would have time to implement the changes in webpack; definitely not before the end of this year.", "labels": ["Web Assembly"], "number_of_comments": 27, "created_at": "2018-10-05 00:38:34", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "366709105": {"author_username": "Andarist", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8140, "title": "[WIP] Fix code generation for scoped packages specified as externals", "body": "**Motivation**\r\n\r\nI've skipped creating an issue about this, as the issue is straightforward. I'd like to work on a fix, this PR is very WIP at the moment - I'd love to get some pointers on how to improve it (maybe handle more cases?) as webpack's codebase is huge and I'm first time contributor to it, so naturally I don't know the internal architecture very well and my quick attempt to fix it is probably wrong placed.\r\n\r\nWebpack currently outputs such code when specifying scoped package as external:\r\n```js\r\n/* 0 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = @babel/runtime/helpers/esm/extends;\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = @babel/runtime/helpers/esm/assertThisInitialized;\r\n\r\n/***/ }),\r\n```\r\n\r\nWhich is not a valid JS, so the parsing fails. I'd like to make it parseable. I'm not sure though how externals work in this case anyway - are they supposed to be reachable globals? I suspect the answer is yes - not sure what's the correct fix then, should we reference those as properties on global object?\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nbug fix\r\n\r\n**Did you add tests for your changes?**\r\n\r\nyes\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nnothing", "labels": ["PR: conflict", "PR: unreviewed"], "number_of_comments": 10, "created_at": "2018-10-04 09:52:23", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "364834086": {"author_username": "eemeli", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8108, "title": "Throw error when using AMD dependencies with a non-AMD target", "body": "Together with #8093 this fixes #8079.\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nThis adds a compile-time error when an AMD-only external dependency is used with a non-AMD target. This usage is not currently supported by Webpack, but the errors that it results in are hard-to-debug runtime errors, as the dependencies are left as unresolved variables or with the value `undefined` (depending on the build target).\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNot yet enough. There's a new happy-path test `configCases/externals/amd-externals`, but it wasn't clear to me where the compile-time error test should go, or that it really is appropriate in this case to throw during the build, rather than at runtime. Some instruction would be appreciated here.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNothing _needs_ to be documented, but it would be nice to have a brief mention of the problem in the documentation. I'll add another PR for that.", "labels": ["PR: CI-ok", "PR: review-outdated"], "number_of_comments": 8, "created_at": "2018-09-28 10:34:59", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "364285744": {"author_username": "Jojoshua", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8096, "title": "DllPlugin breaks jquery with expose-loader & ProvidePlugin", "body": "# Bug report\r\n**What is the current behavior?**\r\n\r\nWhen using the DllPlugin, jquery cannot be exposed. Before switching to the DllPlugin jquery could be exposed either using the ProvidePlugin or expose-loader. You would need to load jquery outside of webpack in order to get it to be exposed. This means we'd need to load jquery twice. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nReference jquery in the dll configuration and then try to write external javascript code that references jquery. \r\n\r\nHere is the gist \r\n`https://gist.github.com/Jojoshua/8d9cddb33b8d2d9388251325cf82838c`\r\n\r\n**What is the expected behavior?**\r\nAllow the expose-loader or ProvidePlugin to properly reference and expose any modules setup in the DLLPlugin.\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.19\r\nNode.js version: 8.12\r\nOperating System: Win10\r\n\r\nAdditional References:\r\nhttps://github.com/webpack-contrib/expose-loader/issues/25\r\nhttps://stackoverflow.com/questions/38871015/jquery-webpack-dll-plugin-and-provide-plugin\r\nhttps://stackoverflow.com/questions/42919079/jquery-is-not-defined-in-angular-webpack-site\r\n\r\n", "labels": [], "number_of_comments": 4, "created_at": "2018-09-27 02:56:14", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "363046636": {"author_username": "eemeli", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8079, "title": "AMD externals fail silently if libraryTarget is not 'amd'", "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nExternal dependencies that are only available via AMD are only supported if the output libraryTarget is also 'amd'. This is rather surprising, and not at all documented.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nUsing this Webpack config:\r\n```js\r\nmodule.exports = {\r\n  mode: 'none',\r\n  externals: {\r\n    'amd-module': { amd: 'amd-module' }\r\n  }\r\n}\r\n```\r\n\r\nTranspiling the code `require('amd-module')` results in a dependency like this being included in the output:\r\n\r\n```js\r\n/* 1 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = undefined;\r\n\r\n/***/ })\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nGiven any AMD dependency and no libraryTarget, I would expect one of the following outcomes:\r\n1. The output is surrounded by a `require(...)` or `requirejs(...)` wrapper, much as is done already with `define(...)` when `libraryTarget: 'amd'` is set.\r\n2. A build-time error is shown about the unresolved dependency, as is already done if `libraryTarget: 'umd'` is set. Adding that to the above config results in a build error \"Missing external configuration for type:commonjs2\". In this case I would also expect a mention in the docs about this incompatibility.\r\n\r\nThe current behaviour of leaving the dependency as `undefined` is surprising and hard to debug.\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.19.1\r\n\r\nPreviously reported bugs #4609 and #6302 have touched on some aspects of this issue, but have not provided a workable solution for the case when the external dependency is only available via AMD and the target is not a library.", "labels": ["Send a PR"], "number_of_comments": 7, "created_at": "2018-09-24 08:05:55", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "362333524": {"author_username": "joeljeske", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8062, "title": "ModuleConcatenationPlugin is setting `modules[].reasons[].moduleId` to null in some cases", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nIt would appear that when using `ModuleConcatenationPlugin` (which is default for mode = production), that the modules that it concatenated do not properly have module ids in the output stats. More specifically, if a `reason` for given `module` is from a module that has been concatenated, then the `moduleId` of that `reason` is `null`. I would not expect that to be the case. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nReproduction Project: \r\nhttps://github.com/joeljeske/webpack-module-concatenation-plugin-issue\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nEvery `reason` for `module` should have a `moduleId` that corresponds with the `id` of a `module`\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.19.1\r\nNode.js version:  v8.11.3\r\nOperating System: MacOS 10.13.4\r\nAdditional tools: N/A\r\n", "labels": [], "number_of_comments": 3, "created_at": "2018-09-20 19:32:35", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "361169504": {"author_username": "sokra", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8046, "title": "Add repro test case", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\ntest case\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nyes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nnothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-not-ok", "PR: unreviewed"], "number_of_comments": 5, "created_at": "2018-09-18 07:28:11", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "359941202": {"author_username": "aem", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8026, "title": "combining dynamically and statically named chunks behaves weirdly", "body": "I'm not sure if this is a feature request because this currently WAD or a bug report because it's broken, so here goes nothing.\r\n\r\ntl;dr: combining dynamically named chunks (e.g. `import( /* webpackChunkName: \"chunk-[request]\" */ './path/to/' + chunkname)`) and a statically named chunk of the same name results in two chunks instead of one. i've put together a simple repro here: https://github.com/aem/chunk-name-bug-repro\r\n\r\nThe same way you can use dynamic import to add multiple codepaths to the same chunk by giving them the same chunk name, I'd assume that if you have a dynamically-generated chunk name but know what the name of that chunk will eventually be that you should still be able to combine those chunks into one larger chunk without emitting an additional asset.\r\n\r\nthis is reproducible in both `webpack@3` and `webpack@latest`\r\n\r\nsimple repro, pulled out of the repo that I linked above:\r\n\r\n```js\r\n// index.js\r\n// assumes a `routes` directory containing a.js b.js and c.js exists\r\nfunction importRoute(routeName) {\r\n  return import(/* webpackChunkName: \"chunk-[request]\" */ `../routes/${routeName}`).then(\r\n    module => module.default.render()\r\n  );\r\n}\r\n\r\nimportRoute('a');\r\nimport(/* webpackChunkName: \"chunk-a\" */ '../routes/b').then(module =>\r\n  module.default.render())\r\n```\r\n\r\n### expected chunks\r\n\r\nmain.js\r\nchunk-a.js (containing route a and route b)\r\nchunk-b.js\r\nchunk-c.js\r\n\r\n### actual chunks\r\n\r\nmain.js\r\nchunk-a.js (containing route a and route b)\r\nchunk-a-js.js (containing route a)\r\nchunk-b.js\r\nchunk-c.js", "labels": ["inactive"], "number_of_comments": 3, "created_at": "2018-09-13 15:12:42", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "359885466": {"author_username": "jddxf", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8024, "title": "sideEffects doesn't work", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n`sideEffects` doesn't work.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nhttps://github.com/jddxf/webpack4-side-effects-demo\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.18.1\r\n", "labels": ["Send a PR"], "number_of_comments": 8, "created_at": "2018-09-13 13:01:13", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "358463204": {"author_username": "RebeccaStevens", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8010, "title": "support for esmodules as output for the web?", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nWhen outputting content targeting the `web` platform, it would be nice to have the option to output an es module for modern browsers. (I don't believe there is currently a way to do this - if there is it needs better documentation :P).\r\n\r\n**What is the expected behavior?**\r\nIdeally, I would like to be able to have webpack output two entry files, an esmodule as well as what it currently outputs.  \r\nThen in the `index.html` file, both files can be loaded like this:\r\n\r\n```html\r\n<head>\r\n  <script nomodule src=\"bundle.js\" async></script>\r\n  <script type=\"module\" src=\"bundle.mjs\" async></script>\r\n</head>\r\n```\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nSupporting the modern web.\r\n\r\n**How should this be implemented in your opinion?**\r\nMaybe something like this:\r\n\r\n```js\r\n// webpack.config.js\r\n\r\nconst config = {\r\n  //...\r\n};\r\n\r\nconst webConfig = Object.assign({}, config, {\r\n  target: 'web',\r\n  //...\r\n});\r\n\r\nconst webModuleConfig = Object.assign({}, config, {\r\n  target: 'web-module',\r\n  //...\r\n});\r\n\r\nmodule.exports = [\r\n  webConfig, webModuleConfig,       \r\n];\r\n```\r\n\r\n**Are you willing to work on this yourself?**\r\nMaybe but probably not. I'm still a novice when it comes to the webpack eco-system so I'd probably be at a loss on how to implement this.\r\n", "labels": [], "number_of_comments": 11, "created_at": "2018-09-10 04:21:34", "reactions": {"total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "357600158": {"author_username": "byzyk", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 8000, "title": "feat(config): make `output.library` accept functions", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nfeature, closes #7904 \r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n`output.library`, `output.libraryExport` can now accept function. \r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-not-ok", "PR: review-outdated", "PR: tests-needed"], "number_of_comments": 8, "created_at": "2018-09-06 10:49:47", "reactions": {"total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "357042435": {"author_username": "imjeen", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7992, "title": "Got a invalid JSON file with the webpack.DllPlugin  when there are  many entry points", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n\r\n**What is the current behavior?**\r\n\r\nRecently, Migrating webPack version from 3.10.0 to 4.17.2.\r\n\r\nI want to make a DLL file for my project, but then I got a error JSON file with `webpack.DllPlugin`, it only occurred when I use the multiple entry points. Like example below, if I have an another entry point: `entry_B`, the result JSON file: `vendor.json` is invalid JSON file.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nMy config like below:\r\n\r\n```\r\nexport default  {\r\n  entry: {\r\n    entry_A: [\r\n      'babel-polyfill',\r\n     //  more other JS files or node modules\r\n     ], \r\n    entry_B: [ // another entry point\r\n      'es6-promise',\r\n      //  more other JS files or node modules\r\n     ], \r\n  },\r\n  output: {\r\n    path: path.resolve(__dirname, './dist'),\r\n    filename: \"js/[name].js?[hash:8]\",\r\n    library: \"[name]\",\r\n  },\r\n  plugins: [\r\n    new webpack.DllPlugin({\r\n      context: \".\",\r\n      name: \"[name]\",\r\n      path: path.resolve(__dirname, `./dist/manifest/vendor.json`),\r\n    }),\r\n  ],\r\n}\r\n```\r\nand I got the `vendor.json` file, then when I use the JSON file width `webpack.DllReferencePlugin`, it tell me  that the vendor.json is invalid JSON file, the error message is like below:\r\n\r\n```\r\n/project/admin/node_modules/webpack-cli/bin/cli.js:244\r\n\t\t\t\tthrow err;\r\n\t\t\t\t^\r\n\r\nSyntaxError: /project/admin/dist/manifest/vendor.json: Unexpected token / in JSON at position 1117\r\n    at JSON.parse (<anonymous>)\r\n    at Object.Module._extensions..json (internal/modules/cjs/loader.js:708:27)\r\n    at Module.load (internal/modules/cjs/loader.js:599:32)\r\n    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:530:3)\r\n    at Module.require (internal/modules/cjs/loader.js:637:17)\r\n```\r\n\r\nObviously, I got a invalid JSON file: `vendor.json`\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n I should get a valid JSON file with `webpack.DllPlugin` when I have more than entry points.\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.17.2\r\nNode.js version: 9.10.0\r\nOperating System: Mac\r\nAdditional tools:\r\n", "labels": ["Send a PR"], "number_of_comments": 10, "created_at": "2018-09-05 02:31:26", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "356863048": {"author_username": "clarkdo", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7990, "title": "fix: add missing not null check for Compilation", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nIn `Compilation.js`, codes are using `options` all include not null check except this part, so I added this check in case of `TypeError`.\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nbugfix\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: conflict", "PR: unreviewed"], "number_of_comments": 5, "created_at": "2018-09-04 15:27:11", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "356345520": {"author_username": "bspeice", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7983, "title": "Add ArrayBuffer fallback for #7918", "body": "**What kind of change does this PR introduce?**\r\n\r\nAdds a failure case so Electron-style apps can easily use WebAssembly\r\n\r\n**Did you add tests for your changes?**\r\n\r\nDoesn't run a headless test, not sure how best to add test support (is tested using a local Electron app)\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nHopefully nothing? Think there may be a README example that needs updating, but this should be something that \"just fixes\" some background issues.\r\n", "labels": ["PR: CI-ok", "PR: unreviewed", "Web Assembly"], "number_of_comments": 9, "created_at": "2018-09-03 03:15:18", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "356047425": {"author_username": "FL0RIANMEYER", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7976, "title": "Webpack Watch change/rename detection of js to jsx, css to scss or / file to folder / index. [Ext]", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nWebpack Watch has not detected any changes / renamings of js in jsx, css in scss or / file in folder / index. [Ext]\r\n\r\n_ERROR in ./app/reducer/ui/setting.js\r\nModule build failed: Error: ENOENT: no such file or directory_\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nRename a file in watch mode (-w). Compilation does not work anymore. **Webpack process must be restarted** to fix new file detection.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nDetect at least file extension changes (renames) of resolve.extensions prop from webpack.config.[babel].js:\r\n```Javascript\r\n{\r\n    resolve: {\r\n        extensions: ['.js', '.jsx'] // ['.css', '.scss']\r\n   }\r\n}\r\n```\r\nand \r\nchanges of \r\n```Javascript\r\n    import from '***/folder/file'\r\n```\r\nto\r\n```Javascript\r\n    import from '***/folder/folder/index.[resolve.extensions]'\r\n```\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.17.1\r\n\r\nNode.js version: 10.7.0\r\nOperating System: Win\r\nEditor: Atom@1.30.0\r\n\r\n", "labels": ["X0: need more information"], "number_of_comments": 5, "created_at": "2018-08-31 16:30:37", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "356030848": {"author_username": "timneutkens", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7975, "title": "Allow rules/Conditions to be included/excluded based on package.json contents", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\nCurrently, webpack's resolver requires the package.json of every file that is imported (module). This data is however not exposed to the user through the configuration. So `module.rules` can't be configured based on for example a certain flag in package.json, or based on `engines`.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe `Condition` logic should allow for something like `package` or `packageJson` which gets the package.json contents passed in and works similar to `issuer`.\r\n\r\nAnother case for this is the `externals` configuration key, if a function is passed it should receive the package.json contents as a parameter.\r\n\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nIn Next.js we want to transpile node_modules based on their usage in React components, but it might not be the best idea to run Babel over every possible `import`, for example when the user imports a gigantic library that doesn't need compilation at all). So we're investigating alternatives like providing a key in package.json of a module to opt-in to compilation using Babel.\r\n\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nAs defined above in expected behavior. The naming can be better though \ud83d\udc4d \r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": [], "number_of_comments": 0, "created_at": "2018-08-31 15:40:21", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "355930884": {"author_username": "Andarist", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7973, "title": "Broken cjs & esm interop", "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nMany modules published to npm are using \"auto\" exports (https://rollupjs.org/guide/en#output-exports-exports, but there is also a popular babel plugin which adds this behaviour https://github.com/59naga/babel-plugin-add-module-exports#readme) which is supposed to ease interop with node (removing \"pesky\" `.default` for CJS consumers when there is only a default export in the module).\r\n\r\nAnd with that depending on a package authored **solely** in CJS (which still is really common) which depends on a package authored using the mentioned \"auto\" mode is dangerous and broken. \r\n\r\nWhy? Because webpack is using the \"module\" entry from package.json (thus using real default export) without checking the requester module type (which is cjs here). CJS requester did not use a `.default` when requiring the package with auto mode, because from its perspective there was no such thing.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nhttps://github.com/Andarist/webpack-module-entry-from-cjs-issue . Exported value should be `\"foobar42\"` instead of `\"foo[object Module]42\"`\r\n\r\n**What is the expected behavior?**\r\n\r\nWebpack should deopt (ignoring .mjs & \"module\") its requiring behaviour based on the requester type.\r\n\r\n**Other relevant information:**\r\nwebpack version:  latest\r\nNode.js version: irrelevant\r\nOperating System: irrelevant\r\nAdditional tools: irrelevant\r\n\r\nMentioning rollup team as probably its the tool outputting the most auto mode libraries ( @lukastaegert @guybedford ) and @developit (who I think might be interested in the discussion). ", "labels": [], "number_of_comments": 12, "created_at": "2018-08-31 10:42:58", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "354655791": {"author_username": "danburzo", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7962, "title": "Plugin for finding circular dependencies", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n_Logging this issue as per @evilebottnawi's [request here](https://github.com/webpack-contrib/awesome-webpack/pull/114#issuecomment-416514220)_ \r\n\r\nA plugin that can identify circular dependencies in modules, similar to [aackerman/circular-dependency-plugin](https://github.com/aackerman/circular-dependency-plugin), would work well in core Webpack.\r\n\r\n**What is the expected behavior?**\r\n\r\nEither enabled by default for `mode: development`, or registered by the user manually in the `plugins` array.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nWe've recently upgraded to Webpack 4, set `mode: production`, and `modules: false` in Babel, and we've been pleasantly surprised by `ModuleConcatenationPlugin` and the tree-shaking features. However, we've had a few instances where circular dependencies would break at runtime, and this plugin helped us quicky identify where these were.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nas `webpack.CircularDependenciesPlugin` with the ability to include/exclude module patterns, as some circular dependencies are not avoidable.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nI can help test it, but I don't have enough experience with the Webpack codebase.\r\n", "labels": [], "number_of_comments": 5, "created_at": "2018-08-28 09:55:50", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "353862835": {"author_username": "cxa", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7953, "title": "Target for \"electron-renderer\" shouldn't have `browser` in `resolve.mainFields`", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nIssue #6811 assumption is wrong. Electron renderer is not only a browser, it utilities the node power.\r\n\r\n> Each web page in Electron runs in its own process, which is called the renderer process.\r\n> In normal browsers, web pages usually run in a sandboxed environment and are not allowed access to native resources. Electron users, however, have the power to use Node.js APIs in web pages allowing lower level operating system interactions.\r\n> https://electronjs.org/docs/tutorial/application-architecture\r\n\r\n When target browser, you'll lose all the node power. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nThe pr to the issue #6811 should be reverted.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.16.5\r\n", "labels": [], "number_of_comments": 15, "created_at": "2018-08-24 17:15:21", "reactions": {"total_count": 13, "+1": 12, "-1": 1, "laugh": 0, "heart": 0, "hooray": 0}}, "353297166": {"author_username": "Moghul", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7939, "title": "output.devtoolNamespace not getting the correct automatic value", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nCurrently, if you are building multiple libraries in the same webpack file (via the multiple entries functionality), the `sourceURLs` in these bundles seem broken.\r\n\r\n`//# sourceURL=webpack://%5Bname%5D/./path/to/my/node_modules/loggly-jslogger/dist/loggly.tracker-2.2.2.min.js?`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nThis is a sample of the entry and output setups that create this issue.\r\n\r\n```\r\n    entry: {\r\n        Preview: [\r\n            vendor + 'loggly-jslogger/dist/loggly.tracker-2.2.2.min.js',\r\n            utilities + 'setup.preview.js'\r\n        ],\r\n        Signup: [\r\n            vendor + 'loggly-jslogger/dist/loggly.tracker-2.2.2.min.js',\r\n            utilities + 'setup.signup.js'\r\n        ]\r\n    },\r\n    output: {\r\n        path: destinationDirectory,\r\n        filename: '[name].bundle.[contenthash].js',\r\n        libraryTarget: 'var',\r\n        library: '[name]'\r\n    },\r\n```\r\n\r\nThis bug is \"fixable\" by setting a value to [output.devtoolNamespace](https://webpack.js.org/configuration/output/#output-devtoolnamespace) like:\r\n\r\n\r\n```\r\n    output: {\r\n        path: destinationDirectory,\r\n        filename: '[name].bundle.[contenthash].js',\r\n        libraryTarget: 'var',\r\n        devtoolNamespace: 'whateverYouWantGoesHere',\r\n        library: '[name]'\r\n    },\r\n```\r\n\r\nand your sourceURLs will become\r\n\r\n`webpack://whateverYouWantGoesHere/./path/to/my/node_modules/loggly-jslogger/dist/loggly.tracker-2.2.2.min.js`\r\n\r\nThis seems to be caused by the fact that, as per documentation, 'output.devtoolNamespace' takes the value of 'output.library' by default.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect that 'output.devtoolNamespace' would take the entry's name just like the file name and libraries do.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.16.5\r\nNode.js version: 10.1.0\r\nOperating System: Ubuntu 16.04\r\nAdditional tools:\r\n\r\nEDIT: This also happens with single libraries being built if you use `output.library : [name]`", "labels": [], "number_of_comments": 2, "created_at": "2018-08-23 09:23:45", "reactions": {"total_count": 6, "+1": 6, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "351925102": {"author_username": "bspeice", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7918, "title": "WASM bundles fail when loaded via `file://` URLs", "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\nElectron apps fail to load WASM code because WASM bundles served via `file` URL's aren't allowed to be loaded via `instantiateStreaming` (specifically because MIME `application/wasm` must be set.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nNo configuration is specifically necessary, but I've included a reproducing project at [this git repo](https://git.speice.io/bspeice/rust_electron). To run:\r\n\r\n```\r\nyarn install\r\n./build.sh\r\nyarn start\r\n```\r\n\r\nRunning will require a recent Rust nightly build, but I'm happy to add the bundle files if necessary to skip that step.\r\n\r\n**What is the expected behavior?**\r\nWebpack would detect that file URLs are not eligible for inclusion via `instantiateStreaming` and prioritize filling the `arrayBuffer` and `instantiate`ing that instead.\r\n\r\nPlease note that I can specifically reproduce the *correct* behavior by snipping out the `else if(...) WebAssembly.instantiateStreaming` branch. I'm not sure what the right way of fixing this is, but I'm happy to work on a PR if someone can point me in the right direction.\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.16.5\r\nNode.js version: 8.10\r\nOperating System: Linux\r\nAdditional tools: Rust nightly\r\n\r\n---\r\n\r\nAlright, some updates after I spent more time looking at this: the actual URL request goes to \"<hash>.wasm\", so adding checks for \"./\" or \"file://\" don't fix this specific issue (though may not be a bad idea in general). Is this something that should potentially have a config value added instead, where we can disable streaming load?", "labels": ["Send a PR"], "number_of_comments": 14, "created_at": "2018-08-19 18:49:06", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "351744385": {"author_username": "developit", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7910, "title": "Feature: compressed performance budgets \ud83c\udf89", "body": "Hello!\r\n\r\nWebpack has a great performance budgeting feature that tracks whether chunks or entry modules exceed a size limit. The one missing piece for folks like me is that bundle size is generally measured in terms of bytes-over-the-wire, and generally that means compressed size.  I took the opportunity to build on @TheLarkInn's awesome work, adding gzipped size calculations to the `performance` feature.  The result is that performance budgetings are measured against compressed size, which matches up nicely with [Alex's original blog post on the subject](https://infrequently.org/2017/10/can-you-afford-it-real-world-web-performance-budgets/).\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nA new feature.\r\n\r\n**Did you add tests for your changes?**\r\n\r\nI updated the tests to reflect the changes.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nJust the new configuration property and default values.", "labels": ["PR: conflict", "PR: unreviewed"], "number_of_comments": 8, "created_at": "2018-08-17 21:29:05", "reactions": {"total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "351179719": {"author_username": "mrksbnch", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7904, "title": "More flexible options for `output.library`, `output.libraryTarget` and `output.libraryExport`", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nThe `output` options (`output.library`, `output.libraryTarget` and `output.libraryExport`) should allow functions in addition to the current possibilities (arrays, strings etc.).\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nThe current way to specify options for `output.library`, `output.libraryTarget` and `output.libraryExport` is very limiting and e.g. doesn't allow us to specify different `library` or  `output.libraryTarget` for every entry file. The only workaround for this (AFAIK) is to run webpack multiple times with different configs / environment variables.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nI'm not familiar with the internals of webpack but it could be implemented similar to `output.filename` (https://github.com/webpack/webpack/issues/6098), e.g.\r\n\r\n```\r\n{\r\n    output: {\r\n        library: (bundle) => {\r\n            return bundle.name === 'file' ? 'something' : ['something', '[name]'];\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nIf someone is able to give me some direction on where to start and how this can be implemented, I'm willing to work on this myself (although I'm not at all familiar how webpack works internally).", "labels": ["Send a PR"], "number_of_comments": 12, "created_at": "2018-08-16 12:15:40", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "349767676": {"author_username": "Alexendoo", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7879, "title": "Split chunks are not being loaded in the webworker target", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nThe chunks are not imported (no occurrences of importScripts in entry chunks) so an error is thrown:\r\n\r\n```\r\nUncaught TypeError: Cannot read property 'call' of undefined        worker-a.js:20\r\n__webpack_require__ @ worker-a.js:20\r\n(anonymous) @ worker-a.js:93\r\n__webpack_require__ @ worker-a.js:20\r\n(anonymous) @ worker-a.js:84\r\n(anonymous) @ worker-a.js:87\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nRepo: https://github.com/Alexendoo/bugs/tree/master/02-webpack-worker-chunks\r\nHosted: https://alexendoo.github.io/bugs/02-webpack-worker-chunks/ (nothing to display, just the errors in console)\r\n\r\nThe above setup has two entries, `worker-a` and `worker-b` that have a common shared dependency on `shared.js`, it sets `minSize: 0` and `chunks: \"initial\"` in `splitChunks` to force a separate chunk to be created\r\n\r\nThe output of running webpack can be seen in `dist/`, neither `worker-a.js` nor `worker-b.js` import `worker-a~worker-b.js`\r\n\r\nThe bug also occurs when adding a named chunk to `cacheGroups`\r\n\r\n**What is the expected behavior?**\r\n\r\nBoth `worker-a.js` and `worker-b.js` should import the chunk in `worker-a~worker-b.js`, through importScripts or some other mechanism\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.16.5\r\nNode.js version: 10.7.0\r\nOperating System: Windows 10\r\nAdditional tools: none", "labels": [], "number_of_comments": 13, "created_at": "2018-08-11 22:17:29", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "347319784": {"author_username": "u3u", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7843, "title": "Import an exception behavior of a module that uses `import()` internally", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nI am developing a vue plugin that is built using `@vue/cli` 3.0.0-rc.10. Additional features can be loaded via option options when installing the plugin (asynchronously loaded via `import()`).\r\n\r\nIf you import it using `<script>`, it will work fine.\r\nBut there was a problem when importing via webpack:\r\n\r\n<img src=\"https://user-images.githubusercontent.com/20062482/43634012-9a4f4a4e-973d-11e8-8a14-1a0c5dcf9c8d.png\" width=\"500\">\r\n\r\nHere webpack gets extra functionality by asynchronously loading the script element, but this file is not copied to `publicPath`, causing the file to not exist and cannot be loaded.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/20062482/43634320-57e1bc2c-973e-11e8-80d6-49667305fdf1.png\">\r\n\r\n<!-- **If the current behavior is a bug, please provide the steps to reproduce.** -->\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nI am not sure if the current behavior is expected, but I think it should be copied to `publicPath` and the module loaded correctly.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version: v4.16.4\r\nNode.js version: v9.11.1\r\nOperating System: macOS High Sierra Version 10.13.6\r\nAdditional tools: -\r\n", "labels": [], "number_of_comments": 14, "created_at": "2018-08-03 09:12:07", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "347272134": {"author_username": "donaldpipowitch", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7841, "title": "`stats.hasWarnings()` should respect `warningsFilter` (or there should be an API for that)", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n`stats.warningsFilter` allows flagging warnings to be irrelevant, so they aren't logged. But `hasWarnings()` will still return `true` in cases where all warnings were ignored. This results in (my opinion) weird behavior in other tools which use this API. E.g. you get output like this:\r\n\r\n![image](https://user-images.githubusercontent.com/1152805/43626809-b9d8e5cc-96f3-11e8-9aac-1728dc56d512.png)\r\n\r\n`\"Compiled with warnings.\"` is shown, but no warning is shown (which is logical, because the only warning was filtered out).\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nIn our build setup there is one kind of warning we currently ignore with `stats.warningsFilter`, because it is not relevant for us. Seeing `\"Compiled with warnings.\"` messages in the build log however confuses other developers who need to build the project, but don't know about our specific build configuration. We do want to see warnings in other cases, but if the only warning in the build is the one we actually filtered out, we want a successfully compiled response. In this case we want `hasWarnings()` to actually return `false`.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nI guess this is the call which needs to be modified so it uses `static filterWarnings`: https://github.com/webpack/webpack/blob/9f16238054bad5c3ec62d24c41b12625defa72e5/lib/Stats.js#L70. Sadly it looks like the `warningsFilter` are only created in the `toJson` method with help of the `options` param. Not sure if it would be possible top access `options` on the `compilation` as well or if we would need to allow passing `options` to the constructor as well? \ud83e\udd37\r\n\r\nIf this is too disruptive I could imagine to make this an optional flag: `stats.hasWarnings({ warningsFilter })` ( if the caller should be in charge to pass `warningsFilter`) or `stats.hasWarnings({ filter: true })` (if it should be just a flag to show you're interested in the filtered results).\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nyes\r\n", "labels": ["Send a PR"], "number_of_comments": 3, "created_at": "2018-08-03 06:15:29", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "346524170": {"author_username": "kamijin-fanta", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7832, "title": "HMR support to multi entries", "body": "**What kind of change does this PR introduce?**\r\n\r\n- ref #7829\r\n\r\n**Did you add tests for your changes?**\r\n\r\n- not yet\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n- no\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n- no\r\n", "labels": ["PR: CI-ok", "PR: tests-needed", "PR: unreviewed"], "number_of_comments": 5, "created_at": "2018-08-01 09:40:00", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "345812491": {"author_username": "ghost", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7814, "title": "Hot Module Replacement of a particular module only works once while the App component can be HMR-ed all the time", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nHot Module Replacement works every other time but not all of the time. A more detailed explanation is [available here](https://stackoverflow.com/q/51594983/796036).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nA complete MWE can be found here: https://gitlab.com/NearAutomata/webpack-hmr-issue. Clone and run the following commands:\r\n\r\n    yarn\r\n    yarn run build-main\r\n    yarn run build-renderer-hot\r\n\r\nAnd in a second terminal run\r\n\r\n    yarn run start-hot\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nI expect the other module to be HMR-ed every time.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.16.3\r\nNode.js version: 10.7.0\r\nOperating System: Windows 10 Build 1803\r\nAdditional tools: Electron 2.0.5 and Electron 3.0.0@beta, Redux 4.0.0\r\n\r\nAccording to reduxjs/redux#3079, the `replaceReducer` works correctly, so it's most likely an issue with HMR in general or how I accept updates via `module.hot.accept`.", "labels": [], "number_of_comments": 10, "created_at": "2018-07-30 15:36:11", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "344428922": {"author_username": "agibralter", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7787, "title": "Support for long-term caching based on generated content, not source files for chunkhash", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nPlease natively support output chunk hashing that is based on chunks _output_ rather than their _input_ (i.e., `output.filename = \"[name]-[chunkhash].js\"`).\r\n\r\n_Why?_ you may ask? Because hashing is mainly used for production asset caching. Right now, there are at least three ways the content of a chunk can change, and only one of those causes the `[chunkhash]` value to change.\r\n\r\nWhen you deploy a new version of your code, you want browsers not to use old, stale assets. In theory, hashes should be based on the content of the files, such that when the files changes, the hash changes, and you can leverage the asset manifest to write out a new `<script>` or `<link>` tag with the new hash. And obviously, the advantage of `[chunkhash]` vs `[hash]` is that if you make a change that only changes a single chunk, you do not \"invalidate\" the cache of unchanged chunks, thus improving the performance for end users who have already downloaded unchanged chunks.\r\n\r\nGoing back to those three ways a chunk's content can change:\r\n\r\n1) You make a change to your entrypoint or its dependencies.\r\n2) You make a change to the webpack config (e.g. adding/removing/changing a plugin/loader).\r\n3) You upgrade a loader/plugin version.\r\n\r\nRight now, only **1** is supported, which leaves a pretty glaring hole. You may, say, add source maps (**2**) only to discover that your CDN is still serving a stale version of your code without source maps because the `[chunkhash]` was not updated.\r\n\r\nIt seems like tools like https://github.com/erm0l0v/webpack-md5-hash _may_ address this, but this seems like a pretty huge flaw in the expected behavior out-of-the-box.\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nThe expected behavior is that when the content of a chunk changes, the hash for that chunk should change too.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nAs explained above, the motivation is the principle of least surprise. Right now, it's surprising that changing configuration, which may have profound effects on the output, silently slips by as an output asset with the same name as a stale version of the asset.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nI think there are a few options:\r\n\r\n1) Reimplement `[chunkhash]`, though I seem to remember reading issues about challenges with sourcemaps.\r\n2) Implement a new token value (e.g. `output.filename = \"[name]-[chunkhash]-[webpackhash].js\"`) such that changing anything about your webpack config or its dependencies allows you to bust the cache.\r\n\r\n**Other Considerations**\r\n\r\nTo hack around this in the mean time, I've employed a custom hashing function that uses the final JSONified value of the webpack config as hash salt:\r\n\r\n```javascript\r\n// webpack.config.js\r\nconst config = {};\r\n\r\nclass Hasher {\r\n  constructor() {\r\n    const hash = require(\"crypto\").createHash(\"sha256\");\r\n    hash.update(JSON.stringify(config));\r\n    return hash;\r\n  }\r\n}\r\n\r\nObject.assign(config, {\r\n  output: {\r\n    filename: isProd ? \"[name]-[chunkhash].js\" : \"[name].js\",\r\n    hashFunction: Hasher\r\n  },\r\n  ...\r\n})\r\n\r\nmodule.exports = config;\r\n```\r\n\r\nThis creates a custom hashing function that injects a JSONified version of the webpack config such that changes to webpack's configuration cause the hash to change. In theory, we could use `output.hashSalt`, but that cannot be lazily evaluated once the entire webpack config has been constructed. Furthermore, output.hashSalt does not get used for MiniCssExtractPlugin's [contenthash], but (confusingly) output.hashFunction does. Finally, this only accounts for changes in the webpack config itself\u2014it does not account for underlying changes in plugins/loaders due to, e.g., version upgrades.\r\n\r\n**Are you willing to work on this yourself?**\r\nYes! But I think I need help.\r\n", "labels": [], "number_of_comments": 5, "created_at": "2018-07-25 12:47:41", "reactions": {"total_count": 23, "+1": 23, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "344220077": {"author_username": "jedwards1211", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7782, "title": "When a module is included in two different chunks, tree shake it differently for each chunk", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nHere is the bug-ish issue I'm running into:\r\n\r\nhttps://github.com/jedwards1211/webpack-code-splitting-issue/tree/two-async-chunks\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n### `index.js`\r\n```js\r\nimport('./chunk1.js')\r\nimport('./chunk2.js')\r\n```\r\n### `chunk1.js`\r\n```js\r\nimport { Toggle } from 'react-powerplug';\r\nconsole.log(Toggle)\r\n```\r\n### `chunk2.js`\r\n```js\r\nimport { Value } from 'react-powerplug';\r\nconsole.log(Value)\r\n```\r\n### `webpack.config.js`\r\n```js\r\n// webpack.config.js\r\nmodule.exports = {\r\n  mode: 'production',\r\n  externals: {\r\n    'react': 'React'\r\n  },\r\n}\r\n```\r\nwebpack it on the command line\r\n\r\n**What is the expected behavior?**\r\n`dist/1.js` contains `Toggle` but not `Value`.\r\n`dist/2.js` contains `Value` but not `Toggle`.\r\n\r\n**Current behavior**\r\n`dist/1.js` contains both `Toggle` and `Value`.\r\n`dist/2.js` contains both `Toggle` and `Value`.\r\n\r\nIt seems that the tree shaking is applied to `react-powerplug` main module itself, irrespective of the individual chunks that are importing from it.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nMany packages nowadays use rollup to bundle their code into a single JS module and distribute that one file (or maybe one bundle for ES5, one bundle for ES2015).  As such, I want to be confident that Webpack will eliminate dead code effectively when several different chunks of my app are importing from a rollup bundle.\r\n\r\n**How should this be implemented in your opinion?**\r\nHopefully, tree-shaking can be performed on `react-powerplug` for the import in `chunk1.js`, and then a second, different round of tree-shaking can be performed for the import in `chunk2.js`.  Right now it seems like Webpack is only performing one tree-shaking operation on `react-powerplug` based upon all imports from it from all chunks in my app.\r\n\r\n**Are you willing to work on this yourself?**\r\nI would need a lot of guidance, as this seems like this might require a significant refactor", "labels": [], "number_of_comments": 15, "created_at": "2018-07-24 22:02:21", "reactions": {"total_count": 11, "+1": 8, "-1": 0, "laugh": 0, "heart": 3, "hooray": 0}}, "343539685": {"author_username": "Zeracy", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7769, "title": "Implemented Multi Performance Budget possibility", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nImplementation of the feature requested on the following issue: https://github.com/webpack/webpack/issues/7753\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nAllows the performance object to instead be an array of performance objects if needed.\r\nEverything else is configured identically.\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nYes, tests were added to make sure that the previous behavior still worked as well as to make sure the new one worked as intended.\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nThere is no breaking change, the old behavior should still exist.\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nThe ability to add several performance budgets with different assetFilters.\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n**Usage Examples**\r\nPerformance as an Object:\r\n```\r\nperformance: {\r\n  \thints: \"warning\",\r\n        maxAssetSize: 100000,\r\n        maxEntrypointSize: 100000\r\n}\r\n```\r\nPerformance as an Array of Performance Objects:\r\n(configuring a different max Asset and Entrypoint size for svg files)\r\n```\r\nperformance: [\r\n    {\r\n        hints: \"warning\",\r\n        maxAssetSize: 100000,\r\n        maxEntrypointSize: 100000,\r\n        assetFilter: function(asset) {\r\n        \t   return !asset.endsWith(\"svg\");\r\n        }\r\n    },\r\n    {\r\n        hints: \"warning\",\r\n        maxAssetSize: 500000,\r\n        maxEntrypointSize: 500000,\r\n        assetFilter: function(asset) {\r\n        \t   return asset.endsWith(\"svg\");\r\n        }\r\n    }\r\n]\r\n```", "labels": ["PR: CI-ok", "PR: review-outdated"], "number_of_comments": 10, "created_at": "2018-07-23 08:41:34", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "343416780": {"author_username": "ZhangYiJiang", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7764, "title": "Trim cli names and use alias instead of full CLI name during CLI installation prompt ", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n- Add trim to CLI name check. This prevents silly failures like this due to stray space in front or behind the choice \r\n\r\n```\r\nOne CLI for webpack must be installed. These are recommended choices, delivered as separate packages:\r\n - webpack-cli (https://github.com/webpack/webpack-cli)\r\n   The original webpack full-featured CLI.\r\n - webpack-command (https://github.com/webpack-contrib/webpack-command)\r\n   A lightweight, opinionated webpack CLI.\r\nWe will use \"yarn\" to install the CLI via \"yarn add -D\".\r\nWhich one do you like to install (webpack-cli/webpack-command):\r\nwebpack-cli \r\nNo matching choice.\r\nOne CLI needs to be installed alongside webpack to use the CLI.\r\nTry to installing your CLI of choice manually.\r\n``` \r\n\r\n- Use `alias` rather than the full name in the prompt - this just reduce the amount of typing. The code already accepts the alias, so no actual change to the logic. \r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\nThis file does not appear to be covered by tests, or I can't find the test file  \r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNone \r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: conflict", "PR: reviewed-approved"], "number_of_comments": 4, "created_at": "2018-07-22 15:51:57", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "343396507": {"author_username": "sokra", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7761, "title": "add type coverage report tool", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\ntooling\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nN/A\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nnothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-not-ok", "PR: review-outdated"], "number_of_comments": 3, "created_at": "2018-07-22 10:56:48", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "343063213": {"author_username": "Zeracy", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7753, "title": "Allow for multiple Performance Budgets", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nCurrently the performance budget plugin only accepts one configuration for assets in general.\r\nIt should be possible to assign a performance budget for each different type of assets.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nIf you want to have two different budgets for distinct types of files, it is currently not possible.\r\n\r\n**How should this be implemented in your opinion?**\r\nThe old implementation should still work, but it should be possible to instead add an array of of budget objects if you wish to set several budgets.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": ["Send a PR"], "number_of_comments": 6, "created_at": "2018-07-20 10:53:01", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "341932149": {"author_username": "aczekajski", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7734, "title": "Unable to externalize context/dynamic require", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\nThere should be an easy way to make `require` calls external for a `node` target. For now the behaviour seems to be inconsistent because `require('./someModule')` is treated completely different than `require('./modules/' + name)`.\r\n\r\n**What is the expected behavior?**\r\nMaking module external should be possible to accomplish purely by webpack configuration, without using webpack-specific code like `__non_webpack_require__`.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\nI have a scenario where my application (`target: 'node'`) automatically loads external middlewares (not built in by webpack) from certain folder. If middlewares paths were predefined, it's not a problem, I can do\r\n```js\r\nconst m1 = require('./middlewares/first/index.js');\r\nconst m2 = require('./middlewares/second/index.js');\r\n```\r\nand in my webpack configuration I can specify:\r\n```js\r\n{\r\n  externals: [\r\n    (context, request, callback) => {\r\n       if (/middlewares/.test(request)) {\r\n          return callback(null, 'commonjs ' + request);\r\n       }\r\n       callback();\r\n    },\r\n  ],\r\n}\r\n```\r\nand the above require statements will be evaluated during runtime of built app. There's no need for them to be present anywhere in project during build. \r\n\r\nHowever, my case is all about dynamic loading. I'd like to load the modules based on folder contents or based on some list known only in runtime:\r\n```js\r\nfor (const name of middlewareNames) {\r\n  middlewares[name] = require('./middlewares/' + name + '/index.js');\r\n}\r\n```\r\nThat way, unfortunately, the path from this `require` statement never reaches the function specified in `externals`. Since `middlewares` folder is not present in project during build, it ends up throwing\r\n```\r\nERROR in ./src/server.ts\r\nModule not found: Error: Can't resolve './middlewares' in 'C:\\...'\r\n```\r\nI see no way to just mark this dynamic require call as external. The same thing happens if I try using context:\r\n```js\r\nrequire.context('./middlewares', false, /index\\.js/);\r\n```\r\n\r\nOne workaround for this problem is using `__non_webpack_require__` for my dynamic middlewares loading mechanism. But this is vendor-locking. If I ever decide to change from webpack to something else, I'd need to replace `__non_webpack_require__` with something else. Or, if I want to build-in some middlewares and still be able to load other middlewares dynamically during runtime, it will again require code changes while in fact a simple `require` in a loop and some configuration in webpack should be enough to accomplish the task.\r\n\r\n**How should this be implemented in your opinion?**\r\nSince webpack does a static code analysis anyway, it might be achieved by webpack-specific comments in code. This way, it doesn't break the original code and won't require any changes if one choose to build app in different way or to run it directly.\r\n\r\n1. It should be possible to explicitly mark require as external:\r\n```js\r\nrequire(/* webpack-require-external */'./middlewares/' + name + '/index.js');\r\nrequire(/* webpack-require-external */moduleName);\r\n```\r\n2. All require calls not marked as external should be passed to the externals resolver and in this case:\r\n```js\r\nrequire('./middlewares/' + name + '/index.js');\r\n```\r\nit should still try to find all possible existing files in project that match the expression (like `'./middlewares/builtInMiddleware/index.js'`) and these (if the exist) will be passed to externals resolver, but besides that, a special request like this should be passed too: `'./middlewares/*/index.js'`. If user doesn't explicitly do\r\n```js\r\nreturn callback(null, 'commonjs ' + request);\r\n```\r\nthe resulting app will behave as usual, throwing module not found error in runtime if you try to import something that's not already built-in. But if you do mark it as `commonjs` module, resulting app will try to perform standard `require` call (equivalent of `__non_webpack_require__`) for all require calls to modules that are not already built-in.\r\n3. It might be useful to also do require like this:\r\n```js\r\nrequire(/* webpack-require-fallback-external */moduleName);\r\n```\r\nwhich in runtime will try to use a built-in module and if module like that is not present, it will perform standard require.\r\n\r\n**Are you willing to work on this yourself?**\r\nI think my knowledge on internal webpack mechanisms is too week for now\r\n", "labels": [], "number_of_comments": 5, "created_at": "2018-07-17 13:59:46", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "339844414": {"author_username": "LeopoldLerch", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7697, "title": "scss-files still in js-bundle altough extracted", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nHi, \r\nI am using sass-loader toghether with typings-for-css-modules-loader and MiniCssExtractPlugin, in order to get js-files together with corresponding css files for my multiple entries. However, in difference to webpack 3, now the styles.scss-files still appear in the js-bundles (as seen in report), which seems to be the reason why my bundles are now greater (in production-build) than using webpack 3. \r\n\r\nmy configuration is:\r\n```\r\nvar path = require(\"path\");\r\nvar webpack = require(\"webpack\");\r\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\r\nvar CopyWebpackPlugin = require(\"copy-webpack-plugin\");\r\nconst CleanWebpackPlugin = require(\"clean-webpack-plugin\");\r\nconst TsconfigPathsPlugin = require(\"tsconfig-paths-webpack-plugin\");\r\n\r\nmodule.exports = {\r\n    entry: {\r\n        startPage: [\"./Entries/BodyStartSeite/BodyStartSeite\"],\r\n        profilSeite: [\"./Entries/BodyProfilSeite/BodyProfilSeite\"],\r\n        meinBereichSeite: [\"./Entries/BodyMeinBereichSeite/BodyMeinbereichSeite\"],\r\n        orgInhalteSeite: [\"./Entries/BodyOrgInhalteSeite/BodyOrgInhalteSeite\"],\r\n        zusammenArbeitSeite: [\"./Entries/BodyZusammenArbeitSeite/BodyZusammenArbeitSeite\"],\r\n        wissenCommunitiesSeite: [\"./Entries/BodyWissenCommunitiesSeite/BodyWissenCommunitiesSeite\"],\r\n        appsDiensteSeite: [\"./Entries/BodyAppsDiensteSeite/BodyAppsDiensteSeite\"],\r\n        masterpage: [\"babel-polyfill\", \"url-polyfill\", \"./Entries/MasterPage/MasterPage\"],\r\n        aufgaben: [\"./Entries/BodyAufgabenSeite/BodyAufgaben\"],\r\n        ribbonFunctions: [\"./Entries/RibbonFunctions/RibbonFunctions\"],\r\n        searchResults: [\"./Entries/SearchResults/SearchResults\"],\r\n        newsPageLayoutSocial: [\"./Entries/PageLayouts/NewsPageLayoutSocial\"],\r\n        contentSeitePageLayout1: [\"./Entries/PageLayouts/ContentSeitePageLayout1.global.scss\"],\r\n        contentSeitePageLayout2: [\"./Entries/PageLayouts/ContentSeitePageLayout2\"],\r\n        contentSeitePageLayout3: [\"./Entries/PageLayouts/ContentSeitePageLayout3\"],\r\n        commentManagementList: [\"./Entries/CommentManagementList/CommentManagementList\"],\r\n        newsPageLayoutImageRight: [\"./Entries/PageLayouts/newsPageLayoutImageRight\"],\r\n        newsPageLayoutPictureHeader: [\"./Entries/PageLayouts/newsPageLayoutPictureHeader\"],\r\n        newsPageLayoutDisplayDialog: [\"./Entries/PageLayouts/newsPageLayoutDisplayDialog.global.scss\"],\r\n    },\r\n    output: {\r\n\r\n        filename: \"[name].js\",\r\n        path: path.resolve(__dirname, \"dist/\"),\r\n        // sourceMapFilename: \"maps/[file].map\",\r\n    },\r\n    context: __dirname + \"/src\",\r\n    // Enable sourcemaps for debugging webpack's output.\r\n    // devtool: \"source-map\",\r\n\r\n    resolve: {\r\n        // Add '.ts' and '.tsx' as resolvable extensions.\r\n        extensions: [\".ts\", \".tsx\", \".js\", \".json\", \".css\", \".scss\"],\r\n        plugins: [new TsconfigPathsPlugin()],\r\n    },\r\n\r\n    module: {\r\n        rules: [{\r\n            test: [/\\.scss$/, /\\.css$/],\r\n            include: [/node_modules/, /masterpage\\.css/, /\\.global\\./i],\r\n            use: [\r\n                MiniCssExtractPlugin.loader,\r\n                {\r\n                    loader: \"css-loader\",\r\n                    options: {\r\n                        url: false,\r\n                    },\r\n                }, {\r\n                    loader: \"sass-loader\",\r\n                }],\r\n        }, {\r\n            test: [/\\.scss$/, /\\.css$/],\r\n            exclude: [/node_modules/, /masterpage\\.css/, /\\.global\\./i],\r\n            use: [\r\n                MiniCssExtractPlugin.loader,\r\n                {\r\n                    loader: \"typings-for-css-modules-loader\",\r\n                    options: {\r\n                        namedExport: true,\r\n                        camelCase: true,\r\n                        modules: true,\r\n                        localIdentName: \"[local]--[hash:base64:5]\",\r\n                        importLoaders: 1\r\n                    },\r\n                },\r\n                \"sass-loader\",\r\n            ],\r\n        },\r\n        // All files with a '.ts' or '.tsx' extension will be handled by 'awesome-typescript-loader'.\r\n        {\r\n            test: /\\.tsx?$/,\r\n            loader: \"awesome-typescript-loader\",\r\n        },\r\n        {\r\n            test: /\\.(png|woff|woff2|eot|ttf|svg)$/,\r\n            loader: \"url-loader?limit=100000\",\r\n        },\r\n\r\n            // All output '.js' files will have any sourcemaps re-processed by 'source-map-loader'.\r\n            // {\r\n            //     enforce: \"pre\",\r\n            //     test: /\\.js$/,\r\n            //     // exclude: [/node_modules/],\r\n            //     loader: \"source-map-loader\",\r\n            // },\r\n        ],\r\n    },\r\n\r\n    // When importing a module whose path matches one of the following, just\r\n    // assume a corresponding global variable exists and use that instead.\r\n    // This is important because it allows us to avoid bundling all of our\r\n    // dependencies, which allows browsers to cache those libraries between builds.\r\n    // externals: {\r\n    //     \"react\": \"React\",\r\n    //     \"react-dom\": \"ReactDOM\",\r\n    // },\r\n    plugins: [\r\n        new CleanWebpackPlugin([\"dist\"], { exclude: [\"web.config\"] }),\r\n        new webpack.WatchIgnorePlugin([\r\n            /\\.d\\.ts$/,\r\n        ]),\r\n        new MiniCssExtractPlugin({\r\n            // Options similar to the same options in webpackOptions.output\r\n            // both options are optional\r\n            filename: \"[name].css\",\r\n        }),\r\n        new webpack.optimize.ModuleConcatenationPlugin(),\r\n        new CopyWebpackPlugin([{\r\n            from: \"../Deployment/SharePointcomponents/Branding/Images/CDN/logo.png\",\r\n        },\r\n        {\r\n            from: \"../Deployment/SharePointcomponents/Branding/Images/CDN/top-background.png\",\r\n        },\r\n        {\r\n            from: \"../Deployment/SharePointcomponents/Branding/Images/CDN/zeitbuchung.png\",\r\n        },\r\n        {\r\n            from: \"../Deployment/SharePointcomponents/Branding/Images/CDN/main-background.png\",\r\n        },\r\n        {\r\n            from: \"./weathericons\",\r\n            to: \"weathericons\",\r\n        },\r\n        {\r\n            from: \"./UserProfilePhoto\",\r\n            to: \"UserProfilePhoto\",\r\n        },\r\n        {\r\n            from: \"./font\",\r\n            to: \"posticon\",\r\n        },\r\n\r\n        ], {\r\n                context: __dirname,\r\n            },\r\n        ),\r\n        // new webpack.SourceMapDevToolPlugin({\r\n        //     filename: \"maps/[file].map\",\r\n        //     exclude: \"vendor\",\r\n        // }),\r\n    ],\r\n    optimization: {\r\n        splitChunks: {\r\n            chunks: \"initial\",\r\n            cacheGroups: {\r\n                default: false,\r\n                vendors: {\r\n                    test: /[\\\\/]node_modules[\\\\/]/,\r\n                    name: \"vendor\",\r\n                    chunks: \"all\",\r\n                    reuseExistingChunk: true,\r\n                    priority: 20,\r\n                },\r\n                common: {\r\n                    minChunks: 2,\r\n                    name: \"common\",\r\n                    chunks: \"all\",\r\n                    reuseExistingChunk: true,\r\n                    priority: 10,\r\n                },\r\n            },\r\n        },\r\n    },\r\n    stats: {\r\n        maxModules: 0,\r\n        hash: false,\r\n        children: false,\r\n        excludeAssets: [/.map/, /weathericons/],\r\n        entrypoints: false,\r\n    },\r\n    mode: \"production\",\r\n};\r\n```\r\n\r\nand the report shows the scss-files still in the bundle:\r\n\r\n![image](https://user-images.githubusercontent.com/28888039/42512977-23ed52c8-8456-11e8-95c1-1f60008750d0.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nThe expected result would be, that the scss-files are left out of the js-bundles (like in webpack 3) and only remain in the css-files, which will result in less size. \r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.15.1\r\nNode.js version: \r\nOperating System: Windows 10 x64\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 6, "created_at": "2018-07-10 13:33:28", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "337980739": {"author_username": "cars10", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7647, "title": "Cannot import wasm in web workers", "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nImporting wasm in web workers throws an error.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nWebpack configuration: \r\n\r\nThis is basically a merge of the worker + wasm examples.\r\n\r\n```javascript\r\nconst webpack = require('webpack')\r\nconst path = require('path')\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\r\nconst prod = process.env.NODE_ENV === 'production'\r\n\r\nmodule.exports = {\r\n    entry: './src/js/index.js',\r\n    output: {\r\n        path: path.resolve(__dirname, 'dist'),\r\n        filename: prod ? 'js/main.[chunkhash].js' : 'js/main.js',\r\n        webassemblyModuleFilename: '[modulehash].wasm',\r\n        globalObject: 'this'\r\n    },\r\n    module: {\r\n        rules: [\r\n            {\r\n                test: /\\.wasm$/,\r\n                type: 'webassembly/experimental'\r\n            }\r\n        ]\r\n    },\r\n    plugins: [\r\n        new HtmlWebpackPlugin({ template: './src/index.html' }),\r\n        new webpack.LoaderOptionsPlugin()\r\n    ]\r\n};\r\n```\r\n\r\nindex.js\r\n\r\n```javascript\r\nvar Worker = require(\"worker-loader!./worker\")\r\nvar worker = new Worker()\r\nworker.onmessage = event => {\r\n    console.log('mainthread got:', event.data)\r\n}\r\n```\r\n\r\nworker.js\r\n```javascript\r\nonmessage = event => {\r\n    import('../wasm/hello_world.wasm').then(module => {\r\n        postMessage(module.add_one(event.data))\r\n    })\r\n}\r\n```\r\n\r\nThis leads to : \r\n\r\n```\r\nUncaught (in promise) TypeError: Cannot read property './src/wasm/hello_world.wasm' of undefined\r\n```\r\n\r\nBut the same wasm import works when put in index.js.\r\n\r\n**What is the expected behavior?**\r\n\r\nWe should be able to import wasm in workers just as we can in normal js files.\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.14\r\nNode.js version: 10.5.0\r\nOperating System: Arch\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 10, "created_at": "2018-07-03 16:55:55", "reactions": {"total_count": 11, "+1": 11, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "337826786": {"author_username": "jantimon", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7643, "title": "Typings: Webpack.Compiler is not assignable to Compiler", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nPassing a new compiler instance from  to a function which expects a `Compiler` instance causes a type error.\r\n\r\nThe following example will log the context twice without any errors however the typescript compiler will show two type errors:\r\n\r\n```\r\nconst webpack = require(\"webpack\");\r\n/** @typedef {import('webpack').Compiler} WebpackCompiler */\r\n/** @typedef {import('webpack/lib/Compiler')} Compiler */\r\n\r\nconst compiler = webpack(config);\r\nconsole.log(compiler.context); // <- [ts] Property 'context' does not exist on type 'Compiler'.\r\nsomeFunction(compiler); // <- [ts] Argument of type 'webpack.Compiler' is not assignable to parameter of type 'Compiler'.\r\n/**\r\n * @param {Compiler} compiler\r\n */\r\nfunction someFunction(compiler) {\r\n   console.log(compiler.context);\r\n}\r\n```\r\n\r\n![type-error](https://user-images.githubusercontent.com/4113649/42212948-d18bdd22-7eb7-11e8-8fa5-7f2d44c349a7.png)\r\n\r\n**What is the expected behavior?**\r\n\r\n`webpack(config)` should return an instance of `Compiler` or `Webpack.Compiler` should have a context property\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.14.0", "labels": [], "number_of_comments": 4, "created_at": "2018-07-03 09:55:50", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "336231984": {"author_username": "pravdomil", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7615, "title": "Support for default loader (file-loader) for unknown modules", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nfrom https://github.com/facebook/create-react-app/issues/667#issuecomment-252262349:\r\n\r\n> A catchall unknown-source loader feels like it would be pretty beneficial. \r\n> My opinion is that you want it managed by webpack in some way or another.\r\n\r\n**What is the expected behavior?**\r\n\r\nNon-javascript files without loader will be handled by `file-loader`, this can be configured in `module.fallbackLoader`.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nNowadays you need to list all of extensions yourself:\r\n```js\r\n{\r\n  test: /\\.(json|css|jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$/,\r\n  loader: \"file-loader\",\r\n}\r\n```\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\n```js\r\n// webpack.config.js\r\n\r\nmodule.exports = {\r\n  module: {\r\n    fallbackLoader: {\r\n      loader: \"url-loader\",\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n", "labels": [], "number_of_comments": 15, "created_at": "2018-06-27 13:32:35", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "336154170": {"author_username": "ChrisBAshton", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7613, "title": "Provide multi-config plugin hook at higher level than `compilation`", "body": "## Feature request\r\n\r\nWe are using Webpack multi config to compile different language versions of our project.\r\n\r\nWhat we need is a pre-install script that runs only once, then all of the language compilations, and then a post-install script that runs only once.\r\n\r\nWhat we actually have is a config that runs our pre-install script before each language compilation, and our post-install script after each language compilation (i.e. multiple times).\r\n\r\nThis should be possible by just hooking into a different compiler hook. I've consulted the [plugin API](https://webpack.js.org/api/plugins/) docs, [writing a plugin](https://webpack.js.org/contribute/writing-a-plugin/) guide, [compiler hooks](https://webpack.js.org/api/compiler-hooks/) and [compilation hooks](https://webpack.js.org/api/compilation-hooks/) and it looks as though such a hook does not exist.\r\n\r\n## webpack.config.js\r\n\r\n```js\r\nconst webpackConfig = [];\r\nutils.getIncludes().forEach((include, index) => {\r\n    utils.getServices(include).forEach(language => {\r\n        const configForLang = {\r\n            entry: `./source/${include}/app.js`,\r\n            output: {\r\n                filename: `[name].${language}.js`,\r\n            },\r\n            plugins: [\r\n                scaffoldCompilerInstance,\r\n                new I18nPlugin(utils.getVocabJson(language, include)),\r\n            ],\r\n        };\r\n        webpackConfig.push(configForLang);\r\n    });\r\n});\r\nreturn webpackConfig;\r\n```\r\n\r\n## example plugin (pre-install and post-install hooks)\r\n\r\nOur scaffold compiler plugin looks something like this:\r\n\r\n```js\r\nclass ScaffoldCompiler {\r\n    apply(compiler) {\r\n        compiler.hooks.beforeCompile.tapAsync('ScaffoldCompiler', (compilation, done) => {\r\n            this.executePreInstallScripts.then(done);\r\n        });\r\n\r\n        compiler.hooks.done.tapAsync('ScaffoldCompiler', (compilation, done) => {\r\n            this.executePostInstallScripts.then(done);\r\n        });\r\n    }\r\n```\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nWe want to do some setup in the pre-install phase, e.g. make network requests to update local fixture files. And we want to do some tidying up in the post-install phase, e.g. deleting files, copying output into different directories.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nThe `compiler` parameter passed to the `apply` method in a Webpack plugin should expose a new hook, e.g.\r\n\r\n```js\r\napply(compiler) {\r\n  compiler.hooks.beforeAnyCompilation.tapAsync('...', () => {});\r\n  compiler.hooks.afterAllCompilation.tapAsync('...', () => {});\r\n}\r\n```\r\n\r\n**Are you willing to work on this yourself?**\r\nI'm happy to give it a go, but am by no means a Webpack expert!\r\n", "labels": [], "number_of_comments": 10, "created_at": "2018-06-27 09:44:15", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "335271145": {"author_username": "thomsj", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7588, "title": "Fix NormalModuleReplacementPlugin", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\nFixes `NormalModuleReplacementPlugin` bug which occurs when replacing a module that was imported with an explicit file extension.\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nBugfix\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNothing\r\n", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 8, "created_at": "2018-06-25 06:09:51", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "334122333": {"author_username": "Legends", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7569, "title": "Bannerplugin typings", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nClosing [issue](https://github.com/webpack/webpack/pull/7524) local branch is not available anymore.\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nno\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nno\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nno\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: conflict", "PR: review-outdated", "PR: types"], "number_of_comments": 3, "created_at": "2018-06-20 15:05:21", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "333976029": {"author_username": "xtuc", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7565, "title": "wasm: use importable mutable globals?", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen a constant global is imported, we remove the import, we replace it with a mutable global and the runtime will then fill the global after instantiation.\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\nWhile this seems to work so far, we could simplify the transformation by switching constant global imports into mutable globals.\r\n\r\nThe value can then be changed by Webpack's runtime once the dependecies are available.\r\n\r\nOne issue is that importable mutable global just reached the shipping phase, I doubt that we can reliably use it across all the browser.\r\n\r\nQuestions:\r\n- Should we switch to it yet?\r\n    - What it the browser doesn't support it?\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\n\r\n**Are you willing to work on this yourself?**\r\nyes!\r\n", "labels": [], "number_of_comments": 13, "created_at": "2018-06-20 08:34:31", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "333857735": {"author_username": "rtsao", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7562, "title": "Conflicting ESM star re-exports should yield a SyntaxError", "body": "<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nIf a file has conflicting star exports, the first export takes precedence, and no error is raised. In the inline example below, `\"foo1\"` is logged.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nRepo with reproduction steps: https://github.com/rtsao/webpack-esm-bug-repro\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader/plugin repository instead -->\r\n\r\nInline example for convenience:\r\n\r\n```js\r\n// index.mjs\r\nimport {foo} from \"./foo.mjs\";\r\nconsole.log(foo);\r\n```\r\n\r\n```js\r\n// foo.mjs\r\nexport * from \"./foo1.mjs\";\r\nexport * from \"./foo2.mjs\";\r\n```\r\n\r\n```js\r\n// foo1.mjs\r\nexport const foo = \"foo1\";\r\n```\r\n\r\n```js\r\n// foo2.mjs\r\nexport const foo = \"foo2\";\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nIf there is conflicting re-exports for `foo`, then a `SyntaxError` should be thrown (preferably at build-time).\r\n\r\nThis happens in:\r\n\r\n*Node 8*:\r\n> SyntaxError: The requested module contains conflicting star exports for name 'foo'\r\n\r\n*Chrome 67*\r\n> Uncaught SyntaxError: The requested module './foo.mjs' contains conflicting star exports for name 'foo'\r\n\r\n*Safari 11*\r\n> SyntaxError: Importing binding name 'foo' cannot be resolved due to ambiguous multiple bindings.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version: 4.12.0\r\nNode.js version: 8.11.2\r\nOperating System: Mac OS X 10.13\r\nAdditional tools: \r\n", "labels": [], "number_of_comments": 8, "created_at": "2018-06-19 22:12:32", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "332430638": {"author_username": "Legends", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7530, "title": "ApiPlugin typings added", "body": "**What kind of change does this PR introduce?**\r\nApiPlugin typings added\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nno\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nno\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n", "labels": ["PR: CI-not-ok", "PR: review-outdated", "PR: types"], "number_of_comments": 3, "created_at": "2018-06-14 14:34:50", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "332363484": {"author_username": "lovedota", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7526, "title": "Webpack 4 - Import a Prebuilt Webpack Bundle at Runtime", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nHi currently In our projects, we plan to do Front End Micro, divide an App to multiple repositories.\r\n\r\n- Repo 1: App1\r\n- Repo 2: App2\r\n- Repo 3: App3\r\n- Repo 4: A Shell\r\n\r\n- When user navigate to /app1 we will get the script of App1 storing in CDN for example: `http://cdn.company/app1,bundle.js`. It looks like a [Lazy Load Pattern](https://webpack.js.org/guides/lazy-loading/)\r\n\r\n- Can we support the import('http://cdn.company/app1.bundle.js') at runtime ?\r\n\r\n**What is the expected behavior?**\r\n\r\n- It should map the module export from prebuilt bundle at runtime\r\n\r\n``` js\r\nimport('http://cdn.company/app1.bundle.js').then(module => {\r\n   this.setState({\r\n       loadedComponent: module.default\r\n   })\r\n});\r\n```\r\n\r\n**What is motivation or use case for adding/changing the behavior?**\r\n\r\n- Front End Micro Architecture\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\n- Make it simple like \r\n\r\n``` js\r\nimport('http://cdn.company/app1,bundle.js').then(module => {\r\n   this.setState({\r\n       loadedComponent: module.default\r\n   })\r\n});\r\n```\r\n\r\n**Are you willing to work on this yourself?**\r\nyes but don't know how to do it \ud83d\ude04 \r\n", "labels": [], "number_of_comments": 11, "created_at": "2018-06-14 11:34:19", "reactions": {"total_count": 30, "+1": 30, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "332239369": {"author_username": "AMDvsTMD", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7525, "title": "AggressiveSplittingPlugin with recordsPath set in production mode compile error the second time", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\nas the issuse [7520]: https://github.com/webpack/webpack/issues/7520 descibed when update to the lasted version in development mod problems solved but in production mod some new error triggered\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nwhen compile the second time in production mode error triggered stack:\r\n```\r\n\t\t\tfor (const refModule of blockInfo.modules) {\r\n\t\t\t                                  ^\r\n\r\nTypeError: Cannot read property 'modules' of undefined\r\n    at Compilation.processDependenciesBlocksForChunkGroups (D:\\pdd_web_personal\\node_modules\\webpack\\lib\\Compilation.js:1318:38)\r\n    at Compilation.seal (D:\\pdd_web_personal\\node_modules\\webpack\\lib\\Compilation.js:883:8)\r\n    at hooks.optimizeAssets.callAsync.err (D:\\pdd_web_personal\\node_modules\\webpack\\lib\\Compilation.js:984:20)\r\n    at AsyncSeriesHook.eval [as callAsync] (eval at create (D:\\pdd_web_personal\\node_modules\\tapable\\lib\\HookCodeFactory.js:24:12), <anonymous>:6:1)\r\n    at hooks.optimizeChunkAssets.callAsync.err (D:\\pdd_web_personal\\node_modules\\webpack\\lib\\Compilation.js:977:32)\r\n    at _err0 (eval at create (D:\\pdd_web_personal\\node_modules\\tapable\\lib\\HookCodeFactory.js:24:12), <anonymous>:11:1)\r\n    at D:\\pdd_web_personal\\node_modules\\uglifyjs-webpack-plugin\\dist\\index.js:334:11\r\n    at step (D:\\pdd_web_personal\\node_modules\\uglifyjs-webpack-plugin\\dist\\uglify\\index.js:90:11)\r\n    at done (D:\\pdd_web_personal\\node_modules\\uglifyjs-webpack-plugin\\dist\\uglify\\index.js:99:22)\r\n    at D:\\pdd_web_personal\\node_modules\\uglifyjs-webpack-plugin\\dist\\uglify\\index.js:105:15\r\n    at D:\\pdd_web_personal\\node_modules\\worker-farm\\lib\\farm.js:191:19\r\n    at _combinedTickCallback (internal/process/next_tick.js:131:7)\r\n    at process._tickCallback (internal/process/next_tick.js:180:9)\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nset mode production and set recordsPath and compile twice\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repo. -->\r\n<!-- Best provide a minimal reproduceable repo with instructions -->\r\n<!-- Repos with too many files or long configs are not suitable -->\r\n<!-- Please only add small snippets of code directly into the issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo instead. -->\r\n\r\n**What is the expected behavior?**\r\ncompile success\r\n\r\n<!-- \"It should work\" is not a good explaination -->\r\n<!-- Explain how exactly you expecting it to behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  lastest \r\nNode.js version:  8.10.0\r\nOperating System: windows7\r\nAdditional tools: @ooflorent  help to see what is wrong thanks", "labels": [], "number_of_comments": 1, "created_at": "2018-06-14 03:28:36", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "331157377": {"author_username": "herrmanno", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7515, "title": "Used import removed", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nAn Import to a *used* Class is removed during bundling\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n```javascript\r\n// restdataarray.js\r\n\r\n(...)\r\nimport RestData from \"./restdata\"\r\n\r\nexport default class RestDataArray extends BaseRestData {\r\n\r\n\r\n    constructor(data, key) {\r\n\r\n        super({\r\n            ...data,\r\n            _embedded: {\r\n                [key]: data._embedded[key].map(element =>  element instanceof RestData ? element : new RestData(element))\r\n            }\r\n        })\r\n        this.key = key;\r\n    }\r\n```\r\n\r\n*Output*\r\n```javascript\r\n/* no import of 'restate_1' here !!! */\r\nclass RestDataArray extends baserestdata_1.default {\r\n    constructor(data, key) {\r\n        super(Object.assign({}, data, { _embedded: {\r\n                [key]: data._embedded[key].map(element => element instanceof restdata_1.default ? element : new restdata_1.default(element));\r\n            } }));\r\n        this.key = key;\r\n    }\r\n```\r\n\r\nPulling the usage of the Class `RestData` up seems to be a workaround to the problem, because the following example emits a working result:\r\n\r\n```javascript\r\nexport default class RestDataArray extends BaseRestData {\r\n\r\n    constructor(data, key) {\r\n        // the usage of 'RestData' was pulled up from 'inside the following object literal' to 'top level of the constructor' \r\n        const newData = data._embedded[key].map(element =>  element instanceof RestData ? element : new RestData(element))\r\n        super({\r\n            ...data,\r\n            _embedded: {\r\n                [key]: newData \r\n            }\r\n        })\r\n        this.key = key;\r\n    }\r\n```\r\n<!-- A great way to do this is to provide your configuration via a GitHub repo. -->\r\n<!-- Best provide a minimal reproduceable repo with instructions -->\r\n<!-- Repos with too many files or long configs are not suitable -->\r\n<!-- Please only add small snippets of code directly into the issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo instead. -->\r\n\r\n**What is the expected behavior?**\r\n\r\nThe Expected behavior is to emit an import to a class, that is used inside the emitted module itself, if usage means *comparison with the instanceof operator* or *instantiation via the new keyword*.\r\n\r\n<!-- \"It should work\" is not a good explaination -->\r\n<!-- Explain how exactly you expecting it to behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.12.0\r\nNode.js version: 8.7.0\r\nOperating System: macOS 10.12.16\r\nAdditional tools: \r\n", "labels": ["X2: answer required"], "number_of_comments": 3, "created_at": "2018-06-11 11:53:53", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "328029926": {"author_username": "BarryYan", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7455, "title": "AggressiveSplittingPlugin does not work after v4.6.0 ", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nwebpack AggressiveSplittingPlugin config:\r\n```js\r\nnew webpack.optimize.AggressiveSplittingPlugin({\r\n      minSize: 50000,\r\n      maxSize: 240000\r\n    })\r\n```\r\nwhen I updated webpack from v4.6.0 to 4.10.2, I fund the same config for `AggressiveSplittingPlugin` didn't work, so I roll back to v4.6.0, it worked well. I updated to v4.7.0, it's wrong again. \r\nI saw `AggressiveSplittingPlugin.js` file after v4.6.0 commits, there was just some code style changed. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repo. -->\r\n<!-- Best provide a minimal reproduceable repo with instructions -->\r\n<!-- Repos with too many files or long configs are not suitable -->\r\n<!-- Please only add small snippets of code directly into the issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo instead. -->\r\n\r\n**What is the expected behavior?**\r\nAggressiveSplittingPlugin can split big chunk into many small chunks.\r\n\r\n<!-- \"It should work\" is not a good explaination -->\r\n<!-- Explain how exactly you expecting it to behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.7.0 ~4.10.2\r\nNode.js version:  10.0.0\r\nOperating System: Mac OS X 10_13_4\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 1, "created_at": "2018-05-31 07:48:20", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "325775080": {"author_username": "domehead100", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7378, "title": "Strange warning stating that export does not exist when it does", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nNot sure if this is a problem with a loader or webpack itself, but on a project that is using typescript, I'm getting a warning:\r\n```javascript\r\n    WARNING in ./React/src/components/_shared/form/form-model.ts\r\n    17:0-39 \"export 'IValidation' was not found in '_types/IValidation'\"\r\n        at HarmonyExportImportedSpecifierDependency._getErrors (C:\\project\\node_modules\\webpack\\lib\\dependencies\\HarmonyExportImportedSpecifierDependency.js:352:11)\r\n        at HarmonyExportImportedSpecifierDependency.getWarnings (C:\\project\\node_modules\\webpack\\lib\\dependencies\\HarmonyExportImportedSpecifierDependency.js:299:15)\r\n        at Compilation.reportDependencyErrorsAndWarnings (C:\\project\\node_modules\\webpack\\lib\\Compilation.js:985:24)\r\n        at Compilation.finish (C:\\project\\node_modules\\webpack\\lib\\Compilation.js:817:9)\r\n        at hooks.make.callAsync.err (C:\\project\\node_modules\\webpack\\lib\\Compiler.js:479:17)\r\n        at _done (eval at create (C:\\project\\node_modules\\tapable\\lib\\HookCodeFactory.js:24:12), <anonymous>:9:1)\r\n        at _err0 (eval at create (C:\\project\\node_modules\\tapable\\lib\\HookCodeFactory.js:24:12), <anonymous>:20:22)\r\n        at _addModuleChain (C:\\project\\node_modules\\webpack\\lib\\Compilation.js:758:12)\r\n        at processModuleDependencies.err (C:\\project\\node_modules\\webpack\\lib\\Compilation.js:697:9)\r\n        at _combinedTickCallback (internal/process/next_tick.js:131:7)\r\n        at process._tickCallback (internal/process/next_tick.js:180:9)\r\n```\r\nHowever, the file in question _types/IValidation, is imported in numerous other files without any warnings being emitted related to those other files that are also importing IValidation from _types/IValidation.\r\n\r\nThe contents of the file are simple, and there is an \"export interface IValidation\" in the file:\r\n```javascript\r\nexport enum ValidationType {\r\n    Required,\r\n    Min,\r\n    Max,\r\n    MinLength,\r\n    MaxLength,\r\n}\r\n\r\nexport interface IValidation {\r\n    validationType: ValidationType;\r\n    errorMessage?: string;\r\n    minValue?: number;\r\n    maxValue?: number;\r\n    maxLength?: number;\r\n    minLength?: number;\r\n}\r\n```\r\nWe do have our \"src\" directory set as a module resolution root in the resolve section of our webpack config, but I also tried importing the file with a relative path and still get the warning.\r\n\r\nI am kind of wondering if this is related to typescript.  We are using ts-loader, but we have it doing type checking only and are doing transpiling with babel.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nNot sure since I get the warning due to the import of the file in question in one file but not due to several other files that also import the same interface from the same file.\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repo. -->\r\n<!-- Best provide a minimal reproduceable repo with instructions -->\r\n<!-- Repos with too many files or long configs are not suitable -->\r\n<!-- Please only add small snippets of code directly into the issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo instead. -->\r\n\r\n**What is the expected behavior?**\r\nIt should not issue a warning about a missing export if the export clearly exists.\r\n\r\n\r\n<!-- \"It should work\" is not a good explaination -->\r\n<!-- Explain how exactly you expecting it to behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.8.3\r\nNode.js version: 8.9.1\r\nOperating System: Windows 10\r\nAdditional tools: webpack-cli 2.1.3\r\n", "labels": [], "number_of_comments": 32, "created_at": "2018-05-23 16:07:05", "reactions": {"total_count": 30, "+1": 24, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "324671229": {"author_username": "surma", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7352, "title": "Webpack doesn\u2019t work well with wasm modules created with Emscripten", "body": "# Feature request\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nThe modularized JS emitted by [Emscripten](http://emscripten.org/) registers a global with a given name that loads the wasm file on invocation, initializes the wasm runtime and returns a [`Module`](https://kripken.github.io/emscripten-site/docs/api_reference/module.html).\r\n\r\nMaking it work with Webpack is quite hard as there seems to be interference with Webpack 4 defaults.\r\nThis is the `webpack.config.js` that I came up with:\r\n\r\n```js\r\nconst webpack = require(\"webpack\");\r\nconst path = require(\"path\");\r\n\r\nmodule.exports = {\r\n  mode: \"development\",\r\n  entry: \"./index.js\",\r\n  output: {\r\n    path: path.resolve(__dirname, \"dist\"),\r\n    filename: \"bundle.js\"\r\n  },\r\n  module: {\r\n    defaultRules: [\r\n      {\r\n        type: \"javascript/auto\",\r\n        resolve: {}\r\n      }\r\n    ],\r\n    rules: [\r\n      {\r\n        test: /fibonacci\\.js$/,\r\n        loader: \"exports-loader\"\r\n      },\r\n      {\r\n        test: /fibonacci\\.wasm$/,\r\n        loader: \"file-loader\",\r\n        options: {\r\n          publicPath: \"dist/\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  // This is necessary due to the fact that emscripten puts both Node and\r\n  // web code into one file. The node part uses Node\u2019s `fs` module to load\r\n  // the wasm file.\r\n  // Issue: https://github.com/kripken/emscripten/issues/6542.\r\n  plugins: [new webpack.IgnorePlugin(/(fs)/)]\r\n};\r\n```\r\n\r\n(Here is a [minimal test project in a gist][gist] that you can clone and build with `npm start`. Docker required!)\r\n\r\n**edit:**\r\nIn the meantime, @sokra informed that that I can simplify the configuration a bit (and make it less like a sledgehammer):\r\n\r\n```js\r\nmodule.exports = {\r\n  /* ... */\r\n  browser: { \r\n    \"fs\": false // \u2190 !!\r\n  },\r\n  module: {\r\n    rules: [\r\n      /* ... */\r\n      {\r\n        test: /fibonacci\\.wasm$/,\r\n        type: \"javascript/auto\", // \u2190 !!\r\n        loader: \"file-loader\",\r\n        options: {\r\n          publicPath: \"dist/\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n};\r\n```\r\n\r\n**Unexpected things I had to do**\r\n\r\n- I needed to overwrite `defaultRules` as otherwise some sort of default rule will run _in addition_ to the ones I specified and making webpack error \u201cModule parse failed: magic header not detected\u201d (try it!)\r\n- I needed to specify `file-loader` for the wasm file as otherwise webpack tries to resolve the names of the wasm module\u2019s import object like `env`, which are provided by the JS file.\r\n- I needed to set a `locateFile()` function as webpack changes the file (and potentially path) of the wasm file and Emscripten hardcodes that name (not visible here but in the [gist])\r\n\r\nI am not sure what the right course of action here is, but considering that most wasm projects are going to be built with Emscripten, I feel like it\u2019s worth making it easier. \r\n\r\nHappy to answer Qs to give y\u2019all a clearer picture.\r\n\r\n**What is the expected behavior?**\r\n\r\nIdeally, Webpack would recognize the typical Emscripten JS files and automatically bundle the accomodating wasm module and make paths work.\r\n\r\n\r\n<!-- \"It should work\" is not a good explaination -->\r\n<!-- Explain how exactly you expecting it to behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.8.3\r\nNode.js version:  10\r\nOperating System: Mac OS 10.13.4\r\nAdditional tools:\r\n\r\n[gist]: https://gist.github.com/surma/b2705b6cca29357ebea1c9e6e15684cc", "labels": ["Web Assembly"], "number_of_comments": 4, "created_at": "2018-05-20 00:22:13", "reactions": {"total_count": 19, "+1": 19, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "322958704": {"author_username": "edmorley", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7300, "title": "splitChunks can create initial chunks that are empty after CSS extraction", "body": "# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nThe `splitChunks` feature (using `chunks: 'all'`) doesn't take into account CSS extraction (via `mini-css-extract-plugin`) when deciding whether to create a new inital chunk. A new chunk can end up being created that is empty (other than the webpack functions) and under the default 30KB `splitChunks.minSize` threshold so shouldn't have been created.\r\n\r\neg:\r\n[`dist/vendors~pageA~pageB.js`](https://github.com/edmorley/testcase-webpack-splitchunks-css/blob/master/dist/vendors%7EpageA%7EpageB.js)\r\n\r\nFor webpack build log output see:\r\nhttps://github.com/edmorley/testcase-webpack-splitchunks-css#actual\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. `git clone https://github.com/edmorley/testcase-webpack-splitchunks-css.git`\r\n2. `yarn install`\r\n3. `yarn build`\r\n\r\n**What is the expected behavior?**\r\n\r\nThere is no `dist/vendors~pageA~pageB.js` chunk generated, since after the CSS is extracted, there should be no common JS code between the two pages.\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.8.3\r\nNode.js version: 10.1.0\r\nOperating System: Windows 10\r\nAdditional tools: mini-css-extract-plugin@0.4.0", "labels": [], "number_of_comments": 31, "created_at": "2018-05-14 19:58:28", "reactions": {"total_count": 30, "+1": 24, "-1": 0, "laugh": 0, "heart": 6, "hooray": 0}}, "322445930": {"author_username": "TheLarkInn", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7281, "title": "[WIP] - investigation - fail doesn't process exit 1 all the time", "body": "`bail: true` was set on a webpack 4 build, and not _everytime_ was the process not  exiting completely\r\n\r\n![screen shot 2018-05-11 at 2 52 51 pm](https://user-images.githubusercontent.com/3408176/39948494-17ea8054-552b-11e8-8bcb-72f3b9303f83.png)\r\n\r\nYou can checkout https://github.com/thelarkinn/webpack-workshop-2018 ", "labels": ["S2: Inconvenient", "bug", "webpack-4", "webpack-5"], "number_of_comments": 3, "created_at": "2018-05-11 21:55:13", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "321268172": {"author_username": "lencioni", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7242, "title": "Add preserveEntrypoint option to splitChunks cacheGroups", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\nFeature\r\n\r\n**Did you add tests for your changes?**\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\nYes\r\n\r\n**If relevant, link to documentation update:**\r\n\r\n<!-- Link PR from webpack/webpack.js.org here, or N/A -->\r\nI'll happily add documentation once this PR is accepted.\r\n\r\n**Summary**\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nI am working in a complicated app that has a bunch of bundles on every\r\npage. Most of these are \"global\" bundles and appear on every page. So, I\r\nhave configured webpack to prevent any modules that appear in these\r\nbundles from appearing in any other bundle via splitChunks. More context\r\non this here:\r\n\r\n  https://stackoverflow.com/questions/49163684/how-to-configure-webpack-4-to-prevent-chunks-from-list-of-entry-points-appearing\r\n\r\nUnfortunately, it seems that when I configure splitChunks in this way,\r\nit causes the global bundles to not be executed. In the debugging I've\r\ndone, it seems that this splitChunks configuration causes the\r\nexecuteModules part of the bundle that the runtime chunk is looking for\r\nto be undefined.\r\n\r\nI believe this happens in the SplitChunks plugin to any reused chunk\r\nthat was already an entry point. I'm not entirely sure why this was done\r\nthis way, so to address my use-case, I am adding an option to\r\ncacheGroups that allows the entrypoint to be preserved when moving\r\nchunks into it.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\nNo\r\n\r\n**Other information**\r\n\r\nFixes #7230", "labels": ["PR: conflict", "PR: unreviewed"], "number_of_comments": 14, "created_at": "2018-05-08 17:00:40", "reactions": {"total_count": 30, "+1": 21, "-1": 0, "laugh": 0, "heart": 0, "hooray": 9}}, "321001750": {"author_username": "lencioni", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7230, "title": "Webpack 4 splitChunks causes reused chunks to not be executed", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https://stackoverflow.com/questions/ask?tags=webpack -->\r\n<!-- https://gitter.im/webpack/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nI am working in a complicated app that has a bunch of bundles on every page. Most of these are \"global\" bundles and appear on every page. So, I have configured webpack to prevent any modules that appear in these bundles from appearing in any other bundle via splitChunks. More context on this here: https://stackoverflow.com/questions/49163684/how-to-configure-webpack-4-to-prevent-chunks-from-list-of-entry-points-appearing\r\n\r\n**What is the current behavior?**\r\n\r\nIt seems that when I configure splitChunks in this way, it causes the global bundles to not be executed.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nHere's a branch on a repo that reproduces this issue: https://github.com/lencioni/webpack-splitchunks-playground/tree/splitchunks-execution-problem\r\n\r\nIn this repro case, it currently logs the following to the console:\r\n\r\n```\r\ncore module\r\ncore module b\r\nnon-core module\r\nnon-core b2\r\nnon-core module b\r\n```\r\n\r\nIn the debugging I've done, it seems that this splitChunks configuration causes the `executeModules` part of the bundle that the runtime chunk is looking for to be `undefined`.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repo. -->\r\n<!-- Best provide a minimal reproduceable repo with instructions -->\r\n<!-- Repos with too many files or long configs are not suitable -->\r\n<!-- Please only add small snippets of code directly into the issue -->\r\n<!-- https://gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo instead. -->\r\n\r\n**What is the expected behavior?**\r\n\r\n<!-- \"It should work\" is not a good explaination -->\r\n<!-- Explain how exactly you expecting it to behave -->\r\n\r\nThe code in the \"global\" bundles should be executed, which should cause the console log to look more like this:\r\n\r\n```\r\ncore module\r\ncore bundle\r\ncore module b\r\ncore bundle b\r\ncore bundle c\r\nnon-core module\r\nnon-core b2\r\nnon-core module b\r\n```\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.8.1\r\nNode.js version: 8.9.1\r\nOperating System: Mac\r\nAdditional tools:\r\n", "labels": [], "number_of_comments": 22, "created_at": "2018-05-08 00:20:04", "reactions": {"total_count": 25, "+1": 24, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "320211755": {"author_username": "pravdomil", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7202, "title": "Update side-effects example", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\ndocs\r\n\r\n**Did you add tests for your changes?**\r\n\r\n\r\n**If relevant, link to documentation update:**\r\n\r\n**Summary**\r\n\r\nfixes #7190 \r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nnope\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**Other information**\r\n\r\nEDIT (@sokra): for documentation on webpack.js.org we should also add the same note to the `sideEffects` documentation.", "labels": ["PR: reviewed-approved", "PR: small"], "number_of_comments": 2, "created_at": "2018-05-04 09:41:14", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "319448460": {"author_username": "MrSantaCloud", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7172, "title": "Webpack with Typescript: \"inline-source-map\" does not map Typescript correctly - wrong typescript mapping", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nSince I've migrated to webpack 4.6.0, Visual Studio breakpoints started positioning in the end of the file as a wrong mapping symptom. With the same configuration but with webpack 3.11.0, it used to work fine\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nSee my webpack.config file below and [THIS stackoverflow question](https://stackoverflow.com/questions/50006292/) which is well detailed about it. With this configuration, simply try to place a breakpoint on a typescript file in visual studio 2017 and start debug.\r\nBreakpoints will be moved on the bottom of the file during debug.\r\n**I've also tried with other configurations but the problem persists**.\r\nSo it looks like a source map issue.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nBreakpoints should not move from where they are. Mapping should be correct and it should have a similar behavior to what it had on the previous webpack version. (3.11.0)\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n_____________________________________________________________________________\r\n**NOTE:** I've also enabled sourcemap from tsconfig\r\n_____________________________________________________________________________\r\n**VERSIONS**\r\n    \"typescript\": \"^2.8.3\"\r\n    \"webpack\": \"^4.6.0\"\r\n    \"webpack-cli\": \"^2.0.15\"\r\n_____________________________________________________________________________\r\n**WHAT CHANGED BETWEEN 3.11.0 and 4.6.0:**\r\nChanged this from \"PLUGINS\":\r\n```\r\nnew AngularCompilerPlugin({\r\n                tsConfigPath: './tsconfig.json',\r\n                entryModule: path.join(__dirname, 'ClientApp/app/app.server.module#AppModule'),\r\n                //exclude: ['./**/*.browser.ts']\r\n                exclude: ['./**/*.browser.ts','/node_modules/']\r\n            })\r\n```\r\nin this, under \"OPTIMIZATION\":\r\n```\r\nminimizer: [\r\n                // we specify a custom UglifyJsPlugin here to get source maps in production\r\n                new UglifyJsPlugin({\r\n                    //cache: true,\r\n                    cache: isDevBuild ? false : true,\r\n                    parallel: true,\r\n                    uglifyOptions: {\r\n                        //compress: false,\r\n                        compress: isDevBuild ? false : {\r\n                            sequences: true,\r\n                            dead_code: true,\r\n                            conditionals: true,\r\n                            booleans: true,\r\n                            unused: true,\r\n                            if_return: true,\r\n                            join_vars: true,\r\n                            drop_console: true\r\n                        },\r\n                        ecma: 6,\r\n                        mangle: isDevBuild ? false : true\r\n                    },\r\n                    sourceMap: isDevBuild ? true : false\r\n                })\r\n            ]\r\n```\r\n_____________________________________________________________________________\r\n\r\n**WEBPACK CONFIG FILE**\r\n```\r\nconst path = require('path');\r\nconst webpack = require('webpack');\r\nconst merge = require('webpack-merge');\r\nconst AngularCompilerPlugin = require('@ngtools/webpack').AngularCompilerPlugin;\r\nconst CheckerPlugin = require('awesome-typescript-loader').CheckerPlugin;\r\nvar nodeExternals = require('webpack-node-externals');\r\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin');\r\n\r\nconst isClient = typeof window !== 'undefined';\r\n\r\nmodule.exports = (env) => {\r\n    // Configuration in common to both client-side and server-side bundles\r\n    const isDevBuild = !(env && env.prod);\r\n\r\n    const sharedConfig = {\r\n        stats: { modules: false },\r\n        context: __dirname,\r\n        resolve: { extensions: ['.js', '.ts'] },\r\n        output: {\r\n            filename: '[name].js',\r\n            publicPath: 'dist/', // Webpack dev middleware, if enabled, handles requests for this URL prefix\r\n            globalObject: 'self'\r\n        },\r\n        module: {\r\n            rules: [\r\n                { test: /\\.ts$/, include: /ClientApp/, use: ['awesome-typescript-loader?silent=true', 'angular2-template-loader', 'angular2-router-loader'] },\r\n                { test: /\\.html$/, use: 'html-loader?minimize=false' },\r\n                { test: /\\.css$/, use: ['to-string-loader', 'style-loader', isDevBuild ? 'css-loader' : 'css-loader?minimize'] },\r\n                { test: /\\.(png|jpg|jpeg|gif|svg)$/, use: 'url-loader?limit=25000' },\r\n                //font management\r\n                {\r\n                    test: /\\.(svg|eot|ttf|woff|woff2)$/,\r\n                    use: [{\r\n                        loader: 'file-loader',\r\n                        options: {\r\n                            name: 'images/[name].[hash].[ext]'\r\n                        }\r\n                    }]\r\n                }\r\n            ]\r\n        },\r\n        plugins: [new CheckerPlugin()]\r\n    };\r\n\r\n    // Configuration for client-side bundle suitable for running in browsers\r\n    const clientBundleOutputDir = './wwwroot/dist';\r\n    const clientBundleConfig = merge(sharedConfig, {\r\n        entry: { 'main-client': './ClientApp/boot.browser.ts' },\r\n        output: { path: path.join(__dirname, clientBundleOutputDir) },\r\n        optimization: {\r\n            minimizer: [\r\n                // we specify a custom UglifyJsPlugin here to get source maps in production\r\n                new UglifyJsPlugin({\r\n                    cache: isDevBuild ? false : true,\r\n                    parallel: true,\r\n                    uglifyOptions: {\r\n                        compress: isDevBuild ? false : {\r\n                            sequences: true,\r\n                            dead_code: true,\r\n                            conditionals: true,\r\n                            booleans: true,\r\n                            unused: true,\r\n                            if_return: true,\r\n                            join_vars: true,\r\n                            drop_console: true\r\n                        },\r\n                        ecma: 6,\r\n                        mangle: isDevBuild ? false : true\r\n                    },\r\n                    sourceMap: isDevBuild ? true : false\r\n                })\r\n            ]\r\n        },\r\n        plugins: [\r\n            new webpack.DllReferencePlugin({\r\n                context: __dirname,\r\n                manifest: require('./wwwroot/dist/vendor-manifest.json')\r\n            })\r\n        ].concat(isDevBuild ? [\r\n            // Plugins that apply in development builds only\r\n            new webpack.SourceMapDevToolPlugin({\r\n                filename: '[file].map', // Remove this line if you prefer inline source maps\r\n                moduleFilenameTemplate: path.relative(clientBundleOutputDir, '[resourcePath]') // Point sourcemap entries to the original file locations on disk\r\n            })\r\n        ] : [])\r\n    });\r\n\r\n    // Configuration for server-side (prerendering) bundle suitable for running in Node\r\n    const serverBundleConfig = merge(sharedConfig, {\r\n        resolve: { mainFields: ['main'] },\r\n        entry: { 'main-server': './ClientApp/boot.server.ts' },\r\n        plugins: [\r\n            new webpack.DllReferencePlugin({\r\n                context: __dirname,\r\n                manifest: require('./ClientApp/dist/vendor-manifest.json'),\r\n                sourceType: 'commonjs2',\r\n                name: './vendor'\r\n            })\r\n        ].concat(isDevBuild ? [] : []),\r\n        output: {\r\n            libraryTarget: 'commonjs',\r\n            path: path.join(__dirname, './ClientApp/dist')\r\n        },\r\n\r\n        target: 'node',\r\n        externals: [nodeExternals()], // in order to ignore all modules in node_modules folder\r\n\r\n        devtool: 'inline-source-map'\r\n    });\r\n\r\n    return [clientBundleConfig, serverBundleConfig];\r\n};\r\n\r\n```\r\n", "labels": ["Send a PR"], "number_of_comments": 6, "created_at": "2018-05-02 07:59:10", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "318608219": {"author_username": "TheLarkInn", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7141, "title": "chore(types): add noImplicitAny and strictNullChecks support for top \u2026", "body": "\u2026level classes\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n\r\n**What kind of change does this PR introduce?**\r\nAdd JSDocs Typing\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nN/A\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**If relevant, link to documentation update:**\r\nN/A\r\n<!-- Link PR from webpack/webpack.js.org here, or N/A -->\r\n\r\n**Summary**\r\nThis PR adds Typing support for both strictNullChecks and noImplicitAny for all Top Level Graph Primitive classes Dependency, DependenciesBlock and DepedenciesBlockVariables\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**Other information**\r\nSupports #7134 \r\nSupports #7037 ", "labels": ["PR: conflict", "PR: reviewed-changes-requested", "PR: types"], "number_of_comments": 2, "created_at": "2018-04-28 07:09:28", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "318265452": {"author_username": "TheLarkInn", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7134, "title": "WIP (types) - Turn on noImplicitAny", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\nStrict Type Feature\r\n**Did you add tests for your changes?**\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**If relevant, link to documentation update:**\r\nN/A\r\n<!-- Link PR from webpack/webpack.js.org here, or N/A -->\r\n\r\n**Summary**\r\nThis PR is a WIP (Multi step PR) which will turn on noImplicitAny for TypeScript's type checker. \r\n\r\nThis feature raises errors on expressions and declarations with an implied 'any' type. This means that any there are actually `any` types, we will need to explicitly state them. This will be a pretty large PR as there will be 10000s of places where any is inferred, so I'd like to break this PR into many dependent PR's one/two files at a time. \r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**Dependent/Related PR's**\r\n- [ ] #7140", "labels": ["PR: conflict", "PR: types", "PR: unreviewed"], "number_of_comments": 2, "created_at": "2018-04-27 03:24:44", "reactions": {"total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 1}}, "317690885": {"author_username": "sokra", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7122, "title": "Create and add a guideline for typings", "body": "The CONTRIBUTION guide should have a guideline how typings for files in this repo should be writting.\r\n\r\nHere is my initial proposal. Nothing set in stone yet. This is open for discussion.\r\n\r\n# Guideline for adding types to webpack files\r\n\r\n## Arrow functions\r\n\r\n* no arrow functions. Use `@typedef {Function}`, `@param` and `@return` instead.\r\n\r\n``` js\r\n/**\r\n * @callback SortingFunction\r\n * @param {Chunk} a first chunk\r\n * @param {Chunk} b second chunk\r\n * @returns {-1|0|1} sort result\r\n */\r\n```\r\n\r\n*Why? You can add comments to each parameter. Array functions are not valid JSDoc.*\r\n\r\n* [ ] TypeScript support pending https://github.com/Microsoft/TypeScript/issues/7515\r\n\r\n## Inline objects\r\n\r\n* no inline object definitions. Use `@typedef {Object}` and `@property`\r\n\r\n``` js\r\n/**\r\n * @typedef {Object} ObjectWithId\r\n * @property {number} id module id\r\n */\r\n```\r\n \r\n*Why? You can add comments to each property.*\r\n\r\n## Return\r\n\r\n* no `@return`. Use `@returns` instead.\r\n* `@returns {never}` has a different meaning and should be used when always throwing\r\n* `@returns {void}` can omit a description\r\n\r\n*Why? It's recommended in the JSDoc documentation.*\r\n\r\n## typedef\r\n\r\n* typedef should be in a separate comment\r\n\r\n``` js\r\n/**\r\n * @typedef {Function} SomeFunction\r\n * @param {number} n some number\r\n * @returns {number} result number\r\n */\r\n```\r\n\r\n*Why? Clear separation. Readablility.*\r\n\r\n## Class\r\n\r\n* no `@extends`, this is inferred from the code\r\n* each property must be assigned in the constructor\r\n* each property assignment in the constructor must have a `@type` comment\r\n* each private property assignment in the constructor must have `@private`\r\n* format it in a single line: `/** @private @type {number} */`\r\n\r\n``` js\r\nclass X {\r\n  constructor() {\r\n    /** @type {number} */\r\n    this.n = undefined;\r\n    /** Description for member m */\r\n    /** @private @type {string} */\r\n    this.m = \"\";\r\n  }\r\n}\r\n```\r\n\r\n*Why? All properties are typed. Hidden class doesn't change (Performance). Readablility.*\r\n\r\n## Optional arguments\r\n\r\n* no `[name]`. no `Type?`. Use `{Type=}` instead.\r\n* \r\n\r\n``` js\r\n/** \r\n * @param {SortFunction=} defaultSort\r\n */\r\n```\r\n\r\n*Why? Consistency. = is only a single char compared to [name]. `?` is not valid jsdoc.*\r\n\r\n## Imports\r\n\r\nType-only imports should be done this way:\r\n\r\n``` js\r\n/** @typedef {import(\"./Chunk\")} Chunk */\r\n```\r\n\r\n``` js\r\n/** @typedef {import(\"webpack-sources\").ConcatSource} ConcatSource */\r\n```\r\n\r\nThe comment should be standalone and just below the real imports.\r\n\r\n* Single line\r\n* Separated comments\r\n* All imports on top of the file below the real imports\r\n\r\n*Why? Consistency. All Imports on top.*\r\n\r\n## Arrays\r\n\r\n* no `Array<number>`. Use `number[]` instead.\r\n\r\n*Why? Consistency. Recommended tslint rule.*\r\n\r\n## Formatting\r\n\r\n* no markdown/html. Use only text.\r\n\r\n## Allowed JSDoc tags\r\n\r\nOnly use these tags\r\n\r\n``` \r\n@typedef\r\n@param\r\n@callback\r\n@returns\r\n@type\r\n@private\r\n@property\r\n@template\r\n@abstract\r\n@implements\r\n```\r\n\r\nNot allowed and reasons:\r\n\r\n* `@memberof` unneeded because we use only real classes\r\n* `@inheritdoc` unneeded as it's the default\r\n* `@description` unneeded as simple text on top does the same job\r\n* `@return` for consistency use `@returns`\r\n* `@readonly` use a getter instead so it's obvious\r\n\r\n## `any`\r\n\r\n* Use `any` when really need `any`. Don't use `*`.\r\n* Use `TODO` as type when it could be typed but not in the current state.\r\n\r\n## Open Questions\r\n\r\n* ~`@returns {void}` or no annotation for no return value.~\r\n* ~`@typedef` with `@template` argument~\r\n* ~Syntax for adding a description to a property `/** blah blah @private @type {number} */`?~\r\n* ~`Array<number>` vs. `number[]` (Consistency with `Map` `Set` or shorter and default)~\r\n* ~`{any}` vs `{*}`~\r\n* When does Typescript support `@private` and `@abstract`?", "labels": [], "number_of_comments": 25, "created_at": "2018-04-25 15:56:07", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "316535719": {"author_username": "brycehill", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7094, "title": "CSS Order Differs Between Development & Production Modes when Treeshaking.", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nCSS seems to be out of order in \"development\" vs \"production\" mode. It appears somehow related to `sideEffects` and tree shaking. \r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\nHere's a repo demonstrating the issue: https://github.com/brycehill/webpack-css-order.\r\n\r\nThere are instructions in the readme. Basically, if you build in `development` mode, the outputted CSS is different from `production` mode. \r\n\r\n**What is the expected behavior?**\r\nCSS order is consistent from one environment to another. \r\n\r\nI don't want to depend on a specific CSS order, but I do expect it to be consistent from when I develop to when I build for production.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nN/A\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n\r\nNode: v8.9.1\r\nWebpack: v4.6.0\r\nOS: MacOS High Sierra\r\n", "labels": [], "number_of_comments": 19, "created_at": "2018-04-22 00:00:36", "reactions": {"total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "315417218": {"author_username": "okonet", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7074, "title": "NODE_ENV not set on process.env", "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently, `mode` only sets the value for `NODE_ENV` in the `DefinePlugin` but not changes the `process.env.NODE_ENV`. \r\n\r\nFor example, Babel depends on this env variable and when used with `webpack --mode=production` it will still run in `development` mode.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nRunning `webpack --silent --mode=production && echo $NODE_ENV`\r\n\r\nThis will NOT print anything.\r\n\r\nRun `NODE_ENV=production && webpack --silent --mode=production && echo $NODE_ENV`\r\n\r\nThis will print `production`\r\n\r\n**What is the expected behavior?**\r\n\r\nRunning `webpack --silent --mode=production && echo $NODE_ENV` should print `production`\r\n", "labels": [], "number_of_comments": 26, "created_at": "2018-04-18 10:13:53", "reactions": {"total_count": 19, "+1": 19, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "315063963": {"author_username": "edmorley", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7064, "title": "Make optimization.splitChunks.chunks default to 'all' for web targets", "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nThe default value for `optimization.splitChunks.chunks` is `'async'`, which means that `SplitChunksPlugin` doesn't split vendor files out of the entrypoint by default. Instead users have to override the value themselves to `'all'`. Source:\r\nhttps://github.com/webpack/webpack/blob/3a5fda909f2ecf911c73429cb4770948dbd31d24/lib/WebpackOptionsDefaulter.js#L216\r\n\r\n**What is the expected behavior?**\r\nThat if `target == 'web'` (since as I understand it, targets like node don't support `chunks: 'all'`), then `optimization.splitChunks.chunks` be set to `'all'` in `WebpackOptionsDefaulter.js` instead.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n* It's one less thing users need to adjust to have an optimal webpack setup with minimal config.\r\n* My understanding is that the default was set to `async` for now since otherwise it would cause breakage for cases where tooling isn't consuming the stats output for the generated file names. However at some point in the future hopefully enough tooling/plugins/... will have been fixed that it's viable to do this (in a future major version bump of webpack, since this would be a breaking change still :-)).\r\n\r\nMany thanks :-)", "labels": [], "number_of_comments": 12, "created_at": "2018-04-17 13:38:14", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "314810062": {"author_username": "cletusw", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7057, "title": "Loader can't modify resource type without accessing private API", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nNow that webpack has the concept of module type (JSON, JS, CSS, WASM), loaders which convert resources from one type to another do not work without either requiring the end user to modify their config (i.e. for a loader that converts to JS the user must add `type: 'javascript/auto'` to their config) or resorting to modifying private internal webpack APIs. The former leaks internal loader implementation details onto the user and doesn't work if the user wants to pipe the output of that loader into another, while the latter is brittle and prone to breakage in future webpack versions.\r\n\r\nSee https://github.com/webpack/webpack/issues/6572#issuecomment-374987270, #6586, #6725, webpack-contrib/file-loader#264, webpack-contrib/file-loader#259, webpack-contrib/bundle-loader#74\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nContrived example: https://github.com/cletusw/webpack-issue-7057\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nWebpack should support loaders that convert between resource types, probably via the loader API.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\nNode v8.11.0\r\nwebpack 4.5.0\r\nLinux", "labels": ["Send a PR"], "number_of_comments": 7, "created_at": "2018-04-16 20:41:11", "reactions": {"total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "314339905": {"author_username": "weifeiyue", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 7045, "title": "Webpack 4: why not remove \u201cwebpackBootstrap\u201d code after \"concatenateModules\" is true", "body": "Webpack 4: why not remove \u201cwebpackBootstrap\u201d code after \"concatenateModules\" is true?\r\n\u201cwebpackBootstrap\u201d code is dead code", "labels": [], "number_of_comments": 2, "created_at": "2018-04-14 15:59:03", "reactions": {"total_count": 21, "+1": 15, "-1": 0, "laugh": 0, "heart": 3, "hooray": 3}}, "312287062": {"author_username": "zslucky", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6985, "title": "webpack 4 dynamic import got exception in \"(window.webpackJsonP = window.webpackJsonP || []).push\" which \"push\" is not a function ", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nIt blocked lazy module load. due to error \"push\" is not a function. It's not always occur. some times I can see `webpackJsonp` is an array in chrome console. and some times I can see `webpackJsonp` is a function in chrome console.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nI'm not sure what's the root cause. everything is correct when I using `webpack 3+`, after upgrade to `webpack 4`, this issue occurred.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nShould load lazy module correctly.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nNot a features\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n\r\n`OS: MacOS 10.13.3 `\r\n`node: 8.9.4`\r\n`webpack: 4.4.1`\r\n`browser: chrome 65`", "labels": ["Send a PR"], "number_of_comments": 20, "created_at": "2018-04-08 08:55:43", "reactions": {"total_count": 11, "+1": 10, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "312052658": {"author_username": "jfrolich", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6976, "title": "SplitChunk plugin keeps large dependencies in two seperate chunks.", "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug \r\n\r\n**What is the current behavior?**\r\n\r\nA few large dependencies (slate / react-slate / immutable) shared by two pages are not put in a shared chunk (a large number of dependencies are the same including components). See visualization below:\r\n\r\n![image](https://user-images.githubusercontent.com/579279/38434493-260d0732-3a01-11e8-94c3-d4213cb94b5f.png)\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n```\r\nsplitChunks: {\r\n  chunks: 'all',\r\n  name: false,\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nIn my understanding this should not happen by default, so I'd like to see if this is incorrect behaviour. If this is the case I'll happily provide more information to investigate.\r\n\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n\r\nwebpack version: 4.5.0.", "labels": [], "number_of_comments": 17, "created_at": "2018-04-06 17:17:19", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "310469628": {"author_username": "zD98", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6929, "title": "Webpack4 has memory leak in development mode", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nThe memory increased when running webpack4 in development, and the memory didn't  release. So there was memory leak. \r\nThen node will throw error\r\n`JavaScript heap out of memory`\r\nI saw the heapsnapshot,  there was many repeated String Objects which were compiled by webpack. \r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nrun webpack development mode with , update the business code  and waiting rebuild, then update the code...you will see the increasing memory. \r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nClear memory in time.\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\nwebpack@4.2.0\r\n", "labels": [], "number_of_comments": 147, "created_at": "2018-04-02 12:11:05", "reactions": {"total_count": 30, "+1": 30, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "309856926": {"author_username": "dyst5422", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6908, "title": "WebWorker auto splitting like import()", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature:\r\n\r\nAuto split out webworker files by reading and using the `const worker = new Worker(filepath)` syntax in much the same way that dynamic imports are automatically split\r\n\r\n**What is the current behavior?**\r\nWebWorkers currently need their own loader which essentially just splits out the file. This requires a nonstandard syntax of \r\n```ts\r\nconst Worker = require(`worker_loader!filename`);\r\nconst worker = new Worker();\r\n```\r\nor\r\n```ts\r\nconst Worker = require(`filename.worker`);\r\nconst worker = new Worker();\r\n```\r\n\r\nand having another loader for workers\r\n\r\n**What is the expected behavior?**\r\n\r\nI should be able to have the line `const worker = new Worker(filename);` in my code and have webpack automatically code split it like `import()` does;\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nSimplifying the use of web workers and avoid changing the syntax based on using webpack to bundle.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n\r\nwebpack 4", "labels": ["Send a PR"], "number_of_comments": 13, "created_at": "2018-03-29 18:26:15", "reactions": {"total_count": 18, "+1": 18, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "309697646": {"author_username": "kobelobster", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6901, "title": "webpack watcher compiles EVERY file and not just the changed one.", "body": "**Do you want to request a *feature* or report a *bug*?**\r\nMaybe I'm misunderstanding the doucemtation/watcher, but otherwise this is a bug. However, it's such a fundamental piece of webpack, if it would be a bug, someone else probably already reported it?\r\n\r\n**What is the current behavior?**\r\n`webpack` watcher compiles EVERY file and not just the changed one.\r\n\r\nSteps to reproduce:\r\nThese steps assume you already have `yarn/npm` installed.\r\n* Check out the repository I created which you can find at https://github.com/tzfrs/webpack-watch-bug\r\n* Initially run `yarn install` or `npm install`.\r\n* Run `./node_modules/.bin/webpack`. This should create two files in the `dist` folder and automatically watch.\r\n* Delete `dist/second.js`\r\n* Change something in `src/first.js`\r\n* `src/second.js` has no changes, but will still be recompiled (because `dist/second.js` is created again).\r\n* Also, the log states something along the lines\r\n\r\n```\r\nHash: d13339396526426e402d\r\nVersion: webpack 4.3.0\r\nTime: 304ms\r\nBuilt at: 3/29/2018 12:11:20 PM\r\n    Asset       Size  Chunks             Chunk Names\r\nsecond.js  545 bytes       0  [emitted]  second\r\n first.js  561 bytes       1  [emitted]  first\r\nEntrypoint first = first.js\r\nEntrypoint second = second.js\r\n   [0] ./src/second.js 0 bytes {0} [built]\r\n   [1] ./src/first.js 17 bytes {1} [built]\r\n\r\n```\r\n\r\nAs you can see. `second.js` is also in the log.\r\n\r\n**What is the expected behavior?**\r\nOnly changed files should be recompiled. I assume that this is the expected behavior, because [the documentation for Watch](https://webpack.js.org/configuration/watch/) states:\r\n\r\n> webpack can watch files and recompile whenever they change.\r\n", "labels": [], "number_of_comments": 4, "created_at": "2018-03-29 10:12:59", "reactions": {"total_count": 16, "+1": 16, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "307218760": {"author_username": "AndyOGo", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6818, "title": "libraryTarget UMD and code splitting", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWhen splitting code in webpack, the chunks are loaded with temporary script tags:\r\n\r\n```js\r\n/******/    var head = document.getElementsByTagName('head')[0];\r\n/******/    var script = document.createElement('script');\r\n/******/    script.type = 'text/javascript';\r\n/******/    script.charset = 'utf-8';\r\n/******/    script.async = true;\r\n/******/    script.timeout = 120000;\r\n\r\n/******/    script.src = __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \".\" + \"<some_key>\" + \".js\";\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nAll chunks are wrapped within UMD blocks.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nWhen creating an umd library, the library might be loaded by another bundler again (webpack, jspm, etc.). In that case, the script tag loading isn't nice. It would be better to keep the AMD (or System.import for webpack 2) in the chunks which will be interpreted by the other bundler. I didn't find an option to enable this. Is it a missing feature? Or am I missing something and code splitting in umd libraries not possible?\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n\r\nReopens #2471 \r\n", "labels": [], "number_of_comments": 9, "created_at": "2018-03-21 12:08:36", "reactions": {"total_count": 19, "+1": 19, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "307162440": {"author_username": "Xotic750", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6813, "title": "Create multiple sourcemaps from a single build", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*feature*\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nSet devtool;. `NODE_ENV === PRODUCTION ? 'nosources-source-map' : 'eval-source-map';`\r\n\r\nSourcemap type is built.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nWhat we'd like is to be able to create multiple sourcemaps for production as a single run.\r\n\r\nSet devtool: `NODE_ENV === PRODUCTION ? ['nosources-source-map', 'source-map'] : 'eval-source-map';`\r\n\r\nThe first sourcemap will be used client side and included in the the `js` e.g. `//# sourceMappingURL=index.js.map`\r\n\r\nThe second sourcemap would be used for our monitoring system, and would have a filename for example `index.js.map2` or anything sensible.\r\n\r\nAll this would be performed in a single build run.\r\n\r\nPerhaps this is already possible and we just haven't discovered how.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n", "labels": ["X2: answer required"], "number_of_comments": 19, "created_at": "2018-03-21 09:01:29", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "306447795": {"author_username": "anseki", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6796, "title": "Webpack 4 ignores `resolve.mainFields` in the global configuration", "body": "Hi, thank you for the great tool.\r\n\r\nI have a question. It might be a bug.\r\n\r\nTo import modules with `pkg.module` field (not `main` field) if possible, I wrote a `webpack.config.js` like:\r\n\r\n```js\r\nmodule.exports = {\r\n  // ...\r\n  resolve: {mainFields: ['module', 'jsnext:main', 'browser', 'main']},\r\n  // ...\r\n};\r\n```\r\n\r\nThat worked fine in Webpack 3.\r\nHowever, in Webpack 4, it seems that the specific is ignored when nested importing. That is, for example, a mod-A is imported with `module` field correctly, but a mod-B that the mod-A imports is imported with `main` field even if `module` field is given.\r\n\r\nI added below, then that worked fine.\r\n\r\n```js\r\nmodule.exports = {\r\n  // ...\r\n  resolve: {mainFields: ['module', 'jsnext:main', 'browser', 'main']},\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: require('path').resolve(__dirname, 'node_modules'),\r\n        resolve: {mainFields: ['module', 'jsnext:main', 'browser', 'main']}\r\n      }\r\n    ]\r\n  }\r\n  // ...\r\n};\r\n```\r\n\r\nI found this: https://github.com/webpack/webpack/wiki/Changelog-WIP\r\n\r\n> Resolving can now be configured with `module.rules[].resolve`. It's merged with the global configuration.\r\n\r\nIt seems that the default `module.rules[].resolve` is used when that is not specified, and the global configuration is ignored.\r\nI tried `resolve: {mainFields: []}` as the `module.rules[].resolve`, and I expected that the empty `mainFields` list is merged with the global `mainFields` list, but an error \"Module not found\" occurred. That is, it seems that the global `mainFields` was ignored.\r\n\r\nIs this correct behavior of Webpack 4?\r\nAnd also, to import all modules with `pkg.module` field, are both the first and the second `resolve` required?\r\n\r\n(Sorry, my English is poor.)\r\n", "labels": [], "number_of_comments": 9, "created_at": "2018-03-19 12:45:57", "reactions": {"total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "306303113": {"author_username": "wojtekmaj", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6792, "title": "TypeError: Cannot read property 'outputOptions' of undefined", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nBuild fails. \r\n\r\n```shell\r\n$ webpack --env.app=pdf\r\n(node:7276) DeprecationWarning: Tapable.apply is deprecated. Call apply on the plugin directly instead\r\n(node:7276) DeprecationWarning: Tapable.plugin is deprecated. Use new API on `.hooks` instead\r\nC:\\Users\\wojte\\Projekty\\react-pdf\\node_modules\\webpack\\lib\\webworker\\WebWorkerMainTemplatePlugin.js:97\r\n                        hash.update(`${this.outputOptions.publicPath}`);\r\n                                            ^\r\n\r\nTypeError: Cannot read property 'outputOptions' of undefined\r\n    at C:\\Users\\wojte\\Projekty\\react-pdf\\node_modules\\webpack\\lib\\webworker\\WebWorkerMainTemplatePlugin.js:97:24\r\n    at SyncHook.eval [as call] (eval at create (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\tapable\\lib\\HookCodeFactory.js:17:12), <anonymous>:7:1)\r\n    at SyncHook.lazyCompileHook [as _call] (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\tapable\\lib\\Hook.js:35:21)\r\n    at MainTemplate.updateHash (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\MainTemplate.js:390:19)\r\n    at Compilation.createHash (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\Compilation.js:1647:21)\r\n    at hooks.optimizeTree.callAsync.err (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\Compilation.js:924:9)\r\n    at AsyncSeriesHook.eval [as callAsync] (eval at create (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\tapable\\lib\\HookCodeFactory.js:24:12), <anonymous>:6:1)\r\n    at AsyncSeriesHook.lazyCompileHook [as _callAsync] (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\tapable\\lib\\Hook.js:35:21)\r\n    at Compilation.seal (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\Compilation.js:881:27)\r\n    at hooks.make.callAsync.err (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\Compiler.js:464:17)\r\n    at _err0 (eval at create (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\tapable\\lib\\HookCodeFactory.js:24:12), <anonymous>:11:1)\r\n    at _addModuleChain (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\Compilation.js:749:12)\r\n    at processModuleDependencies.err (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\Compilation.js:688:9)\r\n    at process._tickCallback (internal/process/next_tick.js:150:11)\r\nerror An unexpected error occurred: \"Command failed.\r\nExit code: 1\r\nCommand: C:\\\\WINDOWS\\\\system32\\\\cmd.exe\r\nArguments: /d /s /c webpack --env.app=pdf\r\n```\r\n\r\nAs you can see, I actually build several \"apps\" with one config, and app is an env variable. Interestingly, only one of these variables fail. The only difference I can see is that pdf app uses [this file](https://github.com/mozilla/pdf.js/blob/99060e2485cacb8513e7bc50d88b70101069b1c9/external/dist/webpack.js). This makes me wonder if that should be filed against worker-loader, but it is nowhere mentioned in this particular error stack.\r\n\r\nThe first two lines of call stack are the most interesting ones - as you can see, it actually seemed to jump from one webpack to another, and indeed react-pdf has webpack 3.x in its dependencies. Interestingly, this caused another error:\r\n\r\n```shell\r\n$ webpack --env.app=pdf\r\nHash: 9d98738b1866ccee2b7a\r\nVersion: webpack 4.1.1\r\nTime: 28419ms\r\nBuilt at: 2018-3-19 01:43:36\r\n 8 assets\r\nEntrypoint main = bundle.js\r\n  [12] C:/Users/wojte/Projekty/react-pdf/dist/shared/utils.js 7.84 KiB {2} [built]\r\n [109] ./pdf/config.json 174 bytes {2} [built]\r\n(truncated)\r\n [178] ./style.less 1.2 KiB {2} [built]\r\n [373] C:/Users/wojte/Projekty/react-pdf/dist/entry.webpack.js 1.2 KiB {2} [built]\r\n [384] ./pdf/index.jsx 4.97 KiB {2} [built]\r\n    + 411 hidden modules\r\n\r\nERROR in C:/Users/wojte/Projekty/react-pdf/node_modules/worker-loader/dist/cjs.js!C:/Users/wojte/Projekty/react-pdf/node_modules/pdfjs-dist/build/pdf.worker.js\r\nModule build failed: Error: Cannot find module 'webpack/lib/node/NodeTargetPlugin'\r\n    at Function.Module._resolveFilename (module.js:555:15)\r\n    at Function.Module._load (module.js:482:25)\r\n    at Module.require (module.js:604:17)\r\n    at require (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\v8-compile-cache\\v8-compile-cache.js:159:20)\r\n    at Object.<anonymous> (C:\\Users\\wojte\\Projekty\\react-pdf\\node_modules\\worker-loader\\dist\\index.js:21:25)\r\n    at Module._compile (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\v8-compile-cache\\v8-compile-cache.js:178:30)\r\n    at Object.Module._extensions..js (module.js:671:10)\r\n    at Module.load (module.js:573:32)\r\n    at tryModuleLoad (module.js:513:12)\r\n    at Function.Module._load (module.js:505:3)\r\n    at Module.require (module.js:604:17)\r\n    at require (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\v8-compile-cache\\v8-compile-cache.js:159:20)\r\n    at Object.<anonymous> (C:\\Users\\wojte\\Projekty\\react-pdf\\node_modules\\worker-loader\\dist\\cjs.js:3:14)\r\n    at Module._compile (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\v8-compile-cache\\v8-compile-cache.js:178:30)\r\n    at Object.Module._extensions..js (module.js:671:10)\r\n    at Module.load (module.js:573:32)\r\n    at tryModuleLoad (module.js:513:12)\r\n    at Function.Module._load (module.js:505:3)\r\n    at Module.require (module.js:604:17)\r\n    at require (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\v8-compile-cache\\v8-compile-cache.js:159:20)\r\n    at loadLoader (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\loader-runner\\lib\\loadLoader.js:13:17)\r\n    at iteratePitchingLoaders (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\loader-runner\\lib\\LoaderRunner.js:169:2)\r\n    at runLoaders (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\loader-runner\\lib\\LoaderRunner.js:362:2)\r\n    at NormalModule.doBuild (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\NormalModule.js:219:3)\r\n    at NormalModule.build (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\NormalModule.js:337:15)\r\n    at Compilation.buildModule (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\Compilation.js:346:10)\r\n    at factory.create (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\Compilation.js:572:15)\r\n    at factory (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\NormalModuleFactory.js:366:6)\r\n    at hooks.afterResolve.callAsync (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\NormalModuleFactory.js:143:13)\r\n    at AsyncSeriesWaterfallHook.eval [as callAsync] (eval at create (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\tapable\\lib\\HookCodeFactory.js:24:12), <anonymous>:18:1)\r\n    at resolver (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\NormalModuleFactory.js:126:29)\r\n    at process.nextTick (C:\\Users\\wojte\\Projekty\\Project showcase\\node_modules\\webpack\\lib\\NormalModuleFactory.js:304:9)\r\n    at process._tickCallback (internal/process/next_tick.js:150:11)\r\n @ C:/Users/wojte/Projekty/react-pdf/node_modules/pdfjs-dist/webpack.js 18:18-64\r\n @ C:/Users/wojte/Projekty/react-pdf/dist/entry.webpack.js\r\n @ ./pdf/index.jsx\r\nChild html-webpack-plugin for \"index.html\":\r\n     1 asset\r\n    Entrypoint undefined = index.html\r\n       [3] ../node_modules/html-webpack-plugin/lib/loader.js!./index.html 1.15 KiB {0} [built]\r\n        + 3 hidden modules\r\nerror An unexpected error occurred: \"Command failed.\r\nExit code: 2\r\nCommand: C:\\\\WINDOWS\\\\system32\\\\cmd.exe\r\nArguments: /d /s /c webpack --env.app=pdf\r\n```\r\n\r\nNow we have a problem in worker-loader instead. Double checked the version and it's the newest 1.1.1 that should be supporting Webpack 4.x. What's going on?\r\n\r\n**What is the expected behavior?**\r\n\r\n* Webpack should not jump to another copies of itself if found somewhere else in the directory tree (perhaps the issue here is with using symlinks).\r\n* worker-loader should be working okay with Webpack 4.x\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n\r\nNode.js: 9.x\r\nWebpack: \r\naffected: 4.1.1\r\nnot affected: 3.11.0\r\nOS: Windows 10 Spring Creators Update\r\n", "labels": ["Send a PR", "bug"], "number_of_comments": 19, "created_at": "2018-03-19 00:51:50", "reactions": {"total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "306176114": {"author_username": "vreshch", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6784, "title": "UMD build can't be used in node env", "body": "Ehen using build with libraryTarget: 'umd',  targeted build in node enviroment; getting: \r\nAR: \r\nNode give \"ReferenceError: window is not defined\"\r\nER: \r\nno issues  in node & browser\r\n\r\nNot possible to set target param to match both platforms;\r\n\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\nWebpack version 4.1.1 \r\nIt's due to webpackUniversalModuleDefinition - \"this\" should be as param instead of window\r\n\r\n\r\n", "labels": [], "number_of_comments": 14, "created_at": "2018-03-17 17:49:42", "reactions": {"total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "305580147": {"author_username": "drewjenkins", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6767, "title": "Webpack 4 hot rebuild time twice as slow", "body": "Originally posted this issue on webpack-dev-server's repo, but was told nearly all of HMR is handled by Webpack itself, so I am moving that issue over here.\r\n\r\n* Operating System: Mac OS High Sierra\r\n* Node Version: 8.10.0\r\n* NPM Version: 5.6.0\r\n* webpack Version: 4.1.1\r\n* webpack-dev-server Version: 3.1.1\r\n\r\n- [x] This is a **bug**\r\n- [ ] This is a **modification** request\r\n\r\n### Code\r\n\r\nNote that the webpack file I posted isn't exactly what we have, but anything removed was just company info, me merging a common webpack file with our dev one to produce a single code snippet, and removing some unrelated/redundant info (e.g. multiple templates with similar content).\r\n\r\n```js\r\n  // webpack.config.js\r\nconst webpack = require('webpack');\r\nconst merge = require('webpack-merge');\r\nconst config = require('./webpack.common.config.js');\r\nconst Jarvis = require('webpack-jarvis');\r\n\r\nmodule.exports = merge(config, {\r\n  mode: 'development',\r\n  devtool: 'cheap-module-eval-source-map',\r\n  output: {\r\n    publicPath: '/',\r\n    filename: '[name]-[hash].js',\r\n    crossOriginLoading: 'anonymous',\r\n    chunkFilename: '[name]-[hash].js'\r\n  },\r\n  optimization: {\r\n    noEmitOnErrors: true,\r\n    namedModules: true,\r\n  },\r\n  plugins: [\r\n    new CopyWebpackPlugin([{\r\n      from: 'app/assets/images/favicon/',\r\n      to: 'favicon/',\r\n    }]),\r\n    new CopyWebpackPlugin([{\r\n      from: 'app/assets/images/square/logo.png',\r\n      to: 'logo.png',\r\n    }]),\r\n    new ExtractTextPlugin({\r\n      filename: '[name]-styles-[contenthash].css',\r\n      allChunks: true,\r\n    }),\r\n    new DeterministicHash(),\r\n    new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/),\r\n    new HtmlWebpackPlugin({\r\n      template: 'templates/index.ejs',\r\n      filename: 'index.html',\r\n      inject: false,\r\n      chunks: ['common', 'main'],\r\n      appleTouchIconSizes: [57, 72, 114, 120, 144, 152],\r\n    }),\r\n    new Jarvis({port: 7003}),\r\n    new webpack.HotModuleReplacementPlugin(),\r\n    new webpack.DefinePlugin({\r\n      _DEVELOPMENT_: true,\r\n    })\r\n  ],\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.(otf|ttf|woff|woff2|png|jpg|svg|mp3|wav|aff|dic)$/,\r\n        use: [\r\n          {\r\n            loader: 'file-loader',\r\n            options: {\r\n              name: 'assets/[name]-[sha1:hash:hex:8].[ext]'\r\n            },\r\n          },\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.s?css$/,\r\n        use: ExtractTextPlugin.extract({\r\n          fallback: 'style-loader',\r\n          use: [\r\n            'css-loader',\r\n            {\r\n              loader: 'postcss-loader',\r\n              options: {\r\n                plugins: () => [\r\n                  require('precss'),\r\n                  require('autoprefixer'),\r\n                ]\r\n              }\r\n            },\r\n            'sass-loader'\r\n          ]\r\n        }),\r\n      },\r\n      {\r\n        test: /\\.jsx?$/,\r\n        use: ['babel-loader'],\r\n      },\r\n    ]\r\n  },\r\n  entry: {\r\n    main: [\r\n      'babel-polyfill',\r\n      'react-hot-loader/patch',\r\n      'webpack/hot/only-dev-server',\r\n      'webpack-dev-server/client?https://0.0.0.0:7001',\r\n      './app/main.js',\r\n    ],\r\n  }\r\n});\r\n\r\n```\r\n\r\n```js\r\n  // dev-server.js\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst webpack = require('webpack');\r\nconst WebpackDevServer = require('webpack-dev-server');\r\nconst config = require('./webpack.devconfig');\r\nconst ssl = require('./devssl');\r\n\r\nnew WebpackDevServer(webpack(config), {\r\n  publicPath: config.output.publicPath,\r\n  headers: {'Access-Control-Allow-Origin': '*'},\r\n  hot: true,\r\n  https: true,\r\n  clientLogLevel: 'error',\r\n  cert: ssl.cert,\r\n  overlay: true,\r\n  key: ssl.key,\r\n  historyApiFallback: true,\r\n  disableHostCheck: true,\r\n  watchOptions: {\r\n    ignored: /\\/node_modules\\/.*/,\r\n  },\r\n  stats: {\r\n    assets: false,\r\n    cached: false,\r\n    cachedAssets: false,\r\n    children: false,\r\n    chunks: false,\r\n    chunkModules: false,\r\n    chunkOrigins: false,\r\n    colors: true,\r\n    depth: false,\r\n    entrypoints: true,\r\n    excludeAssets: /app\\/assets/,\r\n    hash: false,\r\n    maxModules: 15,\r\n    modules: false,\r\n    performance: true,\r\n    reasons: false,\r\n    source: false,\r\n    timings: true,\r\n    version: false,\r\n    warnings: true,\r\n  },\r\n}).listen(7001, '0.0.0.0', function(err, result) {\r\n  console.log(`Serving chunks at path ${config.output.publicPath}`);\r\n});\r\n```\r\n\r\n### Expected Behavior\r\nSimilar, if not faster HMR\r\n\r\n### Actual Behavior\r\nHot reload time increased from ~5s to ~10s when upgrading from Webpack 3 to Webpack 4.  \r\n\r\n### For Bugs; How can we reproduce the behavior?\r\nUnsure if it reproduces in every case, but in our case we have a large webapp that spits out multiple entry points, with sass processing, along with a lot of other webpack features.", "labels": [], "number_of_comments": 57, "created_at": "2018-03-15 14:39:46", "reactions": {"total_count": 30, "+1": 30, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "305416559": {"author_username": "probablyup", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6763, "title": "automatically add production entry hints to mainFields when nodeEnv === \"production\"", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n\r\n**What kind of change does this PR introduce?**\r\nfeature\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n~~not yet, need guidance~~ yes, unit tests\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**If relevant, link to documentation update:**\r\nn/a, will add after this is merged\r\n<!-- Link PR from webpack/webpack.js.org here, or N/A -->\r\n\r\n**Summary**\r\nCloses #6828 \r\n\r\nThis feature is primarily targeted at module authors. It is a common practice to provide various flat bundles of a library in dev and production variants, but before this change the production version would have to be dynamically-required or manually set up via `resolve.alias`.\r\n\r\nThe dynamic require scenario is suboptimal for many reasons, the most important one in a webpack scenario being that it will cause a module concatenation deopt. If a library is able to provide an ESM build, this change makes enables the author to supply the right variant for development vs production scenarios and hopefully avoid a concatenation deopt.\r\n\r\nFor example, a library could then provide a package.json config like:\r\n\r\n```json\r\n{\r\n  \"name\": \"my-package\",\r\n  \"main\": \"./flat-bundle.cjs.js\",\r\n  \"main:production\": \"./flat-bundle.cjs.min.js\",\r\n  \"module\": \"./flat-bundle.es.js\",\r\n  \"module:production\": \"./flat-bundle.es.min.js\",\r\n  \"browser\": \"./flat-bundle.umd.js\",\r\n  \"browser:production\": \"./flat-bundle.umd.min.js\"\r\n}\r\n```\r\n\r\nThis effectively replaces index patterns like this:\r\n\r\n```js\r\nif (process.env.NODE_ENV === \"production\") {\r\n  module.exports = require(\"./flat-bundle.cjs.min.js\");\r\n} else {\r\n  module.exports = require(\"./flat-bundle.cjs.js\");\r\n}\r\n```\r\n\r\nAnd the \"module\" equivalent actually wasn't possible before at all because you can't dynamically `require` an ES module, yet.\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 6, "created_at": "2018-03-15 05:03:39", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "305159250": {"author_username": "hparton", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6753, "title": "[ext] placeholder is not replaced when set in output.filename", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n~~Bug~~ feature\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nUsing '[ext]' placeholder in the output.filename doesn't get replaced and instead you get a file with 'filename.[ext]'.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nJust setting the config to the following is enough:\r\n```js\r\noutput: {\r\n    filename: '[name].[hash].[ext]'\r\n}\r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\n'[ext]' should be replaced with the relevant extension.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n\r\nNode Version: 8.9.4\r\nWebpack Version: 4.1.1\r\n", "labels": ["enhancement"], "number_of_comments": 11, "created_at": "2018-03-14 13:32:05", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "304057896": {"author_username": "mekza", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6721, "title": "Mono-repo", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n<!-- I deleted the template because it's not relevant here -->\r\n\r\nGreat job on Webpack 4 and I am really looking forward to migrate all of my projects to this new release. \r\n\r\nI am sure that many of us faced the same problem, lots of breaking changes and documentation is not up-to-date on webpack.js.org. I found it odd, tbh little annoying, that documentation release is uncorrelated to webpack's release. I've seen many pending PRs related to documentation on webpack.js.org' repo. \r\n\r\nOn one hand, software and documentation must have the same release cycle, imho you can't release (public) software without an up-to-date documentation but on the other hand I am totally aware maintaining 2 repos is a bit of a challenge especially with a dev community like webpack's.\r\n\r\nWhy don't merge projects to a mono-repo allowing maintainers to perform update across of softwares and documentations in a less painful way?\r\n\r\nFor example React, Babel and many others did it.\r\n\r\n*PS: feel free to rename this issue, I am not good at finding titles*\r\n", "labels": [], "number_of_comments": 0, "created_at": "2018-03-10 09:48:35", "reactions": {"total_count": 15, "+1": 15, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "304019750": {"author_username": "TheLarkInn", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6719, "title": "How should we handle import.meta", "body": "Hey, @sokra @ooflorent, @Kovensky @ljharb:\r\n\r\nIt looks like `import.meta` has landed in Stage 3 and [Babel has just landed it also](https://github.com/babel/proposals/issues/10). It looks like there is already an acorn plugin that allows for the syntax support. \r\n\r\nFirst piece is: Should we add this or wait? \r\n\r\nSecond piece is: Are there webpack specific things we should consider for this syntax. I feel like platforms (Electron, etc.) are going to start shoving a bunch of crap (which use to be globals) in these objects that we would automatically _use_ to treat as Externals. Is there specific handlings that we need to be concerned here. ", "labels": [], "number_of_comments": 36, "created_at": "2018-03-10 00:14:25", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "303470488": {"author_username": "richardstrutt", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6707, "title": "Adding array of strings (nested functionality)", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nFix in schema\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNo\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**If relevant, link to documentation update:**\r\n\r\n<!-- Link PR from webpack/webpack.js.org here, or N/A -->\r\n\r\n**Summary**\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nWebpack output.library.root accepts array of strings, however the schema only accepts string. Many projects depend on nesting externals under a namespace. This will eliminate the need to create custom plugins so that we can nest modules under the root name. FYI @ibezkrovnyi \r\n\r\nFor example below, -->  Webpack will output `root['my-global-root']['my-app-name']`.\r\n```javascript\r\noutput: {\r\n  library: {\r\n    /* \r\n     schema throws an error as type is only string but\r\n     webpack itself can accept array of strings as well\r\n   */\r\n    root: ['my-global-root', 'my-app-name'], \r\n    amd: 'my-app-name',\r\n    commonjs: 'my-app-name'\r\n  },\r\n  libraryTarget: 'umd'\r\n}\r\n```\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**Other information**\r\n", "labels": ["PR: CI-ok", "PR: reviewed-changes-requested"], "number_of_comments": 4, "created_at": "2018-03-08 12:57:16", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "302981229": {"author_username": "StalkAlex", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6693, "title": "Webpack 4. Uncaught ReferenceError: webpackHotUpdate is not defined", "body": "**Do you want to request a *feature* or report a *bug*?** \r\n*bug*\r\n\r\n**What is the current behavior?**\r\n![capture](https://user-images.githubusercontent.com/2943154/37077073-2246a590-21fb-11e8-9ebb-99d7b690d4b7.JPG)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n1. Run webpack-dev-server, it builds sucessfully.\r\n2. Open page containing my bundled React code.\r\n3. It runs sucessfully.\r\n4. Change something in jsx to emit hot-update.\r\n5. Webpack rebuilds sucessfully, changes applied.\r\n6. Update whole page using F5 in browser.\r\n\r\n**What is the expected behavior?**\r\nAfter step 6 I expect normal page loading again, but instead I get error messages above and not loaded page. Didn't have such problems in webpack 3.\r\n\r\nWith this option it works \r\n```js\r\n  new webpack.HotModuleReplacementPlugin({\r\n     multiStep: true,\r\n  }),\r\n```\r\n but in webpack 3 it worked like this\r\n```js\r\n  new webpack.HotModuleReplacementPlugin(),\r\n```\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n*not feature request*\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n\r\nwebpack: 4.1.0\r\nchrome: last stable\r\nnode: 8.9.4\r\nreact: 16.2.0\r\n\r\n", "labels": [], "number_of_comments": 28, "created_at": "2018-03-07 06:38:08", "reactions": {"total_count": 15, "+1": 15, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "302434956": {"author_username": "ImCreator2", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6675, "title": "TypeError: dep.getResourceIdentifier is not a function", "body": "**What is the current behavior?**\r\nTrying to mix under laravel 5.6.7 using laravel-mix 2.0.0 & webpack 4.1.0\r\n`npm run dev`\r\n\r\ngetting this error on every run..\r\ntried common work around,\r\n`deleted npm_modules folder`\r\n`npm cache clean --force`\r\n`npm install`\r\nstill the same..\r\n\r\n> cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\r\n> \r\n>   0% compiling\r\n>  10% building modules 0/1 modules 1 active ...krish\\node_modules\\toastr\\toastr.less\r\n>  10% building modules 1/1 modules 0 active\r\n>  10% building modules 2/2 modules 0 active\r\n>  10% building modules 2/3 modules 1 active ...\\www\\krish\\resources\\assets\\js\\app.js\r\n>  10% building modules 2/5 modules 3 active ...\\krish\\resources\\assets\\sass\\app.scss\r\n>  10% building modules 3/6 modules 3 active ...sources\\assets\\less\\adminlte-app.less\r\n>  10% building modules 4/7 modules 3 active ...krish\\node_modules\\toastr\\toastr.less\r\n>  10% building modules 5/8 modules 3 active ...otstrap-less\\bootstrap\\bootstrap.less\r\n>  10% building modules 6/8 modules 2 active ...sh\\resources\\assets\\js\\app-landing.js\r\n>  10% building modules 6/9 modules 3 active ...krish\\node_modules\\toastr\\toastr.less\r\n>  10% building modules 6/11 modules 5 active ...\\krish\\resources\\assets\\sass\\app.scss\r\n>  10% building modules 6/12 modules 6 active ...sources\\assets\\less\\adminlte-app.less\r\n>  10% building modules 6/13 modules 7 active ...modules\\style-loader\\lib\\addStyles.js\r\n>  10% building modules 7/13 modules 6 active ...modules\\style-loader\\lib\\addStyles.js\r\n>  10% building modules 8/13 modules 5 active ...sources\\assets\\less\\adminlte-app.less\r\n>  10% building modules 8/14 modules 6 active ...de_modules\\css-loader\\lib\\css-base.js\r\n>  11% building modules 9/14 modules 5 active ...de_modules\\css-loader\\lib\\css-base.js\r\n>  11% building modules 10/14 modules 4 active ...de_modules\\css-loader\\lib\\css-base.js\r\n>  11% building modules 11/14 modules 3 active ...sources\\assets\\less\\adminlte-app.less\r\n>  11% building modules 11/15 modules 4 active ...node_modules\\style-loader\\lib\\urls.js\r\n>  11% building modules 11/16 modules 5 active ...h\\node_modules\\vue\\dist\\vue.common.js\r\n>  11% building modules 12/16 modules 4 active ...h\\node_modules\\vue\\dist\\vue.common.js\r\n>  11% building modules 13/16 modules 3 active ...h\\node_modules\\vue\\dist\\vue.common.js\r\n>  11% building modules 14/16 modules 2 active ...sources\\assets\\less\\adminlte-app.less**TypeError: dep.getResourceIdentifier is not a function**\r\n>\r\n>     at addDependency (C:\\wamp\\www\\krish\\node_modules\\webpack\\lib\\Compilation.js:387:30)\r\n>     at iterationOfArrayCallback (C:\\wamp\\www\\krish\\node_modules\\webpack\\lib\\Compilation.js:78:3)\r\n>     at addDependenciesBlock (C:\\wamp\\www\\krish\\node_modules\\webpack\\lib\\Compilation.js:407:5)\r\n>     at Compilation.processModuleDependencies (C:\\wamp\\www\\krish\\node_modules\\webpack\\lib\\Compilation.js:418:4)\r\n>     at afterBuild (C:\\wamp\\www\\krish\\node_modules\\webpack\\lib\\Compilation.js:545:16)\r\n>     at _this.buildModule.err (C:\\wamp\\www\\krish\\node_modules\\webpack\\lib\\Compilation.js:591:11)\r\n>     at callback (C:\\wamp\\www\\krish\\node_modules\\webpack\\lib\\Compilation.js:342:35)\r\n>     at module.build.error (C:\\wamp\\www\\krish\\node_modules\\webpack\\lib\\Compilation.js:378:12)\r\n>     at handleParseResult (C:\\wamp\\www\\krish\\node_modules\\webpack\\lib\\NormalModule.js:363:12)\r\n>     at doBuild.err (C:\\wamp\\www\\krish\\node_modules\\webpack\\lib\\NormalModule.js:385:6)\r\n>     at runLoaders (C:\\wamp\\www\\krish\\node_modules\\webpack\\lib\\NormalModule.js:264:12)\r\n>     at C:\\wamp\\www\\krish\\node_modules\\loader-runner\\lib\\LoaderRunner.js:370:3\r\n>     at iterateNormalLoaders (C:\\wamp\\www\\krish\\node_modules\\loader-runner\\lib\\LoaderRunner.js:211:10)\r\n>     at Array.<anonymous> (C:\\wamp\\www\\krish\\node_modules\\loader-runner\\lib\\LoaderRunner.js:202:4)\r\n>     at Storage.finished (C:\\wamp\\www\\krish\\node_modules\\enhanced-resolve\\lib\\CachedInputFileSystem.js:43:16)\r\n>     at provider (C:\\wamp\\www\\krish\\node_modules\\enhanced-resolve\\lib\\CachedInputFileSystem.js:79:9)\r\n>     at C:\\wamp\\www\\krish\\node_modules\\graceful-fs\\graceful-fs.js:78:16\r\n>     at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:532:3)\r\n>\r\n> npm ERR! code ELIFECYCLE\r\n> npm ERR! errno 1\r\n> npm ERR! @ development: cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\r\n> npm ERR! Exit status 1\r\n> npm ERR! \r\n> npm ERR! Failed at the @ development script.\r\n> npm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n> \r\n> npm ERR! A complete log of this run can be found in:\r\n> npm ERR!     C:\\Users\\admin\\AppData\\Roaming\\npm-cache\\_logs\\2018-03-05T19_05_05_252Z-debug.log\r\n> npm ERR! code ELIFECYCLE\r\n> npm ERR! errno 1\r\n> npm ERR! @ dev: npm run development\r\n> npm ERR! Exit status 1\r\n> npm ERR! \r\n> npm ERR! Failed at the @ dev script.\r\n> npm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n> \r\n> npm ERR! A complete log of this run can be found in:\r\n> npm ERR!     C:\\Users\\admin\\AppData\\Roaming\\npm-cache\\_logs\\2018-03-05T19_05_05_702Z-debug.log\r\n> \r\n> Process finished with exit code 1\r\n\r\n**Package.json**\r\n\r\n```\r\n{\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"dev\": \"npm run development\",\r\n    \"development\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\r\n    \"watch\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\r\n    \"watch-poll\": \"npm run watch -- --watch-poll\",\r\n    \"hot\": \"cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\r\n    \"prod\": \"npm run production\",\r\n    \"production\": \"cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\r\n    \"lint\": \"./node_modules/.bin/eslint --ext .js,.vue resources/assets/js\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"acacha-forms\": \"^1.0.0\",\r\n    \"admin-lte\": \"^2.4.2\",\r\n    \"axios\": \"^0.18.0\",\r\n    \"babel-eslint\": \"^8.2.2\",\r\n    \"babel-loader\": \"^7.1.3\",\r\n    \"babel-preset-es2015\": \"^6.22.0\",\r\n    \"bootstrap-less\": \"^3.3.8\",\r\n    \"bootstrap-sass\": \"^3.3.7\",\r\n    \"cross-env\": \"^5.1.3\",\r\n    \"eslint\": \"^4.18.2\",\r\n    \"eslint-config-standard\": \"^11.0.0\",\r\n    \"eslint-friendly-formatter\": \"^3.0.0\",\r\n    \"eslint-loader\": \"^2.0.0\",\r\n    \"eslint-plugin-html\": \"^4.0.2\",\r\n    \"eslint-plugin-promise\": \"^3.6.0\",\r\n    \"eslint-plugin-standard\": \"^3.0.0\",\r\n    \"font-awesome\": \"^4.7.0\",\r\n    \"icheck\": \"^1.0.2\",\r\n    \"ionicons\": \"^3.0.0\",\r\n    \"jquery\": \"^3.3.1\",\r\n    \"laravel-mix\": \"2.*\",\r\n    \"less\": \"^3.0.0\",\r\n    \"less-loader\": \"^4.0.6\",\r\n    \"lodash\": \"^4.17.5\",\r\n    \"node-sass\": \"^4.7.2\",\r\n    \"sass-loader\": \"^6.0.7\",\r\n    \"toastr\": \"^2.1.4\",\r\n    \"vue\": \"^2.5.13\",\r\n    \"vue-loader\": \"^14.0.0\"\r\n  },\r\n  \"dependencies\": {\r\n    \"ajv\": \"^6.2.1\",\r\n    \"bootstrap\": \"^3.3.7\",\r\n    \"bootstrap-iconpicker\": \"^1.8.2\",\r\n    \"eslint-plugin-import\": \"^2.9.0\",\r\n    \"eslint-plugin-node\": \"^6.0.0\",\r\n    \"jquery-ui\": \"^1.12.1\",\r\n    \"jquery-ui-dist\": \"^1.12.1\",\r\n    \"jquery-ujs\": \"^1.2.2\",\r\n    \"select2\": \"^4.0.6-rc.1\",\r\n    \"vue-template-compiler\": \"^2.5.13\",\r\n    \"webpack\": \"^4.1.0\",\r\n    \"webpack-cli\": \"^2.0.10\"\r\n  },\r\n  \"babel\": {\r\n    \"presets\": [\r\n      \"es2015\"\r\n    ]\r\n  }\r\n}\r\n```\r\n \r\n\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\nNode.js: `9.7.1`\r\nnpm: `5.7.1`\r\nwebpack: `4.1.0`\r\nOS: `Win10 32bit`\r\nExcept bootstrap, all packages are up-to-date.\r\n\r\nRef: [There is no html-webpack-plugin as mentioned here..](https://github.com/webpack/webpack/issues/6064#issuecomment-349139146)", "labels": [], "number_of_comments": 29, "created_at": "2018-03-05 19:43:58", "reactions": {"total_count": 18, "+1": 18, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "301944502": {"author_username": "marcalexiei", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6658, "title": "Eslint - add rules", "body": "**What kind of change does this PR introduce?**\r\nAdd lint rules.\r\n\r\n**Did you add tests for your changes?**\r\nNot needed.\r\n\r\n**If relevant, link to documentation update:**\r\n N/A\r\n\r\n**Summary**\r\nAdded 2 eslint  rules:\r\n1. quotes - trigger lint error when template string have no \"computed block\" ( `${}` ). (Code review in #6609)\r\n2. dot-notation - I think this rule improve readability.\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo.", "labels": ["PR: CI-ok", "PR: reviewed-changes-requested", "PR: small"], "number_of_comments": 3, "created_at": "2018-03-03 00:08:08", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "300807087": {"author_username": "vinpac", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6612, "title": "Hooks of chunkTemplate not being called", "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nI tap on `compilation.chunkTemplate.hooks` and they are never called\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n```js\r\nimport { ConcatSource } from 'webpack-sources'\r\n\r\nclass ExampleTemplatePlugin {\r\n  apply(chunkTemplate) {\r\n    chunkTemplate.hooks.render.tap('ExampleTemplatePluginRender', (modules, chunk) => {\r\n      // This is never called\r\n      console.log(modules)\r\n    })\r\n  }\r\n}\r\n\r\nexport default class ExamplePlugin {\r\n  apply(compiler) {\r\n    compiler.hooks.compilation.tap('ExampleTemplatePlugin', compilation => {\r\n      new ExampleTemplatePlugin().apply(compilation.chunkTemplate)\r\n    })\r\n  }\r\n}\r\n```\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\nNode: v8.9.1\r\nWebpack: v4.0.1\r\n", "labels": [], "number_of_comments": 5, "created_at": "2018-02-27 21:52:23", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "300717938": {"author_username": "davidmerrique", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6604, "title": "Output is wrong when using \"runtimeChunk: 'single'\" and \"output.chunkFilename\"", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nIf I have the `output.chunkFilename` and `optimization.runtimeChunk: 'single'` set, `output.filename` doesn't work\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n```javascript\r\nmodule.exports = {\r\n  entry: {\r\n    'pages/page1': './src/pages/page1.js',\r\n    'pages/page2': './src/pages/page2.js'\r\n  },\r\n  output: {\r\n    filename: '[name].js',\r\n    chunkFilename: 'chunks/[id].[chunkhash].js'\r\n  },\r\n  optimization: {\r\n    runtimeChunk: 'single'\r\n  }\r\n};\r\n```\r\n\r\n```shell\r\nHash: ba1daa3725e13bf84355\r\nVersion: webpack 4.0.1\r\nTime: 93ms\r\nBuilt at: 2018-2-27 12:05:05\r\n                           Asset       Size  Chunks             Chunk Names\r\nchunks/0.bb1890038c33a85032a4.js  137 bytes       0  [emitted]\r\n                      runtime.js   1.78 KiB       1  [emitted]  runtime\r\nchunks/2.a89d98b1f66b492ba763.js  114 bytes       2  [emitted]  pages/page2\r\nchunks/3.e244db466d72409e5de5.js  115 bytes       3  [emitted]  pages/page1\r\nEntrypoint pages/page1 = runtime.js chunks/3.e244db466d72409e5de5.js\r\nEntrypoint pages/page2 = runtime.js chunks/2.a89d98b1f66b492ba763.js\r\n   [0] ./src/module.js 49 bytes {0} [built]\r\n   [1] ./src/pages/page2.js 20 bytes {2} [built]\r\n   [2] ./src/pages/page1.js 20 bytes {3} [built]\r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nI'd expect my outputted entrypoints to look like this:\r\n```shell\r\nEntrypoint pages/page1 = runtime.js pages/page1.js\r\nEntrypoint pages/page2 = runtime.js pages/page2.js\r\n```\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\nmacOS, nodejs v9.4.0, Webpack v4.0.1", "labels": [], "number_of_comments": 7, "created_at": "2018-02-27 17:13:23", "reactions": {"total_count": 20, "+1": 20, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "300582495": {"author_username": "nirazul", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6598, "title": "When emitting runtimeChunk, entry chunks use `chunkFilename` instead of `filename`", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug (?)\r\n\r\n**What is the current behavior?**\r\nWhen defining `options.runtimeChunk` with `true` or another value, my entry modules are being written with the `chunkFilename` option instead of the `filename` option. However, the runtime doesn't seem to load my entry modules. When I add a script tag for the entry file, the page loads normally.\r\n\r\nWhich modules do I need to write script tags for? I'm automatically injecting all files that are in the directory controlled by the `filename` property.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n```js\r\nconst config = {\r\n    entry: {\r\n        app: [\r\n            path.join(myCwd, 'app/main/index.js'),\r\n            path.join(myCwd, 'app/main/hmr.js'),\r\n        ],\r\n    },\r\n    mode: isDist ? 'production' : 'development',\r\n    optimization: {\r\n        namedModules: true,\r\n        noEmitOnErrors: !isDist,\r\n        runtimeChunk: true,\r\n        splitChunks: false,\r\n    },\r\n    output: {\r\n        path: destPath,\r\n        filename: 'entry/[name]/index.js',\r\n        chunkFilename: 'chunks/[name]/index.[chunkhash].js',\r\n    },\r\n    plugins: [\r\n        new webpack.HotModuleReplacementPlugin(),\r\n    ],\r\n    resolve: {\r\n        modules: [\r\n            'node_modules',\r\n            path.resolve(myCwd, 'app'),\r\n        ],\r\n    },\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nEntry chunks are emitted using the filename property.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n- webpack v4.0.1\r\n- node v8.9", "labels": [], "number_of_comments": 21, "created_at": "2018-02-27 10:56:35", "reactions": {"total_count": 29, "+1": 29, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "300362990": {"author_username": "TehShrike", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6584, "title": "Bug in Webpack 3 and 4: can't `require` a module with a ESM entry point", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nIf you `require` a package with a `module` field in its package.json, and the module has an `export default`, the `require` call does not return the default export like it should.\r\n\r\nInstead, it returns an object with `default` and `all` properties.\r\n\r\nBoth of these forms will return the default export:\r\n\r\n```js\r\nconst merge = require('deepmerge').default\r\n```\r\n\r\n```js\r\nimport merge from 'deepmerge'\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nReproduction at https://github.com/perry-mitchell/repo-deepmerge-webpack\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\n`require('any-esm-module')` should return the default export.\r\n\r\nFor many Webpack users, `require('any-esm-module').default` is not even an option, since they are importing a package that depends on some CJS/ESM module (like [deepmerge](https://github.com/KyleAMathews/deepmerge)).\r\n\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n\r\nTested with Webpack 3.11.0 and 4.0.0.\r\n\r\n---\r\n\r\n*Edit:* per the discussion below, my original report above is incorrect.\r\n\r\n**What should probably happen:** `require('my-module')` should import the `main` (or `browser`) entry point in the package.json file.\r\n\r\n**What happens now:** `require('my-module')` imports the `module` entry point in the package.json file.", "labels": [], "number_of_comments": 11, "created_at": "2018-02-26 19:21:24", "reactions": {"total_count": 19, "+1": 19, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "300071716": {"author_username": "Andarist", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6571, "title": "Effectful imports should ignore sideEffects field", "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\n```js\r\nimport 'list/fantasy-land'\r\n```\r\nwith \r\n```js\r\nsideEffects: false\r\n```\r\n\r\ndoes not include imported file in the bundle, which is somewhat OK\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nnot a bug\r\n\r\n**What is the expected behavior?**\r\n\r\nthis import is **clearly** effectful, so it actually IMHO should not get dropped regardless of the `sideEffects`\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\ndescribed in expected behaviour\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n\r\nwebpack@4, others - irrelevant\r\n", "labels": [], "number_of_comments": 29, "created_at": "2018-02-25 23:16:31", "reactions": {"total_count": 20, "+1": 20, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "298392777": {"author_username": "mzgoddard", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6527, "title": "[spec: webpack 5] - A module disk cache between build processes", "body": "## Current Problems & Scenarios\r\n\r\nUsers get fast webpack builds on large code bases by running continuous processes that watch the file system with webpack-dev-server or webpack's watch option. Starting those continuous processes can take a lot of time to build all the modules for the code base anew to fill the memory cache webpack has to make rebuilds fast. Some webpack uses remove the benefit from running a continuous process like running tests on a Continuous Integration instance that will be stopped after it runs, or making a production build for staging or release which is needed less frequently than development builds. The production build will just use more resources while the development build completes faster from not using optimization plugins.\r\n\r\nCommunity solutions and workarounds help remedy this with cache-loader, DllReferencePlugin, auto-dll-plugin, thread-loader, happypack, and hard-source-webpack-plugin. Many workarounds also include option tweaks that trade small loses in file size or feature power for larger improvement to build time. All of these involve a lot of knowledge about webpack and the community or finding really good articles on what others have already figured out. webpack itself does not have some simpler option to turn on or have on by default.\r\n\r\nWith the module memory cache there is a second important cache in webpack for build performance, the resolver's **unsafe cache**. The unsafe cache is memory only too, and an example of a performance workaround that is on by default in webpack's core. It trades resolving accuracy for fast repeated resolutions. That trade means continuous webpack processes need to be restarted to pick up changes to file resolutions. Or that the option can be disabled but for the number of resolutions that will change like that restarting will save more time overall than having the option regularly be off.\r\n\r\n### Proposed Solution\r\n\r\n**Freeze all modules in a build at needed stages during compilation and write them to disk.** Later iterative builds, the first build of a continuous process using an existing on disk module cache, read the cache, validate the modules, and thaw them during the build. The graph relations between modules are not explicitly cached. The module relations need to also be validated. Validating the relations is equivalent to rebuilding the relations through webpack's normal dependency tracing behaviour.\r\n\r\nThe resolver's cache can also be frozen and validated with saved missing paths. The validated resolver's \"safe\" cache allows retracing dependencies to execute quickly. Any resolutions that were invalidated will be run through the resolver normally allowing file path changes to be discovered in iterative and rebuilds.\r\n\r\nPlain json data is easiest to write to and read from disk as well as provide a state the module's data can be in during validation. Fully thawing that data into their original shape will require a Compilation to be running so the Module, Dependency's and other webpack types can be created according to how that Compilation is configured to create a copy of the past Module indistinguishable from the last build.\r\n\r\nCreating this data will like involve two sets of APIs. One creates the duplicates and constructing thawed Instances from the disk read duplicate. The second uses the first to handle the variation in subclassed types in webpack. As an example the webpack 3 has 49 Dependency subclasses that can be used by the core of webpack and core plugins. The first API duplicating a NormalModule doesn't handle the Dependency instances in the module's dependencies list, it calls to the second API to create duplicates of those values. The second API uses the first to create those duplicates. To keep this from running in a circular cycle, uses of the first API are responsible for not duplicating cyclical references and for creating them while thawing using passed state information like webpack's Parser uses.\r\n\r\nThe first data API will likely be a library used to implement a schema of a Module or Dependency. The second data API may use webpack's dependencyFactories strategy or Tapable hooks. A Tapable or similar approach may present opportunities to let plugin authors cache plugin information that is not tracked by default.\r\n\r\nA file system API is needed to write and read the duplicates. This API organizes them and uses systems and libraries to operate efficiently or to provide an important point for debugging to loader authors, plugin authors, and core maintainers. This API may also act as a layer that may separate some information in a common shape to change its strategy. Asset objects may be treated this way if they are found to best be stored and loaded with a different mechanism then the rest of the module data.\r\n\r\nThis must be a safe cache. Any cached information must be able to be validated.\r\n\r\nModules validate their build and rendered source through timestamps and hashes. Timestamps cannot always be validated. Either a file changed in a way that didn't change its timestamp or the timestamp decreased in cases like a file being deleted in a context dependency or a file be renamed to the path of the old file. Hashes of the content, like the rendered source and chunk source use can be validated. All timestamp checks in modules and elsewhere must be replaced with hash or other content representative comparisons instead of filesystem metadata comparisons. File dependency timestamps can be replaced with hashes of their original content. Context dependency timestamps can be replaced with hashes of all the sorted relative paths deeply nested under them.\r\n\r\nThe cached resolver information needs to validate the filesystem shape and can do that by `stat()`ing the resolved path and all tested missing paths. A missing resolved path invalidates the resolution. An existing missing path invalidates the resolution.\r\n\r\nTwo larger \"validations\" also need to be performed.\r\n\r\nThe webpack's build configuration needs to be the same as the previous build. Instead of invalidating in case of a different build configuration though, a separate cache stored adjacent to the other cached modules under other configurations. Webpack configurations can frequently switch like in cases of using `webpack` or `webpack-dev-server` which turns on hot module replacement. Hot module replacement means the configuration is different and needs a separate cache as the module's will have a different output due to the additional plugin. One way to compare this is a hash of the configuration. The configuration can be stringified including any passed function's source and then hashed. An iterative build will check the new hash to choose its cache. Smarter configuration hashes could be developed to account for options that will not modify the already built modules.\r\n\r\nThe second larger validation is ensuring that dependencies stored in folders like node_modules have not changed. yarn and npm 5 can help here by trusting them to do this check and hashing their content. A back up can hash the combined content of all package.json files under the first depth of directories under node_modules. webpack will track the content of built modules, but it does not track the source of loaders, plugins, and dependencies used by those and webpack. A change to those may have an effect on how a built module looks. Any changes to these not-tracked-by-webpack files currently will mean the entire cache is no longer valid. A sibling cache could be created but if that can be determined to be regularly useful to keep the old cache.\r\n\r\n### User Stories (That speak in solving spirit of these problem areas)\r\n\r\nPriority\tStory\r\n\r\n1 As a plugin or loader author, I can use a strategy or provided tools to test with the cache. In addition I have a strategy or means to have the cache invalidate entirely or specific modules as I am editing a loader or plugin.\r\n\r\n1 As a user, I can rely on the cache to speed up iterative builds and notify me when an uncached build is starting. I can also turn off the notifications if I desire. I should never need to personally delete the cache for some performance trade off. The cache should reset itself as necessary without my input. I understood I may need to do this for bugs. Best such bugs be squashed quickly.\r\n\r\n1 As a user, I should be able to use loaders and plugins that don't work with the cache. Modules with uncacheable loaders will not be cached. Modules with nested objects that cannot be duplicated or thawed from containing values that are not registered in the second data API will produce a warning about their cacheability status and allowed to be built in the normal uncached fashion.\r\n\r\n1 As a core maintainer, I can test and debug other webpack core features and core plugins in use with the cache to make sure it can validate and verify itself for use.\r\n\r\n### Non-Goals\r\n\r\nThis RFC will not look into using a cache built with different node_modules dependencies than those last installed. This would be a large effort on its own likely involving trade offs and may best be its own RFC.\r\n\r\nThis cache will be portable. Reusable on different CI instances or in different repo clones on the same or different computers. This RFC will not figure out the specifics of sharing a cache between multiple systems and leaves this to users to best figure out.\r\n\r\nThis spec can be bridged into other proposed new features with its module caching behaviour. This document and issue does not intend to make those leaps.\r\n\r\n### Requirements\r\n\r\n A api or library to create duplicates of specific webpack types and later those back into the specific types with some given helper state like the compilation and related module, etc. Uses of this api must handle not duplicating cyclical references, like a dependency to its owning module, and thawing the reference given the helper state.\r\n\r\n A data relation API that either has duplication/thaw handles registered by some predicate, or like dependencyFactories, or through tapable hooks.\r\n\r\n A (disk) cache organization API that either creates objects to handle writing to and reading from disk kind of like the FileSystem types. This API is for reading and writing the duplicate objects. Its API shape needs to support writing only changed objects. This might be done in a batch database like operation, letting the cache system send a list of changed items to write so the cache organization API doesn't need to redo work to discover what did and did not change. It will likely need to read all of the cached objects from disk during an iterative build. Core implementations of this API will likely need to be one, a debug implementation, and two, a space and time efficient implementation.\r\n\r\n JSON is at least the starting resting format written to disk. The organization API might be used to wrap the actual disk implementation. The wrapping implemetation will turn the JSON objects into strings or buffers and back for the wrapped implmentation. That can be JSON.stringify and parse or some other means to do this work quickly as this step is a lot of work. Beating JSON.parse performance is pretty tricky.\r\n\r\n Either in watchpack or another module, timestamps either need to be replaced with hashes for file and context dependencies or they can be added to the callback arguments. With a disk cache, timestamps will not be a useful comparison for considering if needs to be redone. The timestamps are not guaranteed to represent changes to file or directory content.\r\n\r\n Use file and context dependency hashes in needRebuild instead of timestamps.\r\n\r\n Hash a representative value of the environment, dependencies in node_modules and like. A different value from the last time a cache was used means no items in the cache can be used and they must be destroyed and replaced by freshly built items.\r\n\r\n Hash webpack's compiler configuration and use it as a cache id so multiple adjacent caches are stored. The right cache needs to selected early on at some point of plugins being applied to the compiler after defaults are set and configuration changes are made by tools like webpack-dev-server.\r\n\r\n These adjacent caches should be automatically cleaned up by default to keep the cache from running away in size by each one adding to a larger sum. This might happen automatically say if there are more than 5 caches including the one in use, cumulatively they use more than 500 MB. The oldest ones are deleted first until the cumulative size comes under the 500 MB threshold. Alternative to the cumulative size a if there are more than 5 caches and some are older than 2 weeks, caches older than 2 weeks are deleted.\r\n\r\n Replace the resolver's **unsafe cache** with a safe cache that validates a resolution by stating every resolved file and every originally attempted check. Doing this in bulk skips the logic flow the resolver normally executes. Very little time is spent doing this as it doesn't rely on js logic to build the paths. The paths are already built. The resolver's cached items may be stored with their respective module, consolidating all of the data for a cached module into one object for debugging and cleanup. If a module is no longer used in builds, removing it also removes the resolutions that would lead to it, and less information will need to be read from disk.\r\n\r\n### Questions\r\n\r\n- How are loaders that load an external configuration (babel-loader, postcss-loader) treated in regards to the cache configuration hash/id? Any method to do this needs to be done before a Compilation starts.\r\n\r\n- What enhanced-resolve cases exist that may not be recorded in the missing set?\r\n\r\n- How do loader and plugin authors work on their code and test it with the cache?\r\n\r\n- JSON is a good resting format. Should we look at others? Beating JSON.parse performance is pretty tricky. protobufjs implementations improve on it in many cases because they store the keys as integers in the output. The protobuf schema defines the key to integer relationship explicitly so its easy to go back and forth.\r\n\r\n- Are the version of node or operating system values that should be included in the environment (node_modules and other third party dependencies) comparison? Should they be part of the configuration hash?\r\n\r\n### Fundementals\r\n\r\n#### 0CJS\r\n\r\n- The disk cache should be on by default.\r\n- Each build with a different webpack configuration should store a unique copy of its cache versus another webpack configuration. E.g. A development build and a production build must have distinct caches due to them having different options set.\r\n- After N caches using M MBs total exist any caches older than W weeks past N caches and M MBs total should be deleted.\r\n- Some disk cache information should be in webpack stats. E.g. Root compilation cache id, disk space used by cache, disk space used by all caches, ...\r\n- Any change to node_modules dependencies or other third-party dependency directories must invalidate a saved cache.\r\n- The cache must be portable, reusable by CI, or between members of a project team as long as no node_modules or other third-party dependency directories change.\r\n- Use a efficient and flexible resting format and disk organization implementation.\r\n\r\n#### Speed\r\n\r\nIterative builds, builds with a saved cache, should complete significantly faster than an uncached build. An uncached build saving a cache will be a small margin slower than one not writing a cache, as writing the cache is an additional task webpack does not yet perform. A rebuild, a build in the same process that ran an uncached or iterative build, should be a hard to measure amount slower, saving only the changed cache state and not the whole cache.\r\n\r\n#### Build Size\r\n\r\nNo change.\r\n\r\n#### Security\r\n\r\nSimilar security as to how third party dependencies are fetched for a project.\r\n\r\n### Success Metric\r\n\r\n- webpack iterative builds, builds with a cache, should be significantly faster that uncached builds.\r\n- Rebuilds performance should be minimally impacted.\r\n- Iterative build output should match an uncached build given no changes to the sources.\r\n- Cache sharing: a cache should be usable in the next CI run in a different CI instance, or a common updated cache could be pulled from some arbitrary store by team members and used instead of needing to run an uncached build first. (Given that the configuration is not different than the stored caches and that node_modules contains the same dependencies and versions.)\r\n", "labels": ["D3: Hard (Contrib. Difficulty)", "webpack-5"], "number_of_comments": 15, "created_at": "2018-02-19 20:26:46", "reactions": {"total_count": 30, "+1": 21, "-1": 0, "laugh": 0, "heart": 5, "hooray": 4}}, "298297942": {"author_username": "sokra", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6525, "title": "Add `target: \"universal\"`", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\ntargets are pretty restrictive and a web bundle can't be used in node or webworker.\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nThe universal target includes runtime code that runs in web, webworker and node.js. The code can be a bit bigger to support all of them.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n* Create UMD bundles that work in all enviroments\r\n* Create bundles with chunks shared between web and webworker.\r\n", "labels": [], "number_of_comments": 35, "created_at": "2018-02-19 14:38:39", "reactions": {"total_count": 30, "+1": 30, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "298279034": {"author_username": "donaldpipowitch", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6522, "title": "Can't create UMD build which can be required by Node", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*bug*\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nIf you require a module in the target output UMD you get this error:\r\n\r\n```\r\nReferenceError: window is not defined\r\n    at Object.<anonymous> (/mnt/c/Users/foo/webpack-umd-node/dist/main.js:1:272)\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n* https://github.com/donaldpipowitch/webpack-umd-node\r\n* `$ git clone git@github.com:donaldpipowitch/webpack-umd-node.git && cd webpack-umd-node && yarn && yarn build && yarn test`\r\n\r\n**What is the expected behavior?**\r\n\r\nYou shouldn't see a `ReferenceError`.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n\r\nNode v8.9.4, webpack v4.0.0-beta.2\r\n\r\n---\r\n\r\nAccording to https://webpack.js.org/configuration/output/#module-definition-systems the UMD build should not include `window`.", "labels": [], "number_of_comments": 22, "created_at": "2018-02-19 13:41:46", "reactions": {"total_count": 30, "+1": 30, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "298083677": {"author_username": "wmertens", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6516, "title": "Changing entries from plugins", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA feature\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nThe first tap hook that runs is \"entry-option\", which converts the `entry` option into either a single, multi, or dynamic plugin. This plugin then is called by the hook `make` to create entries with `compilation.addEntry`. This means it's not possible to manipulate the entries in options\r\n\r\nThis is the list of hooks that gets called from the start:\r\n\r\n```\r\napply entry-option\r\napply after-resolvers\r\napply watch-run\r\napply context-module-factory\r\napply compile\r\napply this-compilation\r\napply compilation\r\napply make\r\napply build-module\r\n...\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be great if there was a hook somewhere that lets you manipulate `compilation.entries` before they are processed. Look at all the hoops https://github.com/singapore/webpack-entries-plugin/blob/master/lib/index.js has to jump through\u2026\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nIt is very hard to change entries before they are emitted. In my use case, I want to add some code at the bottom of an entry, but simply appending it to the entry fails because the entry is wrapped in the library export.\r\n\r\nRight now I push the module to the dependencies during the first `build-module` call. This works, but is far from ideal: It's hard to know which entry this is, and it causes the last module result to be returned. Ideally I'd be able to wrap the entry in a new one.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n\r\nWebpack v3 but looks like v4 works in the same way.", "labels": [], "number_of_comments": 10, "created_at": "2018-02-18 13:10:32", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "297519982": {"author_username": "spion-h4", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6498, "title": "bail = true should not kill watch mode on ModuleNotFound error", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen `bail = true`, a ModuleNotFound error during a change of the files will cause the entire watch process to either abort or get stuck. Subsequent rebuilds will not happen even if the file changes.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n* run webpack in watch mode\r\n* add `import './non-existant-module'` to any file\r\n* webpack rebuild fails or exits\r\n* remove the import\r\n* rebuild is not triggered either due to webpack exit (3.10 and below) or due to hang (3.11)\r\n\r\nnode version: 8.9.4\r\n\r\nWebpack 3.11 made one step towards fixing this with https://github.com/webpack/webpack/pull/5797\r\n\r\nHowever even though the process does not die, rebuilds stop happening.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n", "labels": [], "number_of_comments": 4, "created_at": "2018-02-15 16:55:22", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "297323640": {"author_username": "NeekSandhu", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6494, "title": "[Feature] Compiler macros to detect target in JS sources", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nUndefined\r\n\r\n**What is the expected behavior?**\r\n\r\nPresence of compiler macros as seen in `C` or `C++`, set dynamically, and look like `#ifdef _APPLE_` when building for macOS, `#ifdef _WIN32` when building for Windows.\r\n\r\nSimilarly, would be nice if `webpack` did something similar, for when targetting different targets, that way developers can have their JS wrapped in `if` blocks and those blocks would get removed during uglification process.\r\n\r\nExample:\r\n```javascript\r\n// my_cool_lib.js ( a library that works on node and browser, but with slight differences)\r\n\r\nconst env = typeof process !== 'undefined' && typeof process.env !== 'undefined' ? process.env : { }\r\n\r\nif (env && env.WEBPACK_EXPLICIT_TARGET === 'node') {\r\n    // ~400 lines of code, that can now be removed by uglify when target is `web`\r\n}\r\n\r\n```\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nWhen building `wasm` with Emscripten, it also emits Javascript glue code.\r\n\r\nAFAIK it has glue code for both node and browser environments. When using `wasm` in browser, the user is also sent extra nodejs glue code although not needed.\r\n", "labels": [], "number_of_comments": 2, "created_at": "2018-02-15 04:07:33", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "296561653": {"author_username": "surma", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6472, "title": "The case for Workers", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature! \ud83c\udf89 \r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n(This is gonna be a bit longer.)\r\n\r\nLet\u2019s imagine working on a project using [WebWorkers]. Let\u2019s say I am using this great new shiny library [Comlink]. It\u2019s needed by both `main.js` and `worker.js` as Comlink is an abstraction over `postMessage`. Of course both `main.js` and `worker.js` have other dependencies besides Comlink.\r\n\r\n![dependencies](https://user-images.githubusercontent.com/234957/36124715-048b2918-1049-11e8-8f4f-815b3a5e4148.png)\r\n\r\n(You might already be able to tell where I\u2019m going with this)\r\n\r\n**Attempt 1: Entry points**\r\n\r\nListing both `worker.js` and `main.js` as entry points doesn\u2019t yield the expected results as all static imports will be inlined. Comlink will be (down)loaded twice. The semantics of entry points are that only one entry point will be loaded at a time. In the context of my example, though, two entry points are loaded in parallel.\r\n\r\n![suboptimalchunk](https://user-images.githubusercontent.com/234957/36125110-a067fa04-104a-11e8-9f56-704ca86b76d8.png)\r\n\r\n**Attempt 2: Dynamic loading**\r\n\r\nI tried some hackery with `import()`, but the problem is that WebPack (rightly) assumes that there\u2019s is a global registry of loaded modules. `worker.js`, however, runs in a different realm and has a separate global scope to `main.js`\r\n\r\n**Workaround: Force a common chunk**\r\n\r\nMy current workaround is to use the entry point approach and manually maintain a list of shared modules that need to be put in a separate chunk using `CommonChunksPlugin`:\r\n\r\n```js\r\nmodule.exports = {\r\n  entry: {\r\n    main: './src/main.js',\r\n    worker: './src/worker.js',\r\n  },\r\n  output: {\r\n    filename: '[name].js',\r\n  },\r\n  plugins: [\r\n    // Force comlink into its own bundle\r\n    new webpack.optimize.CommonsChunkPlugin({\r\n      name: 'comlink',\r\n      minChunks: 2,\r\n    }),\r\n  ],\r\n};\r\n```\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\nUnder the assumption that there\u2019s good caching headers, the optimal behavior is to put Comlink in it\u2019s own chunk (or a chunk for shared modules) so it\u2019s only downloaded once. The second request by the worker will hit the HTTP cache and re-use the already downloaded shared chunk.\r\n\r\n![optimalchunk](https://user-images.githubusercontent.com/234957/36125059-67bd99d4-104a-11e8-8e92-a2005b23a26a.png)\r\n\r\n**API**\r\n\r\nI\u2019m not sure what the API for this would look like. This API would not only be useful for workers, but also for pages that load another entry point in an iframe (although, tbh, I struggle to find a good example for this \ud83e\udd37\u200d\u2642\ufe0f )\r\n\r\n I think the most straight-forward way would to add a `realmEndpoints` (name pending lol) to the webpack config which lists entry points that can be loaded in parallel to _one_ of the main entry points.\r\n\r\nWhat do y\u2019all think? API suggestions/corrections? Am I just holding it wrong?\r\n\r\n\r\n\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\n[WebWorkers]: https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\r\n[Comlink]: https://github.com/GoogleChromeLabs/comlink\r\n", "labels": ["D2: Medium (Contrib. Difficulty)", "Send a PR", "X5: work required (PR / Help Wanted)"], "number_of_comments": 17, "created_at": "2018-02-12 23:28:17", "reactions": {"total_count": 30, "+1": 28, "-1": 0, "laugh": 0, "heart": 0, "hooray": 2}}, "293975469": {"author_username": "axetroy", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6437, "title": "[Feature Request] Use virtual file as entry point", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nYou must specify the entry point file path and output dir.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nnot a bugs.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\nWe can specify the code string as an entry point.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nI some case. I build a builder cli base on webpack. I need to pack my code.\r\n\r\nIn current behavior, I gonna create a temp file and use it as entry file, so webpack can work it well.\r\n\r\n```javascript\r\nwebpack({\r\n  entry: \"/path/to/temp/file.js\" // before pack the code, I need to create this temp file first\r\n});\r\n```\r\n\r\nWhat if I can use code string as an entry point?\r\n\r\nsuch as this:\r\n\r\n```javascript\r\nwebpack({\r\n  entry: {\r\n    code: \"const xx = require('xxx'); // do something else\",\r\n    filepath: \"/home/xxx/xxx.js\"\r\n  }\r\n});\r\n```\r\n\r\nOr maybe we can make it better\r\n\r\n```javascript\r\nconst virtualEntryFile = new webpack.VirtualFile(\r\n  \"filepath.js\",\r\n  \"// here is the js code string\"\r\n);\r\n\r\nconst virtualImages = new webpack.VirtualFile(\r\n  \"example.png\",\r\n  new Buffer()\r\n);\r\n\r\nwebpack({\r\n  entry: virtualEntryFile\r\n});\r\n```\r\n\r\nIn here, you can see that, I don't need to create an intermediary file anymore\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**", "labels": [], "number_of_comments": 13, "created_at": "2018-02-02 18:07:34", "reactions": {"total_count": 29, "+1": 29, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "292172844": {"author_username": "ruszki", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6400, "title": "Source maps with newer Chrome DevTools' workspaces", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature, but also a bug in a sense.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nSource map plugins inject three new lines and a footer template into every source map objects. This behavior not works well with Chrome DevTools' new workspaces 2.0 API.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nUse any kind of source map, and try to modify files through DevTools.\r\n\r\nDevTools expects that the original source code is the same as the code in source map. With current behavior this isn't the case.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nRemove the modifications of code in source maps, or, at least, have an option to alter this behavior.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nTo be able to use DevTools' Workspaces to modify source codes from Chrome itself.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nWebpack version: 3.10.0\r\n\r\nAn example for the problematic code in Webpack: [SourceMapDevToolPlugin.js#L188](https://github.com/webpack/webpack/blob/c963e3db54adef8e1e3aea4383e09fa472131106/lib/SourceMapDevToolPlugin.js#L188)\r\n\r\nModuleFilenameHelpers::createFooter function can be rewritten, but the three new line characters are injected regardless.", "labels": [], "number_of_comments": 17, "created_at": "2018-01-28 03:08:58", "reactions": {"total_count": 14, "+1": 14, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "292105304": {"author_username": "TheLarkInn", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6395, "title": "Add Experimental Preset Support", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n\r\n**What kind of change does this PR introduce?**\r\nFeature (WIP)\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nNo this is experimental right now. Kind of WIP to also discuss implementation details. \r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**If relevant, link to documentation update:**\r\n\r\n<!-- Link PR from webpack/webpack.js.org here, or N/A -->\r\n\r\n**Summary**\r\nThe following PR adds a Work in Progress, Proof of Concepts of a highly primitive preset system. \r\n\r\nA webpack preset is detected by searching a users \"package.json\" devDependencies for all package names starting with `webpack-preset-`. From there we will require those dependencies and they will yield their configuration objects which are `webpack-merge`'d together. \r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nWhether or not we think #0CJS is a big deal, extending it is what it really means to empathize with a large subset of our users we have yet to tap into. Also, I would like this PR to be a place to help start the design discussion that is testable. \r\n\r\nA preset is just a module that exports a configuration. <==== **likely where we want to design more**\r\n\r\n**Does this PR introduce a breaking change?**\r\nNope.\r\n\r\n**Other information**\r\n\r\n", "labels": ["PR: conflict", "PR: unreviewed"], "number_of_comments": 15, "created_at": "2018-01-27 08:49:56", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "291757876": {"author_username": "TheLarkInn", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6386, "title": "[spec: webpack 5] - `target.webpackGraph` - Persistent graph target", "body": "## Current Problems & Scenarios\r\n**To have the most performant web app, users have to leverage Rollup to package libs and webpack consume those libs:** webpack when it bundles, contains module wrappers and runtimes for running in the browser or another support target (IE: node, electron etc.). People can choose to create a UMD, or CommonJS output, however when this format is consumed by webpack (for another application), this adds un-removable overhead in build sizes. Therefore we have recommended in the past that developers who are using webpack, but also creating component libraries that webpack consumes, that they **leverage tooling like RollupJS** so that the bundling is as efficient as possible. This not only causes unnecessary work, but more mental cost & time on our users to leverage separate tooling.\r\n\r\n**Build overhead not just size:** On top of that, any time webpack consumes a webpack bundle, it will have to parse and evaluate all code paths that are bundled. If you build a library once, and you are not actively developing it in your application, **_webpack shouldn't have to build it at all except once_**\r\n\r\n**Building component libraries and monorepo's**\" When your project/application scales, both problem one and two will become more prevalent, as you are building the app and adding needs O(x*buildTime) the time complexity of build out the library itself. \r\n\r\n**Processing non-js assets:** To complicate things, if you tried to build a `.vue` or `.css in js` component, you would have to set library-specific loaders and plugins or ship the raw source so that your app build could consume.\r\n\r\n## Proposed Solution\r\n**New reusable caching primitives:** We can solve a majority of these problems above via implementation of a new persistent caching primitive. By short circuiting the `Compilation#seal()` phase, and forcing webpack to output the dependency graph (JSON? Protobuf? Flatbuf?) to disk, we could (in theory) cut half of the build time complexity from webpack. \r\n\r\nFrom there, webpack will collect this webpackGraph (similar to `records.json`) and hydrate this information into the full object modeled Dependency Graph which is stored in memory during build today. This would happen near the same time that `records.json` would be processed, however we would need to have the capability to merge the graphs together, before the `Compilation#seal()` phase (where everything is optimized and put into chunks and chunkGroups, etc). \r\n\r\n[Unsure about this] In addition, loaders that are applied to said component library (could?) be referenced and leveraged from original components `node_modules` so that there is determinism between the loaders used in an application bundle and ones being used to create the library.\r\n\r\n## User Stories (That speak in solving spirit of these problem areas)\r\n| Priority         |     Story       |\r\n| - |:-------------:|\r\n| 1 | As a library author, I can publish a \"webpackGraph\" file alongside another `target` that webpack can consume. This graph contains serialized information about modules, dependencies, and their graph relation to eachother (in addition to loaders applied, module and dependency types, and EntryPoint cacheGroups) |\r\n| 1 | As a web application users, I can consume a libraries \"webpackGraph\" file w/o any configuration (automatically resolved). In addition, when I modify parts of my application, webpack **will not traverse, resolve, or parse (?) the original library sources**. | \r\n\r\n## Non-Goals\r\n* We will not focus (in this RFC) creating an \"ESM\" library target output. This is something we need, but outside of the scope of this spec. \r\n* We will not support legacy module types, shimmed modules, or any Variable Injection due to ProvidePlugin. We primarily want to focus on webpack's first class module types and [key loaders](https://github.com/webpack-contrib). \r\n\r\n## Requirements\r\n\r\n- [ ] Creation of Graph Hydration and DeHydration API's - This enables us to take the circular referencing complex object graph, and store it into a file state (json, protobuf, flatbuf, snapshot?). If serialization is expensive we should explore C, C++, Rust, WASM Compilable friendly alternatives with JS fallback.\r\n\r\n- [ ] Compilation will build graph and serialize it if specific options.target, [or whatever named] property is set. Whether or not the graph is serialized piece by piece or all at once should be chose based on  a combination of performance and maintainability. After `Compilation#finishModules` webpack should exit/return as if the build was complete [aka no chunk processing etc].\r\n\r\n- [ ] Compilation will collect and load graph in memory at the same `records` is detected this is also loaded into a in memory module build cache once hydrated. As webpack traces the _application graph_, it will first check to see if instances of modules already exist with same identifiers and omit the cost of tracing them. \r\n\r\n- [ ] A lib/component that is using the webpackGraph target, should fail if they are using AMD, CJS, ProvidePlugin(), or anything that will cause fully dynamic nature or extra complexities or dimensions to walking the graph.\r\n\r\n- [ ] A webpackGraph lib that is consumed should be on average the same build time as if it was a DLL module.\r\n\r\n## Questions\r\n* How would same-loaders with different options from lib to app differentiate their functionality? I believe they will reference the same location with different options so is this an issue?\r\n\r\n* When should the webpackGraph hydrate? (My feeling is when a module that resolves, if it has a graphCache in the same root path as the module being resolved, that webpack would favor the cache and start tracing and hydrating that part of the graph). \r\n\r\n## Fundementals\r\n\r\n### 0CJS\r\nIs there a zero config story here? What is the cost of discovering webpackGraph's imperatively while modules resolve? What's the perf win from declaring them up front. What does this mean for users. \r\n\r\n### Speed\r\nThis ideally improves speed fundamentals.\r\n\r\n### Build Size\r\nDoes this compromise build sizes at all? \r\n\r\n### Security\r\nDoes this open areas of concern for vulnerabilities?\r\n\r\n## Success Metric\r\n- [ ] webpack build times should significantly decrease for those consuming component libraries\r\n- [ ] webpack build times should significantly decrease for those creating webpackGraph library targets\r\n- [ ] Reduction in memory footprint(?).\r\n", "labels": ["D3: Hard (Contrib. Difficulty)", "P2: Very Important", "X3: discussion required", "enhancement", "performance", "webpack-5"], "number_of_comments": 15, "created_at": "2018-01-25 23:58:45", "reactions": {"total_count": 30, "+1": 20, "-1": 0, "laugh": 0, "heart": 10, "hooray": 0}}, "291036080": {"author_username": "stefanpenner", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6372, "title": "[Feature Request] allow a node_module to specify its externals", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nRequesting a Feature.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nA node_module cannot specify it's own `externals`. This forces the consumers of said node_module to set configurations, breaking encapsulation and resulting in [a very poor usage experience, and a poor node_module maintainer experience](https://github.com/stefanpenner/es6-promise/issues?utf8=%E2%9C%93&q=is%3Aissue+vertx).\r\n\r\n**What is the expected behavior?**\r\n\r\nSome what for the node_module to specify its externals.\r\n\r\nAs an example browserify accomplishes this [via the browser field in package.json](https://github.com/stefanpenner/es6-promise/blob/314e4831d5a0a85edcb084444ce089c16afdcbe2/package.json#L60-L62)\r\n\r\n*note: It may be worth considering not only allowing for webpack specific externals config, but also supporting browserify's as it will allow existing modules to \"Just Work\".*\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n* `es6-promise` [has a fallback dependency on the `vertx` module](https://github.com/stefanpenner/es6-promise/blob/b33f47341a18a22a02ee1f143a0fa4f22b1d91e1/lib/es6-promise/asap.js#L99-L100)\r\n* the `vertx` module [is platform provided](http://vertx.io)\r\n\r\nThis forces either:\r\n\r\n* users to configure es6-promise's externals, breaking encapsulation, or \r\n* author of es6-promise to [rely on defeating Webpack's static analyizer](https://github.com/stefanpenner/es6-promise/blob/314e4831d5a0a85edcb084444ce089c16afdcbe2/lib/es6-promise/asap.js#L99)\r\n\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nThis is currently an issue for all version of webpack. As of writing this issue, the current version of webpack is `3.10.0`\r\n", "labels": [], "number_of_comments": 1, "created_at": "2018-01-23 23:53:19", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "290636317": {"author_username": "ooflorent", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6362, "title": "Add a plugin to warn if the source type is ambiguous", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nfeature\r\n\r\n**Did you add tests for your changes?**\r\n\r\nyes\r\n\r\n**If relevant, link to documentation update:**\r\n\r\nn/a\r\n\r\n**Summary**\r\n\r\nIn order to stay future-proof, webpack must migrate away of `javascript/auto` type. This PR adds a new plugin that emit a warning if the source type is ambiguous: it uses Harmony modules and CommonJS or AMD global bindings.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno", "labels": ["PR: CI-ok", "PR: review-outdated"], "number_of_comments": 2, "created_at": "2018-01-22 22:17:06", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "290557773": {"author_username": "bios21", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6360, "title": "await import('@priv' + var); a.k.a Dynamic Third-party Namespaced Module Loading", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI request a godlike ***feature***\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**  \r\n[Here](https://stackoverflow.com/questions/47925569/dynamic-third-party-namespaced-module-loading-with-yarn-typescript-and-webpack) the question on StackOverflow. Sadly, no one can give me any response since one month.  \r\n \r\nUntil now, I had no issue because loading something all 3rd party modules (or bundle) were explicitly defined in my `package.json` and explicitly loaded in my code with full string value.\r\n\r\nLike this :\r\n```typescript\r\n    import Bundle from '@company/bundle';\r\n    // ...\r\n```\r\n\r\nBut now, my goal is to install and load those modules dynamically.\r\nI've already do the 'install' part, but I need to achieve this:\r\n```typescript\r\n    (async () => {\r\n        const something = ['/bundle']; // here for example but getted from a config file\r\n        for (const bundleName of something) {\r\n            const Bundle = await import(`@company${bundleName}`)\r\n            Bundle.doStuff();\r\n        }\r\n    })();\r\n```  \r\nThe current behavior is that webpack replace the import part with a `webpackMissingModule` function that throw an error `Cannot find module \".\"`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nFor example with Angular (`npm i @angular/core`), which has a namespace like my modules ; build and run this with a basic typescript/webpack configuration :  \r\n```typescript\r\n    (async () => {\r\n        const something = ['/core'];\r\n        for (const bundleName of something) {\r\n            const angular = await import(`@angular${bundleName}`)\r\n            console.log(angular.Component);\r\n        }\r\n    })();\r\n```   \r\nIf you want a repo or a gist, tell me <3\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**  \r\nI expect that my module is pre built and loaded when I ask for it even if it's a 3rd party one.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**  \r\nBring the dynamic import to everything and not only local sources.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**  \r\n- Webpack 3.8.1\r\n- Node 9.2.1\r\n- Yarn 1.3.2\r\n- Typecript next\r\n- awesome-typescript-loader latest\r\n- OSX 10.12.6\r\n- Chrome 63.0.3239.132 64 bits\r\n", "labels": [], "number_of_comments": 8, "created_at": "2018-01-22 17:55:08", "reactions": {"total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "288415854": {"author_username": "buster95", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6315, "title": "Object.defineProperty should be at the end of the module, not at the beginning", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nI can't export a variable, when I import the variable, variable is undefined\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n```js\r\n// main.js\r\nvar app = \"hola mundo\"\r\nexport default app;\r\n```\r\n\r\n```js\r\n// other.js\r\nimport app from 'main';\r\nconsole.log(app); //undefined\r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nImport variable not work\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nIf you exports a variable the import not work variable is undefine, I change Obejct.defineProperty at the end of the module and work perfectly \r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nWebpack 3.10.0\r\nNodejs 8.4.0\r\nNpm 5.5.1\r\nWindows 10 build 1709", "labels": [], "number_of_comments": 4, "created_at": "2018-01-14 15:18:05", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "287780281": {"author_username": "truebden", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6294, "title": "ModuleConcatenationPlugin option to disable name scoping", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nCurrently ModuleConcatenationPlugin keeps the scope for exports by adding an identifier in front of the variables (the name of the file).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nAdd an option to disable this behavior, so that the name of the exports remain the same.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nIn our project the names of the classes are generated and it is not possible that name clashes exist. But we rely on the names of the classes at some points (e.g. de/serialization with type hints) and need the names not to be changed.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nI already created a fork with the changes I would suggest. Please see https://github.com/webpack/webpack/compare/master...unblu:feature/module-concatenation-disable-name-scoping\r\n", "labels": [], "number_of_comments": 8, "created_at": "2018-01-11 13:08:42", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "286950360": {"author_username": "guitarpoet", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6268, "title": "Add the hook add-module-dependencies to track the dependencies when building", "body": "# Summary\r\n\r\nThis PR only brings in a small hook into the Compilation, called \"add-module-dependencies\" when trying to build the module(and its dependencies)\r\n\r\n# Purpose\r\n\r\nI'm creating a small loader that will integrate the building process of sass into webpack.\r\n\r\nWhat it means is that the dependency tracking for sass files can across the sass files and the js.\r\n\r\nFor example:\r\n\r\na.js references a.scss and b.js, b.js references b.scss, and b.scss references c.scss, the dependency map should be like this:\r\n\r\na.js -> a.scss\r\na.js -> b.js -> b.scss -> c.scss\r\n\r\nSo, when building scss for a.js, I should build the scss files using this order.\r\n\r\n- c.scss\r\n- b.scss\r\n- a.scss\r\n\r\nAnd give the output to the css loader of a.js\r\n\r\nI can track the scss dependencies by using the comment syntax(since @import function is not functional for dependency management for now), and I'll use webpack to track down the dependencies through js using webpack.\r\n\r\nThe problem is, for now, that webpack is aimed to compile the scss as module, and once compiled, it won't get compile again, only get it out of the cache.\r\n\r\nThis means when there are multiple entries in the webpack configuration, I can't get all of them tracked, example like this:\r\n\r\na.js -> a.scss\r\na.js -> b.scss -> c.scss\r\nb.js -> b.scss -> c.scss\r\n\r\nWhen trying to compile, though c.scss is required by both of two js files, webpack will only compile it once. So, I can't apply it to the other js entry.\r\n\r\nSo, I need this hook to track down all modules and module dependencies when building, so that I can know exactly the dependency mapping when trying to build the scss for all entries.\r\n\r\n# Other Purpose\r\n\r\nI can use this function to track down the whole dependency map for each entry too, and generate the dependency tree easily using the output.\r\n\r\nSo, if there is another better way to do this, you can tell me, then this pull request is not needed, at least for now, I think this hook is very useful for me now, and the future functions.", "labels": ["PR: CI-ok", "PR: small", "PR: unreviewed"], "number_of_comments": 4, "created_at": "2018-01-09 02:23:40", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "286809691": {"author_username": "Birowsky", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6264, "title": "Unexpected code after tree-shake", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nEither a bug or unclear docs.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nGiven `entry` is the entry module:\r\n<img width=\"750\" alt=\"screen shot 2018-01-08 at 17 19 34\" src=\"https://user-images.githubusercontent.com/3199950/34681428-28df7576-f49c-11e7-942d-12caa6e905b8.png\">\r\n\r\nIt just uses `function1` from `external1` module.\r\n\r\nI expected that `external1.function2` and the whole `external2` module would be eliminated. \r\n\r\nHowever, my output includes `external2.function1`. Just.. why?\r\n\r\n[Here's a repo](https://github.com/Birowsky/testing-typescript-treeshaking) of the whole thing.\r\n\r\n", "labels": ["P2: Very Important", "enhancement", "webpack-4"], "number_of_comments": 22, "created_at": "2018-01-08 16:50:15", "reactions": {"total_count": 8, "+1": 8, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "286791818": {"author_username": "gaearon", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6262, "title": "Watcher doesn't see a new file until restart", "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug.\r\n\r\n**What is the current behavior?**\r\n\r\nConsider this project:\r\n\r\n`package.json`\r\n\r\n```json\r\n{\r\n  \"scripts\": {\r\n    \"start\": \"webpack --watch src/index.js dist/bundle.js\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"webpack\": \"^3.10.0\"\r\n  }\r\n}\r\n```\r\n\r\n`src/index.js`\r\n\r\n```js\r\nimport x from './x';\r\nalert(x);\r\n```\r\n\r\n`src/x.js`\r\n\r\n```js\r\nexport default 42;\r\n```\r\n\r\nThen do this series of steps:\r\n\r\n1. Run `npm install`.\r\n1. Run `npm start`.\r\n1. Delete `src/x.js`.\r\n1. Create `src/x` folder.\r\n1. Create `src/x/index.js` with same content as `src/x.js` used to have.\r\n\r\n**What is the expected behavior?**\r\n\r\nWebpack recovers from a \"not found\" error. At the very least after re-saving either `src/index.js` or `src/x/index.js`.\r\n\r\nActual behavior is that Webpack gets stuck insisting `./x` is not found, and the only way to fix it is by restarting the watcher.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nOS X Sierra, Node 8.9.1 (but it's an old issue, existed at least since 2016 https://github.com/facebookincubator/create-react-app/issues/1164).\r\n\r\nI couldn't figure out how to correctly set up Webpack beta so I didn't test that.", "labels": [], "number_of_comments": 12, "created_at": "2018-01-08 15:55:32", "reactions": {"total_count": 25, "+1": 23, "-1": 0, "laugh": 0, "heart": 0, "hooray": 2}}, "285258435": {"author_username": "sarkiroka", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6216, "title": "devtool: \"source-map\" how to pass publicPath option?", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI don't know\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nI try to use both of devtool: \"source-map\" option and this plugin: https://webpack.js.org/plugins/source-map-dev-tool-plugin/\r\nBut I cannot found a way to pass publicPath to sourceMap plugin when it defined in devtool.\r\nWhen I use only the plugin:\r\n```\r\n\tplugins: [\r\n\t\tnew webpack.SourceMapDevToolPlugin({\r\n\t\t\tfilename: '[file].map',\r\n\t\t\tpublicPath: 'https://example.com/project/'\r\n\t\t}),\r\n...\r\n```\r\nthen it generated as well in javascript file, but the sourcemap file is empty:\r\n`{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"project.js\",\"sourceRoot\":\"\"}`\r\n\r\nWhen I use only the devtools option, the sourcemap generated well, but I cannot set publicPath.\r\nI want to set sourcemap to external server.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nfor example in output options I can specify the sourcemap publicPath option\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nnode: 8.9.0\r\nwebpack 3.10.0\r\nos: linux", "labels": [], "number_of_comments": 2, "created_at": "2017-12-31 13:49:09", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "282238227": {"author_username": "fgarcia", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6133, "title": "SourceMapDevToolPlugin breaks devtool sourcemap", "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBUG\r\n\r\n**What is the current behavior?**\r\n\r\nUsing SourceMapDevToolPlugin disables my source maps\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nI want to generate private sourcemaps. I already generate a sourcemap file with `devtool: 'source-map'`, so I just need the link at the end of my js file. For that I use the plugin:\r\n\r\n        new wp.SourceMapDevToolPlugin({\r\n          filename: '[file].map',\r\n          append: '\\n//# sourceMappingURL=https://localhost:8082/[url]',\r\n        }),\r\n\r\n**What is the expected behavior?**\r\n\r\nOnly the `.js` file should be modified, however when using the plugin my `.js.map` gets broken and is replaced by this:\r\n\r\n       {\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"app.bundle.js\",\"sourceRoot\":\"\"}\r\n\r\nRemoving the plugin declaration produces a good sourcemap", "labels": ["X0: need more information", "webpack-3"], "number_of_comments": 2, "created_at": "2017-12-14 21:04:15", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "281773312": {"author_username": "Wildhoney", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6121, "title": "Respect semver when using resolve.modules", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n```javascript\r\nresolve: {\r\n    modules: [\r\n        path.resolve('node_modules'),\r\n        path.resolve('../shared/node_modules')\r\n    ]\r\n}\r\n```\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nUnsure, as I don't know whether it's intentional or not.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nI setup `resolve.modules` as seen above. When the resolve happens, it only takes into consideration a match based on the package name, but doesn't take into consideration the version of the package.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nSetup the `resolve.modules` as above with two versions of the same module installed in each of the `node_modules` directories and build.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nI'd expect that if `node_modules` had `pkg@1.0.0` installed, but `../shared/node_modules` only supported `pkg@<1.0.0` then it would choose the `pkg` from `../shared/node_modules` rather than `node_modules`, yielding two versions of `pkg` in the final build. If both are able to support a common version of `pkg` then only the one version would be used.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nIf it's not changed, then shared files are **always** built against the `node_modules` listed first in `resolve.modules`, potentially leaving a broken build at runtime.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\n---\r\n\r\nI realise there could be a better way to achieve the desired outcome. Using `peerDependencies` doesn't seem to be an option, because the Webpack build still needs to resolve the dependencies.\r\n", "labels": ["X0: need more information", "enhancement"], "number_of_comments": 1, "created_at": "2017-12-13 14:42:48", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "280373463": {"author_username": "aaronbeall", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6094, "title": "Runtime TypeError: Cannot read property 'call' of undefined at __webpack_require__", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I try to run my project with `webpack-dev-server` I get runtime error `Cannot read property 'call' of undefined` at `__webpack_require__`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nUsing this output configuration (which was working previously):\r\n```js\r\n  output: {\r\n    path: path.join(__dirname, 'dist'),\r\n    filename: '[name].[chunkhash].js',\r\n    publicPath: '/',\r\n    sourceMapFilename: '[file].map',\r\n    chunkFilename: '[id].chunk.js'\r\n  }\r\n```\r\nWhen I run `webpack-dev-server` using this command: \r\n```\r\ncross-env NODE_ENV=development webpack-dev-server --progress -d --inline --host 0.0.0.0\r\n```\r\n\r\nI get a bunch of runtime errors that look like this:\r\n```\r\nvendor.356edb7e8753d46064d8.js:55 Uncaught (in promise) TypeError: Cannot read property 'call' of undefined\r\n    at __webpack_require__ (vendor.356edb7e8753d46064d8.js:55)\r\n    at <anonymous>\r\n```\r\nIf I remove the `chunkFilename`:\r\n```js\r\n  output: {\r\n    path: path.join(__dirname, 'dist'),\r\n    filename: '[name].[chunkhash].js',\r\n    publicPath: '/',\r\n    sourceMapFilename: '[file].map',\r\n    // chunkFilename: '[id].chunk.js'\r\n  }\r\n```\r\n\r\nThen it runs fine.\r\n\r\nThe entire config is here: https://gist.github.com/aaronbeall/b286eb3f2ff93bed37289f0fefbb3d3c\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\nNo error.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\n- webpack@3.10.0\r\n- webpack-dev-server@2.9.7 \r\n- node v8.6.0\r\n- OSX 10.11.6\r\n", "labels": [], "number_of_comments": 37, "created_at": "2017-12-08 05:12:26", "reactions": {"total_count": 14, "+1": 14, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "279297541": {"author_username": "leesaxby", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6069, "title": "HMR fails to update if accept module name has file extension and main import doesn't", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug...possibly\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nIf you add an extension to either the main app module name `import App from './App'` or `accept` module name ` module.hot.accept('./App.js', () => { render(App); });` HMR fails to update.\r\n\r\n```\r\nimport App from './App';\r\n\r\nconst render = Component => {\r\n    ReactDOM.render(\r\n        <AppContainer>\r\n            <Component />\r\n        </AppContainer>,\r\n        document.getElementById('root')\r\n    );\r\n};\r\n\r\n...\r\n\r\nif (module.hot) {\r\n    module.hot.accept('./App.js', () => { render(App); });\r\n}\r\n\r\n```\r\n\r\nFurther detail here: https://github.com/leesaxby/webpack-hmr-issue.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nReproduceable repo here: https://github.com/leesaxby/webpack-hmr-issue\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nNot sure if this would be considered a bug, but can be a bit of a gotcha if you accidentally add a file extension to one of the module names as the HMR console output is the same with or without the extension.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nChrome\r\nNode v9\r\nUbuntu\r\nWebpack 3.10.0\r\nwebpack-dev-server  2.9.5", "labels": [], "number_of_comments": 2, "created_at": "2017-12-05 09:09:39", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "276350484": {"author_username": "dispmaxstaff", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 6010, "title": "Use multiple mainFields in resolver", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI want to request a feature.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nCurrent behavior is to use one of the mainFields and the first matched field will be used, ignoring all others.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nUse multiple mainFields, i.e. if mainFields is `[[\"module\", \"main\", \"style\", \"styles\"]]`, if one of main fields in mainFields[0] matches, then inject assets in all mainFields[0] found from vendor's package.json.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nBecause this will allow to import .css assets with just `require(\"package\")`, if mainFields is `[[\"module\", \"main\", \"style\", \"styles\"]]`.\r\nCurrently module authors include \"style\" field in their package.json and this will be quite useful to import css assets author intended for the module with one line instead explicitly requiring each individual css file which is the case now to my understanding.\r\ni.e. if I do require(\"bootstrap\") in vendor.js, then all .js assets and .css assets would be imported.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nUsing webpack 3.8.1, nodejs v6.11.2 , windows 8.1\r\n", "labels": [], "number_of_comments": 0, "created_at": "2017-11-23 12:00:35", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "276155783": {"author_username": "ljcrapo", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5998, "title": "Allow dll to work as a node_module and share its dependencies", "body": "<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nfeature\r\n\r\n**Did you add tests for your changes?**\r\n\r\nyes\r\n\r\n**If relevant, link to documentation update:**\r\n\r\nN/A\r\n\r\n**Summary (from @walfly)**\r\n\r\nThis pull request adds two new options to the DllPlugin that allow it to work as a node_module without using the scope property.\r\n\r\n## Our Use Case\r\n\r\nWe've been breaking apart a monolith into smaller deployables. To do this we've moved the bits of interface that are on every page into an npm package. This package pushes the outputted webpack bundle onto our cdn and publishes the manifest to npm. This allows us to use the modules in this package like a regular npm package but also gain the performance advantages of having it already cached for all our apps.\r\n\r\n## The Problem\r\n\r\nThe DllPlugin expects to share the same directory context as the consuming build. You can change this by adding a scope, but if you add a scope then the node_modules won't be shared between the consuming build and the dll build. This adds a lot of redundant code to our pages and has also resulted in some difficult to resolve bugs.\r\n\r\n## Our Solution\r\n\r\nIf you have an npm package called my-dll and it requires relay and has some exported method at the path ./src/doSomethingImportant.js. Then in the consuming app require('relay') and require('my-dll/src/doSomethingImportant.js') should both point to the code in my-dll. To accomplish this I added a root and packageName property to the DllPlugin that allow the DllReferencePlugin to catch when a module path should be transformed into a root relative path in my-dll.\r\n```javascript\r\n// in the dll module\r\n        new webpack.DllPlugin({\r\n            root: \".\",\r\n            packageName: require('./package.json').name,\r\n            path: \"manifest.json\",\r\n            name: \"my_dll\"\r\n        })\r\n// in the consuming app\r\n        new webpack.DllReferencePlugin({\r\n            manifest: require('my-dll/manifest'),\r\n            sourceType: 'var'\r\n        }),\r\n```\r\nThanks!\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nIt shouldn't. It's only adding, not removing, features.\r\n\r\n**Other information**\r\n\r\nI modified the functionality slightly. If `packageName` is present, either in the options or in the manifest, when using `DllReferencePlugin` then it uses a hybrid of scope and mapped mode:\r\n\r\nScoped: For dependencies that are part of the node module code base. the scope is the `packageName` itself.\r\n\r\nMapped: For all other node_module dependencies included in the dll, unless you specify scope in the `DllReferencePlugin` config options of course.\r\n\r\nthis allows me to use this feature when writing a library in typescript, but the original typescript files are not present in the published version of the node_module.", "labels": ["PR: conflict", "PR: unreviewed", "X3: discussion required"], "number_of_comments": 7, "created_at": "2017-11-22 17:48:30", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "272098697": {"author_username": "HQidea", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5934, "title": "DllReferencePlugin fails when using webpack-dev-server", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nreport a *bug*\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using DllReferencePlugin with webpack-dev-server or webpack-dev-middleware, it will occurs an error: \r\n```\r\nError: ENOENT: no such file or directory, open '/path/to/js/manifest.json'\r\n    at Error (native)\r\n```\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n```\r\nconst webpack = require('webpack');\r\nconst WebpackDevServer = require('webpack-dev-server');\r\nconst config = require('./webpack.config');\r\nconst compiler = webpack(config);\r\nconst server = new WebpackDevServer(compiler, {});\r\n\r\nserver.listen(8080, '127.0.0.1', () => {\r\n  console.log('Starting server on http://localhost:' + 8080);\r\n});\r\n```\r\n\r\nand the `webpack.config` is just from this project's example directory, https://github.com/webpack/webpack/blob/master/examples/explicit-vendor-chunk/webpack.config.js\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\nrun correctly like the code below:\r\n```\r\nconst webpack = require('webpack');\r\nconst config = require('./webpack.config');\r\n\r\nwebpack(config, (err, stats) => {\r\n  process.stdout.write(stats.toString() + \"\\n\");\r\n});  // this runs ok\r\n```\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nnode version: 6.9.0\r\nwebpack version: 3.8.1\r\n", "labels": ["Send a PR"], "number_of_comments": 5, "created_at": "2017-11-08 07:27:44", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "271666930": {"author_username": "natew", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5931, "title": "When there's a broken sourcemap, error doesn't tell you which file it broke on", "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nUX feature/bug\r\n\r\n**What is the current behavior?**\r\n\r\nI'm running webpack on a big project and getting this suddenty:\r\n\r\n```\r\noriginal.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\r\n```\r\n\r\nBut the error doesn't tell me which file/map is causing this issue. Also hard to debug as I've went and put logs in variety of places along the stack trace, but none seem to clue me into *which* file this is breaking on. I've been binary searching to narrow it down to certain node_modules but after an hour no luck, so opening an issue.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nHave a bad sourcemap of some sort, and then run webpack.\r\n\r\n**What is the expected behavior?**\r\n\r\nOutputting the file it broke on would be immensely helpful!\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nDev UX\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nWebpack 3.4, Mac, Node 8", "labels": ["Send a PR", "X5: work required (PR / Help Wanted)"], "number_of_comments": 31, "created_at": "2017-11-07 00:15:58", "reactions": {"total_count": 29, "+1": 29, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "270863359": {"author_username": "kokhooi", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5915, "title": "Symbolic link junction on different drive", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nwebpack build stuck at 95% emitting\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n1) Make a symlink junction from D drive to C drive, e.g. mklink /J \"C:\\Test\" \"D:\\Test\"\r\n2) Build webpack in C drive\r\n3) Will stuck at 95% emitting (tested with webpack 3.8.1, same result)\r\n4) If build in the exact D drive itself, everything is working fine\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n[webpack.prod.config.txt](https://github.com/webpack/webpack/files/1439932/webpack.prod.config.txt)\r\n[webpack.dev.config.txt](https://github.com/webpack/webpack/files/1439933/webpack.dev.config.txt)\r\n\r\n**What is the expected behavior?**\r\nShould be able to build successfully\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nNode.js - 6.11.0\r\nwebpack - 2.2.1\r\nOS - Windows 7\r\n", "labels": ["P4: Nice To Have", "bug"], "number_of_comments": 0, "created_at": "2017-11-03 02:28:02", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "270518139": {"author_username": "jasonxia23", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5910, "title": "Webpack did not change resolve path after extension changed", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nI have two files, index.js and constant.js.\r\nIn index.js\r\n```\r\nimport { something } from './constant'\r\n```\r\nWhen I change my filename from constant.js to constant.jsx, error throw out like this:\r\n\r\n>Module build failed: Error: ENOENT: no such file or directory, open 'path/to/constant.js'\r\n\r\nI know restart webpack can fix this problem, but I was wondering if webpack can optimize the problem so I don't need to restart webpack :)\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nDont need to restart webpack.\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n", "labels": [], "number_of_comments": 3, "created_at": "2017-11-02 03:06:35", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "270177667": {"author_username": "dooks", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5906, "title": "[Bug] Entry points don't match rules that contain an issuer condition", "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReport a potential bug.\r\n\r\n**What is the current behavior?**\r\nIf a module is an entry point, it does not attempt to match with a rule if an issuer is defined.\r\nhttps://webpack.js.org/configuration/module/#rule-issuer\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n1. Define one or more files as an entry point. `config.entry = [ 'foo.ts', 'bar.ts' ];`\r\n2. Define a module rule that contains an issuer `Condition`. In this case, I'm returning a `Condition` function that always returns true to illustrate a point.\r\n```\r\nconfig.entry = ['foo.ts', 'bar.ts'];\r\n\r\nconfig.module {\r\n  rules: [\r\n    {\r\n      test: /\\.ts$/,\r\n      issuer: () => true,\r\n      loader: 'arbritary-loader'\r\n    }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n`arbitrary-loader` to execute on the files `foo.ts` and `bar.ts`.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nIf this is not supported behavior, this is a feature request in order for a loader to differentiate between an entry point and a harmony import.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nwebpack v3.6.0\r\nnode v8.2.0\r\nMac OS X 10.11.6 El Capitan", "labels": ["Send a PR", "X5: work required (PR / Help Wanted)"], "number_of_comments": 4, "created_at": "2017-11-01 02:50:41", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "269347199": {"author_username": "ORESoftware", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5895, "title": "`webpack --watch` should write to stdout at the beginning and end of incremental build", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature request.\r\n\r\n**What is the current behavior?**\r\n`webpack --watch` does not write anything to stdout that would clearly indicate the current incremental build has (1) started or (2) is done/complete. See image attached.\r\n\r\n**What is the expected behavior?**\r\nI would expect, for the purposes of ecosystem tooling, that `webpack --watch` would write a clear message to stdout (1) when a file changed and (2) when it was done outputting the new result.\r\n\r\nFor example, `tsc --watch` writes this to stdout:\r\n(1) \"File change detected.\"\r\n(2) \"Compilation completed.\"\r\n\r\nIn this way, `tsc` allows ecosystem tooling to \"hook into\" `tsc -w`, and listen for stdout so as to hook into `tsc -w`. You can see the output from `tsc -w` in the picture below.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nThe motivation is write better test runners that can run tests upon changes.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nHere is `tsc -w` output:\r\n\r\n<img width=\"577\" alt=\"screenshot 2017-10-28 13 20 55\" src=\"https://user-images.githubusercontent.com/11139560/32138156-24eeb144-bbe3-11e7-95c7-0021b746385d.png\">\r\n\r\nHere is `webpack -w` output:\r\n\r\n<img width=\"623\" alt=\"screenshot 2017-10-28 13 18 06\" src=\"https://user-images.githubusercontent.com/11139560/32138164-324ca8a0-bbe3-11e7-8995-e615f94f8054.png\">\r\n\r\nAs you can see, it's pretty much impossible to know when `webpack -w` has completed it's incremental build.", "labels": [], "number_of_comments": 22, "created_at": "2017-10-28 20:24:07", "reactions": {"total_count": 13, "+1": 13, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "267506599": {"author_username": "jasonaden", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5870, "title": "Sequence of `resolve.alias` keys can cause import failure", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using the `alias` key to re-map imports, if the more general alias appears above a more specific alias in the object, imports to the more specific module will fail.\r\n\r\nWe recently published a new version of RxJS and published a re-mapping file to point deep imports to their ESM build sources rather than CJS. Came across this issue debugging some user issues.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nCreated a reproduction [here](https://github.com/jasonaden/repro/blob/webpack_alias_failure/webpack/webpack.config.js). Clone repo on `webpack_alias_failure` branch, go to `webpack` directory, `yarn install`, `yarn webpack`.\r\n\r\nComments show how to \"fix\" the issue in `webpack.config.js`.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\n`alias` is an object. Sequence of keys should not be depended up on for behavior.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n", "labels": [], "number_of_comments": 2, "created_at": "2017-10-22 23:03:55", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "267418500": {"author_username": "amirmohsen", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5866, "title": "Webpack without bundling for server-side compilation", "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nWebpack always bundles files and this is not a desirable behaviour when compiling server-side code. I know that it sounds like an oxymoron to ask for it not to bundle since webpack is a \"bundler\".\r\n\r\n**What is the expected behavior?**\r\nIt would be great if webpack could accept an option to only compile files and then output them back out while preserving the directory structure, essentially skipping the bundling step.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nWhen writing a universal react application, the entire react app is shared between client and server. Moreover, may other files such as schemas, validation logic, utils, api clients, etc are also shared and need to be compiled separately for the browser and node.js. Currently, I have two webpack config files, one for client and one for server. This generates two bundled files.\r\n\r\nWhile this setup works fine for now, it does negatively impact my development speed. Node.js code is really not meant to be bundled. For instance, after bundling, you can't use `fs.read` with a relative path anymore. The biggest issue, however, which has led me on a path to find an alternative is the terrible debugging experience. With recent versions of Node, we can use [Chrome Dev Tools](https://nodejs.org/dist/latest-v8.x/docs/api/debugger.html) to debug our server application. Unfortunately, due to limitations of the dev tools, we don't have acccess to source maps when debugging the server code. Believe it or not, this is a huge nightmare when trying to debug server code and all you have is one massive webpack-generated file. There's an [open issue](https://github.com/nodejs/node/issues/8369) about this problem on node.js' github repo but so far, there doesn't seem to be any fix.\r\n\r\nI can use something like gulp-babel to compile my server code but that won't handle assets like webpack does so it won't work for react ssr. Moreover, gulp doesn't \"crawl\" the import statements like webpack does so I have to completely separate my server and client code into separate folders (or use a silly naming convention like \".server.js\") which again causes many issues when it comes to shared files. Probably more than 50% of my application is shared files so you can imagine what a nightmare that would be trying to separate client and server.\r\n\r\nIf webpack had an option to disable the bundling step and just output files after compilation, then this problem would be resolved.", "labels": [], "number_of_comments": 10, "created_at": "2017-10-21 22:19:45", "reactions": {"total_count": 30, "+1": 30, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "267112996": {"author_username": "reda-alaoui", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5861, "title": "Support transitive noparse", "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\n`noparse` must be put in the webpack config file.\r\n\r\n**What is the expected behavior?**\r\nI would like to be able to indicate that a module must no be parsed inside the module itself.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nWe have a project A that contains an Emscripttent output.\r\nTherefore, webpack must not parse module A.\r\nA is not bundled with webpack itself.\r\n\r\nWe have multiple projects depending on project A and bundled with webpack.\r\nCurrently, we have to add module A in `noparse` in each project webpack configuration depending on project A.\r\n\r\nIt would be cleaner to let module A indicates that it is not parseable.\r\n", "labels": [], "number_of_comments": 0, "created_at": "2017-10-20 09:17:27", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "264360980": {"author_username": "umeboshi2", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5789, "title": "WatchIgnorePlugin useless for files inside a watched directory #2156", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI want to open an issue that was previously closed due to inactivity.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nUnknown.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\nBeing informed that an issue is resolved through activity.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nHere is the workaround that I have been using.  Is it still necessary?\r\n\r\nhttps://github.com/umeboshi2/dotfiles/blob/master/emacs#L189\r\n", "labels": [], "number_of_comments": 7, "created_at": "2017-10-10 20:14:31", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "262629255": {"author_username": "catamphetamine", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5756, "title": "`module` gets prioritised over `main`", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n`module` entry in `package.json` gets prioritised over the `main` entry (even on Node.js).\r\n\r\nConsider `deepmerge` package: https://unpkg.com/deepmerge@1.5.2/dist/es.js\r\n\r\nThis:\r\n```js\r\n...\r\nexport default deepmerge_1;\r\n```\r\ngets transpiled into:\r\n```js\r\n\r\n/* 2043 */\r\n/*!********************************************************************!*\\\r\n  !*** /Users/donaldtrump/work/JITU/node_modules/deepmerge/dist/es.js ***!\r\n  \\********************************************************************/\r\n/*! exports provided: default */\r\n/*! all exports used */\r\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\r\n....\r\n\r\nvar deepmerge_1 = deepmerge;\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (deepmerge_1);\r\n\r\n/***/ }),\r\n```\r\n\r\nAnd therefore another module using it and not suspecting anything crashes:\r\nhttps://unpkg.com/rest-facade@1.8.0/src/Client.js\r\n\r\n```js\r\nvar deepmerge = require('deepmerge');\r\n\r\n  this.options = deepmerge(defaultOptions, options || {}, true);\r\n```\r\n\r\nBecause it naturally expects the plain and simple CommonJS export which is supposed to be a function.\r\n\r\nWebpack tries to be overly smart in this case resulting in an incompatibility.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nCreate an application using `rest-facade` and it will throw \"deepmerge is not a function\" (because it's an object now for no reason).\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\nNot throwing the aforementioned error\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n", "labels": [], "number_of_comments": 23, "created_at": "2017-10-04 00:10:36", "reactions": {"total_count": 15, "+1": 12, "-1": 3, "laugh": 0, "heart": 0, "hooray": 0}}, "262528590": {"author_username": "unional", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5754, "title": "feature: Includes reference identifier in devtoolModuleFilenameTemplate", "body": "webpack@3.6.0\r\n\r\nFor TypeScript project, we generate sourcemap during transpilation.\r\n\r\nThe sourcemap contains `sources` in relative path format. e.g. `../../src/index.ts`.\r\n\r\nThis causes webpack to place the source in `webpack://../../src/index.ts` which is not helpful in describing which package the file belongs to.\r\n\r\nImagine there are multiple dependencies written in TypeScript.\r\nThose `index.ts` overwrite each other and only one is shown.\r\n\r\n![image](https://user-images.githubusercontent.com/3254987/31140634-d89d4214-a829-11e7-8fea-c50801084188.png)\r\n\r\nHere is an example. `createColors.ts`, `createColorsFromMap.ts`, `rgbHex.ts`, `rgbaString.ts` are from package [`color-map`](https://github.com/unional/color-map) while the others are from [`aurelia-logging-color`](https://github.com/unional/aurelia-logging-color)\r\n\r\nThe `index.ts` shown belongs to `aurelia-logging-color`.\r\nThere is an `index.ts` in `color-map` but it cannot be shown.\r\n\r\nOne way to solve this is to include the reference identifier (the package name) in the callback. So that we can place each file in the right place.\r\n\r\ncc @johnnyreilly as you are also familiar using TS with webpack.\r\nDoes this occurs to you and do you have any suggestion to solve it?\r\n", "labels": [], "number_of_comments": 19, "created_at": "2017-10-03 18:06:05", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "261212126": {"author_username": "anuraaga", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5730, "title": "Context dependencies should support resource queries", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no way to pass a resource query when using context dependencies via `require.context`. In other words, `this.resourceQuery` will never be set inside a loader when using `require.context`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\n`this.resourceQuery` should be set in a loader for something like the following:\r\n\r\n```js\r\nconst ctx = require.context('images?foo=bar', false, /\\.jpg$/);\r\nctx('./a.jpg');\r\n```\r\n\r\nI have a test case and a proposed fix in my fork here - https://github.com/anuraaga/webpack/pull/1\r\nIf the approach seems reasonable, I would be happy to move the PR to this repo for tweaks/submission, otherwise someone more familiar with the webpack design should probably take over as I just stumbled to that solution :)\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nSome loaders (e.g. sharp-loader) use `this.resourceQuery` to enable certain behavior. This functionality cannot be used with context dependencies due to having no way to set a resource query. There doesn't seem to be any reason context dependencies should not support this feature as the only difference compared to a normal dependency is multiple files are resolved at the same time and placed in a map.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nAll", "labels": ["Send a PR", "X5: work required (PR / Help Wanted)", "enhancement"], "number_of_comments": 14, "created_at": "2017-09-28 06:58:54", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "260801598": {"author_username": "zaclummys", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5724, "title": "This is not an issue! I really love Webpack \u2665, thank you!", "body": "", "labels": [], "number_of_comments": 2, "created_at": "2017-09-26 23:34:12", "reactions": {"total_count": 30, "+1": 6, "-1": 2, "laugh": 0, "heart": 18, "hooray": 4}}, "260684552": {"author_username": "micahcatlin", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5722, "title": "Request __webpack_public_path__ be a list of fallback hosts [cdn1, cdn2, ..., webserver]", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n`__webpack_public_path__` is a string which is used as a base for computing the URL of dynamically loadable code chunks.\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nI would like the generated chunk loader (in the in initial chunk) to include logic which accepts `__webpack_public_path__ = [\"host1/path/\", \"host2/path\", ...]` flexibly, and fallback gracefully at runtime if host1/path/_chunk_ cannot be loaded.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nI would like to have a web app which attempts to load its code chunks from a CDN, but which will quietly fall back to fetching the code from the application server if the CDN is unavailable.  I would like to use identical chunk file source in both situations, so the same computed SRI values are valid.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nI've made a patch to JsonpMainTemplatePlugin.js which demonstrates the desired behavior and seems to be working in my application, which will be referenced below.\r\n\r\nI'm not sure if this behavior is better implemented as an new distinct plugin, or as increased complexity in the default Jsonp loader.", "labels": [], "number_of_comments": 1, "created_at": "2017-09-26 16:15:24", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "255843816": {"author_username": "fresheneesz", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5640, "title": "fixing sub-property externals case for validation only", "body": "(eg {externals:{external:['a','b']}} ). Note that the actual handling of sub-properties still isn't working.\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nBugfix\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes\r\n\r\n**If relevant, link to documentation update:**\r\n\r\nN/A\r\n\r\n**Summary**\r\n\r\nfixes #5631\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**Other information**\r\n\r\nThis shouldn't be merged in without properly implementing externals sub-properties.", "labels": ["PR: conflict", "PR: review-outdated"], "number_of_comments": 8, "created_at": "2017-09-07 07:41:56", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "255416273": {"author_username": "jony89", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5630, "title": "load chunks with xhr+eval rather than jsonp", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nWebpack creates chunks when using lazy loading for scripts, e.g `require.ensure`, and loads them by adding script src tag to the DOM.\r\n\r\n**What is the expected behavior?**\r\n\r\nAllow to load chunks using XHR + Eval  as well instead of adding script src to the DOM\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nHandful of my users are gettings the following exception: \r\n\r\n> Unhandled rejection message: 'Loading chunk 0 failed' stack: Loading chunk 0 failed at HTMLScriptElement.n\r\n\r\nUsers which are using Chrome60/Win7. \r\n\r\nThe cause for this is that some extensions/firewalls/security configurations blocks jsonp regardless of the domain. since few of my users getting this error every day, I cannot ignore it.\r\n\r\nAnd it seems I'm not the only one who's having this issue: https://stackoverflow.com/questions/46051722/webpack-loading-chunk-0-failed \r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nWebpack : 2.6.1\r\nChrome 60\r\nWin 7\r\nnode8\r\n", "labels": [], "number_of_comments": 15, "created_at": "2017-09-05 21:36:03", "reactions": {"total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "254834912": {"author_username": "asfktz", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5617, "title": "RFC: a simplified version of the DllPlugin", "body": "I was amazed to discover how significant is the impact the DllPlugin has on build performance,\r\nespecially when projects get bigger. \r\n\r\nHere are some numbers I measured on my machine, for a project with a decent amount of dependencies:\r\n\r\n|                   |  **Without DllPlugin**  | **With DllPlugin** |\r\n|-------------------|-------------------|-----------------------|\r\n| **Build Time** | 16461ms - 17310ms | 2991ms - 3505ms |\r\n| **DevServer Rebuild** | 2924ms - 2997ms | 316ms - 369ms |\r\n\r\n\r\n### Current drawbacks of the DllPlugin\r\nWhile The DllPlugin is great, its main drawback is the amount of boilerplate it adds to the project.\r\n\r\n- **separate configuration** You have to manage the DLL config separate from the main config and build it in advance.\r\n- **Invalidation** You have to write your own logic for invalidation or build it by hand.\r\nOtherwise, things can get out of sync.\r\n\r\n### Suggested Solution\r\n\r\nTwo months ago, while working on a [PR](https://github.com/facebookincubator/create-react-app/pull/2710) to add DLL support for create-react-app, I realized that it is possible to overcome these drawbacks by introducing a high-level version of the plugin that will handle all of the boilerplate by itself.\r\n\r\nWhich led me to write [autodll-webpack-plugin](https://github.com/asfktz/autodll-webpack-plugin).\r\n\r\n**This is how it works:**\r\n\r\n* You add it to your config as a regular plugin (no external config required):\r\n\r\n```js\r\nmodule.exports = {\r\n  entry: {\r\n    app: './src/index.js'\r\n  },\r\n\r\n  output: {\r\n    filename: '[name].bundle.js',\r\n    path: path.resolve(__dirname, 'dist')\r\n    publicPath: '/'\r\n  },\r\n\r\n  plugins: [\r\n    new AutoDllPlugin({\r\n      filename: '[name].dll.js',\r\n      entry: {\r\n        vendor: [\r\n          'react',\r\n          'react-dom',\r\n          'moment'\r\n        ]\r\n      }\r\n    })\r\n  ]\r\n};\r\n```\r\n\r\n* When you run webpack, the plugin creates the DLL config in memory and builds it before it builds yours. It still uses DllPlugin and DllReferencePlugin under the hood.\r\n* It stores the DLL files in a cache directory, and saves it in a memory-fs too, for faster access when using the dev server.\r\n* On every run, the plugin checks if the cache is still valid, otherwise it will trigger a rebuild.\r\n* There are two conditions for cache invalidation:\r\n  * The options passed to the plugin changed\r\n  * package.json changed (by npm / yarn, or by hand)\r\n\r\n## Challenges\r\nI got to the point that users request features, such as support for plugins, loaders, inheriting from the parent config, and I encounter problems that are far beyond my understanding of webpack.\r\nI worry that I can no longer maintain it alone.\r\n\r\n## Request\r\n\r\nI believe this plugin has potential and [people seems to like it](https://github.com/asfktz/autodll-webpack-plugin/issues/49).\r\n\r\nI hope that maybe one of your team members can take over the project and develop an official version of it, one that will address its current limitations and better fit with webpack's standards.\r\n\r\nWith gratitude,\r\nAsaf.\r\n", "labels": ["enhancement", "performance"], "number_of_comments": 5, "created_at": "2017-09-02 20:44:48", "reactions": {"total_count": 14, "+1": 12, "-1": 0, "laugh": 0, "heart": 2, "hooray": 0}}, "253648588": {"author_username": "tomhicks-bsf", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5593, "title": "Duplicate modules - NOT solvable by `npm dedupe`", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nTwo identical sub-dependencies are being included twice in the build.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n`projectA` depends on `libA@^2.0.0`, `depA` and `depB`.\r\n`depA` and `depB` both depend on `libA@^1.0.0`\r\n\r\nThis results in a directory structure like this:\r\n\r\n```\r\nprojectA\r\n- node_modules\r\n-- libA\r\n-- depA\r\n---- node_modules/libA\r\n-- depB\r\n---- node_modules/libA \r\n```\r\n\r\nWhen the project is built, included in the bundle are:\r\n```\r\nlibA@2.0.0\r\ndepA\r\ndepB\r\nlibA@1.0.0\r\nlibA@1.0.0\r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nThe included modules should be:\r\n```\r\nlibA@2.0.0\r\ndepA\r\ndepB\r\nlibA@1.0.0\r\n```\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n`webpack@3.5.5`\r\n\r\nI have run `npm dedupe` but it can't fix the problem. This is understandable, because npm doesn't have anywhere to \"put\" this lower-version dependency that is shared by both `depA` and `depB`. Previously I believe this was solved with the `DedupePlugin` which has since been turned into a no-op.", "labels": ["S2: Inconvenient", "X3: discussion required"], "number_of_comments": 28, "created_at": "2017-08-29 12:55:37", "reactions": {"total_count": 18, "+1": 18, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "253176193": {"author_username": "AndersDJohnson", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5584, "title": "HMR multi-parent bug", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nThere seems to be an issue with the Hot Module Replacement feature when the hot replaced module exists in two different dependency trees and only one accepts the hot replacement.\r\n\r\nThe logic in the `HotModuleReplacementPlugin` seems to walk up the dependency tree of an updated module, but stops on any branch when it hits the main entry file and hasn't yet found an ancestor accepting the update, or hits a declining ancestor, regardless of whether there are other branches pending walk that could lead to other ancestors that might accept the update.\r\n\r\nFor an example project that reproduces the error, see [AndersDJohnson/webpack-hmr-multi-parent-bug](https://github.com/AndersDJohnson/webpack-hmr-multi-parent-bug).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\nSee above.\r\n\r\n**What is the expected behavior?**\r\n\r\nHMR should work for modules with multiple parents.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nComplex applications may require some files from multiple places and want to implement hot reloading for these.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nbrowser: Google Chrome 60.0.3112.113 (Official Build) (64-bit)\r\nNode.js: v8.4.0\r\nwebpack: 3.5.5\r\nOS: macOS Sierra 10.12.4 (16E195)\r\n", "labels": ["Send a PR", "X5: work required (PR / Help Wanted)"], "number_of_comments": 11, "created_at": "2017-08-27 17:04:55", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "253088340": {"author_username": "chapati23", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5575, "title": "Dynamic imports generates wrong Chunks with folder structure `Comment/index.js` and `import './Comment'`", "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using\r\n```js\r\nimport(/* webpackChunkName: 'asyncComponents/[request]' */ `./asyncComponents/${name}`)\r\n```\r\n\r\nwith this folder structure:\r\n```\r\n.\r\n\u2514\u2500\u2500 asyncComponents\r\n    \u2514\u2500\u2500 Comment\r\n        \u251c\u2500\u2500 index.js\r\n        \u2514\u2500\u2500 styles.css\r\n```\r\n\r\nYou would expect the imported chunk name to be `asyncComponents/Comment-index` or ideally simply `asyncComponents/Comment`. Instead it's `asyncComponents/Post-.`\r\n\r\n`styles.css` for example gets a chunk named: `asyncComponents/Page-styles`\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nUse \r\n```js\r\nimport(/* webpackChunkName: 'asyncComponents/[request]' */ `./asyncComponents/${name}`)\r\n```\r\nwith the above folder structure and check out the chunk names\r\n\r\n\r\n**What is the expected behavior?**\r\nGenerate same chunk names (`Button`) as with static compiling\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nnode 8.2.1\r\nwebpack 3.5.4\r\nmacOS 10.12.6", "labels": [], "number_of_comments": 6, "created_at": "2017-08-26 12:18:30", "reactions": {"total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "251714702": {"author_username": "zackiles", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5553, "title": "Handling app updates with chunking and lazy loaded routes doesn't seem possible.", "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis could be a bug or feature.\r\n\r\n**What is the current behavior?**\r\nMy app has multiple React routes, and will lazy load chunks on route change. If a user is viewing the site while a new build is made, this will remove chunks the browser holds references too, and when the user changes their route the app will request that missing chunk and receive a 404 html response. Because it's a 404 (and html) webpack fails to load this chunk resulting in a complete app crash requiring the user to refresh and/or clear their cache to get the new version. This will sometimes show a \"Syntax error: Unexpected token <\"  in the console when trying to load these missing chunks.\r\n\r\n**What is the expected behavior?**\r\nThat the app doesn't crash. Possibly a way to detect missing chunks from the server and force a reload to get the new updated version which points to the correct chunks.\r\n\r\nI'm aware of the offline plugin which can auto-update all the chunks if it detects an update, but this isn't a reliable solution because service workers aren't supported on every browser. ", "labels": [], "number_of_comments": 4, "created_at": "2017-08-21 16:45:57", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "249479086": {"author_username": "SemihGk", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5491, "title": "web pack source map not working for some devtool options.", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nSourcemap is not working for some devtool options. Tested options:\r\n**eval:** working\r\n**cheap-eval-source-map:** working\r\n**cheap-source-map:** not working\r\n**cheap-module-eval-source-map:** working\r\n**cheap-module-source-map:** not working\r\n**source-map:** not working\r\n**inline-source-map:** not working\r\n**hidden-source-map:** not working\r\n**nosources-source-map:** not working\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\nI reproduced the bug in this repo: https://github.com/SemihGk/waka-player\r\n`npm install -> npm run prod -> watch console messages in localhost:3000`\r\n\r\nIt's really a weird issue. I am not sure any plugin causes this error. I do not think so. Just in case, you may check that in the repo. It is very basic sample repo and just used a couple webpack plugins such as html-webpack-plugin and copy-webpack-plugin. You can find those plugins' versions in package.json file. I suspect the compatibility between webpack and babel-loader. \r\n\r\n**What is the expected behavior?**\r\nsource map should work in all devtool options.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nIt's bug.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\n\"webpack\": \"^3.5.1\",\r\nMac OS: 10.12.6\r\nnode: 8.2.1\r\nTested on Chrome 60, Mozilla 54, Safari 10.1\r\n", "labels": ["P3: Important", "bug"], "number_of_comments": 24, "created_at": "2017-08-10 21:16:04", "reactions": {"total_count": 30, "+1": 29, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "249319240": {"author_username": "onigoetz", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5489, "title": "When using AMD output, use AMD for code-split chunks as well", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA new feature that would improve code-splitting with externals.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n_Context :_\r\nAn application which is build with multiple sub-applications which are each built with Webpack, and the \"orchestration\" of loading all this is done through requirejs.\r\nOne of the things with this platform, is that react is provided through requirejs so that each plugin can reuse a single global library instead of re-loading it for each app. (Any other library could be provided globally, I use react as the example here)\r\n_/context_\r\n\r\nWhen we generate a library in amd with some externals and code-splitting. \r\nThe thing is that externals are defined only at the main level even though it's the code-split part that need those externals.\r\n\r\nExample : \r\n\r\n```js\r\n// main.min.js\r\ndefine(['react'], function(a) { /* Doesn't actually need react yet */ });\r\n\r\n// 1.main.min.js\r\nwebpackJsonp([0],{3: function() { /* actually needs react */});\r\n```\r\n\r\nWouldn't it be better if it was able to generate it this way ?\r\n\r\n```js\r\n// main.min.js\r\ndefine(function() { /* Doesn't actually need react yet */ });\r\n\r\n// 1.main.min.js\r\ndefine([\"react\"], function(a) {\r\n  return {\r\n    chunkIds: [0],\r\n    moreModules: {3: function() { /* actually needs react */}}\r\n  }\r\n});\r\n```\r\n\r\nAdvantages are : \r\n- no custom logic to load modules, requirejs knows how to do it.\r\n- external dependencies are loaded when they're actually needed\r\n- no need to specify a name for the jsonp function as it's done through requirejs\r\n\r\nProblem with the current implementation: \r\n- externals might be loaded too early, which defeats the purpose of code splitting and lazy loading of those parts.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nIt isn't a bug, just the normal behaviour that could be more optimal\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\nTo load externals once they are needed\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nMy motivation is that I have an application that supports plugins, each of those can be implemented with any techology, React, jquery, vanilla js ... while they mostly use React today, we don't know what the future holds for us. Which is why we want to be able to lazily load libraries once they are actually used.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nWe use webpack 3.5.2\r\n", "labels": ["P4: Nice To Have", "enhancement"], "number_of_comments": 15, "created_at": "2017-08-10 11:42:41", "reactions": {"total_count": 22, "+1": 22, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "247566523": {"author_username": "delsvr", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5433, "title": "Process the same module multiple times with separate rules/loaders", "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nIf multiple rules match a module, I believe either the loaders are applied serially or only loaders from the first-matched rule processes the file. \r\n\r\n**What is the expected behavior?**\r\nI'd like to be able to process the same module multiple times, possibly via separate rules. This doesn't necessarily need to be asynchronous.\r\n\r\nThere was a loader that helped with this once, but it no longer appears relevant in webpack 2/3: https://github.com/webpack-contrib/multi-loader; for loaders like ExtractTextPlugin, no file is output.\r\n\r\nOne implementation of this might be allowing us to configure a rule to only apply for certain entries; e.g.\r\n\r\n```javascript\r\nconfig = {\r\n  entry: { main: 'index.js', vendor: 'vendor.js' },\r\n  module: { rules: [ { test: (file, entry) => file === 'test.css' && entry === 'main', use: [ ... ] } ] }\r\n} \r\n```\r\nOr perhaps we can just specify a rule to apply in \"parallel\", for any overlapping rules.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nLots of use cases for this; one might be to process a stylesheet in different ways, and saving them as separate files via ExtractTextPlugin.", "labels": ["X1: Inspection required", "enhancement"], "number_of_comments": 17, "created_at": "2017-08-03 01:22:29", "reactions": {"total_count": 28, "+1": 28, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "247441546": {"author_username": "Darker", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5429, "title": "modules[moduleId] is undefined error is unhelpful", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFEATURE - error reporting\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nThe webpack produces errorneous client code which pops `modules[moduleId] is undefined` error.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nNot sure. No matter what causes this error it should be human readable.\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nThe error should report whicvh module was not found or why.\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nSoftware should be debugable.\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\n\r\n", "labels": ["X0: need more information"], "number_of_comments": 30, "created_at": "2017-08-02 16:05:47", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "247114511": {"author_username": "evan-scott-zocdoc", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5422, "title": "Refactor builtins to ES6 to fix module concatenation deopt", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature-ish\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nthe built-ins for `global`, etc are written in ES5 JS and therefore will cause a deopt in `ModuleConcatenationPlugin`\r\n", "labels": [], "number_of_comments": 0, "created_at": "2017-08-01 15:45:52", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "246105872": {"author_username": "EvgenyOrekhov", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5392, "title": "EnvironmentPlugin: destructuring process.env doesn't work", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nreport a *bug*\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nDestructuring `process.env` doesn't work.\r\n`console.log(MY_VAR);` logs `undefined`\r\n\r\n**Steps to reproduce.**\r\n\r\nwebpack.config.js\r\n\r\n```js\r\nconst path = require(\"path\");\r\nconst {EnvironmentPlugin} = require(\"webpack\");\r\n\r\nmodule.exports = {\r\n    entry: \"./main.js\",\r\n    output: {\r\n        path: path.resolve(__dirname),\r\n        filename: \"bundle.js\"\r\n    },\r\n    plugins: [\r\n        new EnvironmentPlugin([\"MY_VAR\"])\r\n    ]\r\n};\r\n```\r\n\r\nmain.js\r\n\r\n```js\r\nconst {MY_VAR} = process.env;\r\nconsole.log(MY_VAR); // logs undefined\r\nconsole.log(process.env.MY_VAR); // logs \"test\"\r\n```\r\n\r\ncommand\r\n\r\n```bash\r\nMY_VAR=test webpack\r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n`console.log(MY_VAR);` should log \"test\"\r\n\r\nNode.js version: 8.2.1\r\nwebpack version: 3.4.1\r\nOS version: Ubuntu 17.04", "labels": ["P2: Very Important", "bug"], "number_of_comments": 12, "created_at": "2017-07-27 16:59:48", "reactions": {"total_count": 27, "+1": 21, "-1": 0, "laugh": 0, "heart": 5, "hooray": 0}}, "242322591": {"author_username": "jinasonlin", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5271, "title": "Module API require with dynamic load module causes variable  not defined", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\nbug?\r\nIs the module context error?\r\nIn the code, why throw error 'Uncaught ReferenceError'.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n__index.js__\r\n```javascript\r\nimport data from './data';\r\nimport dynamic from './dynamic';\r\n\r\nconst _dynamic = {\r\n  dynamic: 'dynamic',\r\n};\r\n\r\nconsole.log('data', data);\r\nconsole.log('dynamic', dynamic);\r\n\r\nconsole.log('require', require('./dynamic.js').default);\r\nconsole.log('require _dynamic', require(`./${_dynamic.dynamic}.js`).default);\r\nconsole.log('require dynamic', require(`./${data.dynamic}.js`).default); // throw Error Uncaught ReferenceError: data is not defined\r\n```\r\n\r\n__data.js__\r\n```javascript\r\nexport default {\r\n  dynamic: 'dynamic',\r\n};\r\n\r\n```\r\n\r\n__dynamic.js__\r\n```javascript\r\nexport default {\r\n  key: 'value',\r\n};\r\n\r\n```\r\n\r\n__Chrome console__\r\n<img width=\"485\" alt=\"2017-07-12 5 41 59\" src=\"https://user-images.githubusercontent.com/5010606/28112208-b974e59e-672a-11e7-9db2-ce3f5884320b.png\">\r\n\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n\r\n\r\n**If use the babel module, it will not report the error.**\r\n\r\nChrome 59\r\nNode.js 6.10.1\r\nwebpack 2.6.1\r\n", "labels": ["P4: Nice To Have", "bug"], "number_of_comments": 2, "created_at": "2017-07-12 09:53:30", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "241509224": {"author_username": "ghost", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5244, "title": "Add Chrome content script target", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nWhen I lazy load a chunk from a Chrome content script, it inserts a script tag into the page loaded in the active tab, which then causes the code to execute in the context of the webpage instead of that of the Chrome extension. It then throws an error as the webpackJsonp exists in the [isolated execution environment](https://developer.chrome.com/extensions/content_scripts#execution-environment) and is not visible from the context of the webpage.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nN/A\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nThere should be a Chrome content script [target](https://webpack.js.org/configuration/target/) available which uses the appropriate Chrome API calls to lazy load chunks in the isolated execution environment.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nThere does not seem to be a way to lazily load chunks from a Chrome content script.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n", "labels": [], "number_of_comments": 0, "created_at": "2017-07-09 08:14:44", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "241468474": {"author_username": "alejandronanez", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5242, "title": "Webpack keeps compiling", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nMy bundle gets compiled several times.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nI'm creating a webpack boilerplate for my personal projects, you can check it on this repo on the `cleanup` branch https://github.com/alejandronanez/webpack-boilerplate/tree/cleanup\r\n\r\n1. `npm start`\r\n2. Add a few lines to `src/styles/app.scss` - a few empty new lines will do the trick\r\n3. CTRL + C to stop the process\r\n4. `npm start` again\r\n5. You should start seeing the bundle compiles on a loop for a while, and then it will stop\r\n\r\nHere's a GIF with what is happening:\r\n\r\n![webpack](https://user-images.githubusercontent.com/464978/27987858-77b8a2d8-63da-11e7-8f5b-897f4f5de977.gif)\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nThe looping should not occur.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n```\r\nnode: 8.1.3 && LTS\r\nnpm: 5.1.0\r\nOSX: 10.12.5\r\nwebpack version: 3.1.0 && 2.6.1\r\n```", "labels": ["bug", "webpack-2", "webpack-3"], "number_of_comments": 6, "created_at": "2017-07-08 17:39:52", "reactions": {"total_count": 8, "+1": 8, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "239945453": {"author_username": "mc-zone", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5197, "title": "[Feature Request] Handle external missing in runtime. (Or make a guarantee before bootstrap)", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature, or discuss first.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nAssume there are some Dll or CommonChunks file, we usually put it in HTML script:\r\n```html\r\n<script src=\"./dll/common.bundle.js\"></script>\r\n<script src=\"./commonChunk.bundle.js\"></script>\r\n<script src=\"./entry.bundle.js\"></script>\r\n```\r\n\r\nOnce the `entry.bundle.js` was loaded, the code will be launched and believe other runtime external dependencies(dll, commonChunk) are already exist.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n### What if the previous script load failed? \r\n\r\nThey may fail to load due to enter the weak network occasionally, or some area's CDN breakdown, even hijacked by network provider which cause the script broken and blocked by CSP (very common in China mainland).\r\n\r\nWe will see that the entry will be broken and throw error directly due to lack of dependencies:\r\n![image](https://user-images.githubusercontent.com/4403937/27761817-fbd0b6c6-5e96-11e7-8c5e-1fdbc411c0ab.png)\r\n\r\n![image](https://user-images.githubusercontent.com/4403937/27761025-18deef90-5e87-11e7-8a63-5c10612acf36.png)\r\n\r\nCurrently we have neither ability to guarantee them load done by any webpack way, nor occasion to reload the failed ones before startup. If there are any hooks that let we have ability to inspect and reload them (such as use another CDN), It will help us prevent the page from becoming unusable.\r\n\r\nActually, the page I'm maintaining which have aproximately 20 million PV in China mainland and can met a lot of error reported about it every day because of the terrible network and telecommunications environment (hijacked, CDN timeout, network switch frequently). We do need a retry and assurance mechanism to improve the usability of some unlucky users.\r\n\r\nSorry if tl;dr. \r\n\r\nthe one implemetation I can imagine is extract the **bootstrap code** inline to the HTML page, and also with the **external chunks list** analyzed from the entry. So that we can check whether the necessary dependencies are all present before we startup (not sure whether can implemented by write Plugins):\r\n\r\n```html\r\n<script src=\"./dll/common.bundle.js\"></script>\r\n<script src=\"./commonChunk.bundle.js\"></script>\r\n<!-- only modules, but extract the bootstrap code. -->\r\n<script src=\"./entry.bundle.js\"></script>\r\n<!-- only modules, but extract the bootstrap code. -->\r\n\r\n<script>\r\n//Extracted from entry or commonChunk\r\nvar bootstrap = (function(modules) { // webpackBootstrap\r\n/*......*/\r\n});\r\n\r\n//Analyzed by plugin\r\nvar externalChunksList = /*...*/;\r\n\r\n//Generated by plugin, should let users setting their own handler\r\nif(hasAllExternalsInstalled()) {\r\n  bootstrap(/*...*/);\r\n}else{\r\n  tryReloadMissingChunks().then(() => bootstrap(/*...*/)).catch(e => /*...*/);\r\n}\r\n</script>\r\n```\r\n\r\nPlease feel free to indicate my mistake. I'm also looking forward to more brilliant proposal.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nwebpack 3.0.0 with all platform.", "labels": ["enhancement"], "number_of_comments": 3, "created_at": "2017-07-01 12:04:17", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "239710741": {"author_username": "Andarist", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5191, "title": "[enhancement] ModuleConcatenationPlugin - drop webpack bootstrap if possible", "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nSingle file bundles using ModuleConcatenationPlugin still using so called webpack bootstrap (50~ lines of code) + wrapping the exported module within a single module-closure (numbered `0`).\r\n\r\n**What is the expected behavior?**\r\n\r\nOmit the current behaviour whenever possible - therefore going closer towards the Rollup behaviour.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nBeing a viable alternative to rollup when bundling libraries.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nwebpack3\r\n\r\n\r\n\r\n\r\nBesides the mentioned information I would like to offer my help with implementing this, a helping hand would be great though, im webpack internals noobie ;)\r\n\r\nAlso rollup handles cjs modules way more gracefully (hoists them!), should I create other issue for this?", "labels": [], "number_of_comments": 10, "created_at": "2017-06-30 08:28:03", "reactions": {"total_count": 13, "+1": 12, "-1": 0, "laugh": 0, "heart": 0, "hooray": 1}}, "236795492": {"author_username": "donaldpipowitch", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5087, "title": "Problems with pnpm and the way loaders are resolved", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**bug**?\r\n\r\n**What is the current behavior?**\r\n\r\nI can't create libs which use webpack and loaders, install these libs with pnpm and try to use them, because the modules can't be found.\r\n\r\nIt looks like pnpm installs my lib here: `/Users/foo/test/ws-pnpm-test/node_modules/.registry.npmjs.org/@mercateo/ws/1.0.2/node_modules/@mercateo/ws`.\r\n\r\nThe loader is here `/Users/foo/test/ws-pnpm-test/node_modules/.registry.npmjs.org/string-replace-loader` and here `/Users/foo/test/ws-pnpm-test/node_modules/.registry.npmjs.org/@mercateo/ws/1.0.2/node_modules/string-replace-loader`.\r\n\r\nI _think_ webpack only looks here for loaders: `/Users/foo/test/ws-pnpm-test/node_modules/string-replace-loader`, but this does not exist.\r\n\r\nI _think_ webpack resolves loaders in node_modules relative to `process.cwd()`, but not relative to my lib.\r\n\r\nI _can't_ just rewrite my config to something like this:\r\n\r\n```js\r\n{\r\n  resolveLoader: {\r\n    modules: [\r\n       // goes up '@mercateo/ws/dist' to match `'/Users/foo/test/ws-pnpm-test/node_modules/.registry.npmjs.org/@mercateo/ws/1.0.2/node_modules/string-replace-loader'`\r\n       // this could lead to different directories, if my lib isn't installed with pnpm\r\n       join(__dirname, '..', '..', '..'),\r\n       // this would match `'/Users/foo/test/ws-pnpm-test/node_modules/.registry.npmjs.org/string-replace-loader'`\r\n       // but I can't be sure, that my users use the official registry and not a private mirror or something like that\r\n       join(process.cwd(), 'node_modules/.registry.npmjs.org'),\r\n      'node_modules'  // default\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nWhat is the most robust way to solve this?\r\nCan I specify something like that? `resolveLoaders.basedir: __dirname`, so all loaders can be resolved relative to my lib?\r\n\r\n// cc @zkochan\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n`package.json`:\r\n\r\n\r\n```\r\n{\r\n  \"name\": \"ws-pnpm-test\",\r\n  \"version\": \"1.0.0\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"ws\": \"ws\"\r\n  },\r\n  \"ws\": {\r\n    \"type\": \"browser\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@mercateo/ws\": \"^1.0.2\"\r\n  }\r\n}\r\n```\r\n\r\n`tsconfig.json`: \r\n\r\n```\r\n{}\r\n```\r\n\r\n`src/index.ts`: \r\n\r\n```\r\nconsole.log('hello');\r\n```\r\n\r\n```\r\n$ pnpm install\r\n$ npm run -s ws -- build\r\nERROR in Entry module not found: Error: Can't resolve 'string-replace-loader' in '/Users/foo/test/ws-pnpm-test'\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nBuild without error.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nNode LTS, Webpack 2.6, pnpm 0.71, Mac OS X.", "labels": ["X2: answer required"], "number_of_comments": 28, "created_at": "2017-06-19 06:53:56", "reactions": {"total_count": 12, "+1": 11, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "235385590": {"author_username": "FrobtheBuilder", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5053, "title": "It isn't made clear exactly how to use non-javascript webpack configs.", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature.\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nIf your webpack.config.* is in a non-javascript language, webpack will very conveniently use an appropriate transpiler to run it, but only if you have all the required packages installed, as listed on the [js-interpret extensions map](https://github.com/js-cli/js-interpret). This would be fine, except for the fact that if you're missing them, it will attempt to read the config as javascript and produce a rather unhelpful error message.\r\nIn my case, it looks like this:\r\n```\r\n> sachiel-use-test@1.0.0 start /Users/frob/Projects/sachiel-use-test\r\n> webpack-dev-server --config webpack.config.ts\r\n\r\n/Users/frob/Projects/sachiel-use-test/webpack.config.ts:1\r\n(function (exports, require, module, __filename, __dirname) { import webpack = require(\"webpack\")\r\n                                                              ^^^^^^\r\nSyntaxError: Unexpected token import\r\n    at Object.exports.runInThisContext (vm.js:78:16)\r\n    at Module._compile (module.js:545:28)\r\n    at Object.Module._extensions..js (module.js:582:10)\r\n    at Module.load (module.js:490:32)\r\n    at tryModuleLoad (module.js:449:12)\r\n    at Function.Module._load (module.js:441:3)\r\n    at Module.require (module.js:500:17)\r\n    at require (internal/module.js:20:19)\r\n    at requireConfig (/Users/frob/Projects/sachiel-use-test/node_modules/webpack/bin/convert-argv.js:96:18)\r\n    at /Users/frob/Projects/sachiel-use-test/node_modules/webpack/bin/convert-argv.js:109:17\r\n```\r\nThis is of course fixed by installing `typescript` and `ts-node`, as hinted at by the js-interpret documentation, but you might not guess that from this message or the [relevant documentation page](https://webpack.js.org/configuration/configuration-languages/).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nNot sure if I'd exactly call it a \"bug\", but just make a webpack config in a language that isn't javascript and try to run webpack or webpack-dev-server on it and you'll see what I mean.\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nIt would be very nice if webpack would warn you that you're trying to run a non-js config without the proper tooling installed (just by looking at the extension, for instance), but at the very least this behavior and the proper course of action ought to be mentioned on the [Configuration Languages documentation page](https://webpack.js.org/configuration/configuration-languages/).\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nRight now the documentation doesn't make clear exactly what needs to be done to enable support for non-javascript configuration files, and when you do it incorrectly, webpack gives you no guidance in the right direction. It's entirely up to the user to figure out this somewhat \"magic\" behavior.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nWebpack 2.6.1, Node 7.1.0, macOS 10.12.4", "labels": ["P4: Nice To Have", "X5: work required (PR / Help Wanted)", "enhancement"], "number_of_comments": 18, "created_at": "2017-06-12 22:36:04", "reactions": {"total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "234414335": {"author_username": "kevinburke", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5032, "title": "Webpack is slow to start and always performs work, even if it is unnecessary", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nIf the `--watch` mode is not specified, Webpack always runs the function in the config file on the inputs, to produce the output.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. Specify a Webpack function that transforms the inputs into an output, in a config file.\r\n2. Make a change to one of the input files and save it.\r\n3. Invoke webpack with `webpack --config /path/to/config.json`, to write the output file as a function of the inputs.\r\n4. Immediately run `webpack` again with the same commands.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe second time `webpack` is invoked, I expect it to detect that the mtimes of the inputs are all older than the mtimes of the output file, print that there is no work to be done, and exit with a 0 return code.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n[Make](https://en.wikipedia.org/wiki/Make_(software)) is a [build automation tool](https://github.com/mirror/make) released for UNIX systems in April 1976, 41 years ago. If I define a Make target as follows:\r\n\r\n```\r\noutput.js: static/one.js static/two.js\r\n```\r\n\r\nand invoke it with:\r\n\r\n```\r\nmake output.js\r\n```\r\n\r\nMake will check the mtimes of `static/one.js`, `static/two.js`, and `output.js` (which you can check by using the [Lstat](https://nodejs.org/api/fs.html#fs_fs_lstatsync_path) syscall on the affected files). If the mtime for output.js is newer than its inputs, make outputs the following:\r\n\r\n```\r\nmake: Nothing to be done for `output.js'.\r\n```\r\n\r\nAnd exits with a 0 return code. This means it is faster - make does not do unnecessary work - and more composable. It is always easy to invoke `make output.js` as part of another build script, since make will exit early if there is no work to be done.\r\n\r\nBy contrast, webpack does all of the work every single time. This makes it more difficult to compose as part of a larger build process, since invoking webpack means the work is always performed even if there is no point in doing the work since the inputs haven't changed since the output file was written. \r\n\r\nIn addition to doing unnecessary work, webpack has a slower startup time than `make`. Here is the amount of time it takes `make` to print the version string:\r\n\r\n```\r\n$ time make -v\r\nGNU Make 4.2.1\r\nBuilt for x86_64-apple-darwin16.6.0\r\nCopyright (C) 1988-2016 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.\r\nmake -v  0.00s user 0.00s system 32% cpu 0.026 total\r\n```\r\n\r\nOr 26 milliseconds. It takes `webpack`, released 36 years later, about 8 times as long to print the version string:\r\n\r\n```\r\n$ time webpack -v\r\n2.6.1\r\nwebpack -v  0.17s user 0.04s system 84% cpu 0.242 tota\r\n```\r\n\r\nThis is a significant performance regression, both in startup time and in the amount of work that is performed. It's especially confusing given the modest improvements in CPU performance, and the increases in available RAM, in the years between 1976 and 2012. \r\n\r\nIt would be nice if performance improved along one or both of these axes.", "labels": [], "number_of_comments": 4, "created_at": "2017-06-08 05:20:12", "reactions": {"total_count": 30, "+1": 23, "-1": 0, "laugh": 6, "heart": 0, "hooray": 0}}, "234294812": {"author_username": "mayani", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 5029, "title": "Consider adding dynamic import's webpackMode as a configuration option, or eval the comment contents to get value", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nFeature Request\r\nAdd webpackMode as a config. option OR eval comment in dynamic import before using it's value.\r\n\r\n**What is the current behavior?**\r\nwebpackMode defaults to \"lazy\", it can be overridden through a comment as /* webpackMode: \"eager\" */\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nAbility to add webpackMode in config file, so preferred value in order of preference would be comment.webpackMode, config.webpackMode, webpackDefault.webpackMode\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nHot Module Replace works well with asynchronously imports. However, Hot Reload is unable to reload state for such code. Example: Using async. loaded components with React Hot Loader, where the component's are not refreshed. Only suitable approach seems to require loading code synchronously in development. \r\n\r\nAdding webpackMode in config. could be an approach to fix this. i.e. Not specifying webpackMode in comment to use \"lazy\" in prod. and \"eager\" in development.\r\n\r\nAlternative approach would be to eval webpackMode value. i.e. \r\n/* webpackMode: process.env.NODE_ENV == \"production\" ? \"lazy\" : \"eager\" */\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nNode 6.9.1\r\nNPM 4.1.1\r\nWebpack 2.6.1\r\n", "labels": [], "number_of_comments": 0, "created_at": "2017-06-07 18:04:30", "reactions": {"total_count": 25, "+1": 25, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "233327629": {"author_username": "JasonTheAdams", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4991, "title": "Provide option to disable initial compilation when watching", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature Request\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nWhen `webpack --watch` is first run, the first thing it does it compile all of the entries. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nFor webpack to simply start watching the files and not immediately compile. But given that this doesn't apply as much to single-entry instances, at least have an option for it.\r\n\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nGiven the number of entries (and if sourcemaps are enabled) this can can take a significant amount of time. With this feature one would be able to enable watching and immediately get to work without having to worry about whether it's finishing compiling and is actually watching, yet.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nNode: 4.5.0\r\nWebpack: 2.6.1\r\nOS: Windows 10", "labels": ["bug"], "number_of_comments": 9, "created_at": "2017-06-02 23:50:47", "reactions": {"total_count": 13, "+1": 13, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "231893063": {"author_username": "TheLarkInn", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4950, "title": "[WASM] - Rust, LLVM Frontend Loaders", "body": "We should have a default suite of LLVM Frontend loaders, the first being Rust, that should take any file that can be parsed as a rust module, and then output a `WASMModule` in memory in webpack to be added to the dependency graph. \r\n\r\nOne could see it's uses like the following: \r\n\r\n**entry.js**\r\n```javascript\r\nimport(\u201c./abc.js\u201d).then(abc => abc.doIt());\r\n```\r\n\r\n**abc.js**\r\n\r\n```javascript\r\nimport {factorial} from \u201c./addition.rs\u201d;\r\n\r\nexport function doIt() {\r\n  console.log(factorial(1, 2));\r\n}\r\n```\r\n\r\n**factorial.rust**\r\n```rust\r\n#[no_mangle]\r\npub fn fact(mut n: i32) -> i32 {\r\n    let mut result = 1;\r\n    while n > 0 {\r\n        result = result * n;\r\n        n = n - 1;\r\n    }\r\n    result\r\n}\r\n```\r\n\r\n**factorial.wast**\r\n\r\n```wasm\r\n  (func $fact (type $rustfn-0-2) (param $0 i32) (result i32)\r\n    (local $1 i32)\r\n    (local $2 i32)\r\n    (set_local $2\r\n      (i32.load\r\n        (i32.const 0)\r\n      )\r\n    )\r\n    (set_local $1\r\n      (i32.const 1)\r\n    )\r\n    (loop $shape$2$break $shape$2$continue\r\n      (br_if $shape$2$break\r\n        (i32.le_s\r\n          (get_local $0)\r\n          (i32.const 0)\r\n        )\r\n      )\r\n      (set_local $1\r\n        (i32.mul\r\n          (get_local $1)\r\n          (get_local $0)\r\n        )\r\n      )\r\n      (set_local $0\r\n        (i32.sub\r\n          (get_local $0)\r\n          (i32.const 1)\r\n        )\r\n      )\r\n      (br $shape$2$continue)\r\n    )\r\n    (i32.store\r\n      (i32.const 0)\r\n      (get_local $2)\r\n    )\r\n    (get_local $1)\r\n  )\r\n```\r\n\r\nLoaders for now would return [in memory] and then bundle and load like traditional .wast module (already created)\r\n\r\n#### Simple functions only for now. \r\nBecause we are going to work on a future shared memory handling module, the initial functionality of these loaders should only support integer of float functions. (AKA No memory, strings, etc.). \r\n\r\n#### Things to discuss:\r\nAny code generation? Additional emscripten files that are output, what needs to be actually bundled and what not. Is there fallback modes for these kind of loaders? \r\n", "labels": ["Web Assembly"], "number_of_comments": 7, "created_at": "2017-05-28 20:42:51", "reactions": {"total_count": 30, "+1": 30, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "230475277": {"author_username": "fruchtose", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4913, "title": "Please make long term caching better supported out of the box", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?** Currently, predictable long term caching of output chunks is difficult to achieve. After reading [this article](https://medium.com/webpack/predictable-long-term-caching-with-webpack-d3eee1d3fa31), I was surprised to learn two things:\r\n\r\n1. I have been doing predictable long-term caching wrong for a long time.\r\n2. Every project is different, and the `CommonsChunkPlugin` integration for every project will be different. However, there are a number of concepts required for consistent long term caching which are not used by default, including the plugins `NamedChunksPlugin` & `NamedModulesPlugin`, and ensuring that all chunks have a module identifier.\r\n\r\n[The documentation for caching](https://webpack.js.org/guides/caching/#components/sidebar/sidebar.jsx) includes minimal explanation for using module identifiers instead of facilities for supporting long term caching:\r\n\r\n> To minimize the size of generated files, webpack uses identifiers instead of module names.\r\n\r\nHowever, for production projects, this means that more work needs to be done to ensure that long term caching is possible since the defaults do not support it, and the rapid state of change in the webpack codebase (and supporting documentation) can easily be missed by devs on webpack projects.\r\n\r\n**What is the expected behavior?** It would be nice to have sensible defaults that make long term caching easier, such as including `NamedChunksPlugin` and `NamedModulesPlugin` by default, and ensuring that all modules have an identifier. Additionally, in the future it would be nice to include config options that more simply expose some (pardon the pun) common use cases of `CommonsChunkPlugin`behaviors, like breaking out chunks into their own files, creating a runtime chunk, and including async children chunks in a parent chunk.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?** As a webpack user for over a year now, I still feel that the framework is very powerful&mdash;but that there are a number of default configurations that should be simpler to achieve. It is not clear that there is a worthy performance reason to not support long term caching by default, when it is not immediately clear that webpack requires additional configuration for long term caching in the first place.", "labels": ["D1: Easy (Contrib. Difficulty)", "P3: Important", "S2: Inconvenient", "X5: work required (PR / Help Wanted)", "webpack-5"], "number_of_comments": 5, "created_at": "2017-05-22 18:09:23", "reactions": {"total_count": 30, "+1": 30, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "230351638": {"author_username": "wintercounter", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4908, "title": "Add ability to create chunk per module basis", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nCurrently I'm using the dynamic import syntax and WP does a great job. However, I'm facing one issue:\r\nIn case I have to use the same module multiple times, it'll be included in all chunks where that module is used. This is a pretty big overhead (to load the the same module multiple times). The current project I'm working on has ~ 190 modules which would result in an equal amount of chunks. In case using HTTP2, I don't think it's an issue to have them separated. In that case Webpack would always know which modules are loaded and which ones to skip.\r\n\r\nI know there is the CommonChunksPlugin for such cases but I can't accept it as a solution. I want to prevent the page to load ANY unnecessary code.\r\n\r\n", "labels": [], "number_of_comments": 2, "created_at": "2017-05-22 10:27:44", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "229832069": {"author_username": "gaearon", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4897, "title": "strictExportPresence: true is not enforced for unused modules", "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nDepends on what you think about it.\r\n\r\n**What is the current behavior?**\r\n\r\nWith `strictExportPresence: true`, I get errors about missing ES6 exports.\r\nHowever **if I don't use the import, it doesn't get checked.**\r\n\r\nFor example:\r\n\r\n\r\n```js\r\n// Compile error: './module' does not contain an export named 'bad'\r\n\r\nimport {bad} from './module';\r\nconsole.log(bad);\r\n```\r\n\r\n```js\r\n// No error\r\n\r\nimport {bad} from './module';\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n```js\r\ncreate-react-app myapp --scripts-version react-scripts@canary\r\ncd myapp\r\nnpm start\r\n```\r\n\r\nThen do the thing above. But I expect this to be always reproducible with Webpack 2, ES6 modules, and `strictExportPresence: true`.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect the build to fail even if the export is unused, since it likely indicates a mistake anyway.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nFinding mistakes earlier.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nwebpack 2.5.1", "labels": ["S2: Inconvenient", "enhancement", "webpack-2"], "number_of_comments": 1, "created_at": "2017-05-18 23:30:37", "reactions": {"total_count": 16, "+1": 16, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "229631647": {"author_username": "jscheid", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4892, "title": "Ability to add information to stats.toJson()", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nThere are currently no hooks that would allow adding data to the output of `stats.toJson()`, and the `toJson` function doesn't support copying \"user data\" from assets in the `compilation` object.\r\n\r\n**What is the expected behavior?**\r\n\r\nThere is such a hook _or_ there is a way to add user data to assets in the `compilation` object that gets copied over to the JSON output.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nAs discussed before with @sokra: \r\n- https://gitter.im/webpack/webpack?at=568fdccc7669220736029bd4\r\n- https://gitter.im/webpack/webpack?at=56917e08ee13050b38a298fa\r\n\r\nBeyond what was discussed on Gitter, the serialized stats are a great way to pass information produced by the build to a server process in a \"universal\" or \"hybrid\" rendering setup. Without the ability (for plugins) to add data to that object, such data has to be passed around in other ways which means more files are generated, the user has to decide what they are called and where they are placed, and perhaps combine data from separate files. Having a hook or some other extension mechanism would allow solving this more elegantly.\r\n\r\nSee also https://github.com/waysact/webpack-subresource-integrity/issues/45\r\n\r\n", "labels": [], "number_of_comments": 0, "created_at": "2017-05-18 10:59:40", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "227484752": {"author_username": "stianl", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4844, "title": "Debugger breakpoint not hit in Chrome", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nDebugger breakpoint is only hit in Firefox.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. Clone [webpack-source-maps](https://github.com/stianl/webpack-source-maps) (files shamelessly stolen from https://github.com/webpack/webpack/issues/4423#issue-211890851)\r\n2. run `npm install && npm start`\r\n3. Set a breakpoint in browser inspector on line 10 in `webpack://index.js?2645` (the `console.log` statement).\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\nThe breakpoint should be hit in Chrome too.\r\n\r\nAs mentioned in #3165  there are some issues with source maps in Chrome, and this seems to be one of them.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\n* Firefox 53\r\n* Chrome 58\r\n* webpack 2.5.1\r\n* node 6.10.1\r\n* Windows 10", "labels": [], "number_of_comments": 0, "created_at": "2017-05-09 20:17:20", "reactions": {"total_count": 15, "+1": 15, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "227353462": {"author_username": "trisys3", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4841, "title": "Change How Browser Retrieves Hot Module Replacement File", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\nI am sure this has been asked before, but is there any way to change how and when the browser gets the hot module replacement file? Right now, at least with the default `HotModuleReplacementPlugin`, it must be retrieved through the hot module replacement API, which involves a JSONP request. What I am proposing is a way to override that process, relatively easily.\r\n\r\n**What is the expected behavior?**\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nI was thinking the bundle served to the client could have listeners attached to it, through something like WebSockets or postMessage, or even Server-Sent Events if your browser is new enough. This would obviously need to be set up by the server. My problem is that to do this right now, you need essentially 2 XHR/JSONP/WebSockets/etc. requests, one for the listener, which listens for the server broadcasting that a module has changed, and one for the hot module, so it can actually be applied. Even the dev middleware and server do this.\r\n\r\nI am suggesting an API of some sort that could put this into one request(/SSE/WebSocket...). I know bandwidth is not usually a problem on computers where this replacement is being done, but it is still an extra request that must be made, or an extra socket that needs to stay open.\r\n\r\nFirstly, is this possible? If it is possible, I suppose I am asking for a docs change. If not, this is a feature request.", "labels": [], "number_of_comments": 0, "created_at": "2017-05-09 12:43:47", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "227267540": {"author_username": "MoonBall", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4838, "title": "Chunk using DllReferencePlugin does not change `[chunkhash]` of filename When corresponding dll had changed.", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nChunk using DllReferencePlugin does not change `[chunkhash]` of filename When corresponding dll had changed.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nI have a example repo: https://github.com/MoonBall/DllReferencePlugin-not-change-chunkhash\r\nThere are two cases:\r\n1. `manifest.json` change.\r\nstep 1: `npm run webpack`.\r\nstep 2: modify `webpack.config.js`: comment 7-th line, uncomment 8-th line.\r\nstep 3: `npm run webpack`.\r\nresult: conents of two runs is different, but `[chunkhash]` is same.\r\n\r\n2. dependencies of dll change\r\nstep 1: `git reset --hard && rm -rf js`\r\nstep 2: `npm run webpack`.\r\nstep 3: modify `vendor2.js`: comment 2-nd line.\r\nstep 4: `npm run webpack`.\r\nresult: conents of two runs is different, but `[chunkhash]` is same.\r\n\r\n\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n`[chunkhash]` change.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nOS: osx 10.11.6\r\nnode: 6.6.0", "labels": [], "number_of_comments": 1, "created_at": "2017-05-09 06:53:26", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "226649688": {"author_username": "janis91", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4824, "title": "Configuring library as external in webpack does not work like expected with UMD as libraryTarget", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI assume this could be a *bug*.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nI want to build my own JavaScript library and register it under an already existing namespace (\"OCA\" - in this particular case). Therefore I use webpack 2 and the libraryTarget: umd to register the output under \"OCA.Ocr\" (my library is named \"Ocr\"). This works like intended, but when it comes to the point that I want to use for example underscorejs as a library which will be included in the html later, I cannot get it to work. I followed the webpack configuration documentation and it says that the **externals** configuration option should be the way to go. But if I use it like stated in the documentation, the underscore library in this case is not defined. I also checked, that the library is available in the global namespace and the file gets loaded before my webpack bundle.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n[my webpack.config.js](https://gist.github.com/janis91/919ffabd0829cdbcb6258e619cf5ccc0)\r\n[my typescript code](https://gist.github.com/janis91/8fc9f9b1ce76fc1f2cea74c684e9fdeb)\r\n[webpack bundle](https://gist.github.com/janis91/eb675f17e25eb87159c1e8b62c2a81da)\r\n\r\nFirefox says:\r\n\r\n> TypeError: underscore_1.default is undefined\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nNo TypeError should be thrown and the underscorejs (`_`) library should be also available for the library bundled with webpacka as an external. (Like stated in the documentation)\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nWebpack Version: 2.5.0\r\nNode: 6.10.2\r\nOS: Debian Jessie\r\nBrowser: Firefox ESR 45.9.0\r\n\r\nAlso related is my [stackoverflow question ](https://stackoverflow.com/questions/43788304/configuring-library-as-external-in-webpack-does-not-work-with-umd-as-librarytarg)as I actually don't know if this is my fault or if this is a bug. (Maybe it would be at least nice to give more information regarding such use case in the documentation)", "labels": ["P2: Very Important", "bug"], "number_of_comments": 7, "created_at": "2017-05-05 18:08:07", "reactions": {"total_count": 17, "+1": 17, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "226280487": {"author_username": "kukjevov", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4817, "title": "BUG: \"export 'default' (imported as 'selection_enter') was not found in './enter'", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBUG\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nCurrently if you try to use d3.js library, webpack will generate warning:\r\n*\"export 'default' (imported as 'selection_enter') was not found in './enter'*\r\n\r\nThat is not so big problem, but when you run javascript generated by webpack it will fail with error:\r\nSyntaxError: function statement requires a name\r\n\r\nProblem is using ES2015 import default and export default which is not working.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nhttps://github.com/kukjevov/webpack-error-sample\r\n\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nIt should work\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nnodejs: 7.10, webpack 2.5.0, Windows 10\r\n", "labels": [], "number_of_comments": 25, "created_at": "2017-05-04 13:28:16", "reactions": {"total_count": 17, "+1": 17, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "226081681": {"author_username": "pfrankov", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4812, "title": "require.resolveWeak is not working with dynamic values", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*bug*\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n```js\r\nconst context = require.context(\"./src/\", true, /\\.spec\\.js$/);\r\n\r\ncontext.keys().forEach(function(key) {\r\n\tif (require.resolveWeak(key.replace(\".spec.\", \".\"))) {\r\n\t\tcontext(key);\r\n\t}\r\n});\r\n```\r\nResult: `ERROR: Cannot find module \".\"`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. Put e.g. `some-component.js` file with `some-component.spec.js` to `src` dir.\r\n2. Use the code above in the main module.\r\n3. Compile\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n`require.resolveWeak` should return a falsy value in case of not existed module.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nWebpack 2.4.1, Mac OS 10.12.4, Node 6.10.1", "labels": [], "number_of_comments": 4, "created_at": "2017-05-03 18:56:10", "reactions": {"total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "225722663": {"author_username": "hoschi", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4807, "title": "Using webpackChunkName with dynamic import changes chunk logic", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using a `import()` that uses a variable (dynamic import) each file gets into its own chunk. When adding a name to the import, all files get bundled into one chunk instead.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nCreate import:\r\n```js\r\nexport let config = {\r\n    resolve: (props) => import(`templates/${props.templateId}`),\r\n};\r\n```\r\nrun build and you get one chunk *per file* in \"templates/\"\r\n\r\nUse naming feature:\r\n```js\r\nexport let config = {\r\n    resolve: (props) => import( /* webpackChunkName: \"templates\" */ `templates/${props.templateId}`),\r\n};\r\n```\r\nrun build and you get one chunk which contains *all files* in \"templates/\"\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\nAlways create one chunk per file in \"templates/\". When I cant one chunk for all files I can use `require.ensure` instead.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\n```\r\nwebpack@2.4.1 \r\n\r\nfrontend > npm --version\r\n3.10.3\r\nfrontend > node --version\r\nv6.3.1\r\n```\r\nOS is Arch Linux", "labels": [], "number_of_comments": 22, "created_at": "2017-05-02 14:59:18", "reactions": {"total_count": 13, "+1": 12, "-1": 1, "laugh": 0, "heart": 0, "hooray": 0}}, "222595808": {"author_username": "fregante", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4742, "title": "Bug: require() doesn't support `default` exports in ES Modules", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n```js\r\nconst ofi = require('object-fit-images');\r\n```\r\n\r\nIn webpack 1.x, this picks up the CommonJS file defined in `main`.\r\n\r\nIn webpack 2.x, this loads the `module` file and sets `ofi = {default: realOfi}`, which means that users have to use the unnatural `const ofi = require('object-fit-images').default`. [Example](https://github.com/bfred-it/object-fit-images/issues/71#issuecomment-294896136)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n```sh\r\nnpm i object-fit-images@3.1.3\r\nnpm i webpack@2.4.1 --global\r\necho 'var ofi = require(\"object-fit-images\"); ofi()' > src.js; webpack src.js errors.js\r\necho 'var ofi = require(\"object-fit-images\").default; ofi()' > src.js; webpack src.js works.js\r\necho 'import ofi from \"object-fit-images\"; ofi()' > src.js; webpack src.js works-esm.js\r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\n`import` is for ES Modules and it should try to read the `module` file if it exists. This works correctly.\r\n\r\n`require` is for CJS files and it should only read the `main` entry point, not the `module` one. If it does, it should at least flatten `default` wherever possible.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nnode 7.8.0\r\nwebpack 2.4.1\r\nOSX 10.11.6", "labels": [], "number_of_comments": 30, "created_at": "2017-04-19 02:07:26", "reactions": {"total_count": 23, "+1": 19, "-1": 4, "laugh": 0, "heart": 0, "hooray": 0}}, "220415973": {"author_username": "creage", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4676, "title": "Can't import a chunk from dll", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nI get an error \"Module not found: Error: Can't resolve...\" while trying to build my code.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nHere is a test repo https://github.com/creage/dll-broken\r\n\r\n1. npm run build:dll\r\n2. npm run build:app\r\n\r\nI have a simple dll [a](https://github.com/creage/dll-broken/blob/master/a.js), importing 2 modules - [b](https://github.com/creage/dll-broken/blob/master/b.js), and [c](https://github.com/creage/dll-broken/blob/master/c.js). Module **b** is imported [directly](https://github.com/creage/dll-broken/blob/master/a.js#L1), while module **c** is [chunked](https://github.com/creage/dll-broken/blob/master/a.js#L10) out. All of these gets build into a dll, using webpack.DllPlugin.\r\n\r\nNext, I have a simple [app](https://github.com/creage/dll-broken/blob/master/app.js), consuming this dll we built before, scoped under the **LIB** namespace. [Importing](https://github.com/creage/dll-broken/blob/master/app.js#L1) module **b** from the dll works fine, but [trying to import](https://github.com/creage/dll-broken/blob/master/app.js#L2) module **c** ends up with error:\r\n\r\n```Module not found: Error: Can't resolve 'LIB/c' in 'E:\\Dev\\dll-broken'```\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nI'd expect all of dll modules to be consumable by my app.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nNode 7.8.0\r\nWebpack 2.3.3\r\nWindows 10\r\n\r\nP.S. Analyzing manifest.json created by DllPlugin shows no reference to module **c**. But, if you run a method of the dll [which actually consumes that module](https://github.com/creage/dll-broken/blob/master/a.js#L4) - it works fine, meaning that our library is able to load it's chunked part, but for some reason it does not expose it to library consumers, which is unexpected.", "labels": [], "number_of_comments": 5, "created_at": "2017-04-08 17:52:24", "reactions": {"total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "220389094": {"author_username": "alexfedoseev", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4674, "title": "`browser` vs `module` fields in `package.json`", "body": "**Do you want to request a *feature* or report a *bug*?**\r\nI don't think it's a bug, but confusing and inefficient behavior.\r\n\r\n**What is the current behavior?**\r\nWhen module's `package.json` contains `browser`, `module` & `main` fields, webpack is bundling `browser` build by default.\r\n\r\n**What is the expected behavior?**\r\nThe key point of the `module` build is to optimize compiled bundle. And even if a package has hq ES build, it's not being used by default in favor of legacy UMD/IIFE builds. So expected behavior is to use `module` build by default.\r\n", "labels": [], "number_of_comments": 10, "created_at": "2017-04-08 09:48:29", "reactions": {"total_count": 28, "+1": 27, "-1": 0, "laugh": 0, "heart": 1, "hooray": 0}}, "218774921": {"author_username": "TheLarkInn", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4619, "title": "Create Outreach Communities", "body": "Successfully we were able to help start and perpetuate a community for China for webpack. It's been extremely successful and we continue to see their traffic as 2nd to USA in docs, and repo page visitors. \r\n\r\nHowever [it came to our attention on twitter](https://twitter.com/truth2_truth/status/848567713798791169) that we could maybe be doing more. I'm all for equality as access to opportunity, and furthermore since all of us have little to no bandwidth, we'd want to find a group of developers/advocates who are willing to lead the initiative. First step would simply be to create the guidelines for how one would approach this outreach. \r\n\r\nhttps://twitter.com/truth2_truth/status/848567713798791169 <== this twitter account nominated themselves to write this guideline, or seems to have experience in it. ", "labels": ["documentation"], "number_of_comments": 5, "created_at": "2017-04-02 16:19:44", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "217736116": {"author_username": "CompuIves", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4589, "title": "DllPlugin: Module doesn't get added to manifest if it has a loader", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI believe this is a bug.\r\n\r\n**What is the current behavior?**\r\nIf I have a loader for a certain file type, for example `babel-loader` for `/\\.js$/`, it won't be added to the generated `manifest.json` and the dll bundle by `DllPlugin`. When I remove the loader the files show up again.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n1. Add dependency to project\r\n2. Add entry file which imports that project\r\n3. Try to create Dll bundle of dependency\r\n\r\n4. Now use a loader on the dependency\r\n5. Check difference of Dll Bundle\r\n\r\n**What is the expected behavior?**\r\nModules still get added to the bundle, regardless of the loader.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nWebpack version 2.2.0, node v7, linux (ubuntu).\r\n\r\nI checked the files passed to `LibManifestPlugin` and I noticed that the all the `SingleEntryDependency` on `DllModule` have a `module: null` instead of `module: NormalModule`. I think this is the source of the 'problem'.\r\n\r\nI'm willing to fix this, I just need some more pointers to know where `module` is set on `SingleEntryDependency`.\r\n\r\nThanks in advance! Webpack 2 is a really great tool to work with.\r\n", "labels": ["X1: Inspection required", "bug", "webpack-2"], "number_of_comments": 5, "created_at": "2017-03-29 01:05:28", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "213190660": {"author_username": "ryan-roemer", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4453, "title": "webpack@4 Tree Shaking doesn't eliminate code between multiple entry points in same configuration object.", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nBy way of example, I have:\r\n\r\n- `util.js`: ES exports two methods: `red` and `blue` via two scenarios: `one-file` (all code within one file) and `re-export` (methods re-exported from external files)\r\n- `app1.js`: Imports and uses only `red`\r\n- `app2.js`: Imports and uses only `blue`\r\n\r\n_Expected_: If I build webpack bundles for both apps, `app1` will have `red` and `blue` will be eliminated. Conversely, `app2` will have `blue` and `red` will be eliminated:\r\n\r\n_Actual_: Depends on config\r\n\r\n1. _Array of Configs_: If there is an array of configurations with a single entry point each for `app1.js` and `app2.js` the correct unused methods are dropped.\r\n2. _Multiple Entry Points_: If there is a single configuration object with multiple entry points for both `app1.js` and `app2.js`, then **neither `blue` nor `red` are eliminated in either bundle**. I would consider this a bug. Perhaps there is some known thing for \"multiple entry points get any esnext exports used by _any_ other entry point\", but that seems weird.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\nWe made a repository with passing and failing mocha tests to show the situation: https://github.com/FormidableLabs/webpack-tree-shaking-multiple-entry-points.\r\n\r\n_Reproduction_:\r\n\r\n```sh\r\n$ git clone https://github.com/FormidableLabs/webpack-tree-shaking-multiple-entry-points.git\r\n$ cd webpack-tree-shaking-multiple-entry-points\r\n$ yarn install\r\n$ yarn run build\r\n$ yarn run test\r\n```\r\n\r\nThe test output is:\r\n\r\n```\r\n  tree shaking in webpack4\r\n    array\r\n      one-file\r\n        \u2713 app1 should have red, not blue\r\n        \u2713 app2 should have blue, not red\r\n      re-export\r\n        \u2713 app1 should have red, not blue\r\n        \u2713 app2 should have blue, not red\r\n    multiple-entries\r\n      one-file\r\n        1) app1 should have red, not blue\r\n        2) app2 should have blue, not red\r\n      re-export\r\n        3) app1 should have red, not blue\r\n        4) app2 should have blue, not red\r\n\r\n\r\n  4 passing (22ms)\r\n  4 failing\r\n```\r\n\r\nThe failing ones show that the ES methods that should be dropped aren't.\r\n\r\n**What is the expected behavior?**\r\n\r\nSee above section on `current behavior`.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nNope, it's a bug.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\n```sh\r\n$ node --version\r\nv8.4.0\r\n\r\n$  $ yarn list webpack\r\nyarn list v1.3.2\r\n\u2514\u2500 webpack@4.0.0-beta.1\r\n\r\n$ uname -a\r\nDarwin small.lan 16.7.0 Darwin Kernel Version 16.7.0: Thu Jan 11 22:59:40 PST 2018; root:xnu-3789.73.8~1/RELEASE_X86_64 x86_64\r\n```\r\n", "labels": [], "number_of_comments": 36, "created_at": "2017-03-09 22:51:54", "reactions": {"total_count": 30, "+1": 30, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "212679499": {"author_username": "ngrewe", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4446, "title": "Conditionally enable/disable ProvidePlugin on a per-resource basis", "body": "**What kind of change does this PR introduce?**\r\n\r\nNew feature\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes (cf. `test/configCases/plugins/provide-plugin`).\r\n\r\n**If relevant, link to documentation update:**\r\n\r\nDocumentation update is being prepared [here](/ngrewe/webpack.js.org/tree/provide-excludes). \r\n\r\n**Summary**\r\n\r\nThis PR introduces more fine-grained control over which resources the ProvidePlugin operates on. This is very useful if you are bundling polyfills: The polyfill implementation very often needs to check whether the injected variables are already present as global on the underlying platform. A good example is [es6-map](/medikoo/es6-map). I imagine this feature will also be useful for projects which gradually migrate to a proper module structure and want to ensure that certain parts of the codebase no longer access any globals.\r\n\r\nImplementation-wise, this works by providing a second argument to the constructor, containing a [condition](https://webpack.js.org/configuration/module/#condition) like the one being used for module rules. Depending on whether the condition matches the resource being processed, different parser configurations are provided at the *after-resolve* stage, which then control the parser plugin behaviour.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo. The new parameter is optional. There are no behavioural changes if it is omitted.\r\n\r\n**Other information**\r\n\r\nI hope this feature makes a bit of sense. Please let me know whether there are any problems with it that I've failed to notice\u2026\r\n\r\nThanks!\r\n\r\nNiels\r\n\r\n", "labels": ["PR: CI-ok", "PR: unreviewed"], "number_of_comments": 5, "created_at": "2017-03-08 09:20:49", "reactions": {"total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "212328005": {"author_username": "TheLarkInn", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4437, "title": "Add Analytics tracking", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature/Enhancement\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproducible repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nMotivation: We could benefit by understanding how people use webpack, in a variety of ways. By using Google Analytics we could track (if the user decides to opt-in), how they leverage webpack, the sizes of their bundles etc. Right now, we really know nothing beyond npm trends, npm stats, and random polls. \r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n", "labels": ["X4: work required", "X5: work required (PR / Help Wanted)", "enhancement"], "number_of_comments": 2, "created_at": "2017-03-07 04:31:55", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "210711735": {"author_username": "kazazor", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4392, "title": "CommonChunkPlugin: Feature - Select statically imported modules from chunks that were created from a dynamic import (require.ensure / System.import / import(\"..\"))", "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature for `CommonChunkPlugin`.\r\n\r\nSupport selecting modules from **non-entry** chunks. Meaning, select statically imported modules from chunks that were created from a **dynamic** import (`require.ensure` / `System.import` / `import(\"..\")`)\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently `CommonChunkPlugin` only receives modules imported from **entry** chunks.\r\n\r\n**What is the expected behavior?**\r\n\r\n`CommonChunkPlugin` should receive also modules from **non-entry** chunks.<br>\r\nAnother option will be that the default behavior will be that the plugin won't be getting these modules and only with passing something like `selectAllChunks: true` will enable this behavior.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nMost of the examples out there talks about CodeSplitting but not talking about CodeSplitting with lazy loading. For example, load your main page as an entry chunk, and split the rest of your website routes to different chunks and only load those on demand.\r\n\r\nYou see the important need for this feature when you're trying to make a `vendors` chunk that will include the vendors from ALL the chunks including the ones for the different routes that are being created from a dynamic import as a split point.\r\n\r\nIn our opinion the best solution to create the `vendors` chunk will be using the `minChunks` function since the other two (specifying hard coded which packages to take / import `package.json`.dependencies) has a lot of issues with and this is the most dynamic way to do it:\r\n\r\n```js\r\n    new webpack.optimize.CommonsChunkPlugin({\r\n      name: 'vendors',\r\n      minChunks: ({ resource }) => /node_modules/.test(resource)\r\n    })\r\n```\r\n\r\nThe problem is that since `CommonsChunkPlugin` only gets modules form the **entry** chunks, so all the vendors from our different split points are not being added to this chunk.\r\n\r\nThe motivation around this feature request is that others won't need to do the workaround I'll show here.\r\n\r\n**Proposed temporary workaround and why it's not that good. Writing it here anyway so who ever needs it will see it and would be able to use it** \r\n\r\nWhat the lack of this feature forces us to do it for every dynamic import we're doing (using `import(\"path\")`) we're also going and creating an entry chunk for it. Just so the above code will work.\r\n\r\nThen, all of these \"duplicate\" chunks we're excluding from being added to the HTML using the `excludeChunks` of `HtmlWebpackPlugin`\r\n\r\nSo it basically looks like this:\r\n\r\n```js\r\n...\r\n\r\n// Why do we need to exclude these entries?\r\n// The entries here are being dynamically loaded per route in the application so we would like to set\r\n// them to be excluded form HtmlWebpackPlugin auto inject of entry chunks.\r\n//\r\n// If they are being dynamically loaded in the system, so why do you need them here at all?\r\n// We're creating a `vendors` chunk automatically from what being imported from `node_modules`, in order for webpack\r\n// to know about what code exists in these route chunks we need to set them as entries here.\r\n// That way we're getting everything we ever wanted! The `vendors` is being created out of ALL the vendors in the system,\r\n// and we're still able to dynamically load these chunks per route without having them injected to index.html at the beginning.\r\nconst excludeEntries = {\r\n  main: [path.join(chunksPath, 'main_chunk')],\r\n  A_template_collection: [path.join(pagesPath, 'TemplateCollectionPage')],\r\n  A_template_wizard: [path.join(pagesPath, 'TemplateWizardPage')],\r\n  A_edit_template: [path.join(pagesPath, 'TemplateEditPage')],\r\n  A_create_instance: [path.join(pagesPath, 'CreateInstancePage')],\r\n  B_issues_collection: [path.join(pagesPath, 'IssuesCollectionPage')]\r\n};\r\n\r\nconst entry = Object.assign({}, excludeEntries, {\r\n  application: [path.join(chunksPath, 'application_chunk')]\r\n});\r\n\r\nconst config = {\r\n    entry,\r\n    ...\r\n    plugins: [\r\n        new webpack.optimize.CommonsChunkPlugin({\r\n          name: 'vendors',\r\n          minChunks: ({ resource }) => /node_modules/.test(resource)\r\n        }),\r\n        new HtmlWebpackPlugin({\r\n          title: indexHtmlTitle,\r\n          resourceHintsMetaTags,\r\n          inject: true,\r\n          template: indexHtmlPath,\r\n          excludeChunks: Object.keys(excludeEntries)\r\n        }),\r\n    ]\r\n    ...\r\n}\r\n\r\n```\r\n\r\nThe dynamic imports are being used on the same paths as the entry chunks that are being excluded from the html.\r\n\r\nThis causes some difficulties for us:\r\n\r\n1. If you dynamically import something and forget to put it here as well it will not go into the vendors chunks and you'll lose cache\r\n2. This creates for us chunks that we're not actually using. So for the same code I'll have the named entry chunk and I'll also have a chunk from the dynamic import. I'm not using the named entry-chunks but it's just noise to me.\r\nThat is even bigger when also using the ExtractTextPlugin.\r\n\r\nI looked also here: https://github.com/oieduardorabelo/webpack-commonschunkplugin-dynamic-splitting\r\nBut that seems to not be related since in our case the only real entry point (`application: [path.join(chunksPath, 'application_chunk')]`) is basically just loading polyfills + loading the `main` chunk path dynamically. Since all the `application` chunk is doing is mainly dynamically `import()` stuff it has no static imports of files from `node_modules`. So CommonChunkPlugin doesn't catch that..\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\n* OS: macOS 10.12.3\r\n* Node.js version: 6.9.10\r\n* Webpack version: 2.2.1\r\n* Browser not relavant", "labels": [], "number_of_comments": 19, "created_at": "2017-02-28 07:50:42", "reactions": {"total_count": 30, "+1": 30, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "207948866": {"author_username": "joefraley", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4292, "title": "Dynamic expressions for import() are broken", "body": "<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nPer this doc I expect the following code to work, but it throws an error: https://webpack.js.org/guides/migrating/#dynamic-expressions\r\n\r\n```javascript\r\nconst withIndex = (base) => `${base}/index`\r\nimport(withIndex('./somePath'))\r\n// Uncaught (in promise) Error: Cannot find module './somePath/index'.\r\n```\r\n\r\nAnd yet, adding an empty string resolves the problem:\r\n```javascript\r\nconst withIndex = (base) => `${base}/index`\r\nimport('' + withIndex('./somePath')) // concat an empty string, tada\r\n```\r\n\r\nThis makes no sense.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n1. `import()` a file using a string path to prove you can\r\n2. save string path to `variable` and try to import using `variable`, doesn't work\r\n3. try again by passing `'' + variable` into import() to see the bug  \r\n\r\nMVP Repo: https://github.com/joefraley/lazy-loading-rr4-example/tree/MVP-broken-imports\r\n\r\n```bash\r\ngit clone https://github.com/joefraley/lazy-loading-rr4-example/tree/MVP-broken-imports && cd lazy-loading-rr4-example && npm i && npm start\r\n```\r\n\r\n> You can see the MVP working by opening your browser console while running the example. You can play with goofy errors by opening [`source/parent-dir/child-dir/index.js`](https://github.com/joefraley/lazy-loading-rr4-example/blob/MVP-broken-imports/source/parent-dir/child-dir/index.js) and commenting/uncommenting different import statements listed there.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n`import()` should ideally accept real variables, but should _definitely_ be consistent between its treatment of `import(var)` and `import('' + var)`\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nwant to use centrally defined functions like `const getComponent = (path) => import(path)` when lazy loading react components\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nnode 5.5\r\nmacOS\r\nwebpack 2.2.0", "labels": ["S4: Broken", "X2: answer required", "X4: work required", "bug", "webpack-2"], "number_of_comments": 15, "created_at": "2017-02-15 22:29:25", "reactions": {"total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "204823578": {"author_username": "bebraw", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4176, "title": "cheap-module-source-map doesn't generate sourcesContent", "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug.\r\n\r\n**What is the current behavior?**\r\n\r\nNo `sourcesContent` is generated in the source map if `UglifyJsPlugin({ sourceMap: true })` is enabled and `devtool: 'cheap-module-source-map'` is used. `cheap-source-map` works.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. Clone https://github.com/survivejs-demos/webpack-demo\r\n2. Check out `source-map-bug`\r\n3. `npm i`\r\n4. `npm run build`\r\n5. Examine `build/app.js.map`, note above.\r\n6. Tweak `webpack.config.js` (contains comments how).\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should generate `sourcesContent` like `cheap-source-map` option.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nWebpack ^2.2.0. Node 6, macOS.", "labels": ["S4: Broken", "X4: work required", "bug", "webpack-2"], "number_of_comments": 0, "created_at": "2017-02-02 09:40:59", "reactions": {"total_count": 17, "+1": 17, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "204812696": {"author_username": "aight8", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4175, "title": "Using dynamic require on node targets WITHOUT resolve or bundle the target module", "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nI want to dynamically require a module, how node will do it, at runtime.\r\nUse cases:\r\n- require a project configuration (cwd + \"projectConfig.js\")\r\n- require the entry point of a server build\r\n- require client assets manifest from client build\r\netc.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n```JS\r\nlet myDynamicServerEntryPoint = '/this/is/an/absolute/path/i-need-this.js';\r\nrequire(myDynamicServerEntryPoint);\r\n```\r\n**target** is set to **node** in webpack config.\r\n\r\nThis ends up that webpack try to bundle all files which could be the dependencies (forget the name of this - but I'm sure you know what I mean). If the require have just a variable as param logically it just tries to bundle every file... however that's not the point.\r\n\r\n- put the target file in externals config key does not work because dynamic requires are not tested there\r\n- ContextReplacementPlugin does not help here, I don't want to rewrite the module request, I want to AVOID it entirely.\r\n- IgnorePlugin etc. will never reached, it's a dynamic import\r\n\r\n**What is the expected behavior?**\r\nMake it possible to just avoid webpack to touch a particular require statement and NOT try to resolve it. This is of course only usable for node builds.\r\n\r\n**PS**\r\nI don't want to use any require.ensure, System.import etc. - forget the name of all 5.\r\nThere must be a sync way to require a file on node side, without promises.\r\n\r\n**Possible solutions:**\r\nI don't think it's a good idea for a sixth require method but just to mention, there should be possible something like **const server = nodeRequire(entryPath)**\r\nWhat could be possible:\r\nA plugin which receive the require parameter as string maybe? However this seems like like crap solution, too.\r\n\r\nAny other ideas?", "labels": [], "number_of_comments": 13, "created_at": "2017-02-02 08:45:07", "reactions": {"total_count": 11, "+1": 11, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "204750541": {"author_username": "TheLarkInn", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 4170, "title": "Ensure webpack meets NodeJS ESM Spec (Or prepare for it). ", "body": "After a discussion I discovered, @ljharb had [expressed some troublesome concerns](https://github.com/airbnb/babel-plugin-dynamic-import-webpack/pull/14#issuecomment-275159815) about webpack 2. Whether they are valid yet or not I haven't confirmed based on spec (cc @Kovensky), but I think we should work together with any TC-39'rs on the node side if there are descrepencies we are missing. In the end we aim to be as close to spec as possible. ", "labels": ["X3: discussion required", "webpack-2"], "number_of_comments": 21, "created_at": "2017-02-02 00:43:30", "reactions": {"total_count": 26, "+1": 26, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "201543728": {"author_username": "bebraw", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 3996, "title": "Feature - Better logging for loaders/plugins - compiler.messages", "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature.\r\n\r\n**What is the current behavior?**\r\n\r\nThere's no standard for providing loader/plugin diagnostics so people have to use ad hoc solutions.\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should be a pipe like `compiler.warnings` for generic diagnostic messages. Maybe call it `compiler.messages` or so. One option would be to refactor the current API behind a single call that would accept message type, priority, message for filtering.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nThe current behavior is confusing.", "labels": ["P4: Nice To Have", "X3: discussion required", "enhancement", "webpack-3"], "number_of_comments": 0, "created_at": "2017-01-18 11:12:29", "reactions": {"total_count": 11, "+1": 11, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "200829911": {"author_username": "everett1992", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 3957, "title": "Imported variable bindings have difficult to debug names.", "body": "<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature, improvement to debugging webpack-built projects.\r\n\r\n**What is the current behavior?**\r\nWebpack renames variable bindings in  ES6 imports when it replaces them with `__webpack_require__` calls.  In this example the imported binding `foo` is compiled to `__WEBPACK_IMPORTED_MODULE_0__foo__[\"a\" /* foo */]`. If you use dev tools debugger you cannot watch or execute`foo` because it is not defined. \r\n\r\ninput:\r\n```javascript\r\nimport {foo} from './foo';\r\nconsole.log(foo());\r\n```\r\noutput: \r\n```javascript\r\nObject.defineProperty(exports, \"__esModule\", { value: true });                 \r\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__foo__ = __webpack_require__(0);                                                                          \r\nconsole.log(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__foo__[\"a\" /* foo */])());\r\n```\r\nDebugging is difficult, you can't watch or reference the original binding. This is made *worse* by sourcemaps because you can't see new name in the original source. It's not immediately apparent why a line copied from the current context into the console results in `not defined` errors. Chrome even removes code that has a corresponding source map, so it becomes difficult to find the in-code name of an imported value.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n[Simple reproduction](https://gist.github.com/everett1992/f5aa2a82641e220baf74923c962ef102).  \r\n\r\n**What is the expected behavior?**\r\nVariable bindings should be preserved by name.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\nDebugging a project built by webpack today is more difficult than it aught to be.\r\n", "labels": [], "number_of_comments": 34, "created_at": "2017-01-14 21:08:56", "reactions": {"total_count": 30, "+1": 30, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "197872320": {"author_username": "bmeck", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 3603, "title": "Document `webpack://` & make sourcemaps have relative paths to original files", "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nSourcemaps are generated with differing file paths [depending on which devtool you use](https://webpack.github.io/docs/configuration.html#output-devtoolmodulefilenametemplate):\r\n\r\n\r\n```\r\nDefault (devtool=[inline-]source-map): \"webpack:///[resource-path]\"\r\nDefault (devtool=eval): \"webpack:///[resource-path]?[loaders]\"\r\nDefault (devtool=eval-source-map): \"webpack:///[resource-path]?[hash]\"\r\n```\r\n\r\nThis uses a custom protocol; but it does not have a well defined format for that protocol, nor does it have lossless data.\r\n\r\nYou can generate absolute paths for sourcemaps using `[absolute-resource-path]` but cannot refer to the destination sourcemap file path to allow developers to find the file that generated the output in the sourcemap. The use of absolute paths has a security concern and exposes build machine paths to the WWW.\r\n\r\nThe alternative is to use variants of `[resource-path]`; however, this information is lossy. Right now `context` is the root, however you can still refer to things outside of this \"root\". Module resolution using `resolve` ala `node_modules` is completely flattened and replaced with a `~` character, this occurs even if the path is explicit ala `require(\"./node_modules/foo.js\")` becoming `\"./~/foo.js\"`.\r\n\r\nOf note as well, the characters in the source map path do not appear to be url encoded, which is a gotcha.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nTo allow a better debugging experience.\r\n\r\nSome context: https://twitter.com/bradleymeck/status/813764365749026816\r\n\r\nBy having relative paths:\r\n\r\n* there is less of a security concern as you won't expose directories outside the context by name unless they are part of the resolution process.\r\n* there is more unity between various bundling tools such as `rollup` or `browserify`\r\n* you won't have the lossy `~` flattening\r\n\r\nSpecific behaviors:\r\n\r\n* Document and enforce a standard for the `webpack://` protocol using relative pathing from the context.\r\n   * Change all the various devtools to all have the same default template\r\n* Allow the ability to generate your own urls just as exists today using a function.\r\n* The ability to jump outside of the \"root\" is still possible with this and encounter paths like `\"/../../dependency/index.js\"` which currently gets converted to `/dependency/index.js`. These should instead persist their `..` parts just like the [WHATWG URL spec](https://url.spec.whatwg.org/) regarding files.\r\n* Collisions would maintain the exact same path since they refer to the location of a file on disk.\r\n* Non-valid url characters should be url encoded\r\n* Metadata can optionally (by configuration) be included via query parameters but should be well defined\r\n   * `?loaders=$string` - repeatable\r\n   * `?query=$string` - unique\r\n   * `?moduleId=$number` - unique\r\n   * `?hash=$string` - unique", "labels": ["RFC/Proposal", "X3: discussion required", "enhancement", "webpack-2", "webpack-3"], "number_of_comments": 4, "created_at": "2016-12-28 15:41:29", "reactions": {"total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}, "195973682": {"author_username": "daltones", "repository_url": "https://api.github.com/repos/webpack/webpack", "issue_number": 3497, "title": "Rule with resourceQuery when there's no query", "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n\r\n**What is the current behavior?**\r\nIt's impossible to perform a rule based on `resourceQuery` condition if a module has no query at all. That module won't pass directly.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nI have this case where there are resources of the same extension that some are loaded in a certain way an some in another. I can reach it using resource queries.\r\n\r\nSo I can write some config like this:\r\n```js\r\n{\r\n  module: {\r\n    rules: {\r\n      {\r\n        test: /\\.ext$/i,\r\n        resourceQuery: {\r\n          exclude: /\\?another/i,\r\n        },\r\n        loader: 'normal-loader'\r\n      },\r\n      {\r\n        test: /\\.ext$/i,\r\n        resourceQuery: /\\?another/i,\r\n        loader: 'another-loader'\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nSo I want that `.ext` files get loaded with `normal-loader`. _Except_ the ones with `?another` query, these will load with `another-loader`.\r\n\r\nBut here's the result:\r\n* `path/to/module.ext?another`: loaded with `another-loader`\r\n* `path/to/module.ext?asdfg`: loaded with `normal-loader`\r\n* `path/to/module.ext`: **none**, but we were naturally expecting `normal-loader`\r\n\r\nI guess there's a problem with the logic around here:\r\nhttps://github.com/webpack/webpack/blob/v2.2.0-rc.0/lib/RuleSet.js#L361\r\nIt's skipping the condition and rejecting directly if `resourceQuery` is empty and there's a condition.\r\n\r\n\r\n**What is the expected behavior?**\r\nIt must be able to test a `resourceQuery` condition in an empty query.\r\n\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, Operating System and programming language.**\r\nNode.js: v7.2.1\r\nWebpack: v2.2.0-rc.0", "labels": [], "number_of_comments": 12, "created_at": "2016-12-16 03:32:56", "reactions": {"total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "heart": 0, "hooray": 0}}}